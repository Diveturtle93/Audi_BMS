
Audi_BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce4  08004ce4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cec  08004cec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000000c  08004d00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004d00  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3a7  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e7  00000000  00000000  0003c3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f142  00000000  00000000  0003fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  0004ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d0  00000000  00000000  0004feb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b81b  00000000  00000000  00050f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c808  00000000  00000000  0007c7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001077a5  00000000  00000000  00098fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a0750  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f3c  00000000  00000000  001a07a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004794 	.word	0x08004794

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004794 	.word	0x08004794

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b508      	push	{r3, lr}
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	b28a      	uxth	r2, r1
 8000548:	4601      	mov	r1, r0
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <uartTransmit+0x14>)
 800054c:	f003 ffd8 	bl	8004500 <HAL_UART_Transmit>
}
 8000550:	bd08      	pop	{r3, pc}
 8000552:	bf00      	nop
 8000554:	2000024c 	.word	0x2000024c

08000558 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000558:	b500      	push	{lr}
 800055a:	b085      	sub	sp, #20
 800055c:	460a      	mov	r2, r1
	char str[11];

	utoa(number, str, base);
 800055e:	a901      	add	r1, sp, #4
 8000560:	f004 f916 	bl	8004790 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000564:	a801      	add	r0, sp, #4
 8000566:	f7ff fe67 	bl	8000238 <strlen>
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	b282      	uxth	r2, r0
 8000570:	a901      	add	r1, sp, #4
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <uartTransmitNumber+0x28>)
 8000574:	f003 ffc4 	bl	8004500 <HAL_UART_Transmit>
}
 8000578:	b005      	add	sp, #20
 800057a:	f85d fb04 	ldr.w	pc, [sp], #4
 800057e:	bf00      	nop
 8000580:	2000024c 	.word	0x2000024c

08000584 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 8000584:	b510      	push	{r4, lr}
	for(uint8_t i=0; i<LTC6811_DEVICES; i++)
	{
		ISOCS_ENABLE();
 8000586:	4c0a      	ldr	r4, [pc, #40]	; (80005b0 <wakeup_ltc6811+0x2c>)
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058e:	4620      	mov	r0, r4
 8000590:	f001 fd72 	bl	8002078 <HAL_GPIO_WritePin>
//		HAL_Delay(2);														//isoSPI braucht Zeit bis ready
		HAL_SPI_Transmit(&hspi4, 0xFF, 1, 100);
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	2201      	movs	r2, #1
 8000598:	21ff      	movs	r1, #255	; 0xff
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <wakeup_ltc6811+0x30>)
 800059c:	f002 fdc4 	bl	8003128 <HAL_SPI_Transmit>
		ISOCS_DISABLE();
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a6:	4620      	mov	r0, r4
 80005a8:	f001 fd66 	bl	8002078 <HAL_GPIO_WritePin>
	}
}
 80005ac:	bd10      	pop	{r4, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000
 80005b4:	200000ec 	.word	0x200000ec

080005b8 <peclookup>:
{
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 80005b8:	b1b8      	cbz	r0, 80005ea <peclookup+0x32>
{
 80005ba:	b410      	push	{r4}
 80005bc:	1e4a      	subs	r2, r1, #1
 80005be:	1e43      	subs	r3, r0, #1
 80005c0:	fa51 f183 	uxtab	r1, r1, r3
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 80005c4:	2010      	movs	r0, #16
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 80005c6:	4c0b      	ldr	r4, [pc, #44]	; (80005f4 <peclookup+0x3c>)
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 80005c8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80005cc:	ea83 13d0 	eor.w	r3, r3, r0, lsr #7
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80005d6:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
 80005da:	b280      	uxth	r0, r0
	for(uint8_t i = 0; i < len; i++)
 80005dc:	428a      	cmp	r2, r1
 80005de:	d1f3      	bne.n	80005c8 <peclookup+0x10>
	}
	
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	b280      	uxth	r0, r0
}
 80005e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005e8:	4770      	bx	lr
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 80005ea:	2010      	movs	r0, #16
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	b280      	uxth	r0, r0
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	080047ac 	.word	0x080047ac

080005f8 <peccommand>:
{
 80005f8:	b500      	push	{lr}
 80005fa:	b083      	sub	sp, #12
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 80005fc:	f88d 0005 	strb.w	r0, [sp, #5]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000600:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000604:	f88d 0004 	strb.w	r0, [sp, #4]
	return peclookup(2, pec);
 8000608:	a901      	add	r1, sp, #4
 800060a:	2002      	movs	r0, #2
 800060c:	f7ff ffd4 	bl	80005b8 <peclookup>
}
 8000610:	b003      	add	sp, #12
 8000612:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000618 <ltc6811>:
{
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	b083      	sub	sp, #12
 800061c:	4604      	mov	r4, r0
	pec = peccommand(command);
 800061e:	f7ff ffeb 	bl	80005f8 <peccommand>
	cmd[0] = ((command>>8) & 0x07);
 8000622:	f3c4 2302 	ubfx	r3, r4, #8, #3
 8000626:	f88d 3004 	strb.w	r3, [sp, #4]
	cmd[1] = (command & 0xFF);
 800062a:	f88d 4005 	strb.w	r4, [sp, #5]
	cmd[2] = ((pec>>8) & 0xFF);
 800062e:	0a03      	lsrs	r3, r0, #8
 8000630:	f88d 3006 	strb.w	r3, [sp, #6]
	cmd[3] = (pec & 0xFE);
 8000634:	f020 0001 	bic.w	r0, r0, #1
 8000638:	f88d 0007 	strb.w	r0, [sp, #7]
	ISOCS_ENABLE();
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000642:	4812      	ldr	r0, [pc, #72]	; (800068c <ltc6811+0x74>)
 8000644:	f001 fd18 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	2204      	movs	r2, #4
 800064c:	eb0d 0102 	add.w	r1, sp, r2
 8000650:	480f      	ldr	r0, [pc, #60]	; (8000690 <ltc6811+0x78>)
 8000652:	f002 fd69 	bl	8003128 <HAL_SPI_Transmit>
	if (command == STCOMM)
 8000656:	f240 7323 	movw	r3, #1827	; 0x723
 800065a:	429c      	cmp	r4, r3
 800065c:	d007      	beq.n	800066e <ltc6811+0x56>
	ISOCS_DISABLE();
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <ltc6811+0x74>)
 8000666:	f001 fd07 	bl	8002078 <HAL_GPIO_WritePin>
}
 800066a:	b003      	add	sp, #12
 800066c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066e:	2409      	movs	r4, #9
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xFF, 1, 100);
 8000670:	4f07      	ldr	r7, [pc, #28]	; (8000690 <ltc6811+0x78>)
 8000672:	2664      	movs	r6, #100	; 0x64
 8000674:	2501      	movs	r5, #1
 8000676:	4633      	mov	r3, r6
 8000678:	462a      	mov	r2, r5
 800067a:	21ff      	movs	r1, #255	; 0xff
 800067c:	4638      	mov	r0, r7
 800067e:	f002 fd53 	bl	8003128 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000682:	1e63      	subs	r3, r4, #1
 8000684:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000688:	d1f5      	bne.n	8000676 <ltc6811+0x5e>
 800068a:	e7e8      	b.n	800065e <ltc6811+0x46>
 800068c:	40021000 	.word	0x40021000
 8000690:	200000ec 	.word	0x200000ec

08000694 <ltc6811_read>:
{
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	4604      	mov	r4, r0
 800069a:	460d      	mov	r5, r1
	pec = peccommand(command);
 800069c:	f7ff ffac 	bl	80005f8 <peccommand>
	cmd[0] = ((command>>8) & 0x07);
 80006a0:	f3c4 2302 	ubfx	r3, r4, #8, #3
 80006a4:	f88d 3004 	strb.w	r3, [sp, #4]
	cmd[1] = (command & 0xFF);
 80006a8:	f88d 4005 	strb.w	r4, [sp, #5]
	cmd[2] = ((pec>>8) & 0xFF);
 80006ac:	0a03      	lsrs	r3, r0, #8
 80006ae:	f88d 3006 	strb.w	r3, [sp, #6]
	cmd[3] = (pec & 0xFE);
 80006b2:	f020 0001 	bic.w	r0, r0, #1
 80006b6:	f88d 0007 	strb.w	r0, [sp, #7]
	ISOCS_ENABLE();
 80006ba:	4c0e      	ldr	r4, [pc, #56]	; (80006f4 <ltc6811_read+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4620      	mov	r0, r4
 80006c4:	f001 fcd8 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80006c8:	4e0b      	ldr	r6, [pc, #44]	; (80006f8 <ltc6811_read+0x64>)
 80006ca:	2364      	movs	r3, #100	; 0x64
 80006cc:	2204      	movs	r2, #4
 80006ce:	eb0d 0102 	add.w	r1, sp, r2
 80006d2:	4630      	mov	r0, r6
 80006d4:	f002 fd28 	bl	8003128 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2208      	movs	r2, #8
 80006dc:	4629      	mov	r1, r5
 80006de:	4630      	mov	r0, r6
 80006e0:	f002 ff77 	bl	80035d2 <HAL_SPI_Receive>
	ISOCS_DISABLE();
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ea:	4620      	mov	r0, r4
 80006ec:	f001 fcc4 	bl	8002078 <HAL_GPIO_WritePin>
}
 80006f0:	b002      	add	sp, #8
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	200000ec 	.word	0x200000ec

080006fc <ltc6811_check>:


// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
	uint8_t tmp_data[50] = {0}, result = 0;
 8000700:	2500      	movs	r5, #0
 8000702:	9501      	str	r5, [sp, #4]
 8000704:	222e      	movs	r2, #46	; 0x2e
 8000706:	4629      	mov	r1, r5
 8000708:	a802      	add	r0, sp, #8
 800070a:	f003 fff7 	bl	80046fc <memset>
	uint16_t temp = 0;

	// Verzögerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 800070e:	f7ff ff39 	bl	8000584 <wakeup_ltc6811>
	wakeup_ltc6811();
 8000712:	f7ff ff37 	bl	8000584 <wakeup_ltc6811>

	// Commands für Status senden  Test 1
	ltc6811(CVST | MD73 | ST1);
 8000716:	f240 3027 	movw	r0, #807	; 0x327
 800071a:	f7ff ff7d 	bl	8000618 <ltc6811>
	HAL_Delay(300);
 800071e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000722:	f001 f8e7 	bl	80018f4 <HAL_Delay>
	ltc6811(AXST | MD73 | ST1);
 8000726:	f240 5027 	movw	r0, #1319	; 0x527
 800072a:	f7ff ff75 	bl	8000618 <ltc6811>
	HAL_Delay(300);
 800072e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000732:	f001 f8df 	bl	80018f4 <HAL_Delay>
	ltc6811(STATST | MD73 | ST1);
 8000736:	f240 502f 	movw	r0, #1327	; 0x52f
 800073a:	f7ff ff6d 	bl	8000618 <ltc6811>
	HAL_Delay(300);
 800073e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000742:	f001 f8d7 	bl	80018f4 <HAL_Delay>

	// Register auslesen Test 1
	ltc6811_read(RDCVA, &tmp_data[0]);
 8000746:	a901      	add	r1, sp, #4
 8000748:	2004      	movs	r0, #4
 800074a:	f7ff ffa3 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[6]);
 800074e:	f10d 010a 	add.w	r1, sp, #10
 8000752:	2006      	movs	r0, #6
 8000754:	f7ff ff9e 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[12]);
 8000758:	a904      	add	r1, sp, #16
 800075a:	2008      	movs	r0, #8
 800075c:	f7ff ff9a 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[18]);
 8000760:	f10d 0116 	add.w	r1, sp, #22
 8000764:	200a      	movs	r0, #10
 8000766:	f7ff ff95 	bl	8000694 <ltc6811_read>

	ltc6811_read(RDAUXA, &tmp_data[24]);
 800076a:	a907      	add	r1, sp, #28
 800076c:	200c      	movs	r0, #12
 800076e:	f7ff ff91 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[30]);
 8000772:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8000776:	200e      	movs	r0, #14
 8000778:	f7ff ff8c 	bl	8000694 <ltc6811_read>

	ltc6811_read(RDSTATA, &tmp_data[36]);
 800077c:	a90a      	add	r1, sp, #40	; 0x28
 800077e:	2010      	movs	r0, #16
 8000780:	f7ff ff88 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[42]);
 8000784:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8000788:	2012      	movs	r0, #18
 800078a:	f7ff ff83 	bl	8000694 <ltc6811_read>

	// Daten prüfen Test 1
	for (uint8_t i=0; i<22; i++)
 800078e:	ac01      	add	r4, sp, #4
 8000790:	ae0c      	add	r6, sp, #48	; 0x30
	ltc6811_read(RDSTATB, &tmp_data[42]);
 8000792:	4622      	mov	r2, r4
	{
		temp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);
		if (temp != 0x9555)
 8000794:	4837      	ldr	r0, [pc, #220]	; (8000874 <ltc6811_check+0x178>)
		temp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);
 8000796:	7851      	ldrb	r1, [r2, #1]
 8000798:	f812 3b02 	ldrb.w	r3, [r2], #2
 800079c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (temp != 0x9555)
 80007a0:	b21b      	sxth	r3, r3
			result = 1;
 80007a2:	4283      	cmp	r3, r0
 80007a4:	bf18      	it	ne
 80007a6:	2501      	movne	r5, #1
	for (uint8_t i=0; i<22; i++)
 80007a8:	42b2      	cmp	r2, r6
 80007aa:	d1f4      	bne.n	8000796 <ltc6811_check+0x9a>
	}

	// Commands für Status senden Test 2
	ltc6811(CVST | MD73 | ST2);
 80007ac:	f240 3047 	movw	r0, #839	; 0x347
 80007b0:	f7ff ff32 	bl	8000618 <ltc6811>
	HAL_Delay(300);
 80007b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007b8:	f001 f89c 	bl	80018f4 <HAL_Delay>
	ltc6811(AXST | MD73 | ST2);
 80007bc:	f240 5047 	movw	r0, #1351	; 0x547
 80007c0:	f7ff ff2a 	bl	8000618 <ltc6811>
	HAL_Delay(300);
 80007c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007c8:	f001 f894 	bl	80018f4 <HAL_Delay>
	ltc6811(STATST | MD73 | ST2);
 80007cc:	f240 504f 	movw	r0, #1359	; 0x54f
 80007d0:	f7ff ff22 	bl	8000618 <ltc6811>
	HAL_Delay(300);
 80007d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007d8:	f001 f88c 	bl	80018f4 <HAL_Delay>

	// Register auslesen Test 2
	ltc6811_read(RDCVA, &tmp_data[0]);
 80007dc:	a901      	add	r1, sp, #4
 80007de:	2004      	movs	r0, #4
 80007e0:	f7ff ff58 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[6]);
 80007e4:	f10d 010a 	add.w	r1, sp, #10
 80007e8:	2006      	movs	r0, #6
 80007ea:	f7ff ff53 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[12]);
 80007ee:	a904      	add	r1, sp, #16
 80007f0:	2008      	movs	r0, #8
 80007f2:	f7ff ff4f 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[18]);
 80007f6:	f10d 0116 	add.w	r1, sp, #22
 80007fa:	200a      	movs	r0, #10
 80007fc:	f7ff ff4a 	bl	8000694 <ltc6811_read>

	ltc6811_read(RDAUXA, &tmp_data[24]);
 8000800:	a907      	add	r1, sp, #28
 8000802:	200c      	movs	r0, #12
 8000804:	f7ff ff46 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[30]);
 8000808:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 800080c:	200e      	movs	r0, #14
 800080e:	f7ff ff41 	bl	8000694 <ltc6811_read>

	ltc6811_read(RDSTATA, &tmp_data[36]);
 8000812:	a90a      	add	r1, sp, #40	; 0x28
 8000814:	2010      	movs	r0, #16
 8000816:	f7ff ff3d 	bl	8000694 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[42]);
 800081a:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800081e:	2012      	movs	r0, #18
 8000820:	f7ff ff38 	bl	8000694 <ltc6811_read>

	// Daten prüfen Test 2
	for (uint8_t i=0; i<22; i++)
	{
		temp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);
		if (temp != 0x6AAA)
 8000824:	f646 21aa 	movw	r1, #27306	; 0x6aaa
 8000828:	e005      	b.n	8000836 <ltc6811_check+0x13a>
			result |= 2;
 800082a:	f045 0502 	orr.w	r5, r5, #2
 800082e:	b2ed      	uxtb	r5, r5
	for (uint8_t i=0; i<22; i++)
 8000830:	3402      	adds	r4, #2
 8000832:	42b4      	cmp	r4, r6
 8000834:	d007      	beq.n	8000846 <ltc6811_check+0x14a>
		temp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);
 8000836:	7862      	ldrb	r2, [r4, #1]
 8000838:	7823      	ldrb	r3, [r4, #0]
 800083a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (temp != 0x6AAA)
 800083e:	b21b      	sxth	r3, r3
 8000840:	428b      	cmp	r3, r1
 8000842:	d1f2      	bne.n	800082a <ltc6811_check+0x12e>
 8000844:	e7f4      	b.n	8000830 <ltc6811_check+0x134>
	}

	wakeup_ltc6811();
 8000846:	f7ff fe9d 	bl	8000584 <wakeup_ltc6811>
	ltc6811(DIAGN);
 800084a:	f240 7015 	movw	r0, #1813	; 0x715
 800084e:	f7ff fee3 	bl	8000618 <ltc6811>
	wakeup_ltc6811();
 8000852:	f7ff fe97 	bl	8000584 <wakeup_ltc6811>
	ltc6811_read(RDSTATB, &tmp_data[0]);
 8000856:	a901      	add	r1, sp, #4
 8000858:	2012      	movs	r0, #18
 800085a:	f7ff ff1b 	bl	8000694 <ltc6811_read>

	if (tmp_data[5] & (1<<1))
 800085e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000862:	f013 0f02 	tst.w	r3, #2
 8000866:	d002      	beq.n	800086e <ltc6811_check+0x172>
	{
		result |= 4;
 8000868:	f045 0504 	orr.w	r5, r5, #4
 800086c:	b2ed      	uxtb	r5, r5
	ltc6811_read(RDCVB, &tmp_data[30]);
	ltc6811_read(RDCVC, &tmp_data[36]);
	ltc6811_read(RDCVD, &tmp_data[42]);*/

	return result;										// return result
}
 800086e:	4628      	mov	r0, r5
 8000870:	b00e      	add	sp, #56	; 0x38
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	ffff9555 	.word	0xffff9555

08000878 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000878:	b510      	push	{r4, lr}
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 800087a:	2112      	movs	r1, #18
 800087c:	481d      	ldr	r0, [pc, #116]	; (80008f4 <collectMiddlewareInfo+0x7c>)
 800087e:	f7ff fe5f 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000882:	210a      	movs	r1, #10
 8000884:	2005      	movs	r0, #5
 8000886:	f7ff fe67 	bl	8000558 <uartTransmitNumber>
	uartTransmit(".", 1);
 800088a:	4c1b      	ldr	r4, [pc, #108]	; (80008f8 <collectMiddlewareInfo+0x80>)
 800088c:	2101      	movs	r1, #1
 800088e:	4620      	mov	r0, r4
 8000890:	f7ff fe56 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000894:	210a      	movs	r1, #10
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff fe5e 	bl	8000558 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 800089c:	2110      	movs	r1, #16
 800089e:	4817      	ldr	r0, [pc, #92]	; (80008fc <collectMiddlewareInfo+0x84>)
 80008a0:	f7ff fe4e 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80008a4:	f001 f83a 	bl	800191c <HAL_GetHalVersion>
 80008a8:	210a      	movs	r1, #10
 80008aa:	0e00      	lsrs	r0, r0, #24
 80008ac:	f7ff fe54 	bl	8000558 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80008b0:	2101      	movs	r1, #1
 80008b2:	4620      	mov	r0, r4
 80008b4:	f7ff fe44 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80008b8:	f001 f830 	bl	800191c <HAL_GetHalVersion>
 80008bc:	210a      	movs	r1, #10
 80008be:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80008c2:	f7ff fe49 	bl	8000558 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80008c6:	2101      	movs	r1, #1
 80008c8:	4620      	mov	r0, r4
 80008ca:	f7ff fe39 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 80008ce:	f001 f825 	bl	800191c <HAL_GetHalVersion>
 80008d2:	210a      	movs	r1, #10
 80008d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80008d8:	f7ff fe3e 	bl	8000558 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80008dc:	2101      	movs	r1, #1
 80008de:	4620      	mov	r0, r4
 80008e0:	f7ff fe2e 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80008e4:	f001 f81a 	bl	800191c <HAL_GetHalVersion>
 80008e8:	210a      	movs	r1, #10
 80008ea:	b2c0      	uxtb	r0, r0
 80008ec:	f7ff fe34 	bl	8000558 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 80008f0:	bd10      	pop	{r4, pc}
 80008f2:	bf00      	nop
 80008f4:	080049ac 	.word	0x080049ac
 80008f8:	080049c0 	.word	0x080049c0
 80008fc:	080049c4 	.word	0x080049c4

08000900 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000900:	b508      	push	{r3, lr}
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 8000902:	2110      	movs	r1, #16
 8000904:	4815      	ldr	r0, [pc, #84]	; (800095c <collectSoftwareInfo+0x5c>)
 8000906:	f7ff fe1b 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 800090a:	2108      	movs	r1, #8
 800090c:	4814      	ldr	r0, [pc, #80]	; (8000960 <collectSoftwareInfo+0x60>)
 800090e:	f7ff fe17 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000912:	210f      	movs	r1, #15
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <collectSoftwareInfo+0x64>)
 8000916:	f7ff fe13 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 800091a:	210c      	movs	r1, #12
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <collectSoftwareInfo+0x68>)
 800091e:	f7ff fe0f 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000922:	210d      	movs	r1, #13
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <collectSoftwareInfo+0x6c>)
 8000926:	f7ff fe0b 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 800092a:	2129      	movs	r1, #41	; 0x29
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <collectSoftwareInfo+0x70>)
 800092e:	f7ff fe07 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000932:	210f      	movs	r1, #15
 8000934:	480f      	ldr	r0, [pc, #60]	; (8000974 <collectSoftwareInfo+0x74>)
 8000936:	f7ff fe03 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 800093a:	210c      	movs	r1, #12
 800093c:	480e      	ldr	r0, [pc, #56]	; (8000978 <collectSoftwareInfo+0x78>)
 800093e:	f7ff fdff 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000942:	210f      	movs	r1, #15
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <collectSoftwareInfo+0x7c>)
 8000946:	f7ff fdfb 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 800094a:	2109      	movs	r1, #9
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <collectSoftwareInfo+0x80>)
 800094e:	f7ff fdf7 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);
 8000952:	2101      	movs	r1, #1
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <collectSoftwareInfo+0x84>)
 8000956:	f7ff fdf3 	bl	8000540 <uartTransmit>
}
 800095a:	bd08      	pop	{r3, pc}
 800095c:	080049d4 	.word	0x080049d4
 8000960:	080049e4 	.word	0x080049e4
 8000964:	080049ec 	.word	0x080049ec
 8000968:	080049fc 	.word	0x080049fc
 800096c:	08004a08 	.word	0x08004a08
 8000970:	08004a18 	.word	0x08004a18
 8000974:	08004a44 	.word	0x08004a44
 8000978:	08004a54 	.word	0x08004a54
 800097c:	08004a60 	.word	0x08004a60
 8000980:	08004a70 	.word	0x08004a70
 8000984:	08004bfc 	.word	0x08004bfc

08000988 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000988:	b510      	push	{r4, lr}
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800098a:	2113      	movs	r1, #19
 800098c:	482f      	ldr	r0, [pc, #188]	; (8000a4c <collectHardwareInfo+0xc4>)
 800098e:	f7ff fdd7 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000992:	f000 ffcd 	bl	8001930 <HAL_GetDEVID>
 8000996:	210a      	movs	r1, #10
 8000998:	f7ff fdde 	bl	8000558 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 800099c:	2115      	movs	r1, #21
 800099e:	482c      	ldr	r0, [pc, #176]	; (8000a50 <collectHardwareInfo+0xc8>)
 80009a0:	f7ff fdce 	bl	8000540 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80009a4:	f000 ffbe 	bl	8001924 <HAL_GetREVID>
 80009a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80009ac:	4298      	cmp	r0, r3
 80009ae:	d043      	beq.n	8000a38 <collectHardwareInfo+0xb0>
 80009b0:	f242 0301 	movw	r3, #8193	; 0x2001
 80009b4:	4298      	cmp	r0, r3
 80009b6:	d044      	beq.n	8000a42 <collectHardwareInfo+0xba>
 80009b8:	f241 0301 	movw	r3, #4097	; 0x1001
 80009bc:	4298      	cmp	r0, r3
 80009be:	d005      	beq.n	80009cc <collectHardwareInfo+0x44>
			break;
		case 0x2001:
			uartTransmit("X", 1);
			break;
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80009c0:	f000 ffb0 	bl	8001924 <HAL_GetREVID>
 80009c4:	210a      	movs	r1, #10
 80009c6:	f7ff fdc7 	bl	8000558 <uartTransmitNumber>
			break;
 80009ca:	e003      	b.n	80009d4 <collectHardwareInfo+0x4c>
			uartTransmit("Z", 1);
 80009cc:	2101      	movs	r1, #1
 80009ce:	4821      	ldr	r0, [pc, #132]	; (8000a54 <collectHardwareInfo+0xcc>)
 80009d0:	f7ff fdb6 	bl	8000540 <uartTransmit>
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80009d4:	2113      	movs	r1, #19
 80009d6:	4820      	ldr	r0, [pc, #128]	; (8000a58 <collectHardwareInfo+0xd0>)
 80009d8:	f7ff fdb2 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80009dc:	f001 fdb4 	bl	8002548 <HAL_RCC_GetSysClockFreq>
		frequency = frequency/1000000;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <collectHardwareInfo+0xd4>)
 80009e2:	fba3 3000 	umull	r3, r0, r3, r0

		uartTransmitNumber(frequency, 10);
 80009e6:	210a      	movs	r1, #10
 80009e8:	0c80      	lsrs	r0, r0, #18
 80009ea:	f7ff fdb5 	bl	8000558 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80009ee:	2104      	movs	r1, #4
 80009f0:	481b      	ldr	r0, [pc, #108]	; (8000a60 <collectHardwareInfo+0xd8>)
 80009f2:	f7ff fda5 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80009f6:	210f      	movs	r1, #15
 80009f8:	481a      	ldr	r0, [pc, #104]	; (8000a64 <collectHardwareInfo+0xdc>)
 80009fa:	f7ff fda1 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80009fe:	f000 ff9f 	bl	8001940 <HAL_GetUIDw0>
 8000a02:	2110      	movs	r1, #16
 8000a04:	f7ff fda8 	bl	8000558 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000a08:	4c17      	ldr	r4, [pc, #92]	; (8000a68 <collectHardwareInfo+0xe0>)
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f7ff fd97 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000a12:	f000 ff9b 	bl	800194c <HAL_GetUIDw1>
 8000a16:	2110      	movs	r1, #16
 8000a18:	f7ff fd9e 	bl	8000558 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f7ff fd8e 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000a24:	f000 ff98 	bl	8001958 <HAL_GetUIDw2>
 8000a28:	2110      	movs	r1, #16
 8000a2a:	f7ff fd95 	bl	8000558 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000a2e:	2101      	movs	r1, #1
 8000a30:	480e      	ldr	r0, [pc, #56]	; (8000a6c <collectHardwareInfo+0xe4>)
 8000a32:	f7ff fd85 	bl	8000540 <uartTransmit>
}
 8000a36:	bd10      	pop	{r4, pc}
			uartTransmit("Y", 1);
 8000a38:	2101      	movs	r1, #1
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <collectHardwareInfo+0xe8>)
 8000a3c:	f7ff fd80 	bl	8000540 <uartTransmit>
			break;
 8000a40:	e7c8      	b.n	80009d4 <collectHardwareInfo+0x4c>
			uartTransmit("X", 1);
 8000a42:	2101      	movs	r1, #1
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <collectHardwareInfo+0xec>)
 8000a46:	f7ff fd7b 	bl	8000540 <uartTransmit>
			break;
 8000a4a:	e7c3      	b.n	80009d4 <collectHardwareInfo+0x4c>
 8000a4c:	08004a7c 	.word	0x08004a7c
 8000a50:	08004a90 	.word	0x08004a90
 8000a54:	08004aa8 	.word	0x08004aa8
 8000a58:	08004ab4 	.word	0x08004ab4
 8000a5c:	431bde83 	.word	0x431bde83
 8000a60:	08004ac8 	.word	0x08004ac8
 8000a64:	08004ad0 	.word	0x08004ad0
 8000a68:	08004ae0 	.word	0x08004ae0
 8000a6c:	08004bfc 	.word	0x08004bfc
 8000a70:	08004aac 	.word	0x08004aac
 8000a74:	08004ab0 	.word	0x08004ab0

08000a78 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000a78:	b508      	push	{r3, lr}
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000a7a:	2111      	movs	r1, #17
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <collectSystemInfo+0x30>)
 8000a7e:	f7ff fd5f 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000a82:	f7ff ff81 	bl	8000988 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000a86:	2111      	movs	r1, #17
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <collectSystemInfo+0x34>)
 8000a8a:	f7ff fd59 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000a8e:	f7ff ff37 	bl	8000900 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000a92:	2113      	movs	r1, #19
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <collectSystemInfo+0x38>)
 8000a96:	f7ff fd53 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000a9a:	f7ff feed 	bl	8000878 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <collectSystemInfo+0x3c>)
 8000aa2:	f7ff fd4d 	bl	8000540 <uartTransmit>
}
 8000aa6:	bd08      	pop	{r3, pc}
 8000aa8:	08004ae4 	.word	0x08004ae4
 8000aac:	08004af8 	.word	0x08004af8
 8000ab0:	08004b0c 	.word	0x08004b0c
 8000ab4:	08004b20 	.word	0x08004b20

08000ab8 <readResetSource>:
reset_reason readResetSource(void)
{
	reset_reason reset_flags = STARTUP;

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <readResetSource+0x64>)
 8000aba:	6f58      	ldr	r0, [r3, #116]	; 0x74
	reset_reason reset_flags = STARTUP;
 8000abc:	f3c0 7040 	ubfx	r0, r0, #29, #1
	{
		reset_flags += IWDG1;
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ac2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
	{
		reset_flags += WWDG1;
 8000ac6:	bf18      	it	ne
 8000ac8:	3002      	addne	r0, #2
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <readResetSource+0x64>)
 8000acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db21      	blt.n	8000b16 <readResetSource+0x5e>
	{
		reset_flags += CPURST1;
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <readResetSource+0x64>)
 8000ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ad6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ada:	d001      	beq.n	8000ae0 <readResetSource+0x28>
	{
		reset_flags += BORST1;
 8000adc:	3008      	adds	r0, #8
 8000ade:	b2c0      	uxtb	r0, r0
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <readResetSource+0x64>)
 8000ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ae4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000ae8:	d001      	beq.n	8000aee <readResetSource+0x36>
	{
		reset_flags += PORST1;
 8000aea:	3010      	adds	r0, #16
 8000aec:	b2c0      	uxtb	r0, r0
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <readResetSource+0x64>)
 8000af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000af2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000af6:	d001      	beq.n	8000afc <readResetSource+0x44>
	{
		reset_flags += SFTRST1;
 8000af8:	3020      	adds	r0, #32
 8000afa:	b2c0      	uxtb	r0, r0
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <readResetSource+0x64>)
 8000afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b00:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000b04:	d001      	beq.n	8000b0a <readResetSource+0x52>
	{
		reset_flags += PINRST1;
 8000b06:	3040      	adds	r0, #64	; 0x40
 8000b08:	b2c0      	uxtb	r0, r0
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <readResetSource+0x64>)
 8000b0c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b12:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
}
 8000b14:	4770      	bx	lr
		reset_flags += CPURST1;
 8000b16:	3004      	adds	r0, #4
 8000b18:	b2c0      	uxtb	r0, r0
 8000b1a:	e7da      	b.n	8000ad2 <readResetSource+0x1a>
 8000b1c:	40023800 	.word	0x40023800

08000b20 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000b20:	b510      	push	{r4, lr}
 8000b22:	4604      	mov	r4, r0
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000b24:	2106      	movs	r1, #6
 8000b26:	4825      	ldr	r0, [pc, #148]	; (8000bbc <printResetSource+0x9c>)
 8000b28:	f7ff fd0a 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000b2c:	b1c4      	cbz	r4, 8000b60 <printResetSource+0x40>
	{
		uartTransmit("Regular Start\r\n", 15);
	}
	else
	{
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000b2e:	f014 0f01 	tst.w	r4, #1
 8000b32:	d11a      	bne.n	8000b6a <printResetSource+0x4a>
		{
			uartTransmit("Interner Watchdog Reset\n", 24);
		}

		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000b34:	f014 0f02 	tst.w	r4, #2
 8000b38:	d11c      	bne.n	8000b74 <printResetSource+0x54>
		{
			uartTransmit("Window Watchdog Reset\n", 22);
		}

		if (reset_flags & CPURST1)											// CPU Reset
 8000b3a:	f014 0f04 	tst.w	r4, #4
 8000b3e:	d11e      	bne.n	8000b7e <printResetSource+0x5e>
		{
			uartTransmit("CPU Reset\n", 10);
		}
		if (reset_flags & BORST1)											// Brown out Reset
 8000b40:	f014 0f08 	tst.w	r4, #8
 8000b44:	d120      	bne.n	8000b88 <printResetSource+0x68>
		{
			uartTransmit("Brown Out Reset\n", 16);
		}

		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000b46:	f014 0f10 	tst.w	r4, #16
 8000b4a:	d122      	bne.n	8000b92 <printResetSource+0x72>
		{
			uartTransmit("Power On Reset\n", 15);
		}

		if (reset_flags & SFTRST1)											// Software Reset
 8000b4c:	f014 0f20 	tst.w	r4, #32
 8000b50:	d124      	bne.n	8000b9c <printResetSource+0x7c>
		{
			uartTransmit("Software Reset\n", 15);
		}

		if (reset_flags & PINRST1)											//NRST pin
 8000b52:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000b56:	d126      	bne.n	8000ba6 <printResetSource+0x86>
		{
			uartTransmit("PIN Reset\n", 10);
		}

		if (reset_flags & RMVF1)											//NRST pin
 8000b58:	f014 0f80 	tst.w	r4, #128	; 0x80
 8000b5c:	d128      	bne.n	8000bb0 <printResetSource+0x90>
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000b5e:	bd10      	pop	{r4, pc}
		uartTransmit("Regular Start\r\n", 15);
 8000b60:	210f      	movs	r1, #15
 8000b62:	4817      	ldr	r0, [pc, #92]	; (8000bc0 <printResetSource+0xa0>)
 8000b64:	f7ff fcec 	bl	8000540 <uartTransmit>
 8000b68:	e7f9      	b.n	8000b5e <printResetSource+0x3e>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000b6a:	2118      	movs	r1, #24
 8000b6c:	4815      	ldr	r0, [pc, #84]	; (8000bc4 <printResetSource+0xa4>)
 8000b6e:	f7ff fce7 	bl	8000540 <uartTransmit>
 8000b72:	e7df      	b.n	8000b34 <printResetSource+0x14>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000b74:	2116      	movs	r1, #22
 8000b76:	4814      	ldr	r0, [pc, #80]	; (8000bc8 <printResetSource+0xa8>)
 8000b78:	f7ff fce2 	bl	8000540 <uartTransmit>
 8000b7c:	e7dd      	b.n	8000b3a <printResetSource+0x1a>
			uartTransmit("CPU Reset\n", 10);
 8000b7e:	210a      	movs	r1, #10
 8000b80:	4812      	ldr	r0, [pc, #72]	; (8000bcc <printResetSource+0xac>)
 8000b82:	f7ff fcdd 	bl	8000540 <uartTransmit>
 8000b86:	e7db      	b.n	8000b40 <printResetSource+0x20>
			uartTransmit("Brown Out Reset\n", 16);
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <printResetSource+0xb0>)
 8000b8c:	f7ff fcd8 	bl	8000540 <uartTransmit>
 8000b90:	e7d9      	b.n	8000b46 <printResetSource+0x26>
			uartTransmit("Power On Reset\n", 15);
 8000b92:	210f      	movs	r1, #15
 8000b94:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <printResetSource+0xb4>)
 8000b96:	f7ff fcd3 	bl	8000540 <uartTransmit>
 8000b9a:	e7d7      	b.n	8000b4c <printResetSource+0x2c>
			uartTransmit("Software Reset\n", 15);
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <printResetSource+0xb8>)
 8000ba0:	f7ff fcce 	bl	8000540 <uartTransmit>
 8000ba4:	e7d5      	b.n	8000b52 <printResetSource+0x32>
			uartTransmit("PIN Reset\n", 10);
 8000ba6:	210a      	movs	r1, #10
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <printResetSource+0xbc>)
 8000baa:	f7ff fcc9 	bl	8000540 <uartTransmit>
 8000bae:	e7d3      	b.n	8000b58 <printResetSource+0x38>
			uartTransmit("RMVF\n", 5);
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <printResetSource+0xc0>)
 8000bb4:	f7ff fcc4 	bl	8000540 <uartTransmit>
}
 8000bb8:	e7d1      	b.n	8000b5e <printResetSource+0x3e>
 8000bba:	bf00      	nop
 8000bbc:	08004b24 	.word	0x08004b24
 8000bc0:	08004b2c 	.word	0x08004b2c
 8000bc4:	08004b3c 	.word	0x08004b3c
 8000bc8:	08004b58 	.word	0x08004b58
 8000bcc:	08004b70 	.word	0x08004b70
 8000bd0:	08004b7c 	.word	0x08004b7c
 8000bd4:	08004b90 	.word	0x08004b90
 8000bd8:	08004ba0 	.word	0x08004ba0
 8000bdc:	08004bb0 	.word	0x08004bb0
 8000be0:	08004bbc 	.word	0x08004bbc

08000be4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000be4:	b500      	push	{lr}
 8000be6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be8:	2300      	movs	r3, #0
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <MX_ADC1_Init+0x64>)
 8000bf4:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <MX_ADC1_Init+0x68>)
 8000bf6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bfc:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bfe:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c00:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c02:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c04:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c08:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0a:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <MX_ADC1_Init+0x6c>)
 8000c0c:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c0e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c10:	2201      	movs	r2, #1
 8000c12:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c14:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c18:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c1a:	f000 fea3 	bl	8001964 <HAL_ADC_Init>
 8000c1e:	b968      	cbnz	r0, 8000c3c <MX_ADC1_Init+0x58>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c20:	2304      	movs	r3, #4
 8000c22:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2c:	4669      	mov	r1, sp
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_ADC1_Init+0x64>)
 8000c30:	f000 ff5a 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000c34:	b928      	cbnz	r0, 8000c42 <MX_ADC1_Init+0x5e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c36:	b005      	add	sp, #20
 8000c38:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c3c:	f000 fb72 	bl	8001324 <Error_Handler>
 8000c40:	e7ee      	b.n	8000c20 <MX_ADC1_Init+0x3c>
    Error_Handler();
 8000c42:	f000 fb6f 	bl	8001324 <Error_Handler>
}
 8000c46:	e7f6      	b.n	8000c36 <MX_ADC1_Init+0x52>
 8000c48:	20000050 	.word	0x20000050
 8000c4c:	40012000 	.word	0x40012000
 8000c50:	0f000001 	.word	0x0f000001

08000c54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c54:	b500      	push	{lr}
 8000c56:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	2300      	movs	r3, #0
 8000c5a:	9303      	str	r3, [sp, #12]
 8000c5c:	9304      	str	r3, [sp, #16]
 8000c5e:	9305      	str	r3, [sp, #20]
 8000c60:	9306      	str	r3, [sp, #24]
 8000c62:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000c64:	6802      	ldr	r2, [r0, #0]
 8000c66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c6a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d002      	beq.n	8000c78 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c72:	b009      	add	sp, #36	; 0x24
 8000c74:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c78:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c82:	645a      	str	r2, [r3, #68]	; 0x44
 8000c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c86:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000c8a:	9201      	str	r2, [sp, #4]
 8000c8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c90:	f042 0201 	orr.w	r2, r2, #1
 8000c94:	631a      	str	r2, [r3, #48]	; 0x30
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8000ca0:	23f8      	movs	r3, #248	; 0xf8
 8000ca2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	a903      	add	r1, sp, #12
 8000cae:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <HAL_ADC_MspInit+0x64>)
 8000cb0:	f001 f8ea 	bl	8001e88 <HAL_GPIO_Init>
}
 8000cb4:	e7dd      	b.n	8000c72 <HAL_ADC_MspInit+0x1e>
 8000cb6:	bf00      	nop
 8000cb8:	40020000 	.word	0x40020000

08000cbc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000cbc:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_CAN1_Init+0x34>)
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_CAN1_Init+0x38>)
 8000cc2:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ccc:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000cce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cd2:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cd4:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cd6:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cd8:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cda:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cdc:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cde:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ce0:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ce2:	f000 ffe9 	bl	8001cb8 <HAL_CAN_Init>
 8000ce6:	b900      	cbnz	r0, 8000cea <MX_CAN1_Init+0x2e>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ce8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cea:	f000 fb1b 	bl	8001324 <Error_Handler>
}
 8000cee:	e7fb      	b.n	8000ce8 <MX_CAN1_Init+0x2c>
 8000cf0:	200000c0 	.word	0x200000c0
 8000cf4:	40006400 	.word	0x40006400

08000cf8 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000cf8:	b508      	push	{r3, lr}
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_CAN3_Init+0x38>)
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_CAN3_Init+0x3c>)
 8000cfe:	6003      	str	r3, [r0, #0]
  hcan3.Init.Prescaler = 6;
 8000d00:	2306      	movs	r3, #6
 8000d02:	6043      	str	r3, [r0, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	6083      	str	r3, [r0, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d08:	60c3      	str	r3, [r0, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000d0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d0e:	6102      	str	r2, [r0, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d14:	6142      	str	r2, [r0, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000d16:	7603      	strb	r3, [r0, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000d18:	7643      	strb	r3, [r0, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000d1a:	7683      	strb	r3, [r0, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000d1c:	76c3      	strb	r3, [r0, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000d1e:	7703      	strb	r3, [r0, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000d20:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000d22:	f000 ffc9 	bl	8001cb8 <HAL_CAN_Init>
 8000d26:	b900      	cbnz	r0, 8000d2a <MX_CAN3_Init+0x32>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000d28:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d2a:	f000 fafb 	bl	8001324 <Error_Handler>
}
 8000d2e:	e7fb      	b.n	8000d28 <MX_CAN3_Init+0x30>
 8000d30:	20000098 	.word	0x20000098
 8000d34:	40003400 	.word	0x40003400

08000d38 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d38:	b500      	push	{lr}
 8000d3a:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9307      	str	r3, [sp, #28]
 8000d40:	9308      	str	r3, [sp, #32]
 8000d42:	9309      	str	r3, [sp, #36]	; 0x24
 8000d44:	930a      	str	r3, [sp, #40]	; 0x28
 8000d46:	930b      	str	r3, [sp, #44]	; 0x2c
  if(canHandle->Instance==CAN1)
 8000d48:	6803      	ldr	r3, [r0, #0]
 8000d4a:	4a38      	ldr	r2, [pc, #224]	; (8000e2c <HAL_CAN_MspInit+0xf4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d005      	beq.n	8000d5c <HAL_CAN_MspInit+0x24>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN3)
 8000d50:	4a37      	ldr	r2, [pc, #220]	; (8000e30 <HAL_CAN_MspInit+0xf8>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d02b      	beq.n	8000dae <HAL_CAN_MspInit+0x76>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000d56:	b00d      	add	sp, #52	; 0x34
 8000d58:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d5c:	4a35      	ldr	r2, [pc, #212]	; (8000e34 <HAL_CAN_MspInit+0xfc>)
 8000d5e:	6813      	ldr	r3, [r2, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d017      	beq.n	8000d98 <HAL_CAN_MspInit+0x60>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <HAL_CAN_MspInit+0x100>)
 8000d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d6c:	f042 0208 	orr.w	r2, r2, #8
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2202      	movs	r2, #2
 8000d82:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2200      	movs	r2, #0
 8000d86:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d8a:	2309      	movs	r3, #9
 8000d8c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8e:	a907      	add	r1, sp, #28
 8000d90:	482a      	ldr	r0, [pc, #168]	; (8000e3c <HAL_CAN_MspInit+0x104>)
 8000d92:	f001 f879 	bl	8001e88 <HAL_GPIO_Init>
 8000d96:	e7de      	b.n	8000d56 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_CAN_MspInit+0x100>)
 8000d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000da0:	641a      	str	r2, [r3, #64]	; 0x40
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	9b01      	ldr	r3, [sp, #4]
 8000dac:	e7dc      	b.n	8000d68 <HAL_CAN_MspInit+0x30>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000dae:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <HAL_CAN_MspInit+0x100>)
 8000db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
 8000db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000dbe:	9203      	str	r2, [sp, #12]
 8000dc0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd0:	9304      	str	r3, [sp, #16]
 8000dd2:	9b04      	ldr	r3, [sp, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_CAN_MspInit+0xfc>)
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d019      	beq.n	8000e14 <HAL_CAN_MspInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_CAN_MspInit+0x100>)
 8000de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de4:	f042 0201 	orr.w	r2, r2, #1
 8000de8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	9306      	str	r3, [sp, #24]
 8000df2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000df4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000df8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8000e06:	230b      	movs	r3, #11
 8000e08:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	a907      	add	r1, sp, #28
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <HAL_CAN_MspInit+0x108>)
 8000e0e:	f001 f83b 	bl	8001e88 <HAL_GPIO_Init>
}
 8000e12:	e7a0      	b.n	8000d56 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_CAN_MspInit+0x100>)
 8000e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e18:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e24:	9305      	str	r3, [sp, #20]
 8000e26:	9b05      	ldr	r3, [sp, #20]
 8000e28:	e7da      	b.n	8000de0 <HAL_CAN_MspInit+0xa8>
 8000e2a:	bf00      	nop
 8000e2c:	40006400 	.word	0x40006400
 8000e30:	40003400 	.word	0x40003400
 8000e34:	20000028 	.word	0x20000028
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020c00 	.word	0x40020c00
 8000e40:	40020000 	.word	0x40020000

08000e44 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e48:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	2400      	movs	r4, #0
 8000e4c:	9409      	str	r4, [sp, #36]	; 0x24
 8000e4e:	940a      	str	r4, [sp, #40]	; 0x28
 8000e50:	940b      	str	r4, [sp, #44]	; 0x2c
 8000e52:	940c      	str	r4, [sp, #48]	; 0x30
 8000e54:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	4b92      	ldr	r3, [pc, #584]	; (80010a0 <MX_GPIO_Init+0x25c>)
 8000e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5a:	f042 0210 	orr.w	r2, r2, #16
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e62:	f002 0210 	and.w	r2, r2, #16
 8000e66:	9201      	str	r2, [sp, #4]
 8000e68:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6c:	f042 0204 	orr.w	r2, r2, #4
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
 8000e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e74:	f002 0204 	and.w	r2, r2, #4
 8000e78:	9202      	str	r2, [sp, #8]
 8000e7a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e7e:	f042 0220 	orr.w	r2, r2, #32
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
 8000e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e86:	f002 0220 	and.w	r2, r2, #32
 8000e8a:	9203      	str	r2, [sp, #12]
 8000e8c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
 8000e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e98:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e9c:	9204      	str	r2, [sp, #16]
 8000e9e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea2:	f042 0201 	orr.w	r2, r2, #1
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eaa:	f002 0201 	and.w	r2, r2, #1
 8000eae:	9205      	str	r2, [sp, #20]
 8000eb0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb4:	f042 0202 	orr.w	r2, r2, #2
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ebc:	f002 0202 	and.w	r2, r2, #2
 8000ec0:	9206      	str	r2, [sp, #24]
 8000ec2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
 8000ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ece:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ed2:	9207      	str	r2, [sp, #28]
 8000ed4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed8:	f042 0208 	orr.w	r2, r2, #8
 8000edc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	9308      	str	r3, [sp, #32]
 8000ee6:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8000ee8:	4f6e      	ldr	r7, [pc, #440]	; (80010a4 <MX_GPIO_Init+0x260>)
 8000eea:	4622      	mov	r2, r4
 8000eec:	f248 0187 	movw	r1, #32903	; 0x8087
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	f001 f8c1 	bl	8002078 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8000ef6:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 80010b0 <MX_GPIO_Init+0x26c>
 8000efa:	4622      	mov	r2, r4
 8000efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f00:	4658      	mov	r0, fp
 8000f02:	f001 f8b9 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8000f06:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80010b4 <MX_GPIO_Init+0x270>
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	f242 0102 	movw	r1, #8194	; 0x2002
 8000f10:	4648      	mov	r0, r9
 8000f12:	f001 f8b1 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8000f16:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80010b8 <MX_GPIO_Init+0x274>
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	f240 6102 	movw	r1, #1538	; 0x602
 8000f20:	4650      	mov	r0, sl
 8000f22:	f001 f8a9 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8000f26:	4622      	mov	r2, r4
 8000f28:	f244 0184 	movw	r1, #16516	; 0x4084
 8000f2c:	485e      	ldr	r0, [pc, #376]	; (80010a8 <MX_GPIO_Init+0x264>)
 8000f2e:	f001 f8a3 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f38:	4638      	mov	r0, r7
 8000f3a:	f001 f89d 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8000f3e:	4622      	mov	r2, r4
 8000f40:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8000f44:	4859      	ldr	r0, [pc, #356]	; (80010ac <MX_GPIO_Init+0x268>)
 8000f46:	f001 f897 	bl	8002078 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8000f4a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80010bc <MX_GPIO_Init+0x278>
 8000f4e:	4622      	mov	r2, r4
 8000f50:	2118      	movs	r1, #24
 8000f52:	4640      	mov	r0, r8
 8000f54:	f001 f890 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8000f58:	f648 0387 	movw	r3, #34951	; 0x8887
 8000f5c:	9309      	str	r3, [sp, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2501      	movs	r5, #1
 8000f60:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f66:	a909      	add	r1, sp, #36	; 0x24
 8000f68:	4638      	mov	r0, r7
 8000f6a:	f000 ff8d 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8000f6e:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000f72:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	a909      	add	r1, sp, #36	; 0x24
 8000f7a:	4638      	mov	r0, r7
 8000f7c:	f000 ff84 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8000f80:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000f84:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2603      	movs	r6, #3
 8000f88:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f8c:	a909      	add	r1, sp, #36	; 0x24
 8000f8e:	4638      	mov	r0, r7
 8000f90:	f000 ff7a 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8000f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f98:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	a909      	add	r1, sp, #36	; 0x24
 8000fa2:	4658      	mov	r0, fp
 8000fa4:	f000 ff70 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000fa8:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000fac:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fae:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	a909      	add	r1, sp, #36	; 0x24
 8000fb4:	4658      	mov	r0, fp
 8000fb6:	f000 ff67 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000fba:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8000fbe:	9309      	str	r3, [sp, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fc4:	a909      	add	r1, sp, #36	; 0x24
 8000fc6:	4648      	mov	r0, r9
 8000fc8:	f000 ff5e 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8000fcc:	f242 0302 	movw	r3, #8194	; 0x2002
 8000fd0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd8:	a909      	add	r1, sp, #36	; 0x24
 8000fda:	4648      	mov	r0, r9
 8000fdc:	f000 ff54 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8000fe0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000fe4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fea:	a909      	add	r1, sp, #36	; 0x24
 8000fec:	4648      	mov	r0, r9
 8000fee:	f000 ff4b 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8000ff2:	f641 0305 	movw	r3, #6149	; 0x1805
 8000ff6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	a909      	add	r1, sp, #36	; 0x24
 8000ffe:	4650      	mov	r0, sl
 8001000:	f000 ff42 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001004:	f240 6302 	movw	r3, #1538	; 0x602
 8001008:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	a909      	add	r1, sp, #36	; 0x24
 8001012:	4650      	mov	r0, sl
 8001014:	f000 ff38 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001018:	f64b 7373 	movw	r3, #49011	; 0xbf73
 800101c:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	a909      	add	r1, sp, #36	; 0x24
 8001024:	4820      	ldr	r0, [pc, #128]	; (80010a8 <MX_GPIO_Init+0x264>)
 8001026:	f000 ff2f 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800102a:	f244 0384 	movw	r3, #16516	; 0x4084
 800102e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	a909      	add	r1, sp, #36	; 0x24
 8001038:	481b      	ldr	r0, [pc, #108]	; (80010a8 <MX_GPIO_Init+0x264>)
 800103a:	f000 ff25 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 800103e:	f240 1343 	movw	r3, #323	; 0x143
 8001042:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001044:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001048:	a909      	add	r1, sp, #36	; 0x24
 800104a:	4818      	ldr	r0, [pc, #96]	; (80010ac <MX_GPIO_Init+0x268>)
 800104c:	f000 ff1c 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001050:	f240 7304 	movw	r3, #1796	; 0x704
 8001054:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001056:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	a909      	add	r1, sp, #36	; 0x24
 800105c:	4640      	mov	r0, r8
 800105e:	f000 ff13 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001066:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 800106c:	a909      	add	r1, sp, #36	; 0x24
 800106e:	4640      	mov	r0, r8
 8001070:	f000 ff0a 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001074:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8001078:	9309      	str	r3, [sp, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001080:	a909      	add	r1, sp, #36	; 0x24
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <MX_GPIO_Init+0x268>)
 8001084:	f000 ff00 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8001088:	2318      	movs	r3, #24
 800108a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001092:	a909      	add	r1, sp, #36	; 0x24
 8001094:	4640      	mov	r0, r8
 8001096:	f000 fef7 	bl	8001e88 <HAL_GPIO_Init>

}
 800109a:	b00f      	add	sp, #60	; 0x3c
 800109c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40021800 	.word	0x40021800
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020c00 	.word	0x40020c00

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b530      	push	{r4, r5, lr}
 80010c2:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c4:	2234      	movs	r2, #52	; 0x34
 80010c6:	2100      	movs	r1, #0
 80010c8:	a82b      	add	r0, sp, #172	; 0xac
 80010ca:	f003 fb17 	bl	80046fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ce:	2400      	movs	r4, #0
 80010d0:	9426      	str	r4, [sp, #152]	; 0x98
 80010d2:	9427      	str	r4, [sp, #156]	; 0x9c
 80010d4:	9428      	str	r4, [sp, #160]	; 0xa0
 80010d6:	9429      	str	r4, [sp, #164]	; 0xa4
 80010d8:	942a      	str	r4, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010da:	2290      	movs	r2, #144	; 0x90
 80010dc:	4621      	mov	r1, r4
 80010de:	a802      	add	r0, sp, #8
 80010e0:	f003 fb0c 	bl	80046fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <SystemClock_Config+0xa8>)
 80010e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <SystemClock_Config+0xac>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110c:	2301      	movs	r3, #1
 800110e:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2502      	movs	r5, #2
 8001118:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111e:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001120:	2319      	movs	r3, #25
 8001122:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001124:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001128:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112a:	9535      	str	r5, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800112c:	2308      	movs	r3, #8
 800112e:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001130:	9537      	str	r5, [sp, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	a82b      	add	r0, sp, #172	; 0xac
 8001134:	f000 ffe4 	bl	8002100 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001138:	f000 ffa4 	bl	8002084 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	9326      	str	r3, [sp, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	9428      	str	r4, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001144:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001148:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	932a      	str	r3, [sp, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001150:	2107      	movs	r1, #7
 8001152:	a826      	add	r0, sp, #152	; 0x98
 8001154:	f001 fa48 	bl	80025e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800115c:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115e:	a802      	add	r0, sp, #8
 8001160:	f001 fb1a 	bl	8002798 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001164:	b039      	add	sp, #228	; 0xe4
 8001166:	bd30      	pop	{r4, r5, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <main>:
{
 8001170:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8001172:	f000 fba1 	bl	80018b8 <HAL_Init>
  SystemClock_Config();
 8001176:	f7ff ffa3 	bl	80010c0 <SystemClock_Config>
  MX_GPIO_Init();
 800117a:	f7ff fe63 	bl	8000e44 <MX_GPIO_Init>
  MX_CAN1_Init();
 800117e:	f7ff fd9d 	bl	8000cbc <MX_CAN1_Init>
  MX_SPI4_Init();
 8001182:	f000 f8f7 	bl	8001374 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001186:	f000 faf7 	bl	8001778 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800118a:	f7ff fd2b 	bl	8000be4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800118e:	f000 f9c1 	bl	8001514 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001192:	f000 fa95 	bl	80016c0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001196:	f000 f8c7 	bl	8001328 <MX_SPI1_Init>
  MX_CAN3_Init();
 800119a:	f7ff fdad 	bl	8000cf8 <MX_CAN3_Init>
	printResetSource(readResetSource());
 800119e:	f7ff fc8b 	bl	8000ab8 <readResetSource>
 80011a2:	f7ff fcbd 	bl	8000b20 <printResetSource>
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80011a6:	213a      	movs	r1, #58	; 0x3a
 80011a8:	4853      	ldr	r0, [pc, #332]	; (80012f8 <main+0x188>)
 80011aa:	f7ff f9c9 	bl	8000540 <uartTransmit>
	collectSystemInfo();
 80011ae:	f7ff fc63 	bl	8000a78 <collectSystemInfo>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80011b2:	4c52      	ldr	r4, [pc, #328]	; (80012fc <main+0x18c>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	4620      	mov	r0, r4
 80011ba:	f000 ff5d 	bl	8002078 <HAL_GPIO_WritePin>
uartTransmit(TEST_BLUE_LED, sizeof(TEST_BLUE_LED));
 80011be:	211e      	movs	r1, #30
 80011c0:	484f      	ldr	r0, [pc, #316]	; (8001300 <main+0x190>)
 80011c2:	f7ff f9bd 	bl	8000540 <uartTransmit>
    HAL_Delay(1000);
 80011c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ca:	f000 fb93 	bl	80018f4 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	4620      	mov	r0, r4
 80011d4:	f000 ff50 	bl	8002078 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80011d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011dc:	f000 fb8a 	bl	80018f4 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2104      	movs	r1, #4
 80011e4:	4620      	mov	r0, r4
 80011e6:	f000 ff47 	bl	8002078 <HAL_GPIO_WritePin>
uartTransmit(TEST_GREEN_LED, sizeof(TEST_GREEN_LED));
 80011ea:	211f      	movs	r1, #31
 80011ec:	4845      	ldr	r0, [pc, #276]	; (8001304 <main+0x194>)
 80011ee:	f7ff f9a7 	bl	8000540 <uartTransmit>
    HAL_Delay(1000);
 80011f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f6:	f000 fb7d 	bl	80018f4 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2104      	movs	r1, #4
 80011fe:	4620      	mov	r0, r4
 8001200:	f000 ff3a 	bl	8002078 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001208:	f000 fb74 	bl	80018f4 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001212:	4620      	mov	r0, r4
 8001214:	f000 ff30 	bl	8002078 <HAL_GPIO_WritePin>
uartTransmit(TEST_RED_LED, sizeof(TEST_RED_LED));
 8001218:	211d      	movs	r1, #29
 800121a:	483b      	ldr	r0, [pc, #236]	; (8001308 <main+0x198>)
 800121c:	f7ff f990 	bl	8000540 <uartTransmit>
    HAL_Delay(1000);
 8001220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001224:	f000 fb66 	bl	80018f4 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122e:	4620      	mov	r0, r4
 8001230:	f000 ff22 	bl	8002078 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f000 fb5c 	bl	80018f4 <HAL_Delay>
    HAL_GPIO_WritePin(ISOSPI_EN_GPIO_Port, ISOSPI_EN_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001242:	4832      	ldr	r0, [pc, #200]	; (800130c <main+0x19c>)
 8001244:	f000 ff18 	bl	8002078 <HAL_GPIO_WritePin>
    uartTransmit("\n", 1);
 8001248:	2101      	movs	r1, #1
 800124a:	4831      	ldr	r0, [pc, #196]	; (8001310 <main+0x1a0>)
 800124c:	f7ff f978 	bl	8000540 <uartTransmit>
uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 8001250:	2122      	movs	r1, #34	; 0x22
 8001252:	4830      	ldr	r0, [pc, #192]	; (8001314 <main+0x1a4>)
 8001254:	f7ff f974 	bl	8000540 <uartTransmit>
	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchführen
 8001258:	f7ff fa50 	bl	80006fc <ltc6811_check>
 800125c:	4a2e      	ldr	r2, [pc, #184]	; (8001318 <main+0x1a8>)
 800125e:	7010      	strb	r0, [r2, #0]
 8001260:	bbd0      	cbnz	r0, 80012d8 <main+0x168>
	ltc6811_read(RDCFG, &data[0]);
 8001262:	4c2e      	ldr	r4, [pc, #184]	; (800131c <main+0x1ac>)
 8001264:	4621      	mov	r1, r4
 8001266:	2002      	movs	r0, #2
 8001268:	f7ff fa14 	bl	8000694 <ltc6811_read>
	ltc6811(CLRCELL);
 800126c:	f240 7011 	movw	r0, #1809	; 0x711
 8001270:	f7ff f9d2 	bl	8000618 <ltc6811>
	ltc6811(CLRSTAT);
 8001274:	f240 7013 	movw	r0, #1811	; 0x713
 8001278:	f7ff f9ce 	bl	8000618 <ltc6811>
	ltc6811(CLRAUX);
 800127c:	f240 7012 	movw	r0, #1810	; 0x712
 8001280:	f7ff f9ca 	bl	8000618 <ltc6811>
	ltc6811(ADAX | MD262 | GPIOALL);
 8001284:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 8001288:	f7ff f9c6 	bl	8000618 <ltc6811>
	ltc6811_read(RDAUXA, &data[0]);
 800128c:	4621      	mov	r1, r4
 800128e:	200c      	movs	r0, #12
 8001290:	f7ff fa00 	bl	8000694 <ltc6811_read>
	    HAL_Delay(500);
 8001294:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
		ltc6811_read(RDCVB, &data[6]);
 8001298:	1da5      	adds	r5, r4, #6
	    HAL_Delay(500);
 800129a:	4630      	mov	r0, r6
 800129c:	f000 fb2a 	bl	80018f4 <HAL_Delay>
		ltc6811(ADCVC | MD2714 | CELLALL);
 80012a0:	f44f 7038 	mov.w	r0, #736	; 0x2e0
 80012a4:	f7ff f9b8 	bl	8000618 <ltc6811>
		ltc6811_read(RDCVA, &data[0]);
 80012a8:	4621      	mov	r1, r4
 80012aa:	2004      	movs	r0, #4
 80012ac:	f7ff f9f2 	bl	8000694 <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 80012b0:	4629      	mov	r1, r5
 80012b2:	2006      	movs	r0, #6
 80012b4:	f7ff f9ee 	bl	8000694 <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 80012b8:	f104 010c 	add.w	r1, r4, #12
 80012bc:	2008      	movs	r0, #8
 80012be:	f7ff f9e9 	bl	8000694 <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 80012c2:	f104 0112 	add.w	r1, r4, #18
 80012c6:	200a      	movs	r0, #10
 80012c8:	f7ff f9e4 	bl	8000694 <ltc6811_read>
		ltc6811_read(RDCFG, &data[26]);
 80012cc:	f104 011a 	add.w	r1, r4, #26
 80012d0:	2002      	movs	r0, #2
 80012d2:	f7ff f9df 	bl	8000694 <ltc6811_read>
  while (1)
 80012d6:	e7e0      	b.n	800129a <main+0x12a>
uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));					// Ausgabe bei Fehlerhaftem Selbsttest
 80012d8:	211f      	movs	r1, #31
 80012da:	4811      	ldr	r0, [pc, #68]	; (8001320 <main+0x1b0>)
 80012dc:	f7ff f930 	bl	8000540 <uartTransmit>
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);// Ausgabe auf LEDs
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e6:	4620      	mov	r0, r4
 80012e8:	f000 fec6 	bl	8002078 <HAL_GPIO_WritePin>
	    uartTransmitNumber(temp, 10);
 80012ec:	210a      	movs	r1, #10
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <main+0x1a8>)
 80012f0:	7818      	ldrb	r0, [r3, #0]
 80012f2:	f7ff f931 	bl	8000558 <uartTransmitNumber>
 80012f6:	e7b4      	b.n	8001262 <main+0xf2>
 80012f8:	08004bc4 	.word	0x08004bc4
 80012fc:	40020400 	.word	0x40020400
 8001300:	08004c00 	.word	0x08004c00
 8001304:	08004c20 	.word	0x08004c20
 8001308:	08004c40 	.word	0x08004c40
 800130c:	40021000 	.word	0x40021000
 8001310:	08004bfc 	.word	0x08004bfc
 8001314:	08004c60 	.word	0x08004c60
 8001318:	200000e8 	.word	0x200000e8
 800131c:	2000002c 	.word	0x2000002c
 8001320:	08004c84 	.word	0x08004c84

08001324 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001324:	4770      	bx	lr
	...

08001328 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001328:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800132a:	4810      	ldr	r0, [pc, #64]	; (800136c <MX_SPI1_Init+0x44>)
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_SPI1_Init+0x48>)
 800132e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001330:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001334:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001336:	2300      	movs	r3, #0
 8001338:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800133a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800133e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001340:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001342:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001344:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001348:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800134a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001350:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001352:	2207      	movs	r2, #7
 8001354:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001356:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001358:	2308      	movs	r3, #8
 800135a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800135c:	f001 fe72 	bl	8003044 <HAL_SPI_Init>
 8001360:	b900      	cbnz	r0, 8001364 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001362:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001364:	f7ff ffde 	bl	8001324 <Error_Handler>
}
 8001368:	e7fb      	b.n	8001362 <MX_SPI1_Init+0x3a>
 800136a:	bf00      	nop
 800136c:	20000150 	.word	0x20000150
 8001370:	40013000 	.word	0x40013000

08001374 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001374:	b508      	push	{r3, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_SPI4_Init+0x48>)
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_SPI4_Init+0x4c>)
 800137a:	6003      	str	r3, [r0, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800137c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001380:	6043      	str	r3, [r0, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001382:	2300      	movs	r3, #0
 8001384:	6083      	str	r3, [r0, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001386:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800138a:	60c2      	str	r2, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800138c:	2202      	movs	r2, #2
 800138e:	6102      	str	r2, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001390:	2201      	movs	r2, #1
 8001392:	6142      	str	r2, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001398:	6182      	str	r2, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800139a:	2230      	movs	r2, #48	; 0x30
 800139c:	61c2      	str	r2, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139e:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80013a4:	2207      	movs	r2, #7
 80013a6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013a8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013aa:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80013ac:	f001 fe4a 	bl	8003044 <HAL_SPI_Init>
 80013b0:	b900      	cbnz	r0, 80013b4 <MX_SPI4_Init+0x40>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80013b2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013b4:	f7ff ffb6 	bl	8001324 <Error_Handler>
}
 80013b8:	e7fb      	b.n	80013b2 <MX_SPI4_Init+0x3e>
 80013ba:	bf00      	nop
 80013bc:	200000ec 	.word	0x200000ec
 80013c0:	40013400 	.word	0x40013400

080013c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	2300      	movs	r3, #0
 80013ca:	9305      	str	r3, [sp, #20]
 80013cc:	9306      	str	r3, [sp, #24]
 80013ce:	9307      	str	r3, [sp, #28]
 80013d0:	9308      	str	r3, [sp, #32]
 80013d2:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 80013d4:	6803      	ldr	r3, [r0, #0]
 80013d6:	4a30      	ldr	r2, [pc, #192]	; (8001498 <HAL_SPI_MspInit+0xd4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d004      	beq.n	80013e6 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI4)
 80013dc:	4a2f      	ldr	r2, [pc, #188]	; (800149c <HAL_SPI_MspInit+0xd8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d037      	beq.n	8001452 <HAL_SPI_MspInit+0x8e>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80013e2:	b00b      	add	sp, #44	; 0x2c
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e6:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <HAL_SPI_MspInit+0xdc>)
 80013e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44
 80013f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013f6:	9200      	str	r2, [sp, #0]
 80013f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013fc:	f042 0208 	orr.w	r2, r2, #8
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
 8001402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001404:	f002 0208 	and.w	r2, r2, #8
 8001408:	9201      	str	r2, [sp, #4]
 800140a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800140c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2702      	movs	r7, #2
 8001424:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2600      	movs	r6, #0
 8001428:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2503      	movs	r5, #3
 800142c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142e:	2405      	movs	r4, #5
 8001430:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001432:	a905      	add	r1, sp, #20
 8001434:	481b      	ldr	r0, [pc, #108]	; (80014a4 <HAL_SPI_MspInit+0xe0>)
 8001436:	f000 fd27 	bl	8001e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 800143a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800143e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001446:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001448:	a905      	add	r1, sp, #20
 800144a:	4817      	ldr	r0, [pc, #92]	; (80014a8 <HAL_SPI_MspInit+0xe4>)
 800144c:	f000 fd1c 	bl	8001e88 <HAL_GPIO_Init>
 8001450:	e7c7      	b.n	80013e2 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_SPI_MspInit+0xdc>)
 8001454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
 800145c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800145e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001462:	9203      	str	r2, [sp, #12]
 8001464:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001468:	f042 0210 	orr.w	r2, r2, #16
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	9304      	str	r3, [sp, #16]
 8001476:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001478:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800147c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800148a:	2305      	movs	r3, #5
 800148c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148e:	a905      	add	r1, sp, #20
 8001490:	4806      	ldr	r0, [pc, #24]	; (80014ac <HAL_SPI_MspInit+0xe8>)
 8001492:	f000 fcf9 	bl	8001e88 <HAL_GPIO_Init>
}
 8001496:	e7a4      	b.n	80013e2 <HAL_SPI_MspInit+0x1e>
 8001498:	40013000 	.word	0x40013000
 800149c:	40013400 	.word	0x40013400
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_MspInit+0x2c>)
 80014b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40
 80014bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014be:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80014c2:	9200      	str	r2, [sp, #0]
 80014c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d8:	b002      	add	sp, #8
 80014da:	4770      	bx	lr
 80014dc:	40023800 	.word	0x40023800

080014e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014e0:	4770      	bx	lr

080014e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler>

080014e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler>

080014e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler>

080014e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler>

080014ea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f2:	f000 f9ed 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f6:	bd08      	pop	{r3, pc}

080014f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SystemInit+0x18>)
 80014fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150a:	609a      	str	r2, [r3, #8]
#endif
}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001514:	b500      	push	{lr}
 8001516:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001518:	2300      	movs	r3, #0
 800151a:	9307      	str	r3, [sp, #28]
 800151c:	9308      	str	r3, [sp, #32]
 800151e:	9309      	str	r3, [sp, #36]	; 0x24
 8001520:	930a      	str	r3, [sp, #40]	; 0x28
 8001522:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001524:	9303      	str	r3, [sp, #12]
 8001526:	9304      	str	r3, [sp, #16]
 8001528:	9305      	str	r3, [sp, #20]
 800152a:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001532:	4825      	ldr	r0, [pc, #148]	; (80015c8 <MX_TIM1_Init+0xb4>)
 8001534:	4a25      	ldr	r2, [pc, #148]	; (80015cc <MX_TIM1_Init+0xb8>)
 8001536:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001538:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 800153c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001540:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001542:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001544:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001548:	f002 fa96 	bl	8003a78 <HAL_TIM_IC_Init>
 800154c:	2800      	cmp	r0, #0
 800154e:	d12c      	bne.n	80015aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001550:	2304      	movs	r3, #4
 8001552:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001554:	2350      	movs	r3, #80	; 0x50
 8001556:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001558:	2300      	movs	r3, #0
 800155a:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800155c:	930a      	str	r3, [sp, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800155e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001560:	a907      	add	r1, sp, #28
 8001562:	4819      	ldr	r0, [pc, #100]	; (80015c8 <MX_TIM1_Init+0xb4>)
 8001564:	f002 fcc4 	bl	8003ef0 <HAL_TIM_SlaveConfigSynchro>
 8001568:	bb10      	cbnz	r0, 80015b0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800156a:	2200      	movs	r2, #0
 800156c:	9203      	str	r2, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800156e:	2301      	movs	r3, #1
 8001570:	9304      	str	r3, [sp, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001572:	9205      	str	r2, [sp, #20]
  sConfigIC.ICFilter = 0;
 8001574:	9206      	str	r2, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001576:	a903      	add	r1, sp, #12
 8001578:	4813      	ldr	r0, [pc, #76]	; (80015c8 <MX_TIM1_Init+0xb4>)
 800157a:	f002 fbaf 	bl	8003cdc <HAL_TIM_IC_ConfigChannel>
 800157e:	b9d0      	cbnz	r0, 80015b6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001580:	2302      	movs	r3, #2
 8001582:	9303      	str	r3, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001584:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001586:	2204      	movs	r2, #4
 8001588:	a903      	add	r1, sp, #12
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <MX_TIM1_Init+0xb4>)
 800158c:	f002 fba6 	bl	8003cdc <HAL_TIM_IC_ConfigChannel>
 8001590:	b9a0      	cbnz	r0, 80015bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001596:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159a:	4669      	mov	r1, sp
 800159c:	480a      	ldr	r0, [pc, #40]	; (80015c8 <MX_TIM1_Init+0xb4>)
 800159e:	f002 fcd1 	bl	8003f44 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	b970      	cbnz	r0, 80015c2 <MX_TIM1_Init+0xae>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015a4:	b00d      	add	sp, #52	; 0x34
 80015a6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015aa:	f7ff febb 	bl	8001324 <Error_Handler>
 80015ae:	e7cf      	b.n	8001550 <MX_TIM1_Init+0x3c>
    Error_Handler();
 80015b0:	f7ff feb8 	bl	8001324 <Error_Handler>
 80015b4:	e7d9      	b.n	800156a <MX_TIM1_Init+0x56>
    Error_Handler();
 80015b6:	f7ff feb5 	bl	8001324 <Error_Handler>
 80015ba:	e7e1      	b.n	8001580 <MX_TIM1_Init+0x6c>
    Error_Handler();
 80015bc:	f7ff feb2 	bl	8001324 <Error_Handler>
 80015c0:	e7e7      	b.n	8001592 <MX_TIM1_Init+0x7e>
    Error_Handler();
 80015c2:	f7ff feaf 	bl	8001324 <Error_Handler>
}
 80015c6:	e7ed      	b.n	80015a4 <MX_TIM1_Init+0x90>
 80015c8:	20000200 	.word	0x20000200
 80015cc:	40010000 	.word	0x40010000

080015d0 <HAL_TIM_IC_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80015d0:	b500      	push	{lr}
 80015d2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	2300      	movs	r3, #0
 80015d6:	9303      	str	r3, [sp, #12]
 80015d8:	9304      	str	r3, [sp, #16]
 80015da:	9305      	str	r3, [sp, #20]
 80015dc:	9306      	str	r3, [sp, #24]
 80015de:	9307      	str	r3, [sp, #28]
  if(tim_icHandle->Instance==TIM1)
 80015e0:	6802      	ldr	r2, [r0, #0]
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_TIM_IC_MspInit+0x64>)
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d002      	beq.n	80015ee <HAL_TIM_IC_MspInit+0x1e>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80015e8:	b009      	add	sp, #36	; 0x24
 80015ea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ee:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80015f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
 80015fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015fc:	f002 0201 	and.w	r2, r2, #1
 8001600:	9201      	str	r2, [sp, #4]
 8001602:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001606:	f042 0210 	orr.w	r2, r2, #16
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8001616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001626:	2301      	movs	r3, #1
 8001628:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 800162a:	a903      	add	r1, sp, #12
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <HAL_TIM_IC_MspInit+0x68>)
 800162e:	f000 fc2b 	bl	8001e88 <HAL_GPIO_Init>
}
 8001632:	e7d9      	b.n	80015e8 <HAL_TIM_IC_MspInit+0x18>
 8001634:	40010000 	.word	0x40010000
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 800163c:	6802      	ldr	r2, [r0, #0]
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_TIM_PWM_MspInit+0x28>)
 8001640:	429a      	cmp	r2, r3
 8001642:	d000      	beq.n	8001646 <HAL_TIM_PWM_MspInit+0xa>
 8001644:	4770      	bx	lr
{
 8001646:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001648:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800164c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800164e:	f042 0204 	orr.w	r2, r2, #4
 8001652:	641a      	str	r2, [r3, #64]	; 0x40
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800165e:	b002      	add	sp, #8
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40000800 	.word	0x40000800

08001668 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001668:	b500      	push	{lr}
 800166a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	2300      	movs	r3, #0
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	9303      	str	r3, [sp, #12]
 8001674:	9304      	str	r3, [sp, #16]
 8001676:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8001678:	6802      	ldr	r2, [r0, #0]
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_TIM_MspPostInit+0x50>)
 800167c:	429a      	cmp	r2, r3
 800167e:	d002      	beq.n	8001686 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001680:	b007      	add	sp, #28
 8001682:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001686:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800168a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168c:	f042 0208 	orr.w	r2, r2, #8
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 800169c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2200      	movs	r2, #0
 80016a8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ae:	a901      	add	r1, sp, #4
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <HAL_TIM_MspPostInit+0x54>)
 80016b2:	f000 fbe9 	bl	8001e88 <HAL_GPIO_Init>
}
 80016b6:	e7e3      	b.n	8001680 <HAL_TIM_MspPostInit+0x18>
 80016b8:	40000800 	.word	0x40000800
 80016bc:	40020c00 	.word	0x40020c00

080016c0 <MX_TIM4_Init>:
{
 80016c0:	b500      	push	{lr}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	2300      	movs	r3, #0
 80016c6:	9307      	str	r3, [sp, #28]
 80016c8:	9308      	str	r3, [sp, #32]
 80016ca:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	9303      	str	r3, [sp, #12]
 80016d4:	9304      	str	r3, [sp, #16]
 80016d6:	9305      	str	r3, [sp, #20]
 80016d8:	9306      	str	r3, [sp, #24]
  htim4.Instance = TIM4;
 80016da:	4825      	ldr	r0, [pc, #148]	; (8001770 <MX_TIM4_Init+0xb0>)
 80016dc:	4a25      	ldr	r2, [pc, #148]	; (8001774 <MX_TIM4_Init+0xb4>)
 80016de:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80016e0:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 80016e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e8:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016ee:	f002 f993 	bl	8003a18 <HAL_TIM_PWM_Init>
 80016f2:	bb50      	cbnz	r0, 800174a <MX_TIM4_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016fa:	a907      	add	r1, sp, #28
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <MX_TIM4_Init+0xb0>)
 80016fe:	f002 fc21 	bl	8003f44 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	bb28      	cbnz	r0, 8001750 <MX_TIM4_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001704:	2360      	movs	r3, #96	; 0x60
 8001706:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8001708:	2200      	movs	r2, #0
 800170a:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170e:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001710:	4669      	mov	r1, sp
 8001712:	4817      	ldr	r0, [pc, #92]	; (8001770 <MX_TIM4_Init+0xb0>)
 8001714:	f002 fa12 	bl	8003b3c <HAL_TIM_PWM_ConfigChannel>
 8001718:	b9e8      	cbnz	r0, 8001756 <MX_TIM4_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800171a:	2204      	movs	r2, #4
 800171c:	4669      	mov	r1, sp
 800171e:	4814      	ldr	r0, [pc, #80]	; (8001770 <MX_TIM4_Init+0xb0>)
 8001720:	f002 fa0c 	bl	8003b3c <HAL_TIM_PWM_ConfigChannel>
 8001724:	b9d0      	cbnz	r0, 800175c <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001726:	2208      	movs	r2, #8
 8001728:	4669      	mov	r1, sp
 800172a:	4811      	ldr	r0, [pc, #68]	; (8001770 <MX_TIM4_Init+0xb0>)
 800172c:	f002 fa06 	bl	8003b3c <HAL_TIM_PWM_ConfigChannel>
 8001730:	b9b8      	cbnz	r0, 8001762 <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001732:	220c      	movs	r2, #12
 8001734:	4669      	mov	r1, sp
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <MX_TIM4_Init+0xb0>)
 8001738:	f002 fa00 	bl	8003b3c <HAL_TIM_PWM_ConfigChannel>
 800173c:	b9a0      	cbnz	r0, 8001768 <MX_TIM4_Init+0xa8>
  HAL_TIM_MspPostInit(&htim4);
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <MX_TIM4_Init+0xb0>)
 8001740:	f7ff ff92 	bl	8001668 <HAL_TIM_MspPostInit>
}
 8001744:	b00b      	add	sp, #44	; 0x2c
 8001746:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800174a:	f7ff fdeb 	bl	8001324 <Error_Handler>
 800174e:	e7d1      	b.n	80016f4 <MX_TIM4_Init+0x34>
    Error_Handler();
 8001750:	f7ff fde8 	bl	8001324 <Error_Handler>
 8001754:	e7d6      	b.n	8001704 <MX_TIM4_Init+0x44>
    Error_Handler();
 8001756:	f7ff fde5 	bl	8001324 <Error_Handler>
 800175a:	e7de      	b.n	800171a <MX_TIM4_Init+0x5a>
    Error_Handler();
 800175c:	f7ff fde2 	bl	8001324 <Error_Handler>
 8001760:	e7e1      	b.n	8001726 <MX_TIM4_Init+0x66>
    Error_Handler();
 8001762:	f7ff fddf 	bl	8001324 <Error_Handler>
 8001766:	e7e4      	b.n	8001732 <MX_TIM4_Init+0x72>
    Error_Handler();
 8001768:	f7ff fddc 	bl	8001324 <Error_Handler>
 800176c:	e7e7      	b.n	800173e <MX_TIM4_Init+0x7e>
 800176e:	bf00      	nop
 8001770:	200001b4 	.word	0x200001b4
 8001774:	40000800 	.word	0x40000800

08001778 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001778:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <MX_USART2_UART_Init+0x30>)
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x34>)
 800177e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8001780:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001784:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	2300      	movs	r3, #0
 8001788:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800178a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800178c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800178e:	220c      	movs	r2, #12
 8001790:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179a:	f002 ff5a 	bl	8004652 <HAL_UART_Init>
 800179e:	b900      	cbnz	r0, 80017a2 <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80017a2:	f7ff fdbf 	bl	8001324 <Error_Handler>
}
 80017a6:	e7fb      	b.n	80017a0 <MX_USART2_UART_Init+0x28>
 80017a8:	2000024c 	.word	0x2000024c
 80017ac:	40004400 	.word	0x40004400

080017b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b0:	b500      	push	{lr}
 80017b2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	2300      	movs	r3, #0
 80017b6:	9303      	str	r3, [sp, #12]
 80017b8:	9304      	str	r3, [sp, #16]
 80017ba:	9305      	str	r3, [sp, #20]
 80017bc:	9306      	str	r3, [sp, #24]
 80017be:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 80017c0:	6802      	ldr	r2, [r0, #0]
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_UART_MspInit+0x64>)
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d002      	beq.n	80017ce <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017c8:	b009      	add	sp, #36	; 0x24
 80017ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ce:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80017d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
 80017da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017dc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017e0:	9201      	str	r2, [sp, #4]
 80017e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e6:	f042 0208 	orr.w	r2, r2, #8
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017f6:	2360      	movs	r3, #96	; 0x60
 80017f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001806:	2307      	movs	r3, #7
 8001808:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180a:	a903      	add	r1, sp, #12
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <HAL_UART_MspInit+0x68>)
 800180e:	f000 fb3b 	bl	8001e88 <HAL_GPIO_Init>
}
 8001812:	e7d9      	b.n	80017c8 <HAL_UART_MspInit+0x18>
 8001814:	40004400 	.word	0x40004400
 8001818:	40020c00 	.word	0x40020c00

0800181c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001854 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001820:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001822:	e003      	b.n	800182c <LoopCopyDataInit>

08001824 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001826:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001828:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800182a:	3104      	adds	r1, #4

0800182c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001830:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001832:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001834:	d3f6      	bcc.n	8001824 <CopyDataInit>
  ldr  r2, =_sbss
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001838:	e002      	b.n	8001840 <LoopFillZerobss>

0800183a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800183a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800183c:	f842 3b04 	str.w	r3, [r2], #4

08001840 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001842:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001844:	d3f9      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001846:	f7ff fe57 	bl	80014f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800184a:	f002 ff33 	bl	80046b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184e:	f7ff fc8f 	bl	8001170 <main>
  bx  lr    
 8001852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001854:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001858:	08004cf4 	.word	0x08004cf4
  ldr  r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001860:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001864:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001868:	200002d4 	.word	0x200002d4

0800186c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC_IRQHandler>
	...

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b510      	push	{r4, lr}
 8001872:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_InitTick+0x3c>)
 8001876:	7818      	ldrb	r0, [r3, #0]
 8001878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_InitTick+0x40>)
 8001882:	6810      	ldr	r0, [r2, #0]
 8001884:	fbb0 f0f3 	udiv	r0, r0, r3
 8001888:	f000 fae8 	bl	8001e5c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188c:	2c0f      	cmp	r4, #15
 800188e:	d800      	bhi.n	8001892 <HAL_InitTick+0x22>
 8001890:	b108      	cbz	r0, 8001896 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001892:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001894:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001896:	2200      	movs	r2, #0
 8001898:	4621      	mov	r1, r4
 800189a:	f04f 30ff 	mov.w	r0, #4294967295
 800189e:	f000 faad 	bl	8001dfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_InitTick+0x44>)
 80018a4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80018a6:	2000      	movs	r0, #0
 80018a8:	e7f4      	b.n	8001894 <HAL_InitTick+0x24>
 80018aa:	bf00      	nop
 80018ac:	20000004 	.word	0x20000004
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_Init>:
{
 80018b8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ba:	2003      	movs	r0, #3
 80018bc:	f000 fa8c 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff ffd5 	bl	8001870 <HAL_InitTick>
  HAL_MspInit();
 80018c6:	f7ff fdf3 	bl	80014b0 <HAL_MspInit>
}
 80018ca:	2000      	movs	r0, #0
 80018cc:	bd08      	pop	{r3, pc}
	...

080018d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <HAL_IncTick+0x10>)
 80018d2:	6811      	ldr	r1, [r2, #0]
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_IncTick+0x14>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	440b      	add	r3, r1
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200002d0 	.word	0x200002d0
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <HAL_GetTick+0x8>)
 80018ea:	6818      	ldr	r0, [r3, #0]
}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200002d0 	.word	0x200002d0

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b538      	push	{r3, r4, r5, lr}
 80018f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff fff6 	bl	80018e8 <HAL_GetTick>
 80018fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001902:	d002      	beq.n	800190a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_Delay+0x24>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	f7ff ffed 	bl	80018e8 <HAL_GetTick>
 800190e:	1b40      	subs	r0, r0, r5
 8001910:	42a0      	cmp	r0, r4
 8001912:	d3fa      	bcc.n	800190a <HAL_Delay+0x16>
  {
  }
}
 8001914:	bd38      	pop	{r3, r4, r5, pc}
 8001916:	bf00      	nop
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F7xx_HAL_VERSION;
}
 800191c:	4800      	ldr	r0, [pc, #0]	; (8001920 <HAL_GetHalVersion+0x4>)
 800191e:	4770      	bx	lr
 8001920:	01020900 	.word	0x01020900

08001924 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8001924:	4b01      	ldr	r3, [pc, #4]	; (800192c <HAL_GetREVID+0x8>)
 8001926:	6818      	ldr	r0, [r3, #0]
}
 8001928:	0c00      	lsrs	r0, r0, #16
 800192a:	4770      	bx	lr
 800192c:	e0042000 	.word	0xe0042000

08001930 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001930:	4b02      	ldr	r3, [pc, #8]	; (800193c <HAL_GetDEVID+0xc>)
 8001932:	6818      	ldr	r0, [r3, #0]
}
 8001934:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e0042000 	.word	0xe0042000

08001940 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
   return(READ_REG(*((uint32_t *)UID_BASE)));
}
 8001940:	4b01      	ldr	r3, [pc, #4]	; (8001948 <HAL_GetUIDw0+0x8>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	1ff0f420 	.word	0x1ff0f420

0800194c <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 800194c:	4b01      	ldr	r3, [pc, #4]	; (8001954 <HAL_GetUIDw1+0x8>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	1ff0f424 	.word	0x1ff0f424

08001958 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8001958:	4b01      	ldr	r3, [pc, #4]	; (8001960 <HAL_GetUIDw2+0x8>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	1ff0f428 	.word	0x1ff0f428

08001964 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001964:	2800      	cmp	r0, #0
 8001966:	f000 80b7 	beq.w	8001ad8 <HAL_ADC_Init+0x174>
{
 800196a:	b510      	push	{r4, lr}
 800196c:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800196e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001970:	b143      	cbz	r3, 8001984 <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001974:	f013 0f10 	tst.w	r3, #16
 8001978:	d00b      	beq.n	8001992 <HAL_ADC_Init+0x2e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800197a:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800197c:	2300      	movs	r3, #0
 800197e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8001982:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001984:	f7ff f966 	bl	8000c54 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	2300      	movs	r3, #0
 800198a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800198c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001990:	e7ef      	b.n	8001972 <HAL_ADC_Init+0xe>
    ADC_STATE_CLR_SET(hadc->State,
 8001992:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001994:	4b51      	ldr	r3, [pc, #324]	; (8001adc <HAL_ADC_Init+0x178>)
 8001996:	4013      	ands	r3, r2
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800199e:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_ADC_Init+0x17c>)
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80019a6:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	6861      	ldr	r1, [r4, #4]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019b0:	6822      	ldr	r2, [r4, #0]
 80019b2:	6853      	ldr	r3, [r2, #4]
 80019b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	6853      	ldr	r3, [r2, #4]
 80019be:	6921      	ldr	r1, [r4, #16]
 80019c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80019c4:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	6853      	ldr	r3, [r2, #4]
 80019ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019ce:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019d0:	6822      	ldr	r2, [r4, #0]
 80019d2:	6853      	ldr	r3, [r2, #4]
 80019d4:	68a1      	ldr	r1, [r4, #8]
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	6893      	ldr	r3, [r2, #8]
 80019de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019e2:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019e4:	6822      	ldr	r2, [r4, #0]
 80019e6:	6893      	ldr	r3, [r2, #8]
 80019e8:	68e1      	ldr	r1, [r4, #12]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_ADC_Init+0x180>)
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d05f      	beq.n	8001ab6 <HAL_ADC_Init+0x152>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f6:	6822      	ldr	r2, [r4, #0]
 80019f8:	6893      	ldr	r3, [r2, #8]
 80019fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80019fe:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	6893      	ldr	r3, [r2, #8]
 8001a04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001a06:	430b      	orrs	r3, r1
 8001a08:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a0a:	6822      	ldr	r2, [r4, #0]
 8001a0c:	6893      	ldr	r3, [r2, #8]
 8001a0e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001a12:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a14:	6822      	ldr	r2, [r4, #0]
 8001a16:	6893      	ldr	r3, [r2, #8]
 8001a18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a1e:	6822      	ldr	r2, [r4, #0]
 8001a20:	6893      	ldr	r3, [r2, #8]
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	6893      	ldr	r3, [r2, #8]
 8001a2c:	69a1      	ldr	r1, [r4, #24]
 8001a2e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001a32:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a34:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d047      	beq.n	8001acc <HAL_ADC_Init+0x168>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a3c:	6822      	ldr	r2, [r4, #0]
 8001a3e:	6853      	ldr	r3, [r2, #4]
 8001a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a44:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	6853      	ldr	r3, [r2, #4]
 8001a4a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a4e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a50:	6821      	ldr	r1, [r4, #0]
 8001a52:	684b      	ldr	r3, [r1, #4]
 8001a54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a56:	3a01      	subs	r2, #1
 8001a58:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001a5c:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a5e:	6822      	ldr	r2, [r4, #0]
 8001a60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001a66:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a68:	6821      	ldr	r1, [r4, #0]
 8001a6a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001a6c:	69e2      	ldr	r2, [r4, #28]
 8001a6e:	3a01      	subs	r2, #1
 8001a70:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001a74:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a76:	6822      	ldr	r2, [r4, #0]
 8001a78:	6893      	ldr	r3, [r2, #8]
 8001a7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a7e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	6893      	ldr	r3, [r2, #8]
 8001a84:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001a88:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001a8c:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a8e:	6822      	ldr	r2, [r4, #0]
 8001a90:	6893      	ldr	r3, [r2, #8]
 8001a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a96:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a98:	6822      	ldr	r2, [r4, #0]
 8001a9a:	6893      	ldr	r3, [r2, #8]
 8001a9c:	6961      	ldr	r1, [r4, #20]
 8001a9e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001aa2:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6423      	str	r3, [r4, #64]	; 0x40
 8001ab4:	e762      	b.n	800197c <HAL_ADC_Init+0x18>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	6893      	ldr	r3, [r2, #8]
 8001aba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001abe:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ac0:	6822      	ldr	r2, [r4, #0]
 8001ac2:	6893      	ldr	r3, [r2, #8]
 8001ac4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ac8:	6093      	str	r3, [r2, #8]
 8001aca:	e7a8      	b.n	8001a1e <HAL_ADC_Init+0xba>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001acc:	6822      	ldr	r2, [r4, #0]
 8001ace:	6853      	ldr	r3, [r2, #4]
 8001ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ad4:	6053      	str	r3, [r2, #4]
 8001ad6:	e7c2      	b.n	8001a5e <HAL_ADC_Init+0xfa>
    return HAL_ERROR;
 8001ad8:	2001      	movs	r0, #1
}
 8001ada:	4770      	bx	lr
 8001adc:	ffffeefd 	.word	0xffffeefd
 8001ae0:	40012300 	.word	0x40012300
 8001ae4:	0f000001 	.word	0x0f000001

08001ae8 <HAL_ADC_ConfigChannel>:
{
 8001ae8:	b430      	push	{r4, r5}
 8001aea:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001af0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	f000 80d2 	beq.w	8001c9e <HAL_ADC_ConfigChannel+0x1b6>
 8001afa:	2301      	movs	r3, #1
 8001afc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b00:	680b      	ldr	r3, [r1, #0]
 8001b02:	2b09      	cmp	r3, #9
 8001b04:	d925      	bls.n	8001b52 <HAL_ADC_ConfigChannel+0x6a>
 8001b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b0a:	d022      	beq.n	8001b52 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b0c:	6805      	ldr	r5, [r0, #0]
 8001b0e:	68ea      	ldr	r2, [r5, #12]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b16:	3b1e      	subs	r3, #30
 8001b18:	2407      	movs	r4, #7
 8001b1a:	fa04 f303 	lsl.w	r3, r4, r3
 8001b1e:	ea22 0303 	bic.w	r3, r2, r3
 8001b22:	60eb      	str	r3, [r5, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b24:	680b      	ldr	r3, [r1, #0]
 8001b26:	4a5f      	ldr	r2, [pc, #380]	; (8001ca4 <HAL_ADC_ConfigChannel+0x1bc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00b      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b2c:	6804      	ldr	r4, [r0, #0]
 8001b2e:	68e5      	ldr	r5, [r4, #12]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b36:	3b1e      	subs	r3, #30
 8001b38:	688a      	ldr	r2, [r1, #8]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	432b      	orrs	r3, r5
 8001b40:	60e3      	str	r3, [r4, #12]
 8001b42:	e01a      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001b44:	6802      	ldr	r2, [r0, #0]
 8001b46:	68d3      	ldr	r3, [r2, #12]
 8001b48:	688c      	ldr	r4, [r1, #8]
 8001b4a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8001b4e:	60d3      	str	r3, [r2, #12]
 8001b50:	e013      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x92>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b52:	6805      	ldr	r5, [r0, #0]
 8001b54:	692a      	ldr	r2, [r5, #16]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b5c:	2407      	movs	r4, #7
 8001b5e:	fa04 f303 	lsl.w	r3, r4, r3
 8001b62:	ea22 0303 	bic.w	r3, r2, r3
 8001b66:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b68:	6804      	ldr	r4, [r0, #0]
 8001b6a:	6925      	ldr	r5, [r4, #16]
 8001b6c:	880b      	ldrh	r3, [r1, #0]
 8001b6e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001b72:	688b      	ldr	r3, [r1, #8]
 8001b74:	4093      	lsls	r3, r2
 8001b76:	432b      	orrs	r3, r5
 8001b78:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7)
 8001b7a:	684b      	ldr	r3, [r1, #4]
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d820      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0xda>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b80:	6805      	ldr	r5, [r0, #0]
 8001b82:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b88:	3b05      	subs	r3, #5
 8001b8a:	241f      	movs	r4, #31
 8001b8c:	fa04 f303 	lsl.w	r3, r4, r3
 8001b90:	ea22 0303 	bic.w	r3, r2, r3
 8001b94:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b96:	6804      	ldr	r4, [r0, #0]
 8001b98:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001b9a:	880a      	ldrh	r2, [r1, #0]
 8001b9c:	684b      	ldr	r3, [r1, #4]
 8001b9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ba2:	3b05      	subs	r3, #5
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	432b      	orrs	r3, r5
 8001baa:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001bac:	6802      	ldr	r2, [r0, #0]
 8001bae:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_ADC_ConfigChannel+0x1c0>)
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d036      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001bba:	4618      	mov	r0, r3
}
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bc30      	pop	{r4, r5}
 8001bc0:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d816      	bhi.n	8001bf4 <HAL_ADC_ConfigChannel+0x10c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bc6:	6805      	ldr	r5, [r0, #0]
 8001bc8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001bca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bce:	3b23      	subs	r3, #35	; 0x23
 8001bd0:	241f      	movs	r4, #31
 8001bd2:	fa04 f303 	lsl.w	r3, r4, r3
 8001bd6:	ea22 0303 	bic.w	r3, r2, r3
 8001bda:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bdc:	6804      	ldr	r4, [r0, #0]
 8001bde:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001be0:	880a      	ldrh	r2, [r1, #0]
 8001be2:	684b      	ldr	r3, [r1, #4]
 8001be4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001be8:	3b23      	subs	r3, #35	; 0x23
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	432b      	orrs	r3, r5
 8001bf0:	6323      	str	r3, [r4, #48]	; 0x30
 8001bf2:	e7db      	b.n	8001bac <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bf4:	6805      	ldr	r5, [r0, #0]
 8001bf6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001bf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bfc:	3b41      	subs	r3, #65	; 0x41
 8001bfe:	241f      	movs	r4, #31
 8001c00:	fa04 f303 	lsl.w	r3, r4, r3
 8001c04:	ea22 0303 	bic.w	r3, r2, r3
 8001c08:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c0a:	6804      	ldr	r4, [r0, #0]
 8001c0c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001c0e:	880a      	ldrh	r2, [r1, #0]
 8001c10:	684b      	ldr	r3, [r1, #4]
 8001c12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c16:	3b41      	subs	r3, #65	; 0x41
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	432b      	orrs	r3, r5
 8001c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c20:	e7c4      	b.n	8001bac <HAL_ADC_ConfigChannel+0xc4>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001c22:	680b      	ldr	r3, [r1, #0]
 8001c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c28:	d025      	beq.n	8001c76 <HAL_ADC_ConfigChannel+0x18e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c2a:	680b      	ldr	r3, [r1, #0]
 8001c2c:	2b12      	cmp	r3, #18
 8001c2e:	d02c      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x1a2>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c30:	680b      	ldr	r3, [r1, #0]
 8001c32:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_ADC_ConfigChannel+0x1bc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d001      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0x154>
 8001c38:	2b11      	cmp	r3, #17
 8001c3a:	d1bb      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0xcc>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_ADC_ConfigChannel+0x1c4>)
 8001c3e:	6853      	ldr	r3, [r2, #4]
 8001c40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c44:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c46:	680a      	ldr	r2, [r1, #0]
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_ADC_ConfigChannel+0x1bc>)
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d1b2      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0xcc>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_ADC_ConfigChannel+0x1c8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <HAL_ADC_ConfigChannel+0x1cc>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9b      	lsrs	r3, r3, #18
 8001c5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001c62:	9b01      	ldr	r3, [sp, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0a5      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0xcc>
        counter--;
 8001c68:	9b01      	ldr	r3, [sp, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001c6e:	9b01      	ldr	r3, [sp, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f9      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x180>
 8001c74:	e79e      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0xcc>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_ADC_ConfigChannel+0x1c4>)
 8001c78:	6853      	ldr	r3, [r2, #4]
 8001c7a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c7e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c80:	6802      	ldr	r2, [r0, #0]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_ADC_ConfigChannel+0x1c0>)
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d0d0      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x142>
 8001c88:	e794      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0xcc>
    ADC->CCR |= ADC_CCR_VBATE;
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_ADC_ConfigChannel+0x1c4>)
 8001c8c:	6853      	ldr	r3, [r2, #4]
 8001c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c92:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c94:	6802      	ldr	r2, [r0, #0]
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_ADC_ConfigChannel+0x1c0>)
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d0c9      	beq.n	8001c30 <HAL_ADC_ConfigChannel+0x148>
 8001c9c:	e78a      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_LOCK(hadc);
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	e78c      	b.n	8001bbc <HAL_ADC_ConfigChannel+0xd4>
 8001ca2:	bf00      	nop
 8001ca4:	10000012 	.word	0x10000012
 8001ca8:	40012000 	.word	0x40012000
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	431bde83 	.word	0x431bde83

08001cb8 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	f000 808a 	beq.w	8001dd2 <HAL_CAN_Init+0x11a>
{
 8001cbe:	b538      	push	{r3, r4, r5, lr}
 8001cc0:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cc2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001cc6:	b1d3      	cbz	r3, 8001cfe <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cc8:	6822      	ldr	r2, [r4, #0]
 8001cca:	6813      	ldr	r3, [r2, #0]
 8001ccc:	f023 0302 	bic.w	r3, r3, #2
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd2:	f7ff fe09 	bl	80018e8 <HAL_GetTick>
 8001cd6:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	f012 0f02 	tst.w	r2, #2
 8001ce0:	d010      	beq.n	8001d04 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce2:	f7ff fe01 	bl	80018e8 <HAL_GetTick>
 8001ce6:	1b40      	subs	r0, r0, r5
 8001ce8:	280a      	cmp	r0, #10
 8001cea:	d9f5      	bls.n	8001cd8 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf2:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001cfa:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001cfc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001cfe:	f7ff f81b 	bl	8000d38 <HAL_CAN_MspInit>
 8001d02:	e7e1      	b.n	8001cc8 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001d0c:	f7ff fdec 	bl	80018e8 <HAL_GetTick>
 8001d10:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	f012 0f01 	tst.w	r2, #1
 8001d1a:	d10d      	bne.n	8001d38 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d1c:	f7ff fde4 	bl	80018e8 <HAL_GetTick>
 8001d20:	1b40      	subs	r0, r0, r5
 8001d22:	280a      	cmp	r0, #10
 8001d24:	d9f5      	bls.n	8001d12 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001d34:	2001      	movs	r0, #1
 8001d36:	e7e1      	b.n	8001cfc <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d38:	7e22      	ldrb	r2, [r4, #24]
 8001d3a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	bf0c      	ite	eq
 8001d40:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d44:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001d48:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d4a:	7e63      	ldrb	r3, [r4, #25]
 8001d4c:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d4e:	6822      	ldr	r2, [r4, #0]
 8001d50:	6813      	ldr	r3, [r2, #0]
 8001d52:	bf0c      	ite	eq
 8001d54:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d58:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8001d5c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d5e:	7ea3      	ldrb	r3, [r4, #26]
 8001d60:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d62:	6822      	ldr	r2, [r4, #0]
 8001d64:	6813      	ldr	r3, [r2, #0]
 8001d66:	bf0c      	ite	eq
 8001d68:	f043 0320 	orreq.w	r3, r3, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d6c:	f023 0320 	bicne.w	r3, r3, #32
 8001d70:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d72:	7ee3      	ldrb	r3, [r4, #27]
 8001d74:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d76:	6822      	ldr	r2, [r4, #0]
 8001d78:	6813      	ldr	r3, [r2, #0]
 8001d7a:	bf0c      	ite	eq
 8001d7c:	f023 0310 	biceq.w	r3, r3, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d80:	f043 0310 	orrne.w	r3, r3, #16
 8001d84:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d86:	7f23      	ldrb	r3, [r4, #28]
 8001d88:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	6813      	ldr	r3, [r2, #0]
 8001d8e:	bf0c      	ite	eq
 8001d90:	f043 0308 	orreq.w	r3, r3, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d94:	f023 0308 	bicne.w	r3, r3, #8
 8001d98:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d9a:	7f63      	ldrb	r3, [r4, #29]
 8001d9c:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d9e:	6822      	ldr	r2, [r4, #0]
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	bf0c      	ite	eq
 8001da4:	f043 0304 	orreq.w	r3, r3, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001da8:	f023 0304 	bicne.w	r3, r3, #4
 8001dac:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dae:	6821      	ldr	r1, [r4, #0]
 8001db0:	68a3      	ldr	r3, [r4, #8]
 8001db2:	68e2      	ldr	r2, [r4, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	6922      	ldr	r2, [r4, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	6962      	ldr	r2, [r4, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	6862      	ldr	r2, [r4, #4]
 8001dc0:	3a01      	subs	r2, #1
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001dd0:	e794      	b.n	8001cfc <HAL_CAN_Init+0x44>
    return HAL_ERROR;
 8001dd2:	2001      	movs	r0, #1
}
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001dda:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	0200      	lsls	r0, r0, #8
 8001dde:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001de6:	041b      	lsls	r3, r3, #16
 8001de8:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dea:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001dec:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001dee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001df0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00
 8001df8:	05fa0000 	.word	0x05fa0000

08001dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_NVIC_SetPriority+0x54>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e06:	f1c3 0407 	rsb	r4, r3, #7
 8001e0a:	2c04      	cmp	r4, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e10:	1d1d      	adds	r5, r3, #4
 8001e12:	2d06      	cmp	r5, #6
 8001e14:	bf8c      	ite	hi
 8001e16:	3b03      	subhi	r3, #3
 8001e18:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1a:	f04f 35ff 	mov.w	r5, #4294967295
 8001e1e:	fa05 f404 	lsl.w	r4, r5, r4
 8001e22:	ea21 0104 	bic.w	r1, r1, r4
 8001e26:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	fa05 f303 	lsl.w	r3, r5, r3
 8001e2c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001e32:	2800      	cmp	r0, #0
 8001e34:	db05      	blt.n	8001e42 <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	0109      	lsls	r1, r1, #4
 8001e38:	b2c9      	uxtb	r1, r1
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_NVIC_SetPriority+0x58>)
 8001e3c:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e3e:	bc30      	pop	{r4, r5}
 8001e40:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	f000 000f 	and.w	r0, r0, #15
 8001e46:	0109      	lsls	r1, r1, #4
 8001e48:	b2c9      	uxtb	r1, r1
 8001e4a:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_NVIC_SetPriority+0x5c>)
 8001e4c:	5419      	strb	r1, [r3, r0]
 8001e4e:	e7f6      	b.n	8001e3e <HAL_NVIC_SetPriority+0x42>
 8001e50:	e000ed00 	.word	0xe000ed00
 8001e54:	e000e400 	.word	0xe000e400
 8001e58:	e000ed14 	.word	0xe000ed14

08001e5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	3801      	subs	r0, #1
 8001e5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e62:	d20a      	bcs.n	8001e7a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_SYSTICK_Config+0x24>)
 8001e66:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_SYSTICK_Config+0x28>)
 8001e6a:	21f0      	movs	r1, #240	; 0xf0
 8001e6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	2000      	movs	r0, #0
 8001e72:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e8c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e90:	4f74      	ldr	r7, [pc, #464]	; (8002064 <HAL_GPIO_Init+0x1dc>)
 8001e92:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8002070 <HAL_GPIO_Init+0x1e8>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e96:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8002074 <HAL_GPIO_Init+0x1ec>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9a:	4e73      	ldr	r6, [pc, #460]	; (8002068 <HAL_GPIO_Init+0x1e0>)
 8001e9c:	e030      	b.n	8001f00 <HAL_GPIO_Init+0x78>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	fa02 f209 	lsl.w	r2, r2, r9
 8001ea4:	ea42 020a 	orr.w	r2, r2, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ea8:	f8c8 2008 	str.w	r2, [r8, #8]
        temp = EXTI->IMR;
 8001eac:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	ea6f 0805 	mvn.w	r8, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb2:	684c      	ldr	r4, [r1, #4]
 8001eb4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	bf0c      	ite	eq
 8001eba:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001ebe:	432a      	orrne	r2, r5
        }
        EXTI->IMR = temp;
 8001ec0:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 8001ec2:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	684c      	ldr	r4, [r1, #4]
 8001ec6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001eca:	bf0c      	ite	eq
 8001ecc:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001ed0:	432a      	orrne	r2, r5
        }
        EXTI->EMR = temp;
 8001ed2:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed4:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed6:	684c      	ldr	r4, [r1, #4]
 8001ed8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001edc:	bf0c      	ite	eq
 8001ede:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001ee2:	432a      	orrne	r2, r5
        }
        EXTI->RTSR = temp;
 8001ee4:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001ee6:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	684c      	ldr	r4, [r1, #4]
 8001eea:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001eee:	bf0c      	ite	eq
 8001ef0:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001ef4:	432a      	orrne	r2, r5
        }
        EXTI->FTSR = temp;
 8001ef6:	60f2      	str	r2, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ef8:	3301      	adds	r3, #1
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	f000 80af 	beq.w	800205e <HAL_GPIO_Init+0x1d6>
    ioposition = ((uint32_t)0x01) << position;
 8001f00:	2201      	movs	r2, #1
 8001f02:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f04:	680c      	ldr	r4, [r1, #0]
 8001f06:	ea02 0504 	and.w	r5, r2, r4
    if(iocurrent == ioposition)
 8001f0a:	ea32 0404 	bics.w	r4, r2, r4
 8001f0e:	d1f3      	bne.n	8001ef8 <HAL_GPIO_Init+0x70>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f10:	684c      	ldr	r4, [r1, #4]
 8001f12:	f024 0410 	bic.w	r4, r4, #16
 8001f16:	3c01      	subs	r4, #1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	2c01      	cmp	r4, #1
 8001f1a:	d818      	bhi.n	8001f4e <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8001f1c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f1e:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8001f22:	f04f 0803 	mov.w	r8, #3
 8001f26:	fa08 f809 	lsl.w	r8, r8, r9
 8001f2a:	ea24 0808 	bic.w	r8, r4, r8
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f2e:	68cc      	ldr	r4, [r1, #12]
 8001f30:	fa04 f409 	lsl.w	r4, r4, r9
 8001f34:	ea44 0408 	orr.w	r4, r4, r8
        GPIOx->OSPEEDR = temp;
 8001f38:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f3a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f3c:	ea24 0802 	bic.w	r8, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f40:	684c      	ldr	r4, [r1, #4]
 8001f42:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001f46:	409a      	lsls	r2, r3
 8001f48:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->OTYPER = temp;
 8001f4c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001f4e:	f8d0 900c 	ldr.w	r9, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f52:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001f56:	2403      	movs	r4, #3
 8001f58:	fa04 f408 	lsl.w	r4, r4, r8
 8001f5c:	43e2      	mvns	r2, r4
 8001f5e:	ea29 0904 	bic.w	r9, r9, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f62:	688c      	ldr	r4, [r1, #8]
 8001f64:	fa04 f408 	lsl.w	r4, r4, r8
 8001f68:	ea44 0409 	orr.w	r4, r4, r9
      GPIOx->PUPDR = temp;
 8001f6c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6e:	684c      	ldr	r4, [r1, #4]
 8001f70:	f024 0410 	bic.w	r4, r4, #16
 8001f74:	2c02      	cmp	r4, #2
 8001f76:	d115      	bne.n	8001fa4 <HAL_GPIO_Init+0x11c>
        temp = GPIOx->AFR[position >> 3];
 8001f78:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001f7c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8001f80:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f84:	f003 0407 	and.w	r4, r3, #7
 8001f88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8001f8c:	240f      	movs	r4, #15
 8001f8e:	fa04 f40b 	lsl.w	r4, r4, fp
 8001f92:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f96:	690c      	ldr	r4, [r1, #16]
 8001f98:	fa04 f40b 	lsl.w	r4, r4, fp
 8001f9c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3] = temp;
 8001fa0:	f8c9 4020 	str.w	r4, [r9, #32]
      temp = GPIOx->MODER;
 8001fa4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fa6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fa8:	684a      	ldr	r2, [r1, #4]
 8001faa:	f002 0203 	and.w	r2, r2, #3
 8001fae:	fa02 f208 	lsl.w	r2, r2, r8
 8001fb2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001fb4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb6:	684a      	ldr	r2, [r1, #4]
 8001fb8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001fbc:	d09c      	beq.n	8001ef8 <HAL_GPIO_Init+0x70>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fc4:	647a      	str	r2, [r7, #68]	; 0x44
 8001fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fc8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001fcc:	9201      	str	r2, [sp, #4]
 8001fce:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001fd0:	f023 0803 	bic.w	r8, r3, #3
 8001fd4:	44e0      	add	r8, ip
 8001fd6:	f8d8 4008 	ldr.w	r4, [r8, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fda:	f003 0203 	and.w	r2, r3, #3
 8001fde:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f209 	lsl.w	r2, r2, r9
 8001fe8:	ea24 0a02 	bic.w	sl, r4, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fec:	4570      	cmp	r0, lr
 8001fee:	f43f af56 	beq.w	8001e9e <HAL_GPIO_Init+0x16>
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_GPIO_Init+0x1e4>)
 8001ff4:	4290      	cmp	r0, r2
 8001ff6:	d022      	beq.n	800203e <HAL_GPIO_Init+0x1b6>
 8001ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ffc:	4290      	cmp	r0, r2
 8001ffe:	d020      	beq.n	8002042 <HAL_GPIO_Init+0x1ba>
 8002000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002004:	4290      	cmp	r0, r2
 8002006:	d01e      	beq.n	8002046 <HAL_GPIO_Init+0x1be>
 8002008:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800200c:	4290      	cmp	r0, r2
 800200e:	d01c      	beq.n	800204a <HAL_GPIO_Init+0x1c2>
 8002010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002014:	4290      	cmp	r0, r2
 8002016:	d01a      	beq.n	800204e <HAL_GPIO_Init+0x1c6>
 8002018:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800201c:	4290      	cmp	r0, r2
 800201e:	d018      	beq.n	8002052 <HAL_GPIO_Init+0x1ca>
 8002020:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002024:	4290      	cmp	r0, r2
 8002026:	d016      	beq.n	8002056 <HAL_GPIO_Init+0x1ce>
 8002028:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800202c:	4290      	cmp	r0, r2
 800202e:	d014      	beq.n	800205a <HAL_GPIO_Init+0x1d2>
 8002030:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002034:	4290      	cmp	r0, r2
 8002036:	bf0c      	ite	eq
 8002038:	2209      	moveq	r2, #9
 800203a:	220a      	movne	r2, #10
 800203c:	e730      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
 800203e:	2201      	movs	r2, #1
 8002040:	e72e      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
 8002042:	2202      	movs	r2, #2
 8002044:	e72c      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
 8002046:	2203      	movs	r2, #3
 8002048:	e72a      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
 800204a:	2204      	movs	r2, #4
 800204c:	e728      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
 800204e:	2205      	movs	r2, #5
 8002050:	e726      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
 8002052:	2206      	movs	r2, #6
 8002054:	e724      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
 8002056:	2207      	movs	r2, #7
 8002058:	e722      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
 800205a:	2208      	movs	r2, #8
 800205c:	e720      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
      }
    }
  }
}
 800205e:	b003      	add	sp, #12
 8002060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	40013c00 	.word	0x40013c00
 800206c:	40020400 	.word	0x40020400
 8002070:	40013800 	.word	0x40013800
 8002074:	40020000 	.word	0x40020000

08002078 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002078:	b10a      	cbz	r2, 800207e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207a:	6181      	str	r1, [r0, #24]
 800207c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800207e:	0409      	lsls	r1, r1, #16
 8002080:	6181      	str	r1, [r0, #24]
  }
}
 8002082:	4770      	bx	lr

08002084 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002084:	b530      	push	{r4, r5, lr}
 8002086:	b083      	sub	sp, #12
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_PWREx_EnableOverDrive+0x74>)
 800208a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800208c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_PWREx_EnableOverDrive+0x78>)
 800209e:	6813      	ldr	r3, [r2, #0]
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020a6:	f7ff fc1f 	bl	80018e8 <HAL_GetTick>
 80020aa:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020ac:	4d13      	ldr	r5, [pc, #76]	; (80020fc <HAL_PWREx_EnableOverDrive+0x78>)
 80020ae:	686b      	ldr	r3, [r5, #4]
 80020b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80020b4:	d108      	bne.n	80020c8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020b6:	f7ff fc17 	bl	80018e8 <HAL_GetTick>
 80020ba:	1b00      	subs	r0, r0, r4
 80020bc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020c0:	d9f5      	bls.n	80020ae <HAL_PWREx_EnableOverDrive+0x2a>
    {
      return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80020c4:	b003      	add	sp, #12
 80020c6:	bd30      	pop	{r4, r5, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020c8:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <HAL_PWREx_EnableOverDrive+0x78>)
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80020d2:	f7ff fc09 	bl	80018e8 <HAL_GetTick>
 80020d6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020d8:	4d08      	ldr	r5, [pc, #32]	; (80020fc <HAL_PWREx_EnableOverDrive+0x78>)
 80020da:	686b      	ldr	r3, [r5, #4]
 80020dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020e0:	d107      	bne.n	80020f2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020e2:	f7ff fc01 	bl	80018e8 <HAL_GetTick>
 80020e6:	1b00      	subs	r0, r0, r4
 80020e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020ec:	d9f5      	bls.n	80020da <HAL_PWREx_EnableOverDrive+0x56>
      return HAL_TIMEOUT;
 80020ee:	2003      	movs	r0, #3
 80020f0:	e7e8      	b.n	80020c4 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80020f2:	2000      	movs	r0, #0
 80020f4:	e7e6      	b.n	80020c4 <HAL_PWREx_EnableOverDrive+0x40>
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000

08002100 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002100:	2800      	cmp	r0, #0
 8002102:	f000 8209 	beq.w	8002518 <HAL_RCC_OscConfig+0x418>
{
 8002106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	6803      	ldr	r3, [r0, #0]
 8002110:	f013 0f01 	tst.w	r3, #1
 8002114:	d029      	beq.n	800216a <HAL_RCC_OscConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002116:	4ba8      	ldr	r3, [pc, #672]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b04      	cmp	r3, #4
 8002120:	d01a      	beq.n	8002158 <HAL_RCC_OscConfig+0x58>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002122:	4ba5      	ldr	r3, [pc, #660]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d00f      	beq.n	800214e <HAL_RCC_OscConfig+0x4e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	6863      	ldr	r3, [r4, #4]
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002134:	d040      	beq.n	80021b8 <HAL_RCC_OscConfig+0xb8>
 8002136:	2b00      	cmp	r3, #0
 8002138:	d154      	bne.n	80021e4 <HAL_RCC_OscConfig+0xe4>
 800213a:	4b9f      	ldr	r3, [pc, #636]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e039      	b.n	80021c2 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	4b9a      	ldr	r3, [pc, #616]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002156:	d0ea      	beq.n	800212e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4b97      	ldr	r3, [pc, #604]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002160:	d003      	beq.n	800216a <HAL_RCC_OscConfig+0x6a>
 8002162:	6863      	ldr	r3, [r4, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 81d9 	beq.w	800251c <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	f013 0f02 	tst.w	r3, #2
 8002170:	d074      	beq.n	800225c <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002172:	4b91      	ldr	r3, [pc, #580]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f013 0f0c 	tst.w	r3, #12
 800217a:	d05e      	beq.n	800223a <HAL_RCC_OscConfig+0x13a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217c:	4b8e      	ldr	r3, [pc, #568]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d053      	beq.n	8002230 <HAL_RCC_OscConfig+0x130>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002188:	68e3      	ldr	r3, [r4, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8089 	beq.w	80022a2 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002190:	4a89      	ldr	r2, [pc, #548]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002192:	6813      	ldr	r3, [r2, #0]
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff fba5 	bl	80018e8 <HAL_GetTick>
 800219e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	4e85      	ldr	r6, [pc, #532]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80021a2:	6833      	ldr	r3, [r6, #0]
 80021a4:	f013 0f02 	tst.w	r3, #2
 80021a8:	d172      	bne.n	8002290 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff fb9d 	bl	80018e8 <HAL_GetTick>
 80021ae:	1b40      	subs	r0, r0, r5
 80021b0:	2802      	cmp	r0, #2
 80021b2:	d9f6      	bls.n	80021a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 80021b4:	2003      	movs	r0, #3
 80021b6:	e1b6      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b8:	4a7f      	ldr	r2, [pc, #508]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c2:	6863      	ldr	r3, [r4, #4]
 80021c4:	b32b      	cbz	r3, 8002212 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 80021c6:	f7ff fb8f 	bl	80018e8 <HAL_GetTick>
 80021ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021cc:	4e7a      	ldr	r6, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80021ce:	6833      	ldr	r3, [r6, #0]
 80021d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021d4:	d1c9      	bne.n	800216a <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d6:	f7ff fb87 	bl	80018e8 <HAL_GetTick>
 80021da:	1b40      	subs	r0, r0, r5
 80021dc:	2864      	cmp	r0, #100	; 0x64
 80021de:	d9f6      	bls.n	80021ce <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 80021e0:	2003      	movs	r0, #3
 80021e2:	e1a0      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_OscConfig+0xfe>
 80021ea:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e7e1      	b.n	80021c2 <HAL_RCC_OscConfig+0xc2>
 80021fe:	4b6e      	ldr	r3, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e7d7      	b.n	80021c2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002212:	f7ff fb69 	bl	80018e8 <HAL_GetTick>
 8002216:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002218:	4e67      	ldr	r6, [pc, #412]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800221a:	6833      	ldr	r3, [r6, #0]
 800221c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002220:	d0a3      	beq.n	800216a <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002222:	f7ff fb61 	bl	80018e8 <HAL_GetTick>
 8002226:	1b40      	subs	r0, r0, r5
 8002228:	2864      	cmp	r0, #100	; 0x64
 800222a:	d9f6      	bls.n	800221a <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 800222c:	2003      	movs	r0, #3
 800222e:	e17a      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002230:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002238:	d1a6      	bne.n	8002188 <HAL_RCC_OscConfig+0x88>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f013 0f02 	tst.w	r3, #2
 8002242:	d003      	beq.n	800224c <HAL_RCC_OscConfig+0x14c>
 8002244:	68e3      	ldr	r3, [r4, #12]
 8002246:	2b01      	cmp	r3, #1
 8002248:	f040 816a 	bne.w	8002520 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4a5a      	ldr	r2, [pc, #360]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800224e:	6813      	ldr	r3, [r2, #0]
 8002250:	6921      	ldr	r1, [r4, #16]
 8002252:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002256:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800225a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	f013 0f08 	tst.w	r3, #8
 8002262:	d046      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002264:	6963      	ldr	r3, [r4, #20]
 8002266:	b383      	cbz	r3, 80022ca <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002268:	4a53      	ldr	r2, [pc, #332]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800226a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7ff fb39 	bl	80018e8 <HAL_GetTick>
 8002276:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002278:	4e4f      	ldr	r6, [pc, #316]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800227a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800227c:	f013 0f02 	tst.w	r3, #2
 8002280:	d137      	bne.n	80022f2 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002282:	f7ff fb31 	bl	80018e8 <HAL_GetTick>
 8002286:	1b40      	subs	r0, r0, r5
 8002288:	2802      	cmp	r0, #2
 800228a:	d9f6      	bls.n	800227a <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800228c:	2003      	movs	r0, #3
 800228e:	e14a      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4a49      	ldr	r2, [pc, #292]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002292:	6813      	ldr	r3, [r2, #0]
 8002294:	6921      	ldr	r1, [r4, #16]
 8002296:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800229a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e7dc      	b.n	800225c <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4a45      	ldr	r2, [pc, #276]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80022a4:	6813      	ldr	r3, [r2, #0]
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80022ac:	f7ff fb1c 	bl	80018e8 <HAL_GetTick>
 80022b0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	4e41      	ldr	r6, [pc, #260]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80022b4:	6833      	ldr	r3, [r6, #0]
 80022b6:	f013 0f02 	tst.w	r3, #2
 80022ba:	d0cf      	beq.n	800225c <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022bc:	f7ff fb14 	bl	80018e8 <HAL_GetTick>
 80022c0:	1b40      	subs	r0, r0, r5
 80022c2:	2802      	cmp	r0, #2
 80022c4:	d9f6      	bls.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80022c6:	2003      	movs	r0, #3
 80022c8:	e12d      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ca:	4a3b      	ldr	r2, [pc, #236]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80022cc:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7ff fb08 	bl	80018e8 <HAL_GetTick>
 80022d8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022da:	4e37      	ldr	r6, [pc, #220]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80022dc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80022de:	f013 0f02 	tst.w	r3, #2
 80022e2:	d006      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff fb00 	bl	80018e8 <HAL_GetTick>
 80022e8:	1b40      	subs	r0, r0, r5
 80022ea:	2802      	cmp	r0, #2
 80022ec:	d9f6      	bls.n	80022dc <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 80022ee:	2003      	movs	r0, #3
 80022f0:	e119      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	f013 0f04 	tst.w	r3, #4
 80022f8:	d07e      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002302:	d10b      	bne.n	800231c <HAL_RCC_OscConfig+0x21c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002308:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002318:	2501      	movs	r5, #1
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x21e>
  FlagStatus pwrclkchanged = RESET;
 800231c:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231e:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_RCC_OscConfig+0x2bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002326:	d00e      	beq.n	8002346 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	68a3      	ldr	r3, [r4, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d01f      	beq.n	800236e <HAL_RCC_OscConfig+0x26e>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d135      	bne.n	800239e <HAL_RCC_OscConfig+0x29e>
 8002332:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	671a      	str	r2, [r3, #112]	; 0x70
 800233c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800233e:	f022 0204 	bic.w	r2, r2, #4
 8002342:	671a      	str	r2, [r3, #112]	; 0x70
 8002344:	e018      	b.n	8002378 <HAL_RCC_OscConfig+0x278>
      PWR->CR1 |= PWR_CR1_DBP;
 8002346:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <HAL_RCC_OscConfig+0x2bc>)
 8002348:	6813      	ldr	r3, [r2, #0]
 800234a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002350:	f7ff faca 	bl	80018e8 <HAL_GetTick>
 8002354:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002356:	4f19      	ldr	r7, [pc, #100]	; (80023bc <HAL_RCC_OscConfig+0x2bc>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800235e:	d1e3      	bne.n	8002328 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7ff fac2 	bl	80018e8 <HAL_GetTick>
 8002364:	1b80      	subs	r0, r0, r6
 8002366:	2864      	cmp	r0, #100	; 0x64
 8002368:	d9f6      	bls.n	8002358 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 800236a:	2003      	movs	r0, #3
 800236c:	e0db      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002370:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002378:	68a3      	ldr	r3, [r4, #8]
 800237a:	b35b      	cbz	r3, 80023d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7ff fab4 	bl	80018e8 <HAL_GetTick>
 8002380:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	4f0d      	ldr	r7, [pc, #52]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002384:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800238a:	f013 0f02 	tst.w	r3, #2
 800238e:	d132      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7ff faaa 	bl	80018e8 <HAL_GetTick>
 8002394:	1b80      	subs	r0, r0, r6
 8002396:	4540      	cmp	r0, r8
 8002398:	d9f6      	bls.n	8002388 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800239a:	2003      	movs	r0, #3
 800239c:	e0c3      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d00e      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2c0>
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 80023a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	671a      	str	r2, [r3, #112]	; 0x70
 80023ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	671a      	str	r2, [r3, #112]	; 0x70
 80023b4:	e7e0      	b.n	8002378 <HAL_RCC_OscConfig+0x278>
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000
 80023c0:	4b60      	ldr	r3, [pc, #384]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 80023c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023c4:	f042 0204 	orr.w	r2, r2, #4
 80023c8:	671a      	str	r2, [r3, #112]	; 0x70
 80023ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	671a      	str	r2, [r3, #112]	; 0x70
 80023d2:	e7d1      	b.n	8002378 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7ff fa88 	bl	80018e8 <HAL_GetTick>
 80023d8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023da:	4f5a      	ldr	r7, [pc, #360]	; (8002544 <HAL_RCC_OscConfig+0x444>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023dc:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e2:	f013 0f02 	tst.w	r3, #2
 80023e6:	d006      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7ff fa7e 	bl	80018e8 <HAL_GetTick>
 80023ec:	1b80      	subs	r0, r0, r6
 80023ee:	4540      	cmp	r0, r8
 80023f0:	d9f6      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 80023f2:	2003      	movs	r0, #3
 80023f4:	e097      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023f6:	b9fd      	cbnz	r5, 8002438 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f8:	69a3      	ldr	r3, [r4, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8092 	beq.w	8002524 <HAL_RCC_OscConfig+0x424>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002400:	4a50      	ldr	r2, [pc, #320]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 8002402:	6892      	ldr	r2, [r2, #8]
 8002404:	f002 020c 	and.w	r2, r2, #12
 8002408:	2a08      	cmp	r2, #8
 800240a:	d059      	beq.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240c:	2b02      	cmp	r3, #2
 800240e:	d019      	beq.n	8002444 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002410:	4a4c      	ldr	r2, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 8002412:	6813      	ldr	r3, [r2, #0]
 8002414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff fa65 	bl	80018e8 <HAL_GetTick>
 800241e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002420:	4d48      	ldr	r5, [pc, #288]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 8002422:	682b      	ldr	r3, [r5, #0]
 8002424:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002428:	d048      	beq.n	80024bc <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff fa5d 	bl	80018e8 <HAL_GetTick>
 800242e:	1b00      	subs	r0, r0, r4
 8002430:	2802      	cmp	r0, #2
 8002432:	d9f6      	bls.n	8002422 <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 8002434:	2003      	movs	r0, #3
 8002436:	e076      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002438:	4a42      	ldr	r2, [pc, #264]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 800243a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	e7d9      	b.n	80023f8 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002444:	4a3f      	ldr	r2, [pc, #252]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800244e:	f7ff fa4b 	bl	80018e8 <HAL_GetTick>
 8002452:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002454:	4e3b      	ldr	r6, [pc, #236]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 8002456:	6833      	ldr	r3, [r6, #0]
 8002458:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800245c:	d006      	beq.n	800246c <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245e:	f7ff fa43 	bl	80018e8 <HAL_GetTick>
 8002462:	1b40      	subs	r0, r0, r5
 8002464:	2802      	cmp	r0, #2
 8002466:	d9f6      	bls.n	8002456 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8002468:	2003      	movs	r0, #3
 800246a:	e05c      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	69e3      	ldr	r3, [r4, #28]
 800246e:	6a22      	ldr	r2, [r4, #32]
 8002470:	4313      	orrs	r3, r2
 8002472:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002474:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002478:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800247a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800247e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002480:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002484:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002486:	0852      	lsrs	r2, r2, #1
 8002488:	3a01      	subs	r2, #1
 800248a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800248e:	4a2d      	ldr	r2, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 8002490:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002498:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800249a:	f7ff fa25 	bl	80018e8 <HAL_GetTick>
 800249e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a0:	4d28      	ldr	r5, [pc, #160]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff fa1d 	bl	80018e8 <HAL_GetTick>
 80024ae:	1b00      	subs	r0, r0, r4
 80024b0:	2802      	cmp	r0, #2
 80024b2:	d9f6      	bls.n	80024a2 <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 80024b4:	2003      	movs	r0, #3
 80024b6:	e036      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80024b8:	2000      	movs	r0, #0
 80024ba:	e034      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
 80024bc:	2000      	movs	r0, #0
 80024be:	e032      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
      pll_config = RCC->PLLCFGR;
 80024c0:	4a20      	ldr	r2, [pc, #128]	; (8002544 <HAL_RCC_OscConfig+0x444>)
 80024c2:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d031      	beq.n	800252c <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024cc:	69e1      	ldr	r1, [r4, #28]
 80024ce:	428b      	cmp	r3, r1
 80024d0:	d12e      	bne.n	8002530 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	6a21      	ldr	r1, [r4, #32]
 80024d8:	428b      	cmp	r3, r1
 80024da:	d12b      	bne.n	8002534 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024e2:	4013      	ands	r3, r2
 80024e4:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80024e8:	d126      	bne.n	8002538 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024ea:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80024ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f4:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80024f8:	d120      	bne.n	800253c <HAL_RCC_OscConfig+0x43c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024fa:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 80024fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002500:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8002504:	d11c      	bne.n	8002540 <HAL_RCC_OscConfig+0x440>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002508:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 8002510:	bf14      	ite	ne
 8002512:	2001      	movne	r0, #1
 8002514:	2000      	moveq	r0, #0
 8002516:	e006      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
    return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
}
 800251a:	4770      	bx	lr
        return HAL_ERROR;
 800251c:	2001      	movs	r0, #1
 800251e:	e002      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
        return HAL_ERROR;
 8002520:	2001      	movs	r0, #1
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
  return HAL_OK;
 8002524:	2000      	movs	r0, #0
}
 8002526:	b002      	add	sp, #8
 8002528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800252c:	2001      	movs	r0, #1
 800252e:	e7fa      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
 8002530:	2001      	movs	r0, #1
 8002532:	e7f8      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
 8002534:	2001      	movs	r0, #1
 8002536:	e7f6      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
 8002538:	2001      	movs	r0, #1
 800253a:	e7f4      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
 800253c:	2001      	movs	r0, #1
 800253e:	e7f2      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
 8002540:	2001      	movs	r0, #1
 8002542:	e7f0      	b.n	8002526 <HAL_RCC_OscConfig+0x426>
 8002544:	40023800 	.word	0x40023800

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d03d      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x8a>
 8002556:	2b08      	cmp	r3, #8
 8002558:	d13d      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002568:	d012      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002572:	2300      	movs	r3, #0
 8002574:	481a      	ldr	r0, [pc, #104]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002576:	fba1 0100 	umull	r0, r1, r1, r0
 800257a:	f7fd fe65 	bl	8000248 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002586:	3301      	adds	r3, #1
 8002588:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800258a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800258e:	e023      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002598:	015c      	lsls	r4, r3, #5
 800259a:	2500      	movs	r5, #0
 800259c:	1ae4      	subs	r4, r4, r3
 800259e:	f165 0500 	sbc.w	r5, r5, #0
 80025a2:	01ae      	lsls	r6, r5, #6
 80025a4:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80025a8:	01a7      	lsls	r7, r4, #6
 80025aa:	1b38      	subs	r0, r7, r4
 80025ac:	eb66 0105 	sbc.w	r1, r6, r5
 80025b0:	00cc      	lsls	r4, r1, #3
 80025b2:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80025b6:	00c5      	lsls	r5, r0, #3
 80025b8:	18e8      	adds	r0, r5, r3
 80025ba:	f144 0100 	adc.w	r1, r4, #0
 80025be:	028b      	lsls	r3, r1, #10
 80025c0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80025c4:	0284      	lsls	r4, r0, #10
 80025c6:	4620      	mov	r0, r4
 80025c8:	4619      	mov	r1, r3
 80025ca:	2300      	movs	r3, #0
 80025cc:	f7fd fe3c 	bl	8000248 <__aeabi_uldivmod>
 80025d0:	e7d5      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d2:	4803      	ldr	r0, [pc, #12]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x90>
      sysclockfreq = HSI_VALUE;
 80025d6:	4803      	ldr	r0, [pc, #12]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	017d7840 	.word	0x017d7840
 80025e4:	00f42400 	.word	0x00f42400

080025e8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80025e8:	2800      	cmp	r0, #0
 80025ea:	f000 80a2 	beq.w	8002732 <HAL_RCC_ClockConfig+0x14a>
{
 80025ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f2:	460d      	mov	r5, r1
 80025f4:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f6:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_ClockConfig+0x15c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	428b      	cmp	r3, r1
 8002600:	d20b      	bcs.n	800261a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4a50      	ldr	r2, [pc, #320]	; (8002744 <HAL_RCC_ClockConfig+0x15c>)
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	f023 030f 	bic.w	r3, r3, #15
 800260a:	430b      	orrs	r3, r1
 800260c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	428b      	cmp	r3, r1
 8002616:	f040 808e 	bne.w	8002736 <HAL_RCC_ClockConfig+0x14e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	f013 0f02 	tst.w	r3, #2
 8002620:	d017      	beq.n	8002652 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002622:	f013 0f04 	tst.w	r3, #4
 8002626:	d004      	beq.n	8002632 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002628:	4a47      	ldr	r2, [pc, #284]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 800262a:	6893      	ldr	r3, [r2, #8]
 800262c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002630:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	f013 0f08 	tst.w	r3, #8
 8002638:	d004      	beq.n	8002644 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800263a:	4a43      	ldr	r2, [pc, #268]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 800263c:	6893      	ldr	r3, [r2, #8]
 800263e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002642:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4a40      	ldr	r2, [pc, #256]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 8002646:	6893      	ldr	r3, [r2, #8]
 8002648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800264c:	68a1      	ldr	r1, [r4, #8]
 800264e:	430b      	orrs	r3, r1
 8002650:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	f013 0f01 	tst.w	r3, #1
 8002658:	d031      	beq.n	80026be <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	6862      	ldr	r2, [r4, #4]
 800265c:	2a01      	cmp	r2, #1
 800265e:	d020      	beq.n	80026a2 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002660:	2a02      	cmp	r2, #2
 8002662:	d025      	beq.n	80026b0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	4b38      	ldr	r3, [pc, #224]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f013 0f02 	tst.w	r3, #2
 800266c:	d065      	beq.n	800273a <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266e:	4936      	ldr	r1, [pc, #216]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 8002670:	688b      	ldr	r3, [r1, #8]
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800267a:	f7ff f935 	bl	80018e8 <HAL_GetTick>
 800267e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002680:	4f31      	ldr	r7, [pc, #196]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002682:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	6862      	ldr	r2, [r4, #4]
 800268e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002692:	d014      	beq.n	80026be <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7ff f928 	bl	80018e8 <HAL_GetTick>
 8002698:	1b80      	subs	r0, r0, r6
 800269a:	4540      	cmp	r0, r8
 800269c:	d9f3      	bls.n	8002686 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800269e:	2003      	movs	r0, #3
 80026a0:	e045      	b.n	800272e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80026aa:	d1e0      	bne.n	800266e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e03e      	b.n	800272e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80026b8:	d1d9      	bne.n	800266e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80026ba:	2001      	movs	r0, #1
 80026bc:	e037      	b.n	800272e <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <HAL_RCC_ClockConfig+0x15c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	42ab      	cmp	r3, r5
 80026c8:	d90a      	bls.n	80026e0 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <HAL_RCC_ClockConfig+0x15c>)
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	f023 030f 	bic.w	r3, r3, #15
 80026d2:	432b      	orrs	r3, r5
 80026d4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	42ab      	cmp	r3, r5
 80026de:	d12e      	bne.n	800273e <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	f013 0f04 	tst.w	r3, #4
 80026e6:	d006      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e8:	4a17      	ldr	r2, [pc, #92]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 80026ea:	6893      	ldr	r3, [r2, #8]
 80026ec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80026f0:	68e1      	ldr	r1, [r4, #12]
 80026f2:	430b      	orrs	r3, r1
 80026f4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	f013 0f08 	tst.w	r3, #8
 80026fc:	d007      	beq.n	800270e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 8002700:	6893      	ldr	r3, [r2, #8]
 8002702:	6921      	ldr	r1, [r4, #16]
 8002704:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002708:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800270c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800270e:	f7ff ff1b 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCC_ClockConfig+0x160>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_RCC_ClockConfig+0x164>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	40d8      	lsrs	r0, r3
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_ClockConfig+0x168>)
 8002722:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_ClockConfig+0x16c>)
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	f7ff f8a2 	bl	8001870 <HAL_InitTick>
  return HAL_OK;
 800272c:	2000      	movs	r0, #0
}
 800272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002732:	2001      	movs	r0, #1
}
 8002734:	4770      	bx	lr
      return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
 8002738:	e7f9      	b.n	800272e <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800273a:	2001      	movs	r0, #1
 800273c:	e7f7      	b.n	800272e <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
 800273e:	2001      	movs	r0, #1
 8002740:	e7f5      	b.n	800272e <HAL_RCC_ClockConfig+0x146>
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00
 8002748:	40023800 	.word	0x40023800
 800274c:	08004ca4 	.word	0x08004ca4
 8002750:	20000000 	.word	0x20000000
 8002754:	20000008 	.word	0x20000008

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <HAL_RCC_GetPCLK1Freq+0x14>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002760:	4a03      	ldr	r2, [pc, #12]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	4a03      	ldr	r2, [pc, #12]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002766:	6810      	ldr	r0, [r2, #0]
}
 8002768:	40d8      	lsrs	r0, r3
 800276a:	4770      	bx	lr
 800276c:	40023800 	.word	0x40023800
 8002770:	08004cb4 	.word	0x08004cb4
 8002774:	20000000 	.word	0x20000000

08002778 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <HAL_RCC_GetPCLK2Freq+0x14>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	4a03      	ldr	r2, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002786:	6810      	ldr	r0, [r2, #0]
}
 8002788:	40d8      	lsrs	r0, r3
 800278a:	4770      	bx	lr
 800278c:	40023800 	.word	0x40023800
 8002790:	08004cb4 	.word	0x08004cb4
 8002794:	20000000 	.word	0x20000000

08002798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800279c:	b083      	sub	sp, #12
 800279e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027a0:	6806      	ldr	r6, [r0, #0]
 80027a2:	f016 0601 	ands.w	r6, r6, #1
 80027a6:	d00c      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027a8:	4bb8      	ldr	r3, [pc, #736]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027ba:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80027bc:	fab6 f686 	clz	r6, r6
 80027c0:	0976      	lsrs	r6, r6, #5
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027c2:	6825      	ldr	r5, [r4, #0]
 80027c4:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80027c8:	d010      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ca:	4ab0      	ldr	r2, [pc, #704]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027cc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80027d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80027d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027d6:	430b      	orrs	r3, r1
 80027d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027dc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    {
      plli2sused = 1;
 80027de:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80027e2:	bf08      	it	eq
 80027e4:	2601      	moveq	r6, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027e6:	fab5 f585 	clz	r5, r5
 80027ea:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80027f2:	d010      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027f4:	4aa5      	ldr	r2, [pc, #660]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027f6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80027fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002800:	430b      	orrs	r3, r1
 8002802:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280c:	f000 813c 	beq.w	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf08      	it	eq
 8002814:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002816:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 8002818:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800281c:	bf18      	it	ne
 800281e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002820:	f013 0f20 	tst.w	r3, #32
 8002824:	f040 8134 	bne.w	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	f013 0f10 	tst.w	r3, #16
 800282e:	d00c      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002830:	4b96      	ldr	r3, [pc, #600]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002832:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002836:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800283a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800283e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002842:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002844:	430a      	orrs	r2, r1
 8002846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002850:	d008      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002852:	4a8e      	ldr	r2, [pc, #568]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002854:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002858:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800285c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800285e:	430b      	orrs	r3, r1
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800286a:	d008      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800286c:	4a87      	ldr	r2, [pc, #540]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800286e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002872:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002876:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002878:	430b      	orrs	r3, r1
 800287a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002886:	4a81      	ldr	r2, [pc, #516]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002888:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800288c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002890:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002892:	430b      	orrs	r3, r1
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800289e:	d008      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028a0:	4a7a      	ldr	r2, [pc, #488]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028aa:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80028ac:	430b      	orrs	r3, r1
 80028ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80028b8:	d008      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ba:	4a74      	ldr	r2, [pc, #464]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80028c6:	430b      	orrs	r3, r1
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80028d2:	d008      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028d4:	4a6d      	ldr	r2, [pc, #436]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028da:	f023 030c 	bic.w	r3, r3, #12
 80028de:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80028e0:	430b      	orrs	r3, r1
 80028e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028ec:	d008      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ee:	4a67      	ldr	r2, [pc, #412]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80028fa:	430b      	orrs	r3, r1
 80028fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002906:	d008      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002908:	4a60      	ldr	r2, [pc, #384]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800290a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800290e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002912:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002914:	430b      	orrs	r3, r1
 8002916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002920:	d008      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002922:	4a5a      	ldr	r2, [pc, #360]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002924:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800292e:	430b      	orrs	r3, r1
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800293a:	d008      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800293c:	4a53      	ldr	r2, [pc, #332]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800293e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002942:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002946:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002948:	430b      	orrs	r3, r1
 800294a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002956:	4a4d      	ldr	r2, [pc, #308]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002958:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800295c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002960:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002962:	430b      	orrs	r3, r1
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800296e:	d008      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002970:	4a46      	ldr	r2, [pc, #280]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002972:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002976:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800297a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800297c:	430b      	orrs	r3, r1
 800297e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002988:	d008      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800298a:	4a40      	ldr	r2, [pc, #256]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800298c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002990:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002994:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002996:	430b      	orrs	r3, r1
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80029a2:	d00d      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029a4:	4a39      	ldr	r2, [pc, #228]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80029aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80029ae:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80029b0:	430b      	orrs	r3, r1
 80029b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    {
      pllsaiused = 1;
 80029b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029bc:	bf08      	it	eq
 80029be:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029c0:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 80029c2:	f013 0f08 	tst.w	r3, #8
 80029c6:	bf18      	it	ne
 80029c8:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ca:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80029ce:	d008      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029d0:	4a2e      	ldr	r2, [pc, #184]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80029d6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80029da:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80029dc:	430b      	orrs	r3, r1
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80029e8:	d009      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ea:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80029f8:	430b      	orrs	r3, r1
 80029fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002a04:	d009      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a06:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a08:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002a10:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002a14:	430b      	orrs	r3, r1
 8002a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002a20:	d009      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a22:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a24:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a28:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8002a30:	430b      	orrs	r3, r1
 8002a32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a3e:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a40:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a48:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a52:	2e01      	cmp	r6, #1
 8002a54:	d004      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a5c:	f000 8100 	beq.w	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a62:	6813      	ldr	r3, [r2, #0]
 8002a64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6a:	f7fe ff3d 	bl	80018e8 <HAL_GetTick>
 8002a6e:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a70:	4f06      	ldr	r7, [pc, #24]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002a78:	d074      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a7a:	f7fe ff35 	bl	80018e8 <HAL_GetTick>
 8002a7e:	1b80      	subs	r0, r0, r6
 8002a80:	2864      	cmp	r0, #100	; 0x64
 8002a82:	d9f6      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a84:	2003      	movs	r0, #3
 8002a86:	e0ee      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
      plli2sused = 1;
 8002a88:	2601      	movs	r6, #1
 8002a8a:	e6c4      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8002a8c:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a90:	4bbb      	ldr	r3, [pc, #748]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002aa4:	4ab7      	ldr	r2, [pc, #732]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aa6:	6813      	ldr	r3, [r2, #0]
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002aae:	f7fe ff1b 	bl	80018e8 <HAL_GetTick>
 8002ab2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ab4:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8002d84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8002ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8002abc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe ff11 	bl	80018e8 <HAL_GetTick>
 8002ac6:	1bc0      	subs	r0, r0, r7
 8002ac8:	2864      	cmp	r0, #100	; 0x64
 8002aca:	d9f5      	bls.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x320>
        return HAL_TIMEOUT;
 8002acc:	2003      	movs	r0, #3
 8002ace:	e0ca      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad0:	4bab      	ldr	r3, [pc, #684]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ad4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002ad8:	d015      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002ada:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002adc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d010      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ae4:	4ba6      	ldr	r3, [pc, #664]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002ae6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ae8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002aee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002af2:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002af4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002af6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002afa:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002afc:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	f013 0f01 	tst.w	r3, #1
 8002b04:	d112      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x394>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b08:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002b0c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002b10:	d01f      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002b12:	4a9b      	ldr	r2, [pc, #620]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002b14:	6893      	ldr	r3, [r2, #8]
 8002b16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b1a:	6093      	str	r3, [r2, #8]
 8002b1c:	4a98      	ldr	r2, [pc, #608]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002b1e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002b20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b26:	430b      	orrs	r3, r1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	e67d      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fedc 	bl	80018e8 <HAL_GetTick>
 8002b30:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8002b3e:	f013 0f02 	tst.w	r3, #2
 8002b42:	d1e0      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7fe fed0 	bl	80018e8 <HAL_GetTick>
 8002b48:	1bc0      	subs	r0, r0, r7
 8002b4a:	4548      	cmp	r0, r9
 8002b4c:	d9f5      	bls.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
            return HAL_TIMEOUT;
 8002b4e:	2003      	movs	r0, #3
 8002b50:	e089      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b52:	488b      	ldr	r0, [pc, #556]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002b54:	6882      	ldr	r2, [r0, #8]
 8002b56:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002b5a:	498b      	ldr	r1, [pc, #556]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b5c:	4019      	ands	r1, r3
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	6082      	str	r2, [r0, #8]
 8002b62:	e7db      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x384>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	f013 0f01 	tst.w	r3, #1
 8002b6a:	d013      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002b6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b6e:	b98b      	cbnz	r3, 8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b70:	4a83      	ldr	r2, [pc, #524]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002b72:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b76:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b7e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6861      	ldr	r1, [r4, #4]
 8002b86:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002b8a:	68a1      	ldr	r1, [r4, #8]
 8002b8c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002b90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002b9a:	d003      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8002b9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b9e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002ba2:	d006      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002ba4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002ba8:	d01e      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x450>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb0:	d11a      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x450>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bb2:	4a73      	ldr	r2, [pc, #460]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002bb4:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bb8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	6861      	ldr	r1, [r4, #4]
 8002bc8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002bcc:	68e1      	ldr	r1, [r4, #12]
 8002bce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002bd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bd6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	f021 011f 	bic.w	r1, r1, #31
 8002be2:	430b      	orrs	r3, r1
 8002be4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002bee:	d011      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bf0:	4a63      	ldr	r2, [pc, #396]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002bf2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bfa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002bfe:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002c02:	430b      	orrs	r3, r1
 8002c04:	6861      	ldr	r1, [r4, #4]
 8002c06:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002c0a:	6921      	ldr	r1, [r4, #16]
 8002c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002c10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c1a:	d00d      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c1c:	6862      	ldr	r2, [r4, #4]
 8002c1e:	6923      	ldr	r3, [r4, #16]
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c26:	68e2      	ldr	r2, [r4, #12]
 8002c28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c2c:	68a2      	ldr	r2, [r4, #8]
 8002c2e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002c32:	4a53      	ldr	r2, [pc, #332]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002c34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c38:	4a51      	ldr	r2, [pc, #324]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c42:	f7fe fe51 	bl	80018e8 <HAL_GetTick>
 8002c46:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c48:	4f4d      	ldr	r7, [pc, #308]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002c50:	d106      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c52:	f7fe fe49 	bl	80018e8 <HAL_GetTick>
 8002c56:	1b80      	subs	r0, r0, r6
 8002c58:	2864      	cmp	r0, #100	; 0x64
 8002c5a:	d9f6      	bls.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	e002      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c60:	2d01      	cmp	r5, #1
 8002c62:	d003      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002c64:	2000      	movs	r0, #0
}
 8002c66:	b003      	add	sp, #12
 8002c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002c6c:	4a44      	ldr	r2, [pc, #272]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002c6e:	6813      	ldr	r3, [r2, #0]
 8002c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c76:	f7fe fe37 	bl	80018e8 <HAL_GetTick>
 8002c7a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c7c:	4e40      	ldr	r6, [pc, #256]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002c7e:	6833      	ldr	r3, [r6, #0]
 8002c80:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002c84:	d006      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c86:	f7fe fe2f 	bl	80018e8 <HAL_GetTick>
 8002c8a:	1b40      	subs	r0, r0, r5
 8002c8c:	2864      	cmp	r0, #100	; 0x64
 8002c8e:	d9f6      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        return HAL_TIMEOUT;
 8002c90:	2003      	movs	r0, #3
 8002c92:	e7e8      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002c9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c9e:	b122      	cbz	r2, 8002caa <HAL_RCCEx_PeriphCLKConfig+0x512>
 8002ca0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002ca4:	d01d      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ca8:	b9db      	cbnz	r3, 8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002caa:	4a35      	ldr	r2, [pc, #212]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002cac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cb0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6961      	ldr	r1, [r4, #20]
 8002cc0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002cc4:	69a1      	ldr	r1, [r4, #24]
 8002cc6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002cd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002cd4:	3901      	subs	r1, #1
 8002cd6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002cda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8002cea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf0:	d031      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	f013 0f08 	tst.w	r3, #8
 8002cf8:	d019      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x596>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cfa:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002cfc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d08:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6961      	ldr	r1, [r4, #20]
 8002d10:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002d14:	69e1      	ldr	r1, [r4, #28]
 8002d16:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002d1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d1e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002d22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002d2e:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002d30:	6813      	ldr	r3, [r2, #0]
 8002d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d36:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002d38:	f7fe fdd6 	bl	80018e8 <HAL_GetTick>
 8002d3c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d3e:	4d10      	ldr	r5, [pc, #64]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002d46:	d119      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d48:	f7fe fdce 	bl	80018e8 <HAL_GetTick>
 8002d4c:	1b00      	subs	r0, r0, r4
 8002d4e:	2864      	cmp	r0, #100	; 0x64
 8002d50:	d9f6      	bls.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        return HAL_TIMEOUT;
 8002d52:	2003      	movs	r0, #3
 8002d54:	e787      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002d58:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d5c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d60:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002d64:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6961      	ldr	r1, [r4, #20]
 8002d6c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002d70:	6a21      	ldr	r1, [r4, #32]
 8002d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002d76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002d7a:	e7ba      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  return HAL_OK;
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	e772      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000
 8002d88:	0ffffcff 	.word	0x0ffffcff

08002d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	4681      	mov	r9, r0
 8002d94:	460f      	mov	r7, r1
 8002d96:	4616      	mov	r6, r2
 8002d98:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d9a:	f7fe fda5 	bl	80018e8 <HAL_GetTick>
 8002d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002da0:	442b      	add	r3, r5
 8002da2:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002da6:	f7fe fd9f 	bl	80018e8 <HAL_GetTick>
 8002daa:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dac:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002db4:	fb08 f303 	mul.w	r3, r8, r3
 8002db8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dba:	f8d9 3000 	ldr.w	r3, [r9]
 8002dbe:	689c      	ldr	r4, [r3, #8]
 8002dc0:	ea37 0204 	bics.w	r2, r7, r4
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2401      	moveq	r4, #1
 8002dc8:	2400      	movne	r4, #0
 8002dca:	42b4      	cmp	r4, r6
 8002dcc:	d047      	beq.n	8002e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002dd2:	d0f4      	beq.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dd4:	f7fe fd88 	bl	80018e8 <HAL_GetTick>
 8002dd8:	eba0 000a 	sub.w	r0, r0, sl
 8002ddc:	4540      	cmp	r0, r8
 8002dde:	d20a      	bcs.n	8002df6 <SPI_WaitFlagStateUntilTimeout+0x6a>
 8002de0:	f1b8 0f00 	cmp.w	r8, #0
 8002de4:	d007      	beq.n	8002df6 <SPI_WaitFlagStateUntilTimeout+0x6a>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002de6:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf08      	it	eq
 8002dec:	4698      	moveq	r8, r3
      }
      count--;
 8002dee:	9b01      	ldr	r3, [sp, #4]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	e7e1      	b.n	8002dba <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002df6:	f8d9 2000 	ldr.w	r2, [r9]
 8002dfa:	6853      	ldr	r3, [r2, #4]
 8002dfc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002e00:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e0a:	d00c      	beq.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e0c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8002e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e14:	d016      	beq.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002e22:	2003      	movs	r0, #3
 8002e24:	e01c      	b.n	8002e60 <SPI_WaitFlagStateUntilTimeout+0xd4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e26:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2e:	d002      	beq.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xaa>
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e34:	d1ea      	bne.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 8002e36:	f8d9 2000 	ldr.w	r2, [r9]
 8002e3a:	6813      	ldr	r3, [r2, #0]
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e7e3      	b.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0x80>
          SPI_RESET_CRC(hspi);
 8002e44:	f8d9 2000 	ldr.w	r2, [r9]
 8002e48:	6813      	ldr	r3, [r2, #0]
 8002e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	f8d9 2000 	ldr.w	r2, [r9]
 8002e54:	6813      	ldr	r3, [r2, #0]
 8002e56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	e7db      	b.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 8002e5e:	2000      	movs	r0, #0
}
 8002e60:	b002      	add	sp, #8
 8002e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e66:	bf00      	nop
 8002e68:	20000000 	.word	0x20000000

08002e6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	4681      	mov	r9, r0
 8002e74:	460d      	mov	r5, r1
 8002e76:	4616      	mov	r6, r2
 8002e78:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e7a:	f7fe fd35 	bl	80018e8 <HAL_GetTick>
 8002e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e80:	443b      	add	r3, r7
 8002e82:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002e86:	f7fe fd2f 	bl	80018e8 <HAL_GetTick>
 8002e8a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e8c:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e94:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002e98:	0d1b      	lsrs	r3, r3, #20
 8002e9a:	fb08 f303 	mul.w	r3, r8, r3
 8002e9e:	9300      	str	r3, [sp, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ea0:	f8d9 2000 	ldr.w	r2, [r9]
 8002ea4:	e006      	b.n	8002eb4 <SPI_WaitFifoStateUntilTimeout+0x48>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002ea6:	7b13      	ldrb	r3, [r2, #12]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	9301      	str	r3, [sp, #4]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002eac:	9b01      	ldr	r3, [sp, #4]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002eae:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002eb2:	d109      	bne.n	8002ec8 <SPI_WaitFifoStateUntilTimeout+0x5c>
  while ((hspi->Instance->SR & Fifo) != State)
 8002eb4:	6894      	ldr	r4, [r2, #8]
 8002eb6:	402c      	ands	r4, r5
 8002eb8:	42b4      	cmp	r4, r6
 8002eba:	d04a      	beq.n	8002f52 <SPI_WaitFifoStateUntilTimeout+0xe6>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ebc:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8002ec0:	d1f5      	bne.n	8002eae <SPI_WaitFifoStateUntilTimeout+0x42>
 8002ec2:	2e00      	cmp	r6, #0
 8002ec4:	d0ef      	beq.n	8002ea6 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8002ec6:	e7f2      	b.n	8002eae <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ec8:	f7fe fd0e 	bl	80018e8 <HAL_GetTick>
 8002ecc:	eba0 000a 	sub.w	r0, r0, sl
 8002ed0:	4580      	cmp	r8, r0
 8002ed2:	d90a      	bls.n	8002eea <SPI_WaitFifoStateUntilTimeout+0x7e>
 8002ed4:	f1b8 0f00 	cmp.w	r8, #0
 8002ed8:	d007      	beq.n	8002eea <SPI_WaitFifoStateUntilTimeout+0x7e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002eda:	9b00      	ldr	r3, [sp, #0]
      {
        tmp_timeout = 0U;
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf08      	it	eq
 8002ee0:	4698      	moveq	r8, r3
      }      
      count--;
 8002ee2:	9b00      	ldr	r3, [sp, #0]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	e7da      	b.n	8002ea0 <SPI_WaitFifoStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eea:	f8d9 2000 	ldr.w	r2, [r9]
 8002eee:	6853      	ldr	r3, [r2, #4]
 8002ef0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002ef4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efe:	d00c      	beq.n	8002f1a <SPI_WaitFifoStateUntilTimeout+0xae>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f00:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8002f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f08:	d016      	beq.n	8002f38 <SPI_WaitFifoStateUntilTimeout+0xcc>
        hspi->State = HAL_SPI_STATE_READY;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002f10:	2300      	movs	r3, #0
 8002f12:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002f16:	2003      	movs	r0, #3
 8002f18:	e01c      	b.n	8002f54 <SPI_WaitFifoStateUntilTimeout+0xe8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f22:	d002      	beq.n	8002f2a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d1ea      	bne.n	8002f00 <SPI_WaitFifoStateUntilTimeout+0x94>
          __HAL_SPI_DISABLE(hspi);
 8002f2a:	f8d9 2000 	ldr.w	r2, [r9]
 8002f2e:	6813      	ldr	r3, [r2, #0]
 8002f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e7e3      	b.n	8002f00 <SPI_WaitFifoStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8002f38:	f8d9 2000 	ldr.w	r2, [r9]
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	f8d9 2000 	ldr.w	r2, [r9]
 8002f48:	6813      	ldr	r3, [r2, #0]
 8002f4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e7db      	b.n	8002f0a <SPI_WaitFifoStateUntilTimeout+0x9e>
    }
  }

  return HAL_OK;
 8002f52:	2000      	movs	r0, #0
}
 8002f54:	b002      	add	sp, #8
 8002f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	4604      	mov	r4, r0
 8002f66:	460d      	mov	r5, r1
 8002f68:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f6a:	9200      	str	r2, [sp, #0]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f74:	f7ff ff7a 	bl	8002e6c <SPI_WaitFifoStateUntilTimeout>
 8002f78:	b9b0      	cbnz	r0, 8002fa8 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7a:	9600      	str	r6, [sp, #0]
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2180      	movs	r1, #128	; 0x80
 8002f82:	4620      	mov	r0, r4
 8002f84:	f7ff ff02 	bl	8002d8c <SPI_WaitFlagStateUntilTimeout>
 8002f88:	b9a8      	cbnz	r0, 8002fb6 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f8a:	9600      	str	r6, [sp, #0]
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f94:	4620      	mov	r0, r4
 8002f96:	f7ff ff69 	bl	8002e6c <SPI_WaitFifoStateUntilTimeout>
 8002f9a:	b150      	cbz	r0, 8002fb2 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f9e:	f043 0320 	orr.w	r3, r3, #32
 8002fa2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	e004      	b.n	8002fb2 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002faa:	f043 0320 	orr.w	r3, r3, #32
 8002fae:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fb0:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	e7f7      	b.n	8002fb2 <SPI_EndRxTxTransaction+0x52>

08002fc2 <SPI_EndRxTransaction>:
{
 8002fc2:	b570      	push	{r4, r5, r6, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	460d      	mov	r5, r1
 8002fca:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fcc:	6843      	ldr	r3, [r0, #4]
 8002fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fd2:	d00d      	beq.n	8002ff0 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd4:	9600      	str	r6, [sp, #0]
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f7ff fed5 	bl	8002d8c <SPI_WaitFlagStateUntilTimeout>
 8002fe2:	b990      	cbnz	r0, 800300a <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe4:	6863      	ldr	r3, [r4, #4]
 8002fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fea:	d014      	beq.n	8003016 <SPI_EndRxTransaction+0x54>
}
 8002fec:	b002      	add	sp, #8
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff0:	6883      	ldr	r3, [r0, #8]
 8002ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff6:	d002      	beq.n	8002ffe <SPI_EndRxTransaction+0x3c>
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffc:	d1ea      	bne.n	8002fd4 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	6813      	ldr	r3, [r2, #0]
 8003002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e7e4      	b.n	8002fd4 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800300a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800300c:	f043 0320 	orr.w	r3, r3, #32
 8003010:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003012:	2003      	movs	r0, #3
 8003014:	e7ea      	b.n	8002fec <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003016:	68a3      	ldr	r3, [r4, #8]
 8003018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301c:	d002      	beq.n	8003024 <SPI_EndRxTransaction+0x62>
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d1e3      	bne.n	8002fec <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003024:	9600      	str	r6, [sp, #0]
 8003026:	462b      	mov	r3, r5
 8003028:	2200      	movs	r2, #0
 800302a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff ff1c 	bl	8002e6c <SPI_WaitFifoStateUntilTimeout>
 8003034:	2800      	cmp	r0, #0
 8003036:	d0d9      	beq.n	8002fec <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003038:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800303a:	f043 0320 	orr.w	r3, r3, #32
 800303e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003040:	2003      	movs	r0, #3
 8003042:	e7d3      	b.n	8002fec <SPI_EndRxTransaction+0x2a>

08003044 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003044:	2800      	cmp	r0, #0
 8003046:	d06d      	beq.n	8003124 <HAL_SPI_Init+0xe0>
{
 8003048:	b510      	push	{r4, lr}
 800304a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800304c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800304e:	b933      	cbnz	r3, 800305e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003050:	6843      	ldr	r3, [r0, #4]
 8003052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003056:	d005      	beq.n	8003064 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003058:	2300      	movs	r3, #0
 800305a:	61c3      	str	r3, [r0, #28]
 800305c:	e002      	b.n	8003064 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800305e:	2300      	movs	r3, #0
 8003060:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003062:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003068:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800306c:	2b00      	cmp	r3, #0
 800306e:	d053      	beq.n	8003118 <HAL_SPI_Init+0xd4>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003070:	2302      	movs	r3, #2
 8003072:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	6813      	ldr	r3, [r2, #0]
 800307a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800307e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003080:	68e3      	ldr	r3, [r4, #12]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003082:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003086:	bf8c      	ite	hi
 8003088:	2100      	movhi	r1, #0
 800308a:	f44f 5180 	movls.w	r1, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800308e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003092:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003096:	d001      	beq.n	800309c <HAL_SPI_Init+0x58>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	6863      	ldr	r3, [r4, #4]
 80030a0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80030a4:	68a0      	ldr	r0, [r4, #8]
 80030a6:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80030aa:	4303      	orrs	r3, r0
 80030ac:	6920      	ldr	r0, [r4, #16]
 80030ae:	f000 0002 	and.w	r0, r0, #2
 80030b2:	4303      	orrs	r3, r0
 80030b4:	6960      	ldr	r0, [r4, #20]
 80030b6:	f000 0001 	and.w	r0, r0, #1
 80030ba:	4303      	orrs	r3, r0
 80030bc:	69a0      	ldr	r0, [r4, #24]
 80030be:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80030c2:	4303      	orrs	r3, r0
 80030c4:	69e0      	ldr	r0, [r4, #28]
 80030c6:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80030ca:	4303      	orrs	r3, r0
 80030cc:	6a20      	ldr	r0, [r4, #32]
 80030ce:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80030d2:	4303      	orrs	r3, r0
 80030d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80030d6:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80030da:	4303      	orrs	r3, r0
 80030dc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80030e8:	f000 0008 	and.w	r0, r0, #8
 80030ec:	4303      	orrs	r3, r0
 80030ee:	68e0      	ldr	r0, [r4, #12]
 80030f0:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 80030f4:	4303      	orrs	r3, r0
 80030f6:	8b60      	ldrh	r0, [r4, #26]
 80030f8:	f000 0004 	and.w	r0, r0, #4
 80030fc:	4303      	orrs	r3, r0
 80030fe:	430b      	orrs	r3, r1
 8003100:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	69d3      	ldr	r3, [r2, #28]
 8003106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800310a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800310c:	2000      	movs	r0, #0
 800310e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003110:	2301      	movs	r3, #1
 8003112:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003116:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003118:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800311c:	4620      	mov	r0, r4
 800311e:	f7fe f951 	bl	80013c4 <HAL_SPI_MspInit>
 8003122:	e7a5      	b.n	8003070 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003124:	2001      	movs	r0, #1
}
 8003126:	4770      	bx	lr

08003128 <HAL_SPI_Transmit>:
{
 8003128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003130:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003134:	2b01      	cmp	r3, #1
 8003136:	f000 80ea 	beq.w	800330e <HAL_SPI_Transmit+0x1e6>
 800313a:	4604      	mov	r4, r0
 800313c:	4688      	mov	r8, r1
 800313e:	4617      	mov	r7, r2
 8003140:	2301      	movs	r3, #1
 8003142:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003146:	f7fe fbcf 	bl	80018e8 <HAL_GetTick>
 800314a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800314c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003150:	b2c0      	uxtb	r0, r0
 8003152:	2801      	cmp	r0, #1
 8003154:	f040 80c9 	bne.w	80032ea <HAL_SPI_Transmit+0x1c2>
  if ((pData == NULL) || (Size == 0U))
 8003158:	f1b8 0f00 	cmp.w	r8, #0
 800315c:	f000 80c6 	beq.w	80032ec <HAL_SPI_Transmit+0x1c4>
 8003160:	2f00      	cmp	r7, #0
 8003162:	f000 80c3 	beq.w	80032ec <HAL_SPI_Transmit+0x1c4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003166:	2303      	movs	r3, #3
 8003168:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800316c:	2300      	movs	r3, #0
 800316e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003170:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003174:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003176:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003178:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800317a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800317e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003182:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003184:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003186:	68a3      	ldr	r3, [r4, #8]
 8003188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318c:	d035      	beq.n	80031fa <HAL_SPI_Transmit+0xd2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003196:	d103      	bne.n	80031a0 <HAL_SPI_Transmit+0x78>
    __HAL_SPI_ENABLE(hspi);
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800319e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031a0:	68e3      	ldr	r3, [r4, #12]
 80031a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031a6:	d951      	bls.n	800324c <HAL_SPI_Transmit+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a8:	6863      	ldr	r3, [r4, #4]
 80031aa:	b10b      	cbz	r3, 80031b0 <HAL_SPI_Transmit+0x88>
 80031ac:	2f01      	cmp	r7, #1
 80031ae:	d10a      	bne.n	80031c6 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031b4:	8812      	ldrh	r2, [r2, #0]
 80031b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031ba:	3302      	adds	r3, #2
 80031bc:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80031be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80031c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d12e      	bne.n	800322c <HAL_SPI_Transmit+0x104>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ce:	4632      	mov	r2, r6
 80031d0:	4629      	mov	r1, r5
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff fec4 	bl	8002f60 <SPI_EndRxTxTransaction>
 80031d8:	b108      	cbz	r0, 80031de <HAL_SPI_Transmit+0xb6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031da:	2320      	movs	r3, #32
 80031dc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031de:	68a3      	ldr	r3, [r4, #8]
 80031e0:	b933      	cbnz	r3, 80031f0 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	9201      	str	r2, [sp, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80031f2:	3800      	subs	r0, #0
 80031f4:	bf18      	it	ne
 80031f6:	2001      	movne	r0, #1
error:
 80031f8:	e078      	b.n	80032ec <HAL_SPI_Transmit+0x1c4>
    __HAL_SPI_DISABLE(hspi);
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	6813      	ldr	r3, [r2, #0]
 80031fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003202:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003204:	6822      	ldr	r2, [r4, #0]
 8003206:	6813      	ldr	r3, [r2, #0]
 8003208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e7be      	b.n	800318e <HAL_SPI_Transmit+0x66>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003210:	f7fe fb6a 	bl	80018e8 <HAL_GetTick>
 8003214:	1b80      	subs	r0, r0, r6
 8003216:	42a8      	cmp	r0, r5
 8003218:	d302      	bcc.n	8003220 <HAL_SPI_Transmit+0xf8>
 800321a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800321e:	d16e      	bne.n	80032fe <HAL_SPI_Transmit+0x1d6>
 8003220:	2d00      	cmp	r5, #0
 8003222:	d06e      	beq.n	8003302 <HAL_SPI_Transmit+0x1da>
    while (hspi->TxXferCount > 0U)
 8003224:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0d0      	beq.n	80031ce <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	f012 0f02 	tst.w	r2, #2
 8003234:	d0ec      	beq.n	8003210 <HAL_SPI_Transmit+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003236:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003238:	8812      	ldrh	r2, [r2, #0]
 800323a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800323c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800323e:	3302      	adds	r3, #2
 8003240:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003242:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003244:	3a01      	subs	r2, #1
 8003246:	b292      	uxth	r2, r2
 8003248:	87e2      	strh	r2, [r4, #62]	; 0x3e
 800324a:	e7eb      	b.n	8003224 <HAL_SPI_Transmit+0xfc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800324c:	6863      	ldr	r3, [r4, #4]
 800324e:	b10b      	cbz	r3, 8003254 <HAL_SPI_Transmit+0x12c>
 8003250:	2f01      	cmp	r7, #1
 8003252:	d10e      	bne.n	8003272 <HAL_SPI_Transmit+0x14a>
      if (hspi->TxXferCount > 1U)
 8003254:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d90e      	bls.n	800327a <HAL_SPI_Transmit+0x152>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003260:	8812      	ldrh	r2, [r2, #0]
 8003262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003266:	3302      	adds	r3, #2
 8003268:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800326a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800326c:	3b02      	subs	r3, #2
 800326e:	b29b      	uxth	r3, r3
 8003270:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003272:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	bb23      	cbnz	r3, 80032c2 <HAL_SPI_Transmit+0x19a>
 8003278:	e7a9      	b.n	80031ce <HAL_SPI_Transmit+0xa6>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003284:	3301      	adds	r3, #1
 8003286:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003288:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800328a:	3b01      	subs	r3, #1
 800328c:	b29b      	uxth	r3, r3
 800328e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003290:	e7ef      	b.n	8003272 <HAL_SPI_Transmit+0x14a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003298:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800329a:	3301      	adds	r3, #1
 800329c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800329e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80032a6:	e008      	b.n	80032ba <HAL_SPI_Transmit+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a8:	f7fe fb1e 	bl	80018e8 <HAL_GetTick>
 80032ac:	1b80      	subs	r0, r0, r6
 80032ae:	42a8      	cmp	r0, r5
 80032b0:	d302      	bcc.n	80032b8 <HAL_SPI_Transmit+0x190>
 80032b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80032b6:	d126      	bne.n	8003306 <HAL_SPI_Transmit+0x1de>
 80032b8:	b33d      	cbz	r5, 800330a <HAL_SPI_Transmit+0x1e2>
    while (hspi->TxXferCount > 0U)
 80032ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80032bc:	b292      	uxth	r2, r2
 80032be:	2a00      	cmp	r2, #0
 80032c0:	d085      	beq.n	80031ce <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032c2:	6822      	ldr	r2, [r4, #0]
 80032c4:	6893      	ldr	r3, [r2, #8]
 80032c6:	f013 0f02 	tst.w	r3, #2
 80032ca:	d0ed      	beq.n	80032a8 <HAL_SPI_Transmit+0x180>
        if (hspi->TxXferCount > 1U)
 80032cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d9de      	bls.n	8003292 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032dc:	3302      	adds	r3, #2
 80032de:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032e2:	3b02      	subs	r3, #2
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80032e8:	e7e7      	b.n	80032ba <HAL_SPI_Transmit+0x192>
    errorcode = HAL_BUSY;
 80032ea:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80032f2:	2300      	movs	r3, #0
 80032f4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80032f8:	b002      	add	sp, #8
 80032fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 80032fe:	2003      	movs	r0, #3
 8003300:	e7f4      	b.n	80032ec <HAL_SPI_Transmit+0x1c4>
 8003302:	2003      	movs	r0, #3
 8003304:	e7f2      	b.n	80032ec <HAL_SPI_Transmit+0x1c4>
          errorcode = HAL_TIMEOUT;
 8003306:	2003      	movs	r0, #3
 8003308:	e7f0      	b.n	80032ec <HAL_SPI_Transmit+0x1c4>
 800330a:	2003      	movs	r0, #3
 800330c:	e7ee      	b.n	80032ec <HAL_SPI_Transmit+0x1c4>
  __HAL_LOCK(hspi);
 800330e:	2002      	movs	r0, #2
 8003310:	e7f2      	b.n	80032f8 <HAL_SPI_Transmit+0x1d0>

08003312 <HAL_SPI_TransmitReceive>:
{
 8003312:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003316:	461f      	mov	r7, r3
 8003318:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 800331a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800331e:	2b01      	cmp	r3, #1
 8003320:	f000 8155 	beq.w	80035ce <HAL_SPI_TransmitReceive+0x2bc>
 8003324:	4604      	mov	r4, r0
 8003326:	4688      	mov	r8, r1
 8003328:	4691      	mov	r9, r2
 800332a:	2301      	movs	r3, #1
 800332c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003330:	f7fe fada 	bl	80018e8 <HAL_GetTick>
 8003334:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003336:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800333a:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800333c:	2801      	cmp	r0, #1
 800333e:	d00a      	beq.n	8003356 <HAL_SPI_TransmitReceive+0x44>
 8003340:	6863      	ldr	r3, [r4, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003346:	f040 8131 	bne.w	80035ac <HAL_SPI_TransmitReceive+0x29a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800334a:	68a3      	ldr	r3, [r4, #8]
 800334c:	b90b      	cbnz	r3, 8003352 <HAL_SPI_TransmitReceive+0x40>
 800334e:	2804      	cmp	r0, #4
 8003350:	d001      	beq.n	8003356 <HAL_SPI_TransmitReceive+0x44>
    errorcode = HAL_BUSY;
 8003352:	2002      	movs	r0, #2
 8003354:	e12b      	b.n	80035ae <HAL_SPI_TransmitReceive+0x29c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003356:	f1b9 0f00 	cmp.w	r9, #0
 800335a:	bf18      	it	ne
 800335c:	f1b8 0f00 	cmpne.w	r8, #0
 8003360:	f000 812d 	beq.w	80035be <HAL_SPI_TransmitReceive+0x2ac>
 8003364:	2f00      	cmp	r7, #0
 8003366:	f000 812a 	beq.w	80035be <HAL_SPI_TransmitReceive+0x2ac>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800336a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b04      	cmp	r3, #4
 8003372:	d002      	beq.n	800337a <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003374:	2305      	movs	r3, #5
 8003376:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800337a:	2300      	movs	r3, #0
 800337c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800337e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003382:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003386:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800338a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800338e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003390:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003392:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003394:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003396:	68e3      	ldr	r3, [r4, #12]
 8003398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800339c:	d801      	bhi.n	80033a2 <HAL_SPI_TransmitReceive+0x90>
 800339e:	2f01      	cmp	r7, #1
 80033a0:	d924      	bls.n	80033ec <HAL_SPI_TransmitReceive+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	6853      	ldr	r3, [r2, #4]
 80033a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033aa:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80033b4:	d103      	bne.n	80033be <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033bc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033be:	68e3      	ldr	r3, [r4, #12]
 80033c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033c4:	d957      	bls.n	8003476 <HAL_SPI_TransmitReceive+0x164>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c6:	6863      	ldr	r3, [r4, #4]
 80033c8:	b10b      	cbz	r3, 80033ce <HAL_SPI_TransmitReceive+0xbc>
 80033ca:	2f01      	cmp	r7, #1
 80033cc:	d10a      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033d2:	8812      	ldrh	r2, [r2, #0]
 80033d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033d8:	3302      	adds	r3, #2
 80033da:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80033dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80033e4:	2701      	movs	r7, #1
        txallowed = 0U;
 80033e6:	f04f 0800 	mov.w	r8, #0
 80033ea:	e024      	b.n	8003436 <HAL_SPI_TransmitReceive+0x124>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033ec:	6822      	ldr	r2, [r4, #0]
 80033ee:	6853      	ldr	r3, [r2, #4]
 80033f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033f4:	6053      	str	r3, [r2, #4]
 80033f6:	e7d9      	b.n	80033ac <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033f8:	6822      	ldr	r2, [r4, #0]
 80033fa:	6893      	ldr	r3, [r2, #8]
 80033fc:	f013 0301 	ands.w	r3, r3, #1
 8003400:	d010      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x112>
 8003402:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003406:	b289      	uxth	r1, r1
 8003408:	b161      	cbz	r1, 8003424 <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800340a:	68d1      	ldr	r1, [r2, #12]
 800340c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800340e:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003410:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003412:	3202      	adds	r2, #2
 8003414:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003416:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800341a:	3a01      	subs	r2, #1
 800341c:	b292      	uxth	r2, r2
 800341e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 8003422:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003424:	f7fe fa60 	bl	80018e8 <HAL_GetTick>
 8003428:	1b83      	subs	r3, r0, r6
 800342a:	42ab      	cmp	r3, r5
 800342c:	d303      	bcc.n	8003436 <HAL_SPI_TransmitReceive+0x124>
 800342e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003432:	f040 80c6 	bne.w	80035c2 <HAL_SPI_TransmitReceive+0x2b0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003436:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003438:	b29b      	uxth	r3, r3
 800343a:	b92b      	cbnz	r3, 8003448 <HAL_SPI_TransmitReceive+0x136>
 800343c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80a8 	beq.w	8003598 <HAL_SPI_TransmitReceive+0x286>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	f012 0f02 	tst.w	r2, #2
 8003450:	d0d2      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0xe6>
 8003452:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003454:	b292      	uxth	r2, r2
 8003456:	2f01      	cmp	r7, #1
 8003458:	d1ce      	bne.n	80033f8 <HAL_SPI_TransmitReceive+0xe6>
 800345a:	2a00      	cmp	r2, #0
 800345c:	d0cc      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800345e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003460:	8812      	ldrh	r2, [r2, #0]
 8003462:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003466:	3302      	adds	r3, #2
 8003468:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800346a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800346c:	3b01      	subs	r3, #1
 800346e:	b29b      	uxth	r3, r3
 8003470:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003472:	4647      	mov	r7, r8
 8003474:	e7c0      	b.n	80033f8 <HAL_SPI_TransmitReceive+0xe6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003476:	6863      	ldr	r3, [r4, #4]
 8003478:	b10b      	cbz	r3, 800347e <HAL_SPI_TransmitReceive+0x16c>
 800347a:	2f01      	cmp	r7, #1
 800347c:	d10e      	bne.n	800349c <HAL_SPI_TransmitReceive+0x18a>
      if (hspi->TxXferCount > 1U)
 800347e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d90e      	bls.n	80034a4 <HAL_SPI_TransmitReceive+0x192>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003490:	3302      	adds	r3, #2
 8003492:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003494:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003496:	3b02      	subs	r3, #2
 8003498:	b29b      	uxth	r3, r3
 800349a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800349c:	2701      	movs	r7, #1
        txallowed = 0U;
 800349e:	f04f 0800 	mov.w	r8, #0
 80034a2:	e045      	b.n	8003530 <HAL_SPI_TransmitReceive+0x21e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034a8:	7812      	ldrb	r2, [r2, #0]
 80034aa:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80034ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034ae:	3301      	adds	r3, #1
 80034b0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80034b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80034ba:	e7ef      	b.n	800349c <HAL_SPI_TransmitReceive+0x18a>
        if (hspi->TxXferCount > 1U)
 80034bc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80034be:	b292      	uxth	r2, r2
 80034c0:	2a01      	cmp	r2, #1
 80034c2:	d90b      	bls.n	80034dc <HAL_SPI_TransmitReceive+0x1ca>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034cc:	3302      	adds	r3, #2
 80034ce:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80034d2:	3b02      	subs	r3, #2
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80034d8:	4647      	mov	r7, r8
 80034da:	e03b      	b.n	8003554 <HAL_SPI_TransmitReceive+0x242>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034de:	7812      	ldrb	r2, [r2, #0]
 80034e0:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80034e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034e4:	3301      	adds	r3, #1
 80034e6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80034e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80034f0:	4647      	mov	r7, r8
 80034f2:	e02f      	b.n	8003554 <HAL_SPI_TransmitReceive+0x242>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034f4:	6821      	ldr	r1, [r4, #0]
 80034f6:	684a      	ldr	r2, [r1, #4]
 80034f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034fc:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 80034fe:	461f      	mov	r7, r3
 8003500:	e00c      	b.n	800351c <HAL_SPI_TransmitReceive+0x20a>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003502:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003504:	7b12      	ldrb	r2, [r2, #12]
 8003506:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8003508:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800350a:	3201      	adds	r2, #1
 800350c:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800350e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003512:	3a01      	subs	r2, #1
 8003514:	b292      	uxth	r2, r2
 8003516:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 800351a:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800351c:	f7fe f9e4 	bl	80018e8 <HAL_GetTick>
 8003520:	1b80      	subs	r0, r0, r6
 8003522:	42a8      	cmp	r0, r5
 8003524:	d302      	bcc.n	800352c <HAL_SPI_TransmitReceive+0x21a>
 8003526:	f1b5 3fff 	cmp.w	r5, #4294967295
 800352a:	d14c      	bne.n	80035c6 <HAL_SPI_TransmitReceive+0x2b4>
 800352c:	2d00      	cmp	r5, #0
 800352e:	d04c      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x2b8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003530:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003532:	b29b      	uxth	r3, r3
 8003534:	b91b      	cbnz	r3, 800353e <HAL_SPI_TransmitReceive+0x22c>
 8003536:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800353a:	b29b      	uxth	r3, r3
 800353c:	b363      	cbz	r3, 8003598 <HAL_SPI_TransmitReceive+0x286>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	f012 0f02 	tst.w	r2, #2
 8003546:	d005      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x242>
 8003548:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800354a:	b292      	uxth	r2, r2
 800354c:	2f01      	cmp	r7, #1
 800354e:	d101      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x242>
 8003550:	2a00      	cmp	r2, #0
 8003552:	d1b3      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x1aa>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	6893      	ldr	r3, [r2, #8]
 8003558:	f013 0301 	ands.w	r3, r3, #1
 800355c:	d0de      	beq.n	800351c <HAL_SPI_TransmitReceive+0x20a>
 800355e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003562:	b289      	uxth	r1, r1
 8003564:	2900      	cmp	r1, #0
 8003566:	d0d9      	beq.n	800351c <HAL_SPI_TransmitReceive+0x20a>
        if (hspi->RxXferCount > 1U)
 8003568:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800356c:	b289      	uxth	r1, r1
 800356e:	2901      	cmp	r1, #1
 8003570:	d9c7      	bls.n	8003502 <HAL_SPI_TransmitReceive+0x1f0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003572:	68d1      	ldr	r1, [r2, #12]
 8003574:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003576:	8011      	strh	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003578:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800357a:	3202      	adds	r2, #2
 800357c:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800357e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003582:	3a02      	subs	r2, #2
 8003584:	b292      	uxth	r2, r2
 8003586:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800358a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800358e:	b292      	uxth	r2, r2
 8003590:	2a01      	cmp	r2, #1
 8003592:	d9af      	bls.n	80034f4 <HAL_SPI_TransmitReceive+0x1e2>
        txallowed = 1U;
 8003594:	461f      	mov	r7, r3
 8003596:	e7c1      	b.n	800351c <HAL_SPI_TransmitReceive+0x20a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003598:	4632      	mov	r2, r6
 800359a:	4629      	mov	r1, r5
 800359c:	4620      	mov	r0, r4
 800359e:	f7ff fcdf 	bl	8002f60 <SPI_EndRxTxTransaction>
 80035a2:	b120      	cbz	r0, 80035ae <HAL_SPI_TransmitReceive+0x29c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035a4:	2320      	movs	r3, #32
 80035a6:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80035a8:	2001      	movs	r0, #1
 80035aa:	e000      	b.n	80035ae <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_BUSY;
 80035ac:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80035b4:	2300      	movs	r3, #0
 80035b6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80035ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80035be:	2001      	movs	r0, #1
 80035c0:	e7f5      	b.n	80035ae <HAL_SPI_TransmitReceive+0x29c>
        errorcode = HAL_TIMEOUT;
 80035c2:	2003      	movs	r0, #3
 80035c4:	e7f3      	b.n	80035ae <HAL_SPI_TransmitReceive+0x29c>
        errorcode = HAL_TIMEOUT;
 80035c6:	2003      	movs	r0, #3
 80035c8:	e7f1      	b.n	80035ae <HAL_SPI_TransmitReceive+0x29c>
 80035ca:	2003      	movs	r0, #3
 80035cc:	e7ef      	b.n	80035ae <HAL_SPI_TransmitReceive+0x29c>
  __HAL_LOCK(hspi);
 80035ce:	2002      	movs	r0, #2
 80035d0:	e7f3      	b.n	80035ba <HAL_SPI_TransmitReceive+0x2a8>

080035d2 <HAL_SPI_Receive>:
{
 80035d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	4604      	mov	r4, r0
 80035da:	4688      	mov	r8, r1
 80035dc:	4617      	mov	r7, r2
 80035de:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035e0:	6843      	ldr	r3, [r0, #4]
 80035e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e6:	d055      	beq.n	8003694 <HAL_SPI_Receive+0xc2>
  __HAL_LOCK(hspi);
 80035e8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f000 80c0 	beq.w	8003772 <HAL_SPI_Receive+0x1a0>
 80035f2:	2301      	movs	r3, #1
 80035f4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80035f8:	f7fe f976 	bl	80018e8 <HAL_GetTick>
 80035fc:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80035fe:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003602:	b2c0      	uxtb	r0, r0
 8003604:	2801      	cmp	r0, #1
 8003606:	f040 80a2 	bne.w	800374e <HAL_SPI_Receive+0x17c>
  if ((pData == NULL) || (Size == 0U))
 800360a:	f1b8 0f00 	cmp.w	r8, #0
 800360e:	f000 809f 	beq.w	8003750 <HAL_SPI_Receive+0x17e>
 8003612:	2f00      	cmp	r7, #0
 8003614:	f000 809c 	beq.w	8003750 <HAL_SPI_Receive+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003618:	2304      	movs	r3, #4
 800361a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800361e:	2300      	movs	r3, #0
 8003620:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003622:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003626:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800362a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800362e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003630:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003632:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003634:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003636:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003638:	68e3      	ldr	r3, [r4, #12]
 800363a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	6853      	ldr	r3, [r2, #4]
 8003642:	bf8c      	ite	hi
 8003644:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003648:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 800364c:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364e:	68a3      	ldr	r3, [r4, #8]
 8003650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003654:	d02a      	beq.n	80036ac <HAL_SPI_Receive+0xda>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800365e:	d103      	bne.n	8003668 <HAL_SPI_Receive+0x96>
    __HAL_SPI_ENABLE(hspi);
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003666:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003668:	68e3      	ldr	r3, [r4, #12]
 800366a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800366e:	d928      	bls.n	80036c2 <HAL_SPI_Receive+0xf0>
    while (hspi->RxXferCount > 0U)
 8003670:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d157      	bne.n	800372a <HAL_SPI_Receive+0x158>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800367a:	4632      	mov	r2, r6
 800367c:	4629      	mov	r1, r5
 800367e:	4620      	mov	r0, r4
 8003680:	f7ff fc9f 	bl	8002fc2 <SPI_EndRxTransaction>
 8003684:	b108      	cbz	r0, 800368a <HAL_SPI_Receive+0xb8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003686:	2320      	movs	r3, #32
 8003688:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800368a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800368c:	3800      	subs	r0, #0
 800368e:	bf18      	it	ne
 8003690:	2001      	movne	r0, #1
error :
 8003692:	e05d      	b.n	8003750 <HAL_SPI_Receive+0x17e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003694:	6883      	ldr	r3, [r0, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1a6      	bne.n	80035e8 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800369a:	2304      	movs	r3, #4
 800369c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036a0:	9500      	str	r5, [sp, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	460a      	mov	r2, r1
 80036a6:	f7ff fe34 	bl	8003312 <HAL_SPI_TransmitReceive>
 80036aa:	e057      	b.n	800375c <HAL_SPI_Receive+0x18a>
    __HAL_SPI_DISABLE(hspi);
 80036ac:	6822      	ldr	r2, [r4, #0]
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b4:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	6813      	ldr	r3, [r2, #0]
 80036ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e7c9      	b.n	8003656 <HAL_SPI_Receive+0x84>
    while (hspi->RxXferCount > 0U)
 80036c2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b97b      	cbnz	r3, 80036ea <HAL_SPI_Receive+0x118>
 80036ca:	e7d6      	b.n	800367a <HAL_SPI_Receive+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036cc:	f7fe f90c 	bl	80018e8 <HAL_GetTick>
 80036d0:	1b80      	subs	r0, r0, r6
 80036d2:	42a8      	cmp	r0, r5
 80036d4:	d302      	bcc.n	80036dc <HAL_SPI_Receive+0x10a>
 80036d6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80036da:	d142      	bne.n	8003762 <HAL_SPI_Receive+0x190>
 80036dc:	2d00      	cmp	r5, #0
 80036de:	d042      	beq.n	8003766 <HAL_SPI_Receive+0x194>
    while (hspi->RxXferCount > 0U)
 80036e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0c7      	beq.n	800367a <HAL_SPI_Receive+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	f012 0f01 	tst.w	r2, #1
 80036f2:	d0eb      	beq.n	80036cc <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80036f6:	7b1b      	ldrb	r3, [r3, #12]
 80036f8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036fc:	3301      	adds	r3, #1
 80036fe:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003700:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003704:	3a01      	subs	r2, #1
 8003706:	b292      	uxth	r2, r2
 8003708:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 800370c:	e7e8      	b.n	80036e0 <HAL_SPI_Receive+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800370e:	f7fe f8eb 	bl	80018e8 <HAL_GetTick>
 8003712:	1b80      	subs	r0, r0, r6
 8003714:	42a8      	cmp	r0, r5
 8003716:	d302      	bcc.n	800371e <HAL_SPI_Receive+0x14c>
 8003718:	f1b5 3fff 	cmp.w	r5, #4294967295
 800371c:	d125      	bne.n	800376a <HAL_SPI_Receive+0x198>
 800371e:	b335      	cbz	r5, 800376e <HAL_SPI_Receive+0x19c>
    while (hspi->RxXferCount > 0U)
 8003720:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0a7      	beq.n	800367a <HAL_SPI_Receive+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	f012 0f01 	tst.w	r2, #1
 8003732:	d0ec      	beq.n	800370e <HAL_SPI_Receive+0x13c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003738:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800373a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800373c:	3302      	adds	r3, #2
 800373e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003740:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003744:	3a01      	subs	r2, #1
 8003746:	b292      	uxth	r2, r2
 8003748:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 800374c:	e7e8      	b.n	8003720 <HAL_SPI_Receive+0x14e>
    errorcode = HAL_BUSY;
 800374e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003750:	2301      	movs	r3, #1
 8003752:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003756:	2300      	movs	r3, #0
 8003758:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800375c:	b002      	add	sp, #8
 800375e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 8003762:	2003      	movs	r0, #3
 8003764:	e7f4      	b.n	8003750 <HAL_SPI_Receive+0x17e>
 8003766:	2003      	movs	r0, #3
 8003768:	e7f2      	b.n	8003750 <HAL_SPI_Receive+0x17e>
          errorcode = HAL_TIMEOUT;
 800376a:	2003      	movs	r0, #3
 800376c:	e7f0      	b.n	8003750 <HAL_SPI_Receive+0x17e>
 800376e:	2003      	movs	r0, #3
 8003770:	e7ee      	b.n	8003750 <HAL_SPI_Receive+0x17e>
  __HAL_LOCK(hspi);
 8003772:	2002      	movs	r0, #2
 8003774:	e7f2      	b.n	800375c <HAL_SPI_Receive+0x18a>
	...

08003778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003778:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377a:	6a03      	ldr	r3, [r0, #32]
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003786:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003788:	4a10      	ldr	r2, [pc, #64]	; (80037cc <TIM_OC1_SetConfig+0x54>)
 800378a:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800378c:	680d      	ldr	r5, [r1, #0]
 800378e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003790:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003794:	688d      	ldr	r5, [r1, #8]
 8003796:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003798:	4d0d      	ldr	r5, [pc, #52]	; (80037d0 <TIM_OC1_SetConfig+0x58>)
 800379a:	42a8      	cmp	r0, r5
 800379c:	d003      	beq.n	80037a6 <TIM_OC1_SetConfig+0x2e>
 800379e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80037a2:	42a8      	cmp	r0, r5
 80037a4:	d10b      	bne.n	80037be <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037a6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037aa:	68cd      	ldr	r5, [r1, #12]
 80037ac:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ae:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037b2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037b6:	694d      	ldr	r5, [r1, #20]
 80037b8:	698e      	ldr	r6, [r1, #24]
 80037ba:	4335      	orrs	r5, r6
 80037bc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037be:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c2:	684a      	ldr	r2, [r1, #4]
 80037c4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c6:	6203      	str	r3, [r0, #32]
}
 80037c8:	bc70      	pop	{r4, r5, r6}
 80037ca:	4770      	bx	lr
 80037cc:	fffeff8c 	.word	0xfffeff8c
 80037d0:	40010000 	.word	0x40010000

080037d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037d6:	6a03      	ldr	r3, [r0, #32]
 80037d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e2:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e4:	4a12      	ldr	r2, [pc, #72]	; (8003830 <TIM_OC3_SetConfig+0x5c>)
 80037e6:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e8:	680d      	ldr	r5, [r1, #0]
 80037ea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037f0:	688d      	ldr	r5, [r1, #8]
 80037f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037f6:	4d0f      	ldr	r5, [pc, #60]	; (8003834 <TIM_OC3_SetConfig+0x60>)
 80037f8:	42a8      	cmp	r0, r5
 80037fa:	d003      	beq.n	8003804 <TIM_OC3_SetConfig+0x30>
 80037fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003800:	42a8      	cmp	r0, r5
 8003802:	d10d      	bne.n	8003820 <TIM_OC3_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003808:	68cd      	ldr	r5, [r1, #12]
 800380a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800380e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003812:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003816:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003818:	698e      	ldr	r6, [r1, #24]
 800381a:	4335      	orrs	r5, r6
 800381c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003820:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003822:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003824:	684a      	ldr	r2, [r1, #4]
 8003826:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	6203      	str	r3, [r0, #32]
}
 800382a:	bc70      	pop	{r4, r5, r6}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	fffeff8c 	.word	0xfffeff8c
 8003834:	40010000 	.word	0x40010000

08003838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800383a:	6a03      	ldr	r3, [r0, #32]
 800383c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003840:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003846:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003848:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <TIM_OC4_SetConfig+0x4c>)
 800384a:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800384c:	680d      	ldr	r5, [r1, #0]
 800384e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003856:	688d      	ldr	r5, [r1, #8]
 8003858:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385c:	4d0a      	ldr	r5, [pc, #40]	; (8003888 <TIM_OC4_SetConfig+0x50>)
 800385e:	42a8      	cmp	r0, r5
 8003860:	d003      	beq.n	800386a <TIM_OC4_SetConfig+0x32>
 8003862:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003866:	42a8      	cmp	r0, r5
 8003868:	d104      	bne.n	8003874 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800386a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800386e:	694d      	ldr	r5, [r1, #20]
 8003870:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003874:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003876:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003878:	684a      	ldr	r2, [r1, #4]
 800387a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	6203      	str	r3, [r0, #32]
}
 800387e:	bc30      	pop	{r4, r5}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	feff8cff 	.word	0xfeff8cff
 8003888:	40010000 	.word	0x40010000

0800388c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800388e:	6a03      	ldr	r3, [r0, #32]
 8003890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003894:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800389a:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <TIM_OC5_SetConfig+0x48>)
 800389e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a0:	680d      	ldr	r5, [r1, #0]
 80038a2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80038a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80038a8:	688d      	ldr	r5, [r1, #8]
 80038aa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ae:	4d0a      	ldr	r5, [pc, #40]	; (80038d8 <TIM_OC5_SetConfig+0x4c>)
 80038b0:	42a8      	cmp	r0, r5
 80038b2:	d003      	beq.n	80038bc <TIM_OC5_SetConfig+0x30>
 80038b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038b8:	42a8      	cmp	r0, r5
 80038ba:	d104      	bne.n	80038c6 <TIM_OC5_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80038bc:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038c0:	694d      	ldr	r5, [r1, #20]
 80038c2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038c8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038ca:	684a      	ldr	r2, [r1, #4]
 80038cc:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ce:	6203      	str	r3, [r0, #32]
}
 80038d0:	bc30      	pop	{r4, r5}
 80038d2:	4770      	bx	lr
 80038d4:	fffeff8f 	.word	0xfffeff8f
 80038d8:	40010000 	.word	0x40010000

080038dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038de:	6a03      	ldr	r3, [r0, #32]
 80038e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038ea:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038ec:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <TIM_OC6_SetConfig+0x4c>)
 80038ee:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	680d      	ldr	r5, [r1, #0]
 80038f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038fa:	688d      	ldr	r5, [r1, #8]
 80038fc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003900:	4d0a      	ldr	r5, [pc, #40]	; (800392c <TIM_OC6_SetConfig+0x50>)
 8003902:	42a8      	cmp	r0, r5
 8003904:	d003      	beq.n	800390e <TIM_OC6_SetConfig+0x32>
 8003906:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800390a:	42a8      	cmp	r0, r5
 800390c:	d104      	bne.n	8003918 <TIM_OC6_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800390e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003912:	694d      	ldr	r5, [r1, #20]
 8003914:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003918:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800391a:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800391c:	684a      	ldr	r2, [r1, #4]
 800391e:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003920:	6203      	str	r3, [r0, #32]
}
 8003922:	bc30      	pop	{r4, r5}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	feff8fff 	.word	0xfeff8fff
 800392c:	40010000 	.word	0x40010000

08003930 <TIM_Base_SetConfig>:
{
 8003930:	b410      	push	{r4}
  tmpcr1 = TIMx->CR1;
 8003932:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	4a34      	ldr	r2, [pc, #208]	; (8003a08 <TIM_Base_SetConfig+0xd8>)
 8003936:	4290      	cmp	r0, r2
 8003938:	bf14      	ite	ne
 800393a:	2200      	movne	r2, #0
 800393c:	2201      	moveq	r2, #1
 800393e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003942:	d044      	beq.n	80039ce <TIM_Base_SetConfig+0x9e>
 8003944:	2a00      	cmp	r2, #0
 8003946:	d142      	bne.n	80039ce <TIM_Base_SetConfig+0x9e>
 8003948:	4c30      	ldr	r4, [pc, #192]	; (8003a0c <TIM_Base_SetConfig+0xdc>)
 800394a:	42a0      	cmp	r0, r4
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0x36>
 800394e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003952:	42a0      	cmp	r0, r4
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0x36>
 8003956:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800395a:	42a0      	cmp	r0, r4
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0x36>
 800395e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003962:	42a0      	cmp	r0, r4
 8003964:	d10a      	bne.n	800397c <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800396a:	684c      	ldr	r4, [r1, #4]
 800396c:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396e:	4c27      	ldr	r4, [pc, #156]	; (8003a0c <TIM_Base_SetConfig+0xdc>)
 8003970:	42a0      	cmp	r0, r4
 8003972:	d030      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
 8003974:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003978:	42a0      	cmp	r0, r4
 800397a:	d02c      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
 800397c:	4c24      	ldr	r4, [pc, #144]	; (8003a10 <TIM_Base_SetConfig+0xe0>)
 800397e:	42a0      	cmp	r0, r4
 8003980:	d029      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
 8003982:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003986:	42a0      	cmp	r0, r4
 8003988:	d025      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
 800398a:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800398e:	42a0      	cmp	r0, r4
 8003990:	d021      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
 8003992:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003996:	42a0      	cmp	r0, r4
 8003998:	d01d      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
 800399a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800399e:	42a0      	cmp	r0, r4
 80039a0:	d019      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
 80039a2:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 80039a6:	42a0      	cmp	r0, r4
 80039a8:	d015      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
 80039aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80039ae:	42a0      	cmp	r0, r4
 80039b0:	d011      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
 80039b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80039b6:	42a0      	cmp	r0, r4
 80039b8:	d00d      	beq.n	80039d6 <TIM_Base_SetConfig+0xa6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039be:	694a      	ldr	r2, [r1, #20]
 80039c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80039c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c4:	688b      	ldr	r3, [r1, #8]
 80039c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039c8:	680b      	ldr	r3, [r1, #0]
 80039ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039cc:	e016      	b.n	80039fc <TIM_Base_SetConfig+0xcc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039d2:	684c      	ldr	r4, [r1, #4]
 80039d4:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039da:	68cc      	ldr	r4, [r1, #12]
 80039dc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e2:	694c      	ldr	r4, [r1, #20]
 80039e4:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80039e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	688b      	ldr	r3, [r1, #8]
 80039ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039ec:	680b      	ldr	r3, [r1, #0]
 80039ee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <TIM_Base_SetConfig+0xe4>)
 80039f2:	4298      	cmp	r0, r3
 80039f4:	d000      	beq.n	80039f8 <TIM_Base_SetConfig+0xc8>
 80039f6:	b10a      	cbz	r2, 80039fc <TIM_Base_SetConfig+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 80039f8:	690b      	ldr	r3, [r1, #16]
 80039fa:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80039fc:	2301      	movs	r3, #1
 80039fe:	6143      	str	r3, [r0, #20]
}
 8003a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40010000 	.word	0x40010000
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000c00 	.word	0x40000c00
 8003a14:	40010400 	.word	0x40010400

08003a18 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003a18:	b360      	cbz	r0, 8003a74 <HAL_TIM_PWM_Init+0x5c>
{
 8003a1a:	b510      	push	{r4, lr}
 8003a1c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a22:	b313      	cbz	r3, 8003a6a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	2302      	movs	r3, #2
 8003a26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003a30:	f7ff ff7e 	bl	8003930 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003a3e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003a42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003a46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003a4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a5a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003a5e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003a62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a66:	2000      	movs	r0, #0
}
 8003a68:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003a6e:	f7fd fde5 	bl	800163c <HAL_TIM_PWM_MspInit>
 8003a72:	e7d7      	b.n	8003a24 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003a74:	2001      	movs	r0, #1
}
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003a78:	b360      	cbz	r0, 8003ad4 <HAL_TIM_IC_Init+0x5c>
{
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a82:	b313      	cbz	r3, 8003aca <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003a90:	f7ff ff4e 	bl	8003930 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003a9e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003aa2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003aa6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003aaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003abe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003ac2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003ac6:	2000      	movs	r0, #0
}
 8003ac8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003aca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003ace:	f7fd fd7f 	bl	80015d0 <HAL_TIM_IC_MspInit>
 8003ad2:	e7d7      	b.n	8003a84 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8003ad4:	2001      	movs	r0, #1
}
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_OC2_SetConfig>:
{
 8003ad8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ada:	6a03      	ldr	r3, [r0, #32]
 8003adc:	f023 0310 	bic.w	r3, r3, #16
 8003ae0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003ae2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003ae4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003ae6:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ae8:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <TIM_OC2_SetConfig+0x5c>)
 8003aea:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aec:	680d      	ldr	r5, [r1, #0]
 8003aee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003af2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af6:	688d      	ldr	r5, [r1, #8]
 8003af8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003afc:	4d0e      	ldr	r5, [pc, #56]	; (8003b38 <TIM_OC2_SetConfig+0x60>)
 8003afe:	42a8      	cmp	r0, r5
 8003b00:	d003      	beq.n	8003b0a <TIM_OC2_SetConfig+0x32>
 8003b02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b06:	42a8      	cmp	r0, r5
 8003b08:	d10d      	bne.n	8003b26 <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b0e:	68cd      	ldr	r5, [r1, #12]
 8003b10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b18:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b1c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b1e:	698e      	ldr	r6, [r1, #24]
 8003b20:	4335      	orrs	r5, r6
 8003b22:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003b26:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b28:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003b2a:	684a      	ldr	r2, [r1, #4]
 8003b2c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003b2e:	6203      	str	r3, [r0, #32]
}
 8003b30:	bc70      	pop	{r4, r5, r6}
 8003b32:	4770      	bx	lr
 8003b34:	feff8cff 	.word	0xfeff8cff
 8003b38:	40010000 	.word	0x40010000

08003b3c <HAL_TIM_PWM_ConfigChannel>:
{
 8003b3c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003b3e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	f000 808c 	beq.w	8003c60 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003b48:	4604      	mov	r4, r0
 8003b4a:	460d      	mov	r5, r1
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003b52:	2a14      	cmp	r2, #20
 8003b54:	d81e      	bhi.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x58>
 8003b56:	e8df f002 	tbb	[pc, r2]
 8003b5a:	1d0b      	.short	0x1d0b
 8003b5c:	1d211d1d 	.word	0x1d211d1d
 8003b60:	1d351d1d 	.word	0x1d351d1d
 8003b64:	1d481d1d 	.word	0x1d481d1d
 8003b68:	1d5c1d1d 	.word	0x1d5c1d1d
 8003b6c:	1d1d      	.short	0x1d1d
 8003b6e:	6f          	.byte	0x6f
 8003b6f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b70:	6800      	ldr	r0, [r0, #0]
 8003b72:	f7ff fe01 	bl	8003778 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	6993      	ldr	r3, [r2, #24]
 8003b7a:	f043 0308 	orr.w	r3, r3, #8
 8003b7e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	6993      	ldr	r3, [r2, #24]
 8003b84:	f023 0304 	bic.w	r3, r3, #4
 8003b88:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	6993      	ldr	r3, [r2, #24]
 8003b8e:	6929      	ldr	r1, [r5, #16]
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8003b94:	2000      	movs	r0, #0
 8003b96:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b9c:	6800      	ldr	r0, [r0, #0]
 8003b9e:	f7ff ff9b 	bl	8003ad8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	6993      	ldr	r3, [r2, #24]
 8003ba6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003baa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bac:	6822      	ldr	r2, [r4, #0]
 8003bae:	6993      	ldr	r3, [r2, #24]
 8003bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	6993      	ldr	r3, [r2, #24]
 8003bba:	6929      	ldr	r1, [r5, #16]
 8003bbc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003bc0:	6193      	str	r3, [r2, #24]
      break;
 8003bc2:	e7e7      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bc4:	6800      	ldr	r0, [r0, #0]
 8003bc6:	f7ff fe05 	bl	80037d4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	69d3      	ldr	r3, [r2, #28]
 8003bce:	f043 0308 	orr.w	r3, r3, #8
 8003bd2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd4:	6822      	ldr	r2, [r4, #0]
 8003bd6:	69d3      	ldr	r3, [r2, #28]
 8003bd8:	f023 0304 	bic.w	r3, r3, #4
 8003bdc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	69d3      	ldr	r3, [r2, #28]
 8003be2:	6929      	ldr	r1, [r5, #16]
 8003be4:	430b      	orrs	r3, r1
 8003be6:	61d3      	str	r3, [r2, #28]
      break;
 8003be8:	e7d4      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bea:	6800      	ldr	r0, [r0, #0]
 8003bec:	f7ff fe24 	bl	8003838 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bf0:	6822      	ldr	r2, [r4, #0]
 8003bf2:	69d3      	ldr	r3, [r2, #28]
 8003bf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bf8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bfa:	6822      	ldr	r2, [r4, #0]
 8003bfc:	69d3      	ldr	r3, [r2, #28]
 8003bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c02:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c04:	6822      	ldr	r2, [r4, #0]
 8003c06:	69d3      	ldr	r3, [r2, #28]
 8003c08:	6929      	ldr	r1, [r5, #16]
 8003c0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c0e:	61d3      	str	r3, [r2, #28]
      break;
 8003c10:	e7c0      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c12:	6800      	ldr	r0, [r0, #0]
 8003c14:	f7ff fe3a 	bl	800388c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c18:	6822      	ldr	r2, [r4, #0]
 8003c1a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c1c:	f043 0308 	orr.w	r3, r3, #8
 8003c20:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c26:	f023 0304 	bic.w	r3, r3, #4
 8003c2a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c30:	6929      	ldr	r1, [r5, #16]
 8003c32:	430b      	orrs	r3, r1
 8003c34:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8003c36:	e7ad      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c38:	6800      	ldr	r0, [r0, #0]
 8003c3a:	f7ff fe4f 	bl	80038dc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c3e:	6822      	ldr	r2, [r4, #0]
 8003c40:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c46:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c48:	6822      	ldr	r2, [r4, #0]
 8003c4a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c50:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c52:	6822      	ldr	r2, [r4, #0]
 8003c54:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003c56:	6929      	ldr	r1, [r5, #16]
 8003c58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c5c:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8003c5e:	e799      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 8003c60:	2002      	movs	r0, #2
 8003c62:	e79a      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x5e>

08003c64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c64:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c66:	6a04      	ldr	r4, [r0, #32]
 8003c68:	f024 0401 	bic.w	r4, r4, #1
 8003c6c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003c70:	6a06      	ldr	r6, [r0, #32]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c72:	4d19      	ldr	r5, [pc, #100]	; (8003cd8 <TIM_TI1_SetConfig+0x74>)
 8003c74:	42a8      	cmp	r0, r5
 8003c76:	d01d      	beq.n	8003cb4 <TIM_TI1_SetConfig+0x50>
 8003c78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c7c:	d01a      	beq.n	8003cb4 <TIM_TI1_SetConfig+0x50>
 8003c7e:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 8003c82:	42a8      	cmp	r0, r5
 8003c84:	d016      	beq.n	8003cb4 <TIM_TI1_SetConfig+0x50>
 8003c86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c8a:	42a8      	cmp	r0, r5
 8003c8c:	d012      	beq.n	8003cb4 <TIM_TI1_SetConfig+0x50>
 8003c8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c92:	42a8      	cmp	r0, r5
 8003c94:	d00e      	beq.n	8003cb4 <TIM_TI1_SetConfig+0x50>
 8003c96:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 8003c9a:	42a8      	cmp	r0, r5
 8003c9c:	d00a      	beq.n	8003cb4 <TIM_TI1_SetConfig+0x50>
 8003c9e:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8003ca2:	42a8      	cmp	r0, r5
 8003ca4:	d006      	beq.n	8003cb4 <TIM_TI1_SetConfig+0x50>
 8003ca6:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8003caa:	42a8      	cmp	r0, r5
 8003cac:	d002      	beq.n	8003cb4 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003cae:	f044 0201 	orr.w	r2, r4, #1
 8003cb2:	e002      	b.n	8003cba <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003cb4:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003cb8:	4322      	orrs	r2, r4
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cc4:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cc8:	f001 010a 	and.w	r1, r1, #10
 8003ccc:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cce:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003cd0:	6201      	str	r1, [r0, #32]
}
 8003cd2:	bc70      	pop	{r4, r5, r6}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000

08003cdc <HAL_TIM_IC_ConfigChannel>:
{
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003cde:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	f000 8092 	beq.w	8003e0c <HAL_TIM_IC_ConfigChannel+0x130>
 8003ce8:	4604      	mov	r4, r0
 8003cea:	460d      	mov	r5, r1
 8003cec:	2301      	movs	r3, #1
 8003cee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	d02d      	beq.n	8003d52 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_2)
 8003cf6:	2a04      	cmp	r2, #4
 8003cf8:	d03c      	beq.n	8003d74 <HAL_TIM_IC_ConfigChannel+0x98>
  else if (Channel == TIM_CHANNEL_3)
 8003cfa:	2a08      	cmp	r2, #8
 8003cfc:	d061      	beq.n	8003dc2 <HAL_TIM_IC_ConfigChannel+0xe6>
    TIM_TI4_SetConfig(htim->Instance,
 8003cfe:	6800      	ldr	r0, [r0, #0]
 8003d00:	680b      	ldr	r3, [r1, #0]
 8003d02:	684f      	ldr	r7, [r1, #4]
 8003d04:	68ca      	ldr	r2, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d06:	6a06      	ldr	r6, [r0, #32]
 8003d08:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
 8003d0c:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d0e:	69c1      	ldr	r1, [r0, #28]
  tmpccer = TIMx->CCER;
 8003d10:	6a06      	ldr	r6, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d12:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d16:	ea41 2107 	orr.w	r1, r1, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d1a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d1e:	0312      	lsls	r2, r2, #12
 8003d20:	b292      	uxth	r2, r2
 8003d22:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d24:	f426 4120 	bic.w	r1, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d28:	031b      	lsls	r3, r3, #12
 8003d2a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003d2e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d30:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003d32:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	69d3      	ldr	r3, [r2, #28]
 8003d38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d3c:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	69d3      	ldr	r3, [r2, #28]
 8003d42:	68a9      	ldr	r1, [r5, #8]
 8003d44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d48:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(htim);
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8003d52:	68cb      	ldr	r3, [r1, #12]
 8003d54:	684a      	ldr	r2, [r1, #4]
 8003d56:	6809      	ldr	r1, [r1, #0]
 8003d58:	6800      	ldr	r0, [r0, #0]
 8003d5a:	f7ff ff83 	bl	8003c64 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	6993      	ldr	r3, [r2, #24]
 8003d62:	f023 030c 	bic.w	r3, r3, #12
 8003d66:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d68:	6822      	ldr	r2, [r4, #0]
 8003d6a:	6993      	ldr	r3, [r2, #24]
 8003d6c:	68a9      	ldr	r1, [r5, #8]
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	6193      	str	r3, [r2, #24]
 8003d72:	e7ea      	b.n	8003d4a <HAL_TIM_IC_ConfigChannel+0x6e>
    TIM_TI2_SetConfig(htim->Instance,
 8003d74:	6800      	ldr	r0, [r0, #0]
 8003d76:	680b      	ldr	r3, [r1, #0]
 8003d78:	684f      	ldr	r7, [r1, #4]
 8003d7a:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7c:	6a06      	ldr	r6, [r0, #32]
 8003d7e:	f026 0610 	bic.w	r6, r6, #16
 8003d82:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d84:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8003d86:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d88:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d8c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d90:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d94:	0312      	lsls	r2, r2, #12
 8003d96:	b292      	uxth	r2, r2
 8003d98:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d9a:	f026 01a0 	bic.w	r1, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003da4:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8003da6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003da8:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	6993      	ldr	r3, [r2, #24]
 8003dae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003db2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	6993      	ldr	r3, [r2, #24]
 8003db8:	68a9      	ldr	r1, [r5, #8]
 8003dba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003dbe:	6193      	str	r3, [r2, #24]
 8003dc0:	e7c3      	b.n	8003d4a <HAL_TIM_IC_ConfigChannel+0x6e>
    TIM_TI3_SetConfig(htim->Instance,
 8003dc2:	6801      	ldr	r1, [r0, #0]
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	6868      	ldr	r0, [r5, #4]
 8003dc8:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dca:	6a0e      	ldr	r6, [r1, #32]
 8003dcc:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 8003dd0:	620e      	str	r6, [r1, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dd2:	69cf      	ldr	r7, [r1, #28]
  tmpccer = TIMx->CCER;
 8003dd4:	6a0e      	ldr	r6, [r1, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003dd6:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 8003dda:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ddc:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003de0:	0112      	lsls	r2, r2, #4
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003de6:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003df0:	4303      	orrs	r3, r0
  TIMx->CCMR2 = tmpccmr2;
 8003df2:	61ca      	str	r2, [r1, #28]
  TIMx->CCER = tmpccer;
 8003df4:	620b      	str	r3, [r1, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	69d3      	ldr	r3, [r2, #28]
 8003dfa:	f023 030c 	bic.w	r3, r3, #12
 8003dfe:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	69d3      	ldr	r3, [r2, #28]
 8003e04:	68a9      	ldr	r1, [r5, #8]
 8003e06:	430b      	orrs	r3, r1
 8003e08:	61d3      	str	r3, [r2, #28]
 8003e0a:	e79e      	b.n	8003d4a <HAL_TIM_IC_ConfigChannel+0x6e>
  __HAL_LOCK(htim);
 8003e0c:	2002      	movs	r0, #2
 8003e0e:	e79f      	b.n	8003d50 <HAL_TIM_IC_ConfigChannel+0x74>

08003e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e10:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e12:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e14:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003e1e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e20:	6082      	str	r2, [r0, #8]
}
 8003e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <TIM_SlaveTimer_SetConfig>:
{
 8003e28:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8003e2a:	6804      	ldr	r4, [r0, #0]
 8003e2c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e32:	684b      	ldr	r3, [r1, #4]
 8003e34:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e36:	4b2d      	ldr	r3, [pc, #180]	; (8003eec <TIM_SlaveTimer_SetConfig+0xc4>)
 8003e38:	4013      	ands	r3, r2
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e3a:	680a      	ldr	r2, [r1, #0]
 8003e3c:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003e3e:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003e40:	684b      	ldr	r3, [r1, #4]
 8003e42:	2b60      	cmp	r3, #96	; 0x60
 8003e44:	d039      	beq.n	8003eba <TIM_SlaveTimer_SetConfig+0x92>
 8003e46:	d819      	bhi.n	8003e7c <TIM_SlaveTimer_SetConfig+0x54>
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d021      	beq.n	8003e90 <TIM_SlaveTimer_SetConfig+0x68>
 8003e4c:	2b50      	cmp	r3, #80	; 0x50
 8003e4e:	d113      	bne.n	8003e78 <TIM_SlaveTimer_SetConfig+0x50>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e50:	6803      	ldr	r3, [r0, #0]
 8003e52:	6888      	ldr	r0, [r1, #8]
 8003e54:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8003e56:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e58:	6a1c      	ldr	r4, [r3, #32]
 8003e5a:	f024 0401 	bic.w	r4, r4, #1
 8003e5e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e60:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e66:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e6a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003e6e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e72:	6219      	str	r1, [r3, #32]
  return HAL_OK;
 8003e74:	2000      	movs	r0, #0
}
 8003e76:	e036      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0xbe>
  switch (sSlaveConfig->InputTrigger)
 8003e78:	2000      	movs	r0, #0
 8003e7a:	e034      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0xbe>
 8003e7c:	2b70      	cmp	r3, #112	; 0x70
 8003e7e:	d131      	bne.n	8003ee4 <TIM_SlaveTimer_SetConfig+0xbc>
      TIM_ETR_SetConfig(htim->Instance,
 8003e80:	690b      	ldr	r3, [r1, #16]
 8003e82:	688a      	ldr	r2, [r1, #8]
 8003e84:	68c9      	ldr	r1, [r1, #12]
 8003e86:	6800      	ldr	r0, [r0, #0]
 8003e88:	f7ff ffc2 	bl	8003e10 <TIM_ETR_SetConfig>
  return HAL_OK;
 8003e8c:	2000      	movs	r0, #0
      break;
 8003e8e:	e02a      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0xbe>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e90:	680b      	ldr	r3, [r1, #0]
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d028      	beq.n	8003ee8 <TIM_SlaveTimer_SetConfig+0xc0>
      tmpccer = htim->Instance->CCER;
 8003e96:	6803      	ldr	r3, [r0, #0]
 8003e98:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ea2:	6802      	ldr	r2, [r0, #0]
 8003ea4:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003eaa:	6909      	ldr	r1, [r1, #16]
 8003eac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003eb0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8003eb2:	6803      	ldr	r3, [r0, #0]
 8003eb4:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 8003eb6:	2000      	movs	r0, #0
      break;
 8003eb8:	e015      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0xbe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eba:	6803      	ldr	r3, [r0, #0]
 8003ebc:	688c      	ldr	r4, [r1, #8]
 8003ebe:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec0:	6a18      	ldr	r0, [r3, #32]
 8003ec2:	f020 0010 	bic.w	r0, r0, #16
 8003ec6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003eca:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ecc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ed0:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003edc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ede:	621a      	str	r2, [r3, #32]
  return HAL_OK;
 8003ee0:	2000      	movs	r0, #0
}
 8003ee2:	e000      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0xbe>
  switch (sSlaveConfig->InputTrigger)
 8003ee4:	2000      	movs	r0, #0
}
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8003ee8:	2001      	movs	r0, #1
 8003eea:	e7fc      	b.n	8003ee6 <TIM_SlaveTimer_SetConfig+0xbe>
 8003eec:	fffefff8 	.word	0xfffefff8

08003ef0 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003ef0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d022      	beq.n	8003f3e <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003efc:	2301      	movs	r3, #1
 8003efe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003f02:	2302      	movs	r3, #2
 8003f04:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f08:	f7ff ff8e 	bl	8003e28 <TIM_SlaveTimer_SetConfig>
 8003f0c:	b980      	cbnz	r0, 8003f30 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f0e:	6822      	ldr	r2, [r4, #0]
 8003f10:	68d3      	ldr	r3, [r2, #12]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f16:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f18:	6822      	ldr	r2, [r4, #0]
 8003f1a:	68d3      	ldr	r3, [r2, #12]
 8003f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f20:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003f2e:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8003f30:	2001      	movs	r0, #1
 8003f32:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003f36:	2300      	movs	r3, #0
 8003f38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003f3c:	e7f7      	b.n	8003f2e <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8003f3e:	2002      	movs	r0, #2
}
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d051      	beq.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8003f4c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	2302      	movs	r3, #2
 8003f56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f5a:	6802      	ldr	r2, [r0, #0]
 8003f5c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f5e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f60:	4d24      	ldr	r5, [pc, #144]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f62:	42aa      	cmp	r2, r5
 8003f64:	d003      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8003f66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f6a:	42aa      	cmp	r2, r5
 8003f6c:	d103      	bne.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f72:	684d      	ldr	r5, [r1, #4]
 8003f74:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f7a:	680d      	ldr	r5, [r1, #0]
 8003f7c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f80:	6802      	ldr	r2, [r0, #0]
 8003f82:	4b1c      	ldr	r3, [pc, #112]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f84:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003f88:	bf18      	it	ne
 8003f8a:	429a      	cmpne	r2, r3
 8003f8c:	bf0c      	ite	eq
 8003f8e:	2301      	moveq	r3, #1
 8003f90:	2300      	movne	r3, #0
 8003f92:	4d19      	ldr	r5, [pc, #100]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f94:	42aa      	cmp	r2, r5
 8003f96:	bf08      	it	eq
 8003f98:	f043 0301 	orreq.w	r3, r3, #1
 8003f9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fa0:	42aa      	cmp	r2, r5
 8003fa2:	bf08      	it	eq
 8003fa4:	f043 0301 	orreq.w	r3, r3, #1
 8003fa8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fac:	42aa      	cmp	r2, r5
 8003fae:	bf08      	it	eq
 8003fb0:	f043 0301 	orreq.w	r3, r3, #1
 8003fb4:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 8003fb8:	42aa      	cmp	r2, r5
 8003fba:	bf08      	it	eq
 8003fbc:	f043 0301 	orreq.w	r3, r3, #1
 8003fc0:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8003fc4:	42aa      	cmp	r2, r5
 8003fc6:	bf08      	it	eq
 8003fc8:	f043 0301 	orreq.w	r3, r3, #1
 8003fcc:	b913      	cbnz	r3, 8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d104      	bne.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x9a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fd4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd8:	688b      	ldr	r3, [r1, #8]
 8003fda:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fdc:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003fea:	4618      	mov	r0, r3
}
 8003fec:	bc30      	pop	{r4, r5}
 8003fee:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ff0:	2002      	movs	r0, #2
}
 8003ff2:	4770      	bx	lr
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40001800 	.word	0x40001800

08004000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004000:	b510      	push	{r4, lr}
 8004002:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004004:	6801      	ldr	r1, [r0, #0]
 8004006:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004008:	68a3      	ldr	r3, [r4, #8]
 800400a:	6922      	ldr	r2, [r4, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	6962      	ldr	r2, [r4, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	69e2      	ldr	r2, [r4, #28]
 8004014:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004016:	4ab3      	ldr	r2, [pc, #716]	; (80042e4 <UART_SetConfig+0x2e4>)
 8004018:	4002      	ands	r2, r0
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	6853      	ldr	r3, [r2, #4]
 8004022:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004026:	68e1      	ldr	r1, [r4, #12]
 8004028:	430b      	orrs	r3, r1
 800402a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800402c:	69a3      	ldr	r3, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800402e:	6821      	ldr	r1, [r4, #0]
 8004030:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004032:	6a20      	ldr	r0, [r4, #32]
 8004034:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004036:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	4aa9      	ldr	r2, [pc, #676]	; (80042e8 <UART_SetConfig+0x2e8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d019      	beq.n	800407a <UART_SetConfig+0x7a>
 8004046:	4aa9      	ldr	r2, [pc, #676]	; (80042ec <UART_SetConfig+0x2ec>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d024      	beq.n	8004096 <UART_SetConfig+0x96>
 800404c:	4aa8      	ldr	r2, [pc, #672]	; (80042f0 <UART_SetConfig+0x2f0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d038      	beq.n	80040c4 <UART_SetConfig+0xc4>
 8004052:	4aa8      	ldr	r2, [pc, #672]	; (80042f4 <UART_SetConfig+0x2f4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d058      	beq.n	800410a <UART_SetConfig+0x10a>
 8004058:	4aa7      	ldr	r2, [pc, #668]	; (80042f8 <UART_SetConfig+0x2f8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d069      	beq.n	8004132 <UART_SetConfig+0x132>
 800405e:	4aa7      	ldr	r2, [pc, #668]	; (80042fc <UART_SetConfig+0x2fc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	f000 808b 	beq.w	800417c <UART_SetConfig+0x17c>
 8004066:	4aa6      	ldr	r2, [pc, #664]	; (8004300 <UART_SetConfig+0x300>)
 8004068:	4293      	cmp	r3, r2
 800406a:	f000 809e 	beq.w	80041aa <UART_SetConfig+0x1aa>
 800406e:	4aa5      	ldr	r2, [pc, #660]	; (8004304 <UART_SetConfig+0x304>)
 8004070:	4293      	cmp	r3, r2
 8004072:	f000 80b1 	beq.w	80041d8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8004076:	2001      	movs	r0, #1
 8004078:	e14f      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800407a:	4ba3      	ldr	r3, [pc, #652]	; (8004308 <UART_SetConfig+0x308>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b03      	cmp	r3, #3
 8004086:	f200 8123 	bhi.w	80042d0 <UART_SetConfig+0x2d0>
 800408a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800408e:	00bc      	.short	0x00bc
 8004090:	014a0029 	.word	0x014a0029
 8004094:	0034      	.short	0x0034
 8004096:	4b9c      	ldr	r3, [pc, #624]	; (8004308 <UART_SetConfig+0x308>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	f200 8117 	bhi.w	80042d4 <UART_SetConfig+0x2d4>
 80040a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80040aa:	00cb      	.short	0x00cb
 80040ac:	01150115 	.word	0x01150115
 80040b0:	001b0115 	.word	0x001b0115
 80040b4:	01150115 	.word	0x01150115
 80040b8:	013c0115 	.word	0x013c0115
 80040bc:	01150115 	.word	0x01150115
 80040c0:	00260115 	.word	0x00260115
 80040c4:	4b90      	ldr	r3, [pc, #576]	; (8004308 <UART_SetConfig+0x308>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	f000 8127 	beq.w	8004322 <UART_SetConfig+0x322>
 80040d4:	d80d      	bhi.n	80040f2 <UART_SetConfig+0xf2>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 812f 	beq.w	800433a <UART_SetConfig+0x33a>
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d106      	bne.n	80040ee <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e0:	69e3      	ldr	r3, [r4, #28]
 80040e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e6:	d038      	beq.n	800415a <UART_SetConfig+0x15a>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e8:	f7fe fa2e 	bl	8002548 <HAL_RCC_GetSysClockFreq>
        break;
 80040ec:	e0d6      	b.n	800429c <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 80040ee:	2001      	movs	r0, #1
 80040f0:	e113      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f2:	2b30      	cmp	r3, #48	; 0x30
 80040f4:	d107      	bne.n	8004106 <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f6:	69e3      	ldr	r3, [r4, #28]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	f000 80c9 	beq.w	8004292 <UART_SetConfig+0x292>
        pclk = (uint32_t) LSE_VALUE;
 8004100:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004104:	e0cc      	b.n	80042a0 <UART_SetConfig+0x2a0>
        ret = HAL_ERROR;
 8004106:	2001      	movs	r0, #1
 8004108:	e107      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800410a:	4b7f      	ldr	r3, [pc, #508]	; (8004308 <UART_SetConfig+0x308>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	f000 8104 	beq.w	8004322 <UART_SetConfig+0x322>
 800411a:	d806      	bhi.n	800412a <UART_SetConfig+0x12a>
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 810c 	beq.w	800433a <UART_SetConfig+0x33a>
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d0dc      	beq.n	80040e0 <UART_SetConfig+0xe0>
        ret = HAL_ERROR;
 8004126:	2001      	movs	r0, #1
 8004128:	e0f7      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412a:	2bc0      	cmp	r3, #192	; 0xc0
 800412c:	d0e3      	beq.n	80040f6 <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 800412e:	2001      	movs	r0, #1
 8004130:	e0f3      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004132:	4b75      	ldr	r3, [pc, #468]	; (8004308 <UART_SetConfig+0x308>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	f000 80f5 	beq.w	800432e <UART_SetConfig+0x32e>
 8004144:	d80e      	bhi.n	8004164 <UART_SetConfig+0x164>
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80f7 	beq.w	800433a <UART_SetConfig+0x33a>
 800414c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004150:	d106      	bne.n	8004160 <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004152:	69e3      	ldr	r3, [r4, #28]
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004158:	d1c6      	bne.n	80040e8 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe f9f5 	bl	8002548 <HAL_RCC_GetSysClockFreq>
        break;
 800415e:	e076      	b.n	800424e <UART_SetConfig+0x24e>
        ret = HAL_ERROR;
 8004160:	2001      	movs	r0, #1
 8004162:	e0da      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004168:	d106      	bne.n	8004178 <UART_SetConfig+0x178>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416a:	69e0      	ldr	r0, [r4, #28]
 800416c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004170:	d06f      	beq.n	8004252 <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 8004172:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004176:	e093      	b.n	80042a0 <UART_SetConfig+0x2a0>
        ret = HAL_ERROR;
 8004178:	2001      	movs	r0, #1
 800417a:	e0ce      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800417c:	4b62      	ldr	r3, [pc, #392]	; (8004308 <UART_SetConfig+0x308>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418a:	f000 80d0 	beq.w	800432e <UART_SetConfig+0x32e>
 800418e:	d807      	bhi.n	80041a0 <UART_SetConfig+0x1a0>
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80ef 	beq.w	8004374 <UART_SetConfig+0x374>
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419a:	d0da      	beq.n	8004152 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 800419c:	2001      	movs	r0, #1
 800419e:	e0bc      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a4:	d0e1      	beq.n	800416a <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 80041a6:	2001      	movs	r0, #1
 80041a8:	e0b7      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041aa:	4b57      	ldr	r3, [pc, #348]	; (8004308 <UART_SetConfig+0x308>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b8:	f000 80b9 	beq.w	800432e <UART_SetConfig+0x32e>
 80041bc:	d807      	bhi.n	80041ce <UART_SetConfig+0x1ce>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80bb 	beq.w	800433a <UART_SetConfig+0x33a>
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d0c3      	beq.n	8004152 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 80041ca:	2001      	movs	r0, #1
 80041cc:	e0a5      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041d2:	d0ca      	beq.n	800416a <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 80041d4:	2001      	movs	r0, #1
 80041d6:	e0a0      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <UART_SetConfig+0x308>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e6:	f000 80a2 	beq.w	800432e <UART_SetConfig+0x32e>
 80041ea:	d807      	bhi.n	80041fc <UART_SetConfig+0x1fc>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a4 	beq.w	800433a <UART_SetConfig+0x33a>
 80041f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f6:	d0ac      	beq.n	8004152 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 80041f8:	2001      	movs	r0, #1
 80041fa:	e08e      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004200:	d0b3      	beq.n	800416a <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8004202:	2001      	movs	r0, #1
 8004204:	e089      	b.n	800431a <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004206:	2301      	movs	r3, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004208:	69e2      	ldr	r2, [r4, #28]
 800420a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800420e:	f040 8099 	bne.w	8004344 <UART_SetConfig+0x344>
    switch (clocksource)
 8004212:	2b08      	cmp	r3, #8
 8004214:	d860      	bhi.n	80042d8 <UART_SetConfig+0x2d8>
 8004216:	a201      	add	r2, pc, #4	; (adr r2, 800421c <UART_SetConfig+0x21c>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	0800424b 	.word	0x0800424b
 8004220:	08004281 	.word	0x08004281
 8004224:	08004287 	.word	0x08004287
 8004228:	080042d9 	.word	0x080042d9
 800422c:	0800415b 	.word	0x0800415b
 8004230:	080042d9 	.word	0x080042d9
 8004234:	080042d9 	.word	0x080042d9
 8004238:	080042d9 	.word	0x080042d9
 800423c:	08004245 	.word	0x08004245
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004240:	2300      	movs	r3, #0
 8004242:	e7e1      	b.n	8004208 <UART_SetConfig+0x208>
        pclk = (uint32_t) LSE_VALUE;
 8004244:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004248:	e003      	b.n	8004252 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 800424a:	f7fe fa85 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800424e:	2800      	cmp	r0, #0
 8004250:	d044      	beq.n	80042dc <UART_SetConfig+0x2dc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004252:	6862      	ldr	r2, [r4, #4]
 8004254:	0853      	lsrs	r3, r2, #1
 8004256:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800425a:	fbb3 f3f2 	udiv	r3, r3, r2
 800425e:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004260:	f1a2 0010 	sub.w	r0, r2, #16
 8004264:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004268:	4288      	cmp	r0, r1
 800426a:	d839      	bhi.n	80042e0 <UART_SetConfig+0x2e0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800426c:	f023 030f 	bic.w	r3, r3, #15
 8004270:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8004272:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004274:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8004278:	4313      	orrs	r3, r2
 800427a:	60cb      	str	r3, [r1, #12]
 800427c:	2000      	movs	r0, #0
 800427e:	e04c      	b.n	800431a <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004280:	f7fe fa7a 	bl	8002778 <HAL_RCC_GetPCLK2Freq>
        break;
 8004284:	e7e3      	b.n	800424e <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004286:	4821      	ldr	r0, [pc, #132]	; (800430c <UART_SetConfig+0x30c>)
 8004288:	e7e3      	b.n	8004252 <UART_SetConfig+0x252>
 800428a:	4820      	ldr	r0, [pc, #128]	; (800430c <UART_SetConfig+0x30c>)
 800428c:	e7e1      	b.n	8004252 <UART_SetConfig+0x252>
        pclk = (uint32_t) HSI_VALUE;
 800428e:	481f      	ldr	r0, [pc, #124]	; (800430c <UART_SetConfig+0x30c>)
 8004290:	e7df      	b.n	8004252 <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 8004292:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004296:	e7dc      	b.n	8004252 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7fe fa5e 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
        break;
    }

    if (pclk != 0U)
 800429c:	2800      	cmp	r0, #0
 800429e:	d039      	beq.n	8004314 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042a0:	6863      	ldr	r3, [r4, #4]
 80042a2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80042a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80042aa:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ac:	f1a0 0210 	sub.w	r2, r0, #16
 80042b0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d82f      	bhi.n	8004318 <UART_SetConfig+0x318>
      {
        huart->Instance->BRR = usartdiv;
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	60d8      	str	r0, [r3, #12]
 80042bc:	2000      	movs	r0, #0
 80042be:	e02c      	b.n	800431a <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7fe fa5a 	bl	8002778 <HAL_RCC_GetPCLK2Freq>
        break;
 80042c4:	e7ea      	b.n	800429c <UART_SetConfig+0x29c>
        pclk = (uint32_t) LSE_VALUE;
 80042c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042ca:	e7e9      	b.n	80042a0 <UART_SetConfig+0x2a0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042cc:	480f      	ldr	r0, [pc, #60]	; (800430c <UART_SetConfig+0x30c>)
 80042ce:	e7e7      	b.n	80042a0 <UART_SetConfig+0x2a0>
        ret = HAL_ERROR;
 80042d0:	2001      	movs	r0, #1
 80042d2:	e022      	b.n	800431a <UART_SetConfig+0x31a>
 80042d4:	2001      	movs	r0, #1
 80042d6:	e020      	b.n	800431a <UART_SetConfig+0x31a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d8:	2001      	movs	r0, #1
 80042da:	e01e      	b.n	800431a <UART_SetConfig+0x31a>
 80042dc:	2000      	movs	r0, #0
 80042de:	e01c      	b.n	800431a <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 80042e0:	2001      	movs	r0, #1
 80042e2:	e01a      	b.n	800431a <UART_SetConfig+0x31a>
 80042e4:	efff69f3 	.word	0xefff69f3
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40004400 	.word	0x40004400
 80042f0:	40004800 	.word	0x40004800
 80042f4:	40004c00 	.word	0x40004c00
 80042f8:	40005000 	.word	0x40005000
 80042fc:	40011400 	.word	0x40011400
 8004300:	40007800 	.word	0x40007800
 8004304:	40007c00 	.word	0x40007c00
 8004308:	40023800 	.word	0x40023800
 800430c:	00f42400 	.word	0x00f42400
 8004310:	2001      	movs	r0, #1
 8004312:	e002      	b.n	800431a <UART_SetConfig+0x31a>
 8004314:	2000      	movs	r0, #0
 8004316:	e000      	b.n	800431a <UART_SetConfig+0x31a>
      }
      else
      {
        ret = HAL_ERROR;
 8004318:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800431e:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8004320:	bd10      	pop	{r4, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004322:	69e3      	ldr	r3, [r4, #28]
 8004324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004328:	d0af      	beq.n	800428a <UART_SetConfig+0x28a>
        pclk = (uint32_t) HSI_VALUE;
 800432a:	4815      	ldr	r0, [pc, #84]	; (8004380 <UART_SetConfig+0x380>)
 800432c:	e7b8      	b.n	80042a0 <UART_SetConfig+0x2a0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800432e:	69e3      	ldr	r3, [r4, #28]
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004334:	d0ab      	beq.n	800428e <UART_SetConfig+0x28e>
 8004336:	4812      	ldr	r0, [pc, #72]	; (8004380 <UART_SetConfig+0x380>)
 8004338:	e7b2      	b.n	80042a0 <UART_SetConfig+0x2a0>
 800433a:	69e3      	ldr	r3, [r4, #28]
 800433c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004340:	d083      	beq.n	800424a <UART_SetConfig+0x24a>
 8004342:	2300      	movs	r3, #0
    switch (clocksource)
 8004344:	2b08      	cmp	r3, #8
 8004346:	d8e3      	bhi.n	8004310 <UART_SetConfig+0x310>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0x350>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004299 	.word	0x08004299
 8004354:	080042c1 	.word	0x080042c1
 8004358:	080042cd 	.word	0x080042cd
 800435c:	08004311 	.word	0x08004311
 8004360:	080040e9 	.word	0x080040e9
 8004364:	08004311 	.word	0x08004311
 8004368:	08004311 	.word	0x08004311
 800436c:	08004311 	.word	0x08004311
 8004370:	080042c7 	.word	0x080042c7
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004374:	69e3      	ldr	r3, [r4, #28]
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437a:	d081      	beq.n	8004280 <UART_SetConfig+0x280>
 800437c:	2301      	movs	r3, #1
 800437e:	e7e1      	b.n	8004344 <UART_SetConfig+0x344>
 8004380:	00f42400 	.word	0x00f42400

08004384 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004384:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004386:	f013 0f01 	tst.w	r3, #1
 800438a:	d006      	beq.n	800439a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800438c:	6802      	ldr	r2, [r0, #0]
 800438e:	6853      	ldr	r3, [r2, #4]
 8004390:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004394:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004396:	430b      	orrs	r3, r1
 8004398:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800439a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800439c:	f013 0f02 	tst.w	r3, #2
 80043a0:	d006      	beq.n	80043b0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043a2:	6802      	ldr	r2, [r0, #0]
 80043a4:	6853      	ldr	r3, [r2, #4]
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043b2:	f013 0f04 	tst.w	r3, #4
 80043b6:	d006      	beq.n	80043c6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b8:	6802      	ldr	r2, [r0, #0]
 80043ba:	6853      	ldr	r3, [r2, #4]
 80043bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043c8:	f013 0f08 	tst.w	r3, #8
 80043cc:	d006      	beq.n	80043dc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ce:	6802      	ldr	r2, [r0, #0]
 80043d0:	6853      	ldr	r3, [r2, #4]
 80043d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043d6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80043d8:	430b      	orrs	r3, r1
 80043da:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043de:	f013 0f10 	tst.w	r3, #16
 80043e2:	d006      	beq.n	80043f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043e4:	6802      	ldr	r2, [r0, #0]
 80043e6:	6893      	ldr	r3, [r2, #8]
 80043e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ec:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80043ee:	430b      	orrs	r3, r1
 80043f0:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043f4:	f013 0f20 	tst.w	r3, #32
 80043f8:	d006      	beq.n	8004408 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043fa:	6802      	ldr	r2, [r0, #0]
 80043fc:	6893      	ldr	r3, [r2, #8]
 80043fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004402:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004404:	430b      	orrs	r3, r1
 8004406:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004408:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800440a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800440e:	d00a      	beq.n	8004426 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004410:	6802      	ldr	r2, [r0, #0]
 8004412:	6853      	ldr	r3, [r2, #4]
 8004414:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004418:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800441a:	430b      	orrs	r3, r1
 800441c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800441e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004424:	d00b      	beq.n	800443e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004426:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004428:	f013 0f80 	tst.w	r3, #128	; 0x80
 800442c:	d006      	beq.n	800443c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800442e:	6802      	ldr	r2, [r0, #0]
 8004430:	6853      	ldr	r3, [r2, #4]
 8004432:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004436:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004438:	430b      	orrs	r3, r1
 800443a:	6053      	str	r3, [r2, #4]
  }
}
 800443c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800443e:	6802      	ldr	r2, [r0, #0]
 8004440:	6853      	ldr	r3, [r2, #4]
 8004442:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004446:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004448:	430b      	orrs	r3, r1
 800444a:	6053      	str	r3, [r2, #4]
 800444c:	e7eb      	b.n	8004426 <UART_AdvFeatureConfig+0xa2>

0800444e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800444e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004452:	4680      	mov	r8, r0
 8004454:	460e      	mov	r6, r1
 8004456:	4615      	mov	r5, r2
 8004458:	4699      	mov	r9, r3
 800445a:	9f08      	ldr	r7, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445c:	f8d8 2000 	ldr.w	r2, [r8]
 8004460:	69d4      	ldr	r4, [r2, #28]
 8004462:	ea36 0304 	bics.w	r3, r6, r4
 8004466:	bf0c      	ite	eq
 8004468:	2401      	moveq	r4, #1
 800446a:	2400      	movne	r4, #0
 800446c:	42ac      	cmp	r4, r5
 800446e:	d144      	bne.n	80044fa <UART_WaitOnFlagUntilTimeout+0xac>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004470:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004474:	d0f4      	beq.n	8004460 <UART_WaitOnFlagUntilTimeout+0x12>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fd fa37 	bl	80018e8 <HAL_GetTick>
 800447a:	eba0 0009 	sub.w	r0, r0, r9
 800447e:	42b8      	cmp	r0, r7
 8004480:	d825      	bhi.n	80044ce <UART_WaitOnFlagUntilTimeout+0x80>
 8004482:	b327      	cbz	r7, 80044ce <UART_WaitOnFlagUntilTimeout+0x80>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004484:	f8d8 3000 	ldr.w	r3, [r8]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	f012 0f04 	tst.w	r2, #4
 800448e:	d0e5      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004496:	d0e1      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800449c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800449e:	f8d8 2000 	ldr.w	r2, [r8]
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044a8:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	f8d8 2000 	ldr.w	r2, [r8]
 80044ae:	6893      	ldr	r3, [r2, #8]
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044b6:	2320      	movs	r3, #32
 80044b8:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044bc:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044c0:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c4:	2300      	movs	r3, #0
 80044c6:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74

          return HAL_TIMEOUT;
 80044ca:	2003      	movs	r0, #3
 80044cc:	e016      	b.n	80044fc <UART_WaitOnFlagUntilTimeout+0xae>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ce:	f8d8 2000 	ldr.w	r2, [r8]
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044d8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	f8d8 2000 	ldr.w	r2, [r8]
 80044de:	6893      	ldr	r3, [r2, #8]
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80044e6:	2320      	movs	r3, #32
 80044e8:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044ec:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80044f0:	2300      	movs	r3, #0
 80044f2:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
        return HAL_TIMEOUT;
 80044f6:	2003      	movs	r0, #3
 80044f8:	e000      	b.n	80044fc <UART_WaitOnFlagUntilTimeout+0xae>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2000      	movs	r0, #0
}
 80044fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004500 <HAL_UART_Transmit>:
{
 8004500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004508:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800450a:	2b20      	cmp	r3, #32
 800450c:	d15d      	bne.n	80045ca <HAL_UART_Transmit+0xca>
 800450e:	4604      	mov	r4, r0
 8004510:	460d      	mov	r5, r1
 8004512:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004514:	2900      	cmp	r1, #0
 8004516:	d05c      	beq.n	80045d2 <HAL_UART_Transmit+0xd2>
 8004518:	2a00      	cmp	r2, #0
 800451a:	d05a      	beq.n	80045d2 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 800451c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004520:	2b01      	cmp	r3, #1
 8004522:	d058      	beq.n	80045d6 <HAL_UART_Transmit+0xd6>
 8004524:	2301      	movs	r3, #1
 8004526:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	2300      	movs	r3, #0
 800452c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004530:	2321      	movs	r3, #33	; 0x21
 8004532:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8004534:	f7fd f9d8 	bl	80018e8 <HAL_GetTick>
 8004538:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800453a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800453e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004542:	68a3      	ldr	r3, [r4, #8]
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	d00d      	beq.n	8004566 <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 800454a:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 800454e:	2300      	movs	r3, #0
 8004550:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8004554:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004558:	b29b      	uxth	r3, r3
 800455a:	b35b      	cbz	r3, 80045b4 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455c:	f04f 0900 	mov.w	r9, #0
 8004560:	f04f 0880 	mov.w	r8, #128	; 0x80
 8004564:	e017      	b.n	8004596 <HAL_UART_Transmit+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	b913      	cbnz	r3, 8004570 <HAL_UART_Transmit+0x70>
      pdata16bits = (uint16_t *) pData;
 800456a:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800456c:	2500      	movs	r5, #0
 800456e:	e7ee      	b.n	800454e <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 8004570:	f04f 0a00 	mov.w	sl, #0
 8004574:	e7eb      	b.n	800454e <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800457c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004580:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004582:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8004586:	3a01      	subs	r2, #1
 8004588:	b292      	uxth	r2, r2
 800458a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800458e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004592:	b29b      	uxth	r3, r3
 8004594:	b173      	cbz	r3, 80045b4 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004596:	9600      	str	r6, [sp, #0]
 8004598:	463b      	mov	r3, r7
 800459a:	464a      	mov	r2, r9
 800459c:	4641      	mov	r1, r8
 800459e:	4620      	mov	r0, r4
 80045a0:	f7ff ff55 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 80045a4:	b9c8      	cbnz	r0, 80045da <HAL_UART_Transmit+0xda>
      if (pdata8bits == NULL)
 80045a6:	2d00      	cmp	r5, #0
 80045a8:	d0e5      	beq.n	8004576 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045b2:	e7e6      	b.n	8004582 <HAL_UART_Transmit+0x82>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b4:	9600      	str	r6, [sp, #0]
 80045b6:	463b      	mov	r3, r7
 80045b8:	2200      	movs	r2, #0
 80045ba:	2140      	movs	r1, #64	; 0x40
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff ff46 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 80045c2:	b960      	cbnz	r0, 80045de <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 80045c4:	2320      	movs	r3, #32
 80045c6:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80045c8:	e000      	b.n	80045cc <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 80045ca:	2002      	movs	r0, #2
}
 80045cc:	b002      	add	sp, #8
 80045ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80045d2:	2001      	movs	r0, #1
 80045d4:	e7fa      	b.n	80045cc <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80045d6:	2002      	movs	r0, #2
 80045d8:	e7f8      	b.n	80045cc <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 80045da:	2003      	movs	r0, #3
 80045dc:	e7f6      	b.n	80045cc <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 80045de:	2003      	movs	r0, #3
 80045e0:	e7f4      	b.n	80045cc <HAL_UART_Transmit+0xcc>

080045e2 <UART_CheckIdleState>:
{
 80045e2:	b530      	push	{r4, r5, lr}
 80045e4:	b083      	sub	sp, #12
 80045e6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80045ee:	f7fd f97b 	bl	80018e8 <HAL_GetTick>
 80045f2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f013 0f08 	tst.w	r3, #8
 80045fc:	d10d      	bne.n	800461a <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f013 0f04 	tst.w	r3, #4
 8004606:	d116      	bne.n	8004636 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8004608:	2320      	movs	r3, #32
 800460a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	2000      	movs	r0, #0
 8004610:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8004612:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8004616:	b003      	add	sp, #12
 8004618:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800461a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	4603      	mov	r3, r0
 8004622:	2200      	movs	r2, #0
 8004624:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004628:	4620      	mov	r0, r4
 800462a:	f7ff ff10 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 800462e:	2800      	cmp	r0, #0
 8004630:	d0e5      	beq.n	80045fe <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8004632:	2003      	movs	r0, #3
 8004634:	e7ef      	b.n	8004616 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004636:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	462b      	mov	r3, r5
 800463e:	2200      	movs	r2, #0
 8004640:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004644:	4620      	mov	r0, r4
 8004646:	f7ff ff02 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 800464a:	2800      	cmp	r0, #0
 800464c:	d0dc      	beq.n	8004608 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800464e:	2003      	movs	r0, #3
 8004650:	e7e1      	b.n	8004616 <UART_CheckIdleState+0x34>

08004652 <HAL_UART_Init>:
  if (huart == NULL)
 8004652:	b368      	cbz	r0, 80046b0 <HAL_UART_Init+0x5e>
{
 8004654:	b510      	push	{r4, lr}
 8004656:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004658:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800465a:	b303      	cbz	r3, 800469e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800465c:	2324      	movs	r3, #36	; 0x24
 800465e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004660:	6822      	ldr	r2, [r4, #0]
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800466a:	4620      	mov	r0, r4
 800466c:	f7ff fcc8 	bl	8004000 <UART_SetConfig>
 8004670:	2801      	cmp	r0, #1
 8004672:	d013      	beq.n	800469c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004676:	b9bb      	cbnz	r3, 80046a8 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004678:	6822      	ldr	r2, [r4, #0]
 800467a:	6853      	ldr	r3, [r2, #4]
 800467c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004680:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	6893      	ldr	r3, [r2, #8]
 8004686:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800468a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800468c:	6822      	ldr	r2, [r4, #0]
 800468e:	6813      	ldr	r3, [r2, #0]
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004696:	4620      	mov	r0, r4
 8004698:	f7ff ffa3 	bl	80045e2 <UART_CheckIdleState>
}
 800469c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800469e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80046a2:	f7fd f885 	bl	80017b0 <HAL_UART_MspInit>
 80046a6:	e7d9      	b.n	800465c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80046a8:	4620      	mov	r0, r4
 80046aa:	f7ff fe6b 	bl	8004384 <UART_AdvFeatureConfig>
 80046ae:	e7e3      	b.n	8004678 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80046b0:	2001      	movs	r0, #1
}
 80046b2:	4770      	bx	lr

080046b4 <__libc_init_array>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4d0d      	ldr	r5, [pc, #52]	; (80046ec <__libc_init_array+0x38>)
 80046b8:	4c0d      	ldr	r4, [pc, #52]	; (80046f0 <__libc_init_array+0x3c>)
 80046ba:	1b64      	subs	r4, r4, r5
 80046bc:	10a4      	asrs	r4, r4, #2
 80046be:	2600      	movs	r6, #0
 80046c0:	42a6      	cmp	r6, r4
 80046c2:	d109      	bne.n	80046d8 <__libc_init_array+0x24>
 80046c4:	4d0b      	ldr	r5, [pc, #44]	; (80046f4 <__libc_init_array+0x40>)
 80046c6:	4c0c      	ldr	r4, [pc, #48]	; (80046f8 <__libc_init_array+0x44>)
 80046c8:	f000 f864 	bl	8004794 <_init>
 80046cc:	1b64      	subs	r4, r4, r5
 80046ce:	10a4      	asrs	r4, r4, #2
 80046d0:	2600      	movs	r6, #0
 80046d2:	42a6      	cmp	r6, r4
 80046d4:	d105      	bne.n	80046e2 <__libc_init_array+0x2e>
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046dc:	4798      	blx	r3
 80046de:	3601      	adds	r6, #1
 80046e0:	e7ee      	b.n	80046c0 <__libc_init_array+0xc>
 80046e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e6:	4798      	blx	r3
 80046e8:	3601      	adds	r6, #1
 80046ea:	e7f2      	b.n	80046d2 <__libc_init_array+0x1e>
 80046ec:	08004cec 	.word	0x08004cec
 80046f0:	08004cec 	.word	0x08004cec
 80046f4:	08004cec 	.word	0x08004cec
 80046f8:	08004cf0 	.word	0x08004cf0

080046fc <memset>:
 80046fc:	4402      	add	r2, r0
 80046fe:	4603      	mov	r3, r0
 8004700:	4293      	cmp	r3, r2
 8004702:	d100      	bne.n	8004706 <memset+0xa>
 8004704:	4770      	bx	lr
 8004706:	f803 1b01 	strb.w	r1, [r3], #1
 800470a:	e7f9      	b.n	8004700 <memset+0x4>

0800470c <__utoa>:
 800470c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470e:	4c1f      	ldr	r4, [pc, #124]	; (800478c <__utoa+0x80>)
 8004710:	b08b      	sub	sp, #44	; 0x2c
 8004712:	4605      	mov	r5, r0
 8004714:	460b      	mov	r3, r1
 8004716:	466e      	mov	r6, sp
 8004718:	f104 0c20 	add.w	ip, r4, #32
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	6861      	ldr	r1, [r4, #4]
 8004720:	4637      	mov	r7, r6
 8004722:	c703      	stmia	r7!, {r0, r1}
 8004724:	3408      	adds	r4, #8
 8004726:	4564      	cmp	r4, ip
 8004728:	463e      	mov	r6, r7
 800472a:	d1f7      	bne.n	800471c <__utoa+0x10>
 800472c:	7921      	ldrb	r1, [r4, #4]
 800472e:	7139      	strb	r1, [r7, #4]
 8004730:	1e91      	subs	r1, r2, #2
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	6038      	str	r0, [r7, #0]
 8004736:	2922      	cmp	r1, #34	; 0x22
 8004738:	f04f 0100 	mov.w	r1, #0
 800473c:	d904      	bls.n	8004748 <__utoa+0x3c>
 800473e:	7019      	strb	r1, [r3, #0]
 8004740:	460b      	mov	r3, r1
 8004742:	4618      	mov	r0, r3
 8004744:	b00b      	add	sp, #44	; 0x2c
 8004746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004748:	1e58      	subs	r0, r3, #1
 800474a:	4684      	mov	ip, r0
 800474c:	fbb5 f7f2 	udiv	r7, r5, r2
 8004750:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004754:	fb02 5617 	mls	r6, r2, r7, r5
 8004758:	4476      	add	r6, lr
 800475a:	460c      	mov	r4, r1
 800475c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004760:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004764:	462e      	mov	r6, r5
 8004766:	42b2      	cmp	r2, r6
 8004768:	f101 0101 	add.w	r1, r1, #1
 800476c:	463d      	mov	r5, r7
 800476e:	d9ed      	bls.n	800474c <__utoa+0x40>
 8004770:	2200      	movs	r2, #0
 8004772:	545a      	strb	r2, [r3, r1]
 8004774:	1919      	adds	r1, r3, r4
 8004776:	1aa5      	subs	r5, r4, r2
 8004778:	42aa      	cmp	r2, r5
 800477a:	dae2      	bge.n	8004742 <__utoa+0x36>
 800477c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004780:	780e      	ldrb	r6, [r1, #0]
 8004782:	7006      	strb	r6, [r0, #0]
 8004784:	3201      	adds	r2, #1
 8004786:	f801 5901 	strb.w	r5, [r1], #-1
 800478a:	e7f4      	b.n	8004776 <__utoa+0x6a>
 800478c:	08004cbc 	.word	0x08004cbc

08004790 <utoa>:
 8004790:	f7ff bfbc 	b.w	800470c <__utoa>

08004794 <_init>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	bf00      	nop
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr

080047a0 <_fini>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr
