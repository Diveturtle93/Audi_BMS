
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b80  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  08008d78  08008d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009524  08009524  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800952c  0800952c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000000c  08009540  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08009540  00020328  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b96  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d1e  00000000  00000000  00039bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cc35  00000000  00000000  0003ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c58d  00000000  00000000  0006cbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109a21  00000000  00000000  0008914a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00192b6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  00192bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08008d60 	.word	0x08008d60

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08008d60 	.word	0x08008d60

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <uartTransmit+0x24>)
 8000562:	f007 fe9f 	bl	80082a4 <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200002a0 	.word	0x200002a0

08000574 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f008 fba2 	bl	8008cd0 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartTransmitNumber+0x3c>)
 80005a4:	f007 fe7e 	bl	80082a4 <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200002a0 	.word	0x200002a0

080005b4 <set_IsoSpiState>:
//----------------------------------------------------------------------

// Setze Statemaschine IsoSPI
//----------------------------------------------------------------------
void set_IsoSpiState(IsoSpi_State newState)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	IsoSpiState = newState;													// Neuen Status setzen
 80005be:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <set_IsoSpiState+0x24>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	7013      	strb	r3, [r2, #0]
	timeIsoSpiState = millis();												// Zeit speichern
 80005c4:	f001 fa5c 	bl	8001a80 <millis>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <set_IsoSpiState+0x28>)
 80005cc:	6013      	str	r3, [r2, #0]
		default:
			ITM_SendString("#RED#FEHLER\n");
			break;
	}
#endif
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	2000002c 	.word	0x2000002c

080005e0 <IsoSPI_statemaschine>:
//----------------------------------------------------------------------

// Setze Statemaschine ISOSpi
//----------------------------------------------------------------------
void IsoSPI_statemaschine(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	switch (IsoSpiState)
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <IsoSPI_statemaschine+0x68>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d825      	bhi.n	8000638 <IsoSPI_statemaschine+0x58>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <IsoSPI_statemaschine+0x14>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000639 	.word	0x08000639
 80005f8:	08000621 	.word	0x08000621
 80005fc:	08000639 	.word	0x08000639
 8000600:	08000609 	.word	0x08000609
 8000604:	08000639 	.word	0x08000639
	{
		case IsoIdle:
			break;

		case IsoGetReady:
			if (millis() - timeIsoSpiState > 2)
 8000608:	f001 fa3a 	bl	8001a80 <millis>
 800060c:	4602      	mov	r2, r0
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <IsoSPI_statemaschine+0x6c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	2b02      	cmp	r3, #2
 8000616:	d911      	bls.n	800063c <IsoSPI_statemaschine+0x5c>
			{
				IsoSpiState = IsoReady;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <IsoSPI_statemaschine+0x68>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800061e:	e00d      	b.n	800063c <IsoSPI_statemaschine+0x5c>

		case IsoReady:
			if (millis() - timeIsoSpiState > 4)
 8000620:	f001 fa2e 	bl	8001a80 <millis>
 8000624:	4602      	mov	r2, r0
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <IsoSPI_statemaschine+0x6c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	2b04      	cmp	r3, #4
 800062e:	d907      	bls.n	8000640 <IsoSPI_statemaschine+0x60>
			{
				IsoSpiState = IsoIdle;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <IsoSPI_statemaschine+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000636:	e003      	b.n	8000640 <IsoSPI_statemaschine+0x60>

		case IsoSleep:
			break;

		default:
			break;
 8000638:	bf00      	nop
 800063a:	e002      	b.n	8000642 <IsoSPI_statemaschine+0x62>
			break;
 800063c:	bf00      	nop
 800063e:	e000      	b.n	8000642 <IsoSPI_statemaschine+0x62>
			break;
 8000640:	bf00      	nop
	}
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	2000002c 	.word	0x2000002c

08000650 <get_IsoSpiState>:
//----------------------------------------------------------------------

// Bekomme aktuellen State ISOSpi
//----------------------------------------------------------------------
IsoSpi_State get_IsoSpiState(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	// Statemaschine abfragen
	IsoSPI_statemaschine();
 8000654:	f7ff ffc4 	bl	80005e0 <IsoSPI_statemaschine>

	// Aktuellen State ausgeben
	return IsoSpiState;
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <get_IsoSpiState+0x10>)
 800065a:	781b      	ldrb	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000028 	.word	0x20000028

08000664 <IsoSPI_wakeup>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void IsoSPI_wakeup(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
#ifdef DEBUG_ISOSPI
	ITM_SendString("IsoSPI wird geweckt.\n");
#endif

	// Wenn Statemaschine Idle ist, dann IsoSPI wecken
	if (get_IsoSpiState() == IsoIdle)
 800066a:	f7ff fff1 	bl	8000650 <get_IsoSpiState>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d123      	bne.n	80006bc <IsoSPI_wakeup+0x58>
	{
		for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000674:	2300      	movs	r3, #0
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	e014      	b.n	80006a4 <IsoSPI_wakeup+0x40>
		{
			// ISOCS einschalten
			ISOCS_ENABLE();														// Chip-Select einschalten
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <IsoSPI_wakeup+0x60>)
 8000682:	f004 f8e3 	bl	800484c <HAL_GPIO_WritePin>

			// Dummy Paket senden
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken, isoSPI braucht Zeit bis ready
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	2201      	movs	r2, #1
 800068a:	21aa      	movs	r1, #170	; 0xaa
 800068c:	480e      	ldr	r0, [pc, #56]	; (80006c8 <IsoSPI_wakeup+0x64>)
 800068e:	f005 faae 	bl	8005bee <HAL_SPI_Transmit>

			// ISOCS ausschalten
			ISOCS_DISABLE();													// Chip-Select ausschalten
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <IsoSPI_wakeup+0x60>)
 800069a:	f004 f8d7 	bl	800484c <HAL_GPIO_WritePin>
		for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	3301      	adds	r3, #1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0e7      	beq.n	800067a <IsoSPI_wakeup+0x16>
		}

		// Setze Statemaschine auf GetReady
		set_IsoSpiState(IsoGetReady);
 80006aa:	2003      	movs	r0, #3
 80006ac:	f7ff ff82 	bl	80005b4 <set_IsoSpiState>

		// Warten das bis Ready
		while(get_IsoSpiState() == IsoGetReady);
 80006b0:	bf00      	nop
 80006b2:	f7ff ffcd 	bl	8000650 <get_IsoSpiState>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d0fa      	beq.n	80006b2 <IsoSPI_wakeup+0x4e>
	}
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	20000158 	.word	0x20000158

080006cc <IsoSPI_cmd>:
//----------------------------------------------------------------------

// Sende Command
//----------------------------------------------------------------------
void IsoSPI_cmd(uint8_t* command)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von IsoSPI_cmd\n");
#endif

	// Verzoegerungszeit zum wecken des LTC6811
	IsoSPI_wakeup();
 80006d4:	f7ff ffc6 	bl	8000664 <IsoSPI_wakeup>

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <IsoSPI_cmd+0x7c>)
 80006e0:	f004 f8b4 	bl	800484c <HAL_GPIO_WritePin>

	// Setze State auf Aktiv
	set_IsoSpiState(IsoActive);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f7ff ff65 	bl	80005b4 <set_IsoSpiState>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, command, 4, 100);
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2204      	movs	r2, #4
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	4816      	ldr	r0, [pc, #88]	; (800074c <IsoSPI_cmd+0x80>)
 80006f2:	f005 fa7c 	bl	8005bee <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (((command[0] << 8) | command[1]) == STCOMM)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	3201      	adds	r2, #1
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	4313      	orrs	r3, r2
 8000704:	f240 7223 	movw	r2, #1827	; 0x723
 8000708:	4293      	cmp	r3, r2
 800070a:	d10f      	bne.n	800072c <IsoSPI_cmd+0x60>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	e009      	b.n	8000726 <IsoSPI_cmd+0x5a>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2201      	movs	r2, #1
 8000718:	21aa      	movs	r1, #170	; 0xaa
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <IsoSPI_cmd+0x80>)
 800071c:	f005 fa67 	bl	8005bee <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	3301      	adds	r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	2b08      	cmp	r3, #8
 800072a:	d9f2      	bls.n	8000712 <IsoSPI_cmd+0x46>
		}
	}

	// ISOCS ausschalten
	ISOCS_DISABLE();
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <IsoSPI_cmd+0x7c>)
 8000734:	f004 f88a 	bl	800484c <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Setze State auf Ready
	set_IsoSpiState(IsoReady);
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff3b 	bl	80005b4 <set_IsoSpiState>
		ITM_SendChar(' ');
		ITM_SendNumber(command[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000
 800074c:	20000158 	.word	0x20000158

08000750 <IsoSPI_transmit>:
//----------------------------------------------------------------------

// Sende Daten
//----------------------------------------------------------------------
void IsoSPI_transmit(uint8_t* command, uint8_t* data)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von IsoSPI Datentransmit\n");
#endif

	// Verzoegerungszeit zum wecken des IsoSPI
	IsoSPI_wakeup();
 800075a:	f7ff ff83 	bl	8000664 <IsoSPI_wakeup>

	// ISOCS einschalten
	ISOCS_ENABLE();
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	480f      	ldr	r0, [pc, #60]	; (80007a4 <IsoSPI_transmit+0x54>)
 8000766:	f004 f871 	bl	800484c <HAL_GPIO_WritePin>

	// Setze State auf Aktiv
	set_IsoSpiState(IsoActive);
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ff22 	bl	80005b4 <set_IsoSpiState>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, command, 4, 100);
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	2204      	movs	r2, #4
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <IsoSPI_transmit+0x58>)
 8000778:	f005 fa39 	bl	8005bee <HAL_SPI_Transmit>

	// Data senden
	HAL_SPI_Transmit(&hspi4, data, (8 * LTC6811_DEVICES), 100);
 800077c:	2364      	movs	r3, #100	; 0x64
 800077e:	2208      	movs	r2, #8
 8000780:	6839      	ldr	r1, [r7, #0]
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <IsoSPI_transmit+0x58>)
 8000784:	f005 fa33 	bl	8005bee <HAL_SPI_Transmit>

	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <IsoSPI_transmit+0x54>)
 8000790:	f004 f85c 	bl	800484c <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Setze Statemaschine auf Ready;
	set_IsoSpiState(IsoReady);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ff0d 	bl	80005b4 <set_IsoSpiState>
		ITM_SendChar(' ');
		ITM_SendNumber(command[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	20000158 	.word	0x20000158

080007ac <IsoSPI_read>:
//----------------------------------------------------------------------

// Lese Daten
//----------------------------------------------------------------------
void IsoSPI_read(uint8_t* command, uint8_t* data)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von Receive LTC6811.\n");
#endif

	// Verzoegerungszeit zum wecken des IsoSPI
	IsoSPI_wakeup();
 80007b6:	f7ff ff55 	bl	8000664 <IsoSPI_wakeup>

	// ISOCS einschalten
	ISOCS_ENABLE();
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c0:	4815      	ldr	r0, [pc, #84]	; (8000818 <IsoSPI_read+0x6c>)
 80007c2:	f004 f843 	bl	800484c <HAL_GPIO_WritePin>

	// Setze State auf Aktiv
	set_IsoSpiState(IsoActive);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f7ff fef4 	bl	80005b4 <set_IsoSpiState>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, command, 4, 100);
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2204      	movs	r2, #4
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <IsoSPI_read+0x70>)
 80007d4:	f005 fa0b 	bl	8005bee <HAL_SPI_Transmit>

	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e00c      	b.n	80007f8 <IsoSPI_read+0x4c>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	461a      	mov	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	1899      	adds	r1, r3, r2
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	2208      	movs	r2, #8
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <IsoSPI_read+0x70>)
 80007ee:	f005 fb6c 	bl	8005eca <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	3301      	adds	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0ef      	beq.n	80007de <IsoSPI_read+0x32>
	}

	// ISOCS ausschalten
	ISOCS_DISABLE();
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <IsoSPI_read+0x6c>)
 8000806:	f004 f821 	bl	800484c <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Setze Statemaschine auf Ready;
	set_IsoSpiState(IsoReady);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fed2 	bl	80005b4 <set_IsoSpiState>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	20000158 	.word	0x20000158

08000820 <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	80fb      	strh	r3, [r7, #6]
 800082c:	4613      	mov	r3, r2
 800082e:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 8000830:	88fa      	ldrh	r2, [r7, #6]
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	d904      	bls.n	8000842 <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	b29b      	uxth	r3, r3
 8000840:	e009      	b.n	8000856 <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 8000842:	88fa      	ldrh	r2, [r7, #6]
 8000844:	88bb      	ldrh	r3, [r7, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	d204      	bcs.n	8000854 <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 800084a:	88ba      	ldrh	r2, [r7, #4]
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	b29b      	uxth	r3, r3
 8000852:	e000      	b.n	8000856 <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 8000854:	2300      	movs	r3, #0
	}
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);												// CRC berechnen
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f8d0 	bl	8000a14 <peccommand>
 8000874:	4603      	mov	r3, r0
 8000876:	81fb      	strh	r3, [r7, #14]

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b29b      	uxth	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	b2db      	uxtb	r3, r3
 8000886:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 800088e:	89fb      	ldrh	r3, [r7, #14]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f023 0301 	bic.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	72fb      	strb	r3, [r7, #11]
	
	// Befehl ueber IsoSPI senden
	IsoSPI_cmd(&cmd[0]);														// Sende Befehl
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff0f 	bl	80006cc <IsoSPI_cmd>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <ltc6811_write>:
//----------------------------------------------------------------------

// Broadcast Write Command
//----------------------------------------------------------------------
void ltc6811_write(uint16_t command, uint8_t* data)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b088      	sub	sp, #32
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	6039      	str	r1, [r7, #0]
 80008c0:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, fuer Data Funktion nur bei einem Device gegeben
	uint16_t pec_c, pec_d;													// pec_c = Zwischenspeicher 16-Bit Command, pec_d = Zwischenspeicher 16-Bit Data
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	uint8_t tmp_data[8 * LTC6811_DEVICES];									// Zwischenspeicher Daten + Pec CRC
	pec_c = peccommand(command);											// Pec Command berechnen
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f8a5 	bl	8000a14 <peccommand>
 80008ca:	4603      	mov	r3, r0
 80008cc:	83bb      	strh	r3, [r7, #28]

	// Command in cmd abspeichern
	cmd[0] = ((command  >> 8) & 0x07);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	753b      	strb	r3, [r7, #20]
	cmd[1] = (command & 0xFF);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	757b      	strb	r3, [r7, #21]
	cmd[2] = ((pec_c >> 8) & 0xFF);
 80008e4:	8bbb      	ldrh	r3, [r7, #28]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (pec_c & 0xFE);
 80008ee:	8bbb      	ldrh	r3, [r7, #28]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f023 0301 	bic.w	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	75fb      	strb	r3, [r7, #23]

	// Daten in tmp_data abspeichern zum Senden
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	77fb      	strb	r3, [r7, #31]
 80008fe:	e035      	b.n	800096c <ltc6811_write+0xb6>
	{
		// Schleife um Daten fuer einen IC abzuspeichern
		for (uint8_t i = 0; i < 6; i++)
 8000900:	2300      	movs	r3, #0
 8000902:	77bb      	strb	r3, [r7, #30]
 8000904:	e016      	b.n	8000934 <ltc6811_write+0x7e>
		{
			tmp_data[j*8+i] = data[j*6+i];
 8000906:	7ffa      	ldrb	r2, [r7, #31]
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	461a      	mov	r2, r3
 8000912:	7fbb      	ldrb	r3, [r7, #30]
 8000914:	4413      	add	r3, r2
 8000916:	461a      	mov	r2, r3
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	441a      	add	r2, r3
 800091c:	7ffb      	ldrb	r3, [r7, #31]
 800091e:	00d9      	lsls	r1, r3, #3
 8000920:	7fbb      	ldrb	r3, [r7, #30]
 8000922:	440b      	add	r3, r1
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	3320      	adds	r3, #32
 8000928:	443b      	add	r3, r7
 800092a:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i = 0; i < 6; i++)
 800092e:	7fbb      	ldrb	r3, [r7, #30]
 8000930:	3301      	adds	r3, #1
 8000932:	77bb      	strb	r3, [r7, #30]
 8000934:	7fbb      	ldrb	r3, [r7, #30]
 8000936:	2b05      	cmp	r3, #5
 8000938:	d9e5      	bls.n	8000906 <ltc6811_write+0x50>
		}

		// Pec berechnen pro IC einmal
		pec_d = peclookup(6, &tmp_data[j*8]);								// Pec Daten berechnen
 800093a:	7ffb      	ldrb	r3, [r7, #31]
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	f107 020c 	add.w	r2, r7, #12
 8000942:	4413      	add	r3, r2
 8000944:	4619      	mov	r1, r3
 8000946:	2006      	movs	r0, #6
 8000948:	f000 f880 	bl	8000a4c <peclookup>
 800094c:	4603      	mov	r3, r0
 800094e:	837b      	strh	r3, [r7, #26]

		// Pec abspeichern fuer einen IC
		tmp_data[6] = ((pec_d >> 8) & 0xFF);
 8000950:	8b7b      	ldrh	r3, [r7, #26]
 8000952:	0a1b      	lsrs	r3, r3, #8
 8000954:	b29b      	uxth	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	74bb      	strb	r3, [r7, #18]
		tmp_data[7] = (pec_d & 0xFE);
 800095a:	8b7b      	ldrh	r3, [r7, #26]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f023 0301 	bic.w	r3, r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	74fb      	strb	r3, [r7, #19]
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	3301      	adds	r3, #1
 800096a:	77fb      	strb	r3, [r7, #31]
 800096c:	7ffb      	ldrb	r3, [r7, #31]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0c6      	beq.n	8000900 <ltc6811_write+0x4a>
	}

	// Befehl ueber IsoSPI senden
	IsoSPI_transmit(&cmd[0], &tmp_data[0]);									// Sende Daten
 8000972:	f107 020c 	add.w	r2, r7, #12
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fee7 	bl	8000750 <IsoSPI_transmit>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	6039      	str	r1, [r7, #0]
 8000994:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
//	uint16_t tmp;															// Zwischenspeicher fuer Pruefung CRC
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f83b 	bl	8000a14 <peccommand>
 800099e:	4603      	mov	r3, r0
 80009a0:	81bb      	strh	r3, [r7, #12]

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 80009b8:	89bb      	ldrh	r3, [r7, #12]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 80009c2:	89bb      	ldrh	r3, [r7, #12]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f023 0301 	bic.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	72fb      	strb	r3, [r7, #11]

	// Befehl ueber IsoSPI senden
	IsoSPI_read(&cmd[0], &data[0]);											// Sende Daten
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	6839      	ldr	r1, [r7, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fee9 	bl	80007ac <IsoSPI_read>

	// Pec zuruecksetzen
	pec = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	81bb      	strh	r3, [r7, #12]

	// Pec pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	e00f      	b.n	8000a04 <ltc6811_read+0x7a>
			uartTransmit("\n", 1);
		}
#endif

		// Pec zuruecksetzen
		pec = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	81bb      	strh	r3, [r7, #12]

		// Variante 2, Daten inklusive Pec mit durch Peccheck pruefen, ob Ergebnis gleich 0 ist
		pec = peccheck(8, &data[i*8]);
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	461a      	mov	r2, r3
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	4619      	mov	r1, r3
 80009f4:	2008      	movs	r0, #8
 80009f6:	f000 f85d 	bl	8000ab4 <peccheck>
 80009fa:	4603      	mov	r3, r0
 80009fc:	81bb      	strh	r3, [r7, #12]
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3301      	adds	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0ec      	beq.n	80009e4 <ltc6811_read+0x5a>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f000 f806 	bl	8000a4c <peclookup>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 8000a58:	2310      	movs	r3, #16
 8000a5a:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	737b      	strb	r3, [r7, #13]
 8000a60:	e019      	b.n	8000a96 <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 8000a62:	89fb      	ldrh	r3, [r7, #14]
 8000a64:	09db      	lsrs	r3, r3, #7
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	7b7b      	ldrb	r3, [r7, #13]
 8000a6a:	6839      	ldr	r1, [r7, #0]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4053      	eors	r3, r2
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	897b      	ldrh	r3, [r7, #10]
 8000a82:	490b      	ldr	r1, [pc, #44]	; (8000ab0 <peclookup+0x64>)
 8000a84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	4053      	eors	r3, r2
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 8000a90:	7b7b      	ldrb	r3, [r7, #13]
 8000a92:	3301      	adds	r3, #1
 8000a94:	737b      	strb	r3, [r7, #13]
 8000a96:	7b7a      	ldrb	r2, [r7, #13]
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3e1      	bcc.n	8000a62 <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	b29b      	uxth	r3, r3
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	080092e4 	.word	0x080092e4

08000ab4 <peccheck>:
//----------------------------------------------------------------------*/

// Validiere Pec von Daten
//----------------------------------------------------------------------
uint8_t peccheck(uint8_t len, uint8_t *data)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t pec = peclookup(len, data);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	6839      	ldr	r1, [r7, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ffc1 	bl	8000a4c <peclookup>
 8000aca:	4603      	mov	r3, r0
 8000acc:	81fb      	strh	r3, [r7, #14]

	// Wenn Ergebnis 0, ist Pec OK
	if (pec == 0)
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <peccheck+0x24>
	{
		return 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e000      	b.n	8000ada <peccheck+0x26>
	}
	// Wenn Ergebnis 1, ist Pec nicht OK
	else
	{
		return 1;
 8000ad8:	2301      	movs	r3, #1
	}
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <ltc6811_check>:
//----------------------------------------------------------------------

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b092      	sub	sp, #72	; 0x48
 8000ae6:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Check LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	223c      	movs	r2, #60	; 0x3c
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f008 f8a1 	bl	8008c3c <memset>
 8000afa:	2300      	movs	r3, #0
 8000afc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 8000b00:	f240 7011 	movw	r0, #1809	; 0x711
 8000b04:	f7ff fead 	bl	8000862 <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 8000b08:	f240 7012 	movw	r0, #1810	; 0x712
 8000b0c:	f7ff fea9 	bl	8000862 <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 8000b10:	f240 7013 	movw	r0, #1811	; 0x713
 8000b14:	f7ff fea5 	bl	8000862 <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2012      	movs	r0, #18
 8000b1e:	f7ff ff34 	bl	800098a <ltc6811_read>
		ITM_SendChar('\n');
#endif
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 8000b22:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000b26:	f000 f83f 	bl	8000ba8 <ltc6811_test>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d105      	bne.n	8000b3c <ltc6811_check+0x5a>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 8000b30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 1 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000b3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b40:	f002 fd80 	bl	8003644 <HAL_Delay>

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000b44:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000b48:	f000 f82e 	bl	8000ba8 <ltc6811_test>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d105      	bne.n	8000b5e <ltc6811_check+0x7c>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 8000b52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 2 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000b5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b62:	f002 fd6f 	bl	8003644 <HAL_Delay>

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 8000b66:	f000 fa09 	bl	8000f7c <ltc6811_diagn>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d105      	bne.n	8000b7c <ltc6811_check+0x9a>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 8000b70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Multiplexer Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000b7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b80:	f002 fd60 	bl	8003644 <HAL_Delay>

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 8000b84:	f000 fa1a 	bl	8000fbc <ltc6811_openwire>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d105      	bne.n	8000b9a <ltc6811_check+0xb8>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 8000b8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ITM_SendNumber(error);
	ITM_SendChar('\n');
#endif

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000b9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3748      	adds	r7, #72	; 0x48
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	; 0x50
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Test LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	223c      	movs	r2, #60	; 0x3c
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f008 f83c 	bl	8008c3c <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000bd6:	f043 0303 	orr.w	r3, r3, #3
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe40 	bl	8000862 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000be2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000be6:	f002 fd2d 	bl	8003644 <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf0:	f043 0307 	orr.w	r3, r3, #7
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fe33 	bl	8000862 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000bfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c00:	f002 fd20 	bl	8003644 <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000c0a:	f043 0307 	orr.w	r3, r3, #7
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe26 	bl	8000862 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000c16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c1a:	f002 fd13 	bl	8003644 <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4619      	mov	r1, r3
 8000c24:	2004      	movs	r0, #4
 8000c26:	f7ff feb0 	bl	800098a <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	3308      	adds	r3, #8
 8000c30:	4619      	mov	r1, r3
 8000c32:	2006      	movs	r0, #6
 8000c34:	f7ff fea9 	bl	800098a <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	3310      	adds	r3, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	2008      	movs	r0, #8
 8000c42:	f7ff fea2 	bl	800098a <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	3318      	adds	r3, #24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f7ff fe9b 	bl	800098a <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	3320      	adds	r3, #32
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	200c      	movs	r0, #12
 8000c5e:	f7ff fe94 	bl	800098a <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	3328      	adds	r3, #40	; 0x28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	200e      	movs	r0, #14
 8000c6c:	f7ff fe8d 	bl	800098a <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	3330      	adds	r3, #48	; 0x30
 8000c76:	4619      	mov	r1, r3
 8000c78:	2010      	movs	r0, #16
 8000c7a:	f7ff fe86 	bl	800098a <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	3338      	adds	r3, #56	; 0x38
 8000c84:	4619      	mov	r1, r3
 8000c86:	2012      	movs	r0, #18
 8000c88:	f7ff fe7f 	bl	800098a <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command & MD2714)													// Wenn Sampling Frequenz = MD2714
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d032      	beq.n	8000cfc <ltc6811_test+0x154>
	{
		// Wenn ADCOPT gesetzt
		if (Ltc6811_Conf.ADCOPT == 1)
 8000c96:	4bb8      	ldr	r3, [pc, #736]	; (8000f78 <ltc6811_test+0x3d0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d013      	beq.n	8000ccc <ltc6811_test+0x124>
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	2b20      	cmp	r3, #32
 8000ca8:	d104      	bne.n	8000cb4 <ltc6811_test+0x10c>
			{
				test_pattern = 0x9553;										// Registerwert bei 14kHz
 8000caa:	f249 5353 	movw	r3, #38227	; 0x9553
 8000cae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000cb2:	e03a      	b.n	8000d2a <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	2b40      	cmp	r3, #64	; 0x40
 8000cb8:	d104      	bne.n	8000cc4 <ltc6811_test+0x11c>
			{
				test_pattern = 0x6AAC;										// Registerwert bei 14kHz
 8000cba:	f646 23ac 	movw	r3, #27308	; 0x6aac
 8000cbe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000cc2:	e032      	b.n	8000d2a <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000cca:	e02e      	b.n	8000d2a <ltc6811_test+0x182>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command & ST1)
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <ltc6811_test+0x138>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000cd6:	f249 5365 	movw	r3, #38245	; 0x9565
 8000cda:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000cde:	e024      	b.n	8000d2a <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command & ST2)
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d004      	beq.n	8000cf4 <ltc6811_test+0x14c>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000cea:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000cee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000cf2:	e01a      	b.n	8000d2a <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000cfa:	e016      	b.n	8000d2a <ltc6811_test+0x182>
		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command & ST1)
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	f003 0320 	and.w	r3, r3, #32
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d004      	beq.n	8000d10 <ltc6811_test+0x168>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000d06:	f249 5355 	movw	r3, #38229	; 0x9555
 8000d0a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d0e:	e00c      	b.n	8000d2a <ltc6811_test+0x182>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command & ST2)
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d004      	beq.n	8000d24 <ltc6811_test+0x17c>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000d1a:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000d1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d22:	e002      	b.n	8000d2a <ltc6811_test+0x182>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000d30:	e117      	b.n	8000f62 <ltc6811_test+0x3ba>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 8000d32:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d36:	2b1d      	cmp	r3, #29
 8000d38:	f200 8105 	bhi.w	8000f46 <ltc6811_test+0x39e>
 8000d3c:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <ltc6811_test+0x19c>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000dbd 	.word	0x08000dbd
 8000d48:	08000dbd 	.word	0x08000dbd
 8000d4c:	08000dbd 	.word	0x08000dbd
 8000d50:	08000deb 	.word	0x08000deb
 8000d54:	08000deb 	.word	0x08000deb
 8000d58:	08000deb 	.word	0x08000deb
 8000d5c:	08000e1b 	.word	0x08000e1b
 8000d60:	08000e1b 	.word	0x08000e1b
 8000d64:	08000e1b 	.word	0x08000e1b
 8000d68:	08000e4d 	.word	0x08000e4d
 8000d6c:	08000e4d 	.word	0x08000e4d
 8000d70:	08000e4d 	.word	0x08000e4d
 8000d74:	08000e7f 	.word	0x08000e7f
 8000d78:	08000e7f 	.word	0x08000e7f
 8000d7c:	08000e7f 	.word	0x08000e7f
 8000d80:	08000eb1 	.word	0x08000eb1
 8000d84:	08000eb1 	.word	0x08000eb1
 8000d88:	08000eb1 	.word	0x08000eb1
 8000d8c:	08000ee3 	.word	0x08000ee3
 8000d90:	08000f47 	.word	0x08000f47
 8000d94:	08000ee3 	.word	0x08000ee3
 8000d98:	08000f15 	.word	0x08000f15
 8000d9c:	08000f47 	.word	0x08000f47
 8000da0:	08000f47 	.word	0x08000f47
 8000da4:	08000f47 	.word	0x08000f47
 8000da8:	08000f47 	.word	0x08000f47
 8000dac:	08000f47 	.word	0x08000f47
 8000db0:	08000f47 	.word	0x08000f47
 8000db4:	08000f47 	.word	0x08000f47
 8000db8:	08000ee3 	.word	0x08000ee3
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000dbc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	3350      	adds	r3, #80	; 0x50
 8000dc6:	443b      	add	r3, r7
 8000dc8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	3350      	adds	r3, #80	; 0x50
 8000dd8:	443b      	add	r3, r7
 8000dda:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000de8:	e0ae      	b.n	8000f48 <ltc6811_test+0x3a0>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3] << 8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000dea:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	3303      	adds	r3, #3
 8000df2:	3350      	adds	r3, #80	; 0x50
 8000df4:	443b      	add	r3, r7
 8000df6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e02:	3301      	adds	r3, #1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	3350      	adds	r3, #80	; 0x50
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e18:	e096      	b.n	8000f48 <ltc6811_test+0x3a0>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1] << 8)|tmp_data[(i+2)*2]);		// Register CVC umwandeln
 8000e1a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e1e:	3302      	adds	r3, #2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	3301      	adds	r3, #1
 8000e24:	3350      	adds	r3, #80	; 0x50
 8000e26:	443b      	add	r3, r7
 8000e28:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e34:	3302      	adds	r3, #2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	3350      	adds	r3, #80	; 0x50
 8000e3a:	443b      	add	r3, r7
 8000e3c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e4a:	e07d      	b.n	8000f48 <ltc6811_test+0x3a0>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3] << 8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000e4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e50:	3302      	adds	r3, #2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	3303      	adds	r3, #3
 8000e56:	3350      	adds	r3, #80	; 0x50
 8000e58:	443b      	add	r3, r7
 8000e5a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e66:	3303      	adds	r3, #3
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	3350      	adds	r3, #80	; 0x50
 8000e6c:	443b      	add	r3, r7
 8000e6e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e7c:	e064      	b.n	8000f48 <ltc6811_test+0x3a0>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1] << 8)|tmp_data[(i+4)*2]);		// Register AUXA umwandeln
 8000e7e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e82:	3304      	adds	r3, #4
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	3301      	adds	r3, #1
 8000e88:	3350      	adds	r3, #80	; 0x50
 8000e8a:	443b      	add	r3, r7
 8000e8c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e98:	3304      	adds	r3, #4
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	3350      	adds	r3, #80	; 0x50
 8000e9e:	443b      	add	r3, r7
 8000ea0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000eae:	e04b      	b.n	8000f48 <ltc6811_test+0x3a0>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3] << 8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000eb0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	3303      	adds	r3, #3
 8000eba:	3350      	adds	r3, #80	; 0x50
 8000ebc:	443b      	add	r3, r7
 8000ebe:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000eca:	3305      	adds	r3, #5
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	3350      	adds	r3, #80	; 0x50
 8000ed0:	443b      	add	r3, r7
 8000ed2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000ee0:	e032      	b.n	8000f48 <ltc6811_test+0x3a0>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+1] << 8)|tmp_data[(i+6)*2]);		// Register STATA umwandeln
 8000ee2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ee6:	3306      	adds	r3, #6
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	3301      	adds	r3, #1
 8000eec:	3350      	adds	r3, #80	; 0x50
 8000eee:	443b      	add	r3, r7
 8000ef0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000efc:	3306      	adds	r3, #6
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	3350      	adds	r3, #80	; 0x50
 8000f02:	443b      	add	r3, r7
 8000f04:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000f12:	e019      	b.n	8000f48 <ltc6811_test+0x3a0>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000f14:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f18:	3306      	adds	r3, #6
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	3303      	adds	r3, #3
 8000f1e:	3350      	adds	r3, #80	; 0x50
 8000f20:	443b      	add	r3, r7
 8000f22:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f2e:	3307      	adds	r3, #7
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	3350      	adds	r3, #80	; 0x50
 8000f34:	443b      	add	r3, r7
 8000f36:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000f44:	e000      	b.n	8000f48 <ltc6811_test+0x3a0>
			// Kein Register
			default:
				break;
 8000f46:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000f48:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000f4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d001      	beq.n	8000f58 <ltc6811_test+0x3b0>
#ifdef DEBUG_LTC6811
			ITM_SendString("Test failed: ");
			ITM_SendNumber(i);
			ITM_SendChar('\n');
#endif
			return 1;														// Selbsttest 1 nicht OK
 8000f54:	2301      	movs	r3, #1
 8000f56:	e00a      	b.n	8000f6e <ltc6811_test+0x3c6>
	for (uint8_t i=0; i<22; i++)
 8000f58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000f62:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f66:	2b15      	cmp	r3, #21
 8000f68:	f67f aee3 	bls.w	8000d32 <ltc6811_test+0x18a>
		}
	}
#ifdef DEBUG_LTC6811
	ITM_SendString("Test passed\n");
#endif
	return 0;																// Selbsttest 1 OK
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3750      	adds	r7, #80	; 0x50
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000030 	.word	0x20000030

08000f7c <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Diagnostic LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000f8a:	f240 7015 	movw	r0, #1813	; 0x715
 8000f8e:	f7ff fc68 	bl	8000862 <ltc6811>

	// Verzoegerungszeit 10ms, DIAG Befehl braucht ca. 400µs bis 4ms
	HAL_Delay(10);
 8000f92:	200a      	movs	r0, #10
 8000f94:	f002 fb56 	bl	8003644 <HAL_Delay>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	2012      	movs	r0, #18
 8000f9e:	f7ff fcf4 	bl	800098a <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1 << 1))
 8000fa2:	797b      	ldrb	r3, [r7, #5]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <ltc6811_diagn+0x34>
	{
		return 1;															// Multiplexertest nicht OK
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <ltc6811_diagn+0x36>
	}

	return 0;																// Multiplexertest OK
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b09b      	sub	sp, #108	; 0x6c
 8000fc0:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Openwire LTC6811.\n");
#endif

	// Arrays definieren
	uint8_t pulldown[32] = {0}, pullup[32] = {0};							// Speicher Registerwerte
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8000fc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	619a      	str	r2, [r3, #24]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	619a      	str	r2, [r3, #24]
	uint16_t cell[1] = {0}, openwire[13] = {0};								// Speicher Zelle, Openwire vergleic Threshold
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	843b      	strh	r3, [r7, #32]
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	831a      	strh	r2, [r3, #24]

	// Pullup Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800100e:	e00c      	b.n	800102a <ltc6811_openwire+0x6e>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);										// Pullup Current
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f7ff fc25 	bl	8000862 <ltc6811>
		HAL_Delay(300);
 8001018:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800101c:	f002 fb12 	bl	8003644 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8001020:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001024:	3301      	adds	r3, #1
 8001026:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800102a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800102e:	2b01      	cmp	r3, #1
 8001030:	d9ee      	bls.n	8001010 <ltc6811_openwire+0x54>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pullup[0]);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	2004      	movs	r0, #4
 800103a:	f7ff fca6 	bl	800098a <ltc6811_read>
	ltc6811_read(RDCVB, &pullup[8]);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	3308      	adds	r3, #8
 8001044:	4619      	mov	r1, r3
 8001046:	2006      	movs	r0, #6
 8001048:	f7ff fc9f 	bl	800098a <ltc6811_read>
	ltc6811_read(RDCVC, &pullup[16]);
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	3310      	adds	r3, #16
 8001052:	4619      	mov	r1, r3
 8001054:	2008      	movs	r0, #8
 8001056:	f7ff fc98 	bl	800098a <ltc6811_read>
	ltc6811_read(RDCVD, &pullup[24]);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	3318      	adds	r3, #24
 8001060:	4619      	mov	r1, r3
 8001062:	200a      	movs	r0, #10
 8001064:	f7ff fc91 	bl	800098a <ltc6811_read>

	// Pulldown Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800106e:	e00c      	b.n	800108a <ltc6811_openwire+0xce>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);											// Pulldown Current
 8001070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001074:	f7ff fbf5 	bl	8000862 <ltc6811>
		HAL_Delay(300);
 8001078:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800107c:	f002 fae2 	bl	8003644 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8001080:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001084:	3301      	adds	r3, #1
 8001086:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800108a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800108e:	2b01      	cmp	r3, #1
 8001090:	d9ee      	bls.n	8001070 <ltc6811_openwire+0xb4>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pulldown[0]);
 8001092:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001096:	4619      	mov	r1, r3
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff fc76 	bl	800098a <ltc6811_read>
	ltc6811_read(RDCVB, &pulldown[8]);
 800109e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010a2:	3308      	adds	r3, #8
 80010a4:	4619      	mov	r1, r3
 80010a6:	2006      	movs	r0, #6
 80010a8:	f7ff fc6f 	bl	800098a <ltc6811_read>
	ltc6811_read(RDCVC, &pulldown[16]);
 80010ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010b0:	3310      	adds	r3, #16
 80010b2:	4619      	mov	r1, r3
 80010b4:	2008      	movs	r0, #8
 80010b6:	f7ff fc68 	bl	800098a <ltc6811_read>
	ltc6811_read(RDCVD, &pulldown[24]);
 80010ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010be:	3318      	adds	r3, #24
 80010c0:	4619      	mov	r1, r3
 80010c2:	200a      	movs	r0, #10
 80010c4:	f7ff fc61 	bl	800098a <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t i = 0; i < 13; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80010ce:	e12d      	b.n	800132c <ltc6811_openwire+0x370>
	{
		// Auswahl welche Leitung
		switch (i)
 80010d0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010d4:	2b0c      	cmp	r3, #12
 80010d6:	f200 8123 	bhi.w	8001320 <ltc6811_openwire+0x364>
 80010da:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <ltc6811_openwire+0x124>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	08001115 	.word	0x08001115
 80010e4:	08001139 	.word	0x08001139
 80010e8:	08001139 	.word	0x08001139
 80010ec:	080011a7 	.word	0x080011a7
 80010f0:	080011a7 	.word	0x080011a7
 80010f4:	080011a7 	.word	0x080011a7
 80010f8:	08001219 	.word	0x08001219
 80010fc:	08001219 	.word	0x08001219
 8001100:	08001219 	.word	0x08001219
 8001104:	0800128b 	.word	0x0800128b
 8001108:	0800128b 	.word	0x0800128b
 800110c:	0800128b 	.word	0x0800128b
 8001110:	080012fd 	.word	0x080012fd
		{
			// Leitungen Zelle 1/2 bis 3/4
			case 0:
				openwire[i] = ((pulldown[1] << 8) + pulldown[0]);
 8001114:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001118:	b29b      	uxth	r3, r3
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b299      	uxth	r1, r3
 800111e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001122:	b29a      	uxth	r2, r3
 8001124:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001128:	440a      	add	r2, r1
 800112a:	b292      	uxth	r2, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	3368      	adds	r3, #104	; 0x68
 8001130:	443b      	add	r3, r7
 8001132:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001136:	e0f4      	b.n	8001322 <ltc6811_openwire+0x366>
			case 1:
			case 2:
				openwire[i] = getDifference(((pullup[i*2+1] << 8) + pullup[i*2]), ((pulldown[i*2+1] << 8) + pulldown[i*2]));
 8001138:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	3301      	adds	r3, #1
 8001140:	3368      	adds	r3, #104	; 0x68
 8001142:	443b      	add	r3, r7
 8001144:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001148:	b29b      	uxth	r3, r3
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b29a      	uxth	r2, r3
 800114e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	3368      	adds	r3, #104	; 0x68
 8001156:	443b      	add	r3, r7
 8001158:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b298      	uxth	r0, r3
 8001162:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	3301      	adds	r3, #1
 800116a:	3368      	adds	r3, #104	; 0x68
 800116c:	443b      	add	r3, r7
 800116e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001172:	b29b      	uxth	r3, r3
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b29a      	uxth	r2, r3
 8001178:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	3368      	adds	r3, #104	; 0x68
 8001180:	443b      	add	r3, r7
 8001182:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001186:	b29b      	uxth	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b29b      	uxth	r3, r3
 800118c:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fb45 	bl	8000820 <getDifference>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	0063      	lsls	r3, r4, #1
 800119c:	3368      	adds	r3, #104	; 0x68
 800119e:	443b      	add	r3, r7
 80011a0:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80011a4:	e0bd      	b.n	8001322 <ltc6811_openwire+0x366>
			// Leitungen Zelle 4/5 bis 6/7
			case 3:
			case 4:
			case 5:
				openwire[i] = getDifference(((pullup[i*2+3] << 8) + pullup[i*2+2]), ((pulldown[i*2+3] << 8) + pulldown[i*2+2]));
 80011a6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	3303      	adds	r3, #3
 80011ae:	3368      	adds	r3, #104	; 0x68
 80011b0:	443b      	add	r3, r7
 80011b2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011c0:	3301      	adds	r3, #1
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	3368      	adds	r3, #104	; 0x68
 80011c6:	443b      	add	r3, r7
 80011c8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b298      	uxth	r0, r3
 80011d2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	3303      	adds	r3, #3
 80011da:	3368      	adds	r3, #104	; 0x68
 80011dc:	443b      	add	r3, r7
 80011de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011ec:	3301      	adds	r3, #1
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	3368      	adds	r3, #104	; 0x68
 80011f2:	443b      	add	r3, r7
 80011f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fb0c 	bl	8000820 <getDifference>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	0063      	lsls	r3, r4, #1
 800120e:	3368      	adds	r3, #104	; 0x68
 8001210:	443b      	add	r3, r7
 8001212:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001216:	e084      	b.n	8001322 <ltc6811_openwire+0x366>
			// Leitungen Zelle 7/8 bis 9/10
			case 6:
			case 7:
			case 8:
				openwire[i] = getDifference(((pullup[i*2+5] << 8) + pullup[i*2+4]), ((pulldown[i*2+5] << 8) + pulldown[i*2+4]));
 8001218:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	3305      	adds	r3, #5
 8001220:	3368      	adds	r3, #104	; 0x68
 8001222:	443b      	add	r3, r7
 8001224:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001228:	b29b      	uxth	r3, r3
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b29a      	uxth	r2, r3
 800122e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001232:	3302      	adds	r3, #2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	3368      	adds	r3, #104	; 0x68
 8001238:	443b      	add	r3, r7
 800123a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800123e:	b29b      	uxth	r3, r3
 8001240:	4413      	add	r3, r2
 8001242:	b298      	uxth	r0, r3
 8001244:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	3305      	adds	r3, #5
 800124c:	3368      	adds	r3, #104	; 0x68
 800124e:	443b      	add	r3, r7
 8001250:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001254:	b29b      	uxth	r3, r3
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b29a      	uxth	r2, r3
 800125a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800125e:	3302      	adds	r3, #2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	3368      	adds	r3, #104	; 0x68
 8001264:	443b      	add	r3, r7
 8001266:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800126a:	b29b      	uxth	r3, r3
 800126c:	4413      	add	r3, r2
 800126e:	b29b      	uxth	r3, r3
 8001270:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fad3 	bl	8000820 <getDifference>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	0063      	lsls	r3, r4, #1
 8001280:	3368      	adds	r3, #104	; 0x68
 8001282:	443b      	add	r3, r7
 8001284:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001288:	e04b      	b.n	8001322 <ltc6811_openwire+0x366>
			// Leitungen Zelle 10/11 und 11/12
			case 9:
			case 10:
			case 11:
				openwire[i] = getDifference(((pullup[i*2+7] << 8) + pullup[i*2+6]), ((pulldown[i*2+7] << 8) + pulldown[i*2+6]));
 800128a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	3307      	adds	r3, #7
 8001292:	3368      	adds	r3, #104	; 0x68
 8001294:	443b      	add	r3, r7
 8001296:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800129a:	b29b      	uxth	r3, r3
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b29a      	uxth	r2, r3
 80012a0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012a4:	3303      	adds	r3, #3
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3368      	adds	r3, #104	; 0x68
 80012aa:	443b      	add	r3, r7
 80012ac:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	b298      	uxth	r0, r3
 80012b6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	3307      	adds	r3, #7
 80012be:	3368      	adds	r3, #104	; 0x68
 80012c0:	443b      	add	r3, r7
 80012c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012d0:	3303      	adds	r3, #3
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	3368      	adds	r3, #104	; 0x68
 80012d6:	443b      	add	r3, r7
 80012d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fa9a 	bl	8000820 <getDifference>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	0063      	lsls	r3, r4, #1
 80012f2:	3368      	adds	r3, #104	; 0x68
 80012f4:	443b      	add	r3, r7
 80012f6:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80012fa:	e012      	b.n	8001322 <ltc6811_openwire+0x366>
			case 12:
				openwire[i] = ((pullup[29] << 8) + pullup[28]);
 80012fc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001300:	b29b      	uxth	r3, r3
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b299      	uxth	r1, r3
 8001306:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800130a:	b29a      	uxth	r2, r3
 800130c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001310:	440a      	add	r2, r1
 8001312:	b292      	uxth	r2, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	3368      	adds	r3, #104	; 0x68
 8001318:	443b      	add	r3, r7
 800131a:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800131e:	e000      	b.n	8001322 <ltc6811_openwire+0x366>
			default:
				break;
 8001320:	bf00      	nop
	for (uint8_t i = 0; i < 13; i++)
 8001322:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001326:	3301      	adds	r3, #1
 8001328:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800132c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001330:	2b0c      	cmp	r3, #12
 8001332:	f67f aecd 	bls.w	80010d0 <ltc6811_openwire+0x114>
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t i = 1; i < 12; i++)
 8001336:	2301      	movs	r3, #1
 8001338:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800133c:	e01a      	b.n	8001374 <ltc6811_openwire+0x3b8>
	{
		// Vergleiche Messdaten mit Threshold
		if (openwire[i] > OPENWIRE_THRESHOLD)
 800133e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	3368      	adds	r3, #104	; 0x68
 8001346:	443b      	add	r3, r7
 8001348:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 800134c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001350:	d90b      	bls.n	800136a <ltc6811_openwire+0x3ae>
		{
			cell[0] |= (1 << i);											// Wenn Threshold ueberschritten, Offene Leitung
 8001352:	8c3b      	ldrh	r3, [r7, #32]
 8001354:	b21a      	sxth	r2, r3
 8001356:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21b      	sxth	r3, r3
 8001366:	b29b      	uxth	r3, r3
 8001368:	843b      	strh	r3, [r7, #32]
	for (uint8_t i = 1; i < 12; i++)
 800136a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800136e:	3301      	adds	r3, #1
 8001370:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001374:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001378:	2b0b      	cmp	r3, #11
 800137a:	d9e0      	bls.n	800133e <ltc6811_openwire+0x382>
		}
	}

	// Offene Leitung erste Zelle messen
	if (openwire[0] == 0)
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d104      	bne.n	800138c <ltc6811_openwire+0x3d0>
	{
		cell[0] |= (1 << 0);												// Unterste Leitung Offen
 8001382:	8c3b      	ldrh	r3, [r7, #32]
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	b29b      	uxth	r3, r3
 800138a:	843b      	strh	r3, [r7, #32]
	}

	// Offene Leitung letzte Zelle messen
	if (openwire[12] == 0)
 800138c:	8bbb      	ldrh	r3, [r7, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d104      	bne.n	800139c <ltc6811_openwire+0x3e0>
	{
		cell[0] |= (1 << 12);												// Oberste Leitung offen
 8001392:	8c3b      	ldrh	r3, [r7, #32]
 8001394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001398:	b29b      	uxth	r3, r3
 800139a:	843b      	strh	r3, [r7, #32]
	}

	// Wenn offene Leitung vorhanden
	if (cell[0] != 0)
 800139c:	8c3b      	ldrh	r3, [r7, #32]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <ltc6811_openwire+0x3ea>
	{
		return 1;															// Open Wire nicht OK
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <ltc6811_openwire+0x3ec>
	}

	return 0;																// Open Wire OK
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	376c      	adds	r7, #108	; 0x6c
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80013b6:	2115      	movs	r1, #21
 80013b8:	483b      	ldr	r0, [pc, #236]	; (80014a8 <collectHardwareInfo+0xf8>)
 80013ba:	f7ff f8c7 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80013be:	f002 f97b 	bl	80036b8 <HAL_GetDEVID>
 80013c2:	4603      	mov	r3, r0
 80013c4:	210a      	movs	r1, #10
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8d4 	bl	8000574 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80013cc:	2117      	movs	r1, #23
 80013ce:	4837      	ldr	r0, [pc, #220]	; (80014ac <collectHardwareInfo+0xfc>)
 80013d0:	f7ff f8bc 	bl	800054c <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80013d4:	f002 f964 	bl	80036a0 <HAL_GetREVID>
 80013d8:	4603      	mov	r3, r0
 80013da:	f242 0201 	movw	r2, #8193	; 0x2001
 80013de:	4293      	cmp	r3, r2
 80013e0:	d016      	beq.n	8001410 <collectHardwareInfo+0x60>
 80013e2:	f242 0201 	movw	r2, #8193	; 0x2001
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d817      	bhi.n	800141a <collectHardwareInfo+0x6a>
 80013ea:	f241 0201 	movw	r2, #4097	; 0x1001
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d004      	beq.n	80013fc <collectHardwareInfo+0x4c>
 80013f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d005      	beq.n	8001406 <collectHardwareInfo+0x56>
 80013fa:	e00e      	b.n	800141a <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80013fc:	2101      	movs	r1, #1
 80013fe:	482c      	ldr	r0, [pc, #176]	; (80014b0 <collectHardwareInfo+0x100>)
 8001400:	f7ff f8a4 	bl	800054c <uartTransmit>
			break;
 8001404:	e011      	b.n	800142a <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8001406:	2101      	movs	r1, #1
 8001408:	482a      	ldr	r0, [pc, #168]	; (80014b4 <collectHardwareInfo+0x104>)
 800140a:	f7ff f89f 	bl	800054c <uartTransmit>
			break;
 800140e:	e00c      	b.n	800142a <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8001410:	2101      	movs	r1, #1
 8001412:	4829      	ldr	r0, [pc, #164]	; (80014b8 <collectHardwareInfo+0x108>)
 8001414:	f7ff f89a 	bl	800054c <uartTransmit>
			break;
 8001418:	e007      	b.n	800142a <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800141a:	f002 f941 	bl	80036a0 <HAL_GetREVID>
 800141e:	4603      	mov	r3, r0
 8001420:	210a      	movs	r1, #10
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f8a6 	bl	8000574 <uartTransmitNumber>
			break;
 8001428:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 800142a:	2115      	movs	r1, #21
 800142c:	4823      	ldr	r0, [pc, #140]	; (80014bc <collectHardwareInfo+0x10c>)
 800142e:	f7ff f88d 	bl	800054c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8001432:	f003 fe0f 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8001436:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <collectHardwareInfo+0x110>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9b      	lsrs	r3, r3, #18
 8001442:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8001444:	210a      	movs	r1, #10
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff f894 	bl	8000574 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 800144c:	2104      	movs	r1, #4
 800144e:	481d      	ldr	r0, [pc, #116]	; (80014c4 <collectHardwareInfo+0x114>)
 8001450:	f7ff f87c 	bl	800054c <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8001454:	2111      	movs	r1, #17
 8001456:	481c      	ldr	r0, [pc, #112]	; (80014c8 <collectHardwareInfo+0x118>)
 8001458:	f7ff f878 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 800145c:	f002 f93a 	bl	80036d4 <HAL_GetUIDw0>
 8001460:	4603      	mov	r3, r0
 8001462:	2110      	movs	r1, #16
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f885 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 800146a:	2101      	movs	r1, #1
 800146c:	4817      	ldr	r0, [pc, #92]	; (80014cc <collectHardwareInfo+0x11c>)
 800146e:	f7ff f86d 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8001472:	f002 f93b 	bl	80036ec <HAL_GetUIDw1>
 8001476:	4603      	mov	r3, r0
 8001478:	2110      	movs	r1, #16
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f87a 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8001480:	2101      	movs	r1, #1
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <collectHardwareInfo+0x11c>)
 8001484:	f7ff f862 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8001488:	f002 f93c 	bl	8003704 <HAL_GetUIDw2>
 800148c:	4603      	mov	r3, r0
 800148e:	2110      	movs	r1, #16
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f86f 	bl	8000574 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8001496:	2101      	movs	r1, #1
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <collectHardwareInfo+0x120>)
 800149a:	f7ff f857 	bl	800054c <uartTransmit>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	08008d78 	.word	0x08008d78
 80014ac:	08008d90 	.word	0x08008d90
 80014b0:	08008da8 	.word	0x08008da8
 80014b4:	08008dac 	.word	0x08008dac
 80014b8:	08008db0 	.word	0x08008db0
 80014bc:	08008db4 	.word	0x08008db4
 80014c0:	431bde83 	.word	0x431bde83
 80014c4:	08008dcc 	.word	0x08008dcc
 80014c8:	08008dd4 	.word	0x08008dd4
 80014cc:	08008de8 	.word	0x08008de8
 80014d0:	08008dec 	.word	0x08008dec

080014d4 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80014d8:	2114      	movs	r1, #20
 80014da:	4824      	ldr	r0, [pc, #144]	; (800156c <collectMiddlewareInfo+0x98>)
 80014dc:	f7ff f836 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80014e0:	210a      	movs	r1, #10
 80014e2:	2005      	movs	r0, #5
 80014e4:	f7ff f846 	bl	8000574 <uartTransmitNumber>
	uartTransmit(".", 1);
 80014e8:	2101      	movs	r1, #1
 80014ea:	4821      	ldr	r0, [pc, #132]	; (8001570 <collectMiddlewareInfo+0x9c>)
 80014ec:	f7ff f82e 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80014f0:	210a      	movs	r1, #10
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff f83e 	bl	8000574 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80014f8:	2112      	movs	r1, #18
 80014fa:	481e      	ldr	r0, [pc, #120]	; (8001574 <collectMiddlewareInfo+0xa0>)
 80014fc:	f7ff f826 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8001500:	f002 f8c4 	bl	800368c <HAL_GetHalVersion>
 8001504:	4603      	mov	r3, r0
 8001506:	0e1b      	lsrs	r3, r3, #24
 8001508:	b2db      	uxtb	r3, r3
 800150a:	210a      	movs	r1, #10
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f831 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001512:	2101      	movs	r1, #1
 8001514:	4816      	ldr	r0, [pc, #88]	; (8001570 <collectMiddlewareInfo+0x9c>)
 8001516:	f7ff f819 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800151a:	f002 f8b7 	bl	800368c <HAL_GetHalVersion>
 800151e:	4603      	mov	r3, r0
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	b2db      	uxtb	r3, r3
 8001524:	210a      	movs	r1, #10
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f824 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800152c:	2101      	movs	r1, #1
 800152e:	4810      	ldr	r0, [pc, #64]	; (8001570 <collectMiddlewareInfo+0x9c>)
 8001530:	f7ff f80c 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8001534:	f002 f8aa 	bl	800368c <HAL_GetHalVersion>
 8001538:	4603      	mov	r3, r0
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b2db      	uxtb	r3, r3
 800153e:	210a      	movs	r1, #10
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f817 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001546:	2101      	movs	r1, #1
 8001548:	4809      	ldr	r0, [pc, #36]	; (8001570 <collectMiddlewareInfo+0x9c>)
 800154a:	f7fe ffff 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 800154e:	f002 f89d 	bl	800368c <HAL_GetHalVersion>
 8001552:	4603      	mov	r3, r0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	210a      	movs	r1, #10
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f80b 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 800155e:	2101      	movs	r1, #1
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <collectMiddlewareInfo+0xa4>)
 8001562:	f7fe fff3 	bl	800054c <uartTransmit>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	08008df0 	.word	0x08008df0
 8001570:	08008e04 	.word	0x08008e04
 8001574:	08008e08 	.word	0x08008e08
 8001578:	08008dec 	.word	0x08008dec

0800157c <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8001580:	2111      	movs	r1, #17
 8001582:	4826      	ldr	r0, [pc, #152]	; (800161c <collectSoftwareInfo+0xa0>)
 8001584:	f7fe ffe2 	bl	800054c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8001588:	2108      	movs	r1, #8
 800158a:	4825      	ldr	r0, [pc, #148]	; (8001620 <collectSoftwareInfo+0xa4>)
 800158c:	f7fe ffde 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8001590:	2111      	movs	r1, #17
 8001592:	4824      	ldr	r0, [pc, #144]	; (8001624 <collectSoftwareInfo+0xa8>)
 8001594:	f7fe ffda 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8001598:	2108      	movs	r1, #8
 800159a:	4823      	ldr	r0, [pc, #140]	; (8001628 <collectSoftwareInfo+0xac>)
 800159c:	f7fe ffd6 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 80015a0:	210f      	movs	r1, #15
 80015a2:	4822      	ldr	r0, [pc, #136]	; (800162c <collectSoftwareInfo+0xb0>)
 80015a4:	f7fe ffd2 	bl	800054c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80015a8:	2129      	movs	r1, #41	; 0x29
 80015aa:	4821      	ldr	r0, [pc, #132]	; (8001630 <collectSoftwareInfo+0xb4>)
 80015ac:	f7fe ffce 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80015b0:	2101      	movs	r1, #1
 80015b2:	4820      	ldr	r0, [pc, #128]	; (8001634 <collectSoftwareInfo+0xb8>)
 80015b4:	f7fe ffca 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80015b8:	2116      	movs	r1, #22
 80015ba:	481f      	ldr	r0, [pc, #124]	; (8001638 <collectSoftwareInfo+0xbc>)
 80015bc:	f7fe ffc6 	bl	800054c <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80015c0:	2105      	movs	r1, #5
 80015c2:	481e      	ldr	r0, [pc, #120]	; (800163c <collectSoftwareInfo+0xc0>)
 80015c4:	f7fe ffc2 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80015c8:	2115      	movs	r1, #21
 80015ca:	481d      	ldr	r0, [pc, #116]	; (8001640 <collectSoftwareInfo+0xc4>)
 80015cc:	f7fe ffbe 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80015d0:	2108      	movs	r1, #8
 80015d2:	481c      	ldr	r0, [pc, #112]	; (8001644 <collectSoftwareInfo+0xc8>)
 80015d4:	f7fe ffba 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80015d8:	2116      	movs	r1, #22
 80015da:	481b      	ldr	r0, [pc, #108]	; (8001648 <collectSoftwareInfo+0xcc>)
 80015dc:	f7fe ffb6 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80015e0:	2111      	movs	r1, #17
 80015e2:	481a      	ldr	r0, [pc, #104]	; (800164c <collectSoftwareInfo+0xd0>)
 80015e4:	f7fe ffb2 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80015e8:	2101      	movs	r1, #1
 80015ea:	4812      	ldr	r0, [pc, #72]	; (8001634 <collectSoftwareInfo+0xb8>)
 80015ec:	f7fe ffae 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80015f0:	2111      	movs	r1, #17
 80015f2:	4817      	ldr	r0, [pc, #92]	; (8001650 <collectSoftwareInfo+0xd4>)
 80015f4:	f7fe ffaa 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80015f8:	210b      	movs	r1, #11
 80015fa:	4816      	ldr	r0, [pc, #88]	; (8001654 <collectSoftwareInfo+0xd8>)
 80015fc:	f7fe ffa6 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8001600:	2111      	movs	r1, #17
 8001602:	4815      	ldr	r0, [pc, #84]	; (8001658 <collectSoftwareInfo+0xdc>)
 8001604:	f7fe ffa2 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8001608:	2109      	movs	r1, #9
 800160a:	4814      	ldr	r0, [pc, #80]	; (800165c <collectSoftwareInfo+0xe0>)
 800160c:	f7fe ff9e 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001610:	2101      	movs	r1, #1
 8001612:	4808      	ldr	r0, [pc, #32]	; (8001634 <collectSoftwareInfo+0xb8>)
 8001614:	f7fe ff9a 	bl	800054c <uartTransmit>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08008e1c 	.word	0x08008e1c
 8001620:	08008e30 	.word	0x08008e30
 8001624:	08008e38 	.word	0x08008e38
 8001628:	08008e4c 	.word	0x08008e4c
 800162c:	08008e54 	.word	0x08008e54
 8001630:	08008e64 	.word	0x08008e64
 8001634:	08008dec 	.word	0x08008dec
 8001638:	08008e90 	.word	0x08008e90
 800163c:	08008ea8 	.word	0x08008ea8
 8001640:	08008eb0 	.word	0x08008eb0
 8001644:	08008ec8 	.word	0x08008ec8
 8001648:	08008ed0 	.word	0x08008ed0
 800164c:	08008ee8 	.word	0x08008ee8
 8001650:	08008efc 	.word	0x08008efc
 8001654:	08008f10 	.word	0x08008f10
 8001658:	08008f1c 	.word	0x08008f1c
 800165c:	08008f30 	.word	0x08008f30

08001660 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8001664:	2115      	movs	r1, #21
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <collectGitcounts+0x58>)
 8001668:	f7fe ff70 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 800166c:	2103      	movs	r1, #3
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <collectGitcounts+0x5c>)
 8001670:	f7fe ff6c 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8001674:	2117      	movs	r1, #23
 8001676:	4812      	ldr	r0, [pc, #72]	; (80016c0 <collectGitcounts+0x60>)
 8001678:	f7fe ff68 	bl	800054c <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 800167c:	2103      	movs	r1, #3
 800167e:	4811      	ldr	r0, [pc, #68]	; (80016c4 <collectGitcounts+0x64>)
 8001680:	f7fe ff64 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8001684:	211c      	movs	r1, #28
 8001686:	4810      	ldr	r0, [pc, #64]	; (80016c8 <collectGitcounts+0x68>)
 8001688:	f7fe ff60 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 800168c:	2103      	movs	r1, #3
 800168e:	480f      	ldr	r0, [pc, #60]	; (80016cc <collectGitcounts+0x6c>)
 8001690:	f7fe ff5c 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001694:	2116      	movs	r1, #22
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <collectGitcounts+0x70>)
 8001698:	f7fe ff58 	bl	800054c <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 800169c:	2102      	movs	r1, #2
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <collectGitcounts+0x74>)
 80016a0:	f7fe ff54 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80016a4:	2115      	movs	r1, #21
 80016a6:	480c      	ldr	r0, [pc, #48]	; (80016d8 <collectGitcounts+0x78>)
 80016a8:	f7fe ff50 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 80016ac:	2102      	movs	r1, #2
 80016ae:	480b      	ldr	r0, [pc, #44]	; (80016dc <collectGitcounts+0x7c>)
 80016b0:	f7fe ff4c 	bl	800054c <uartTransmit>
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	08008f3c 	.word	0x08008f3c
 80016bc:	08008f54 	.word	0x08008f54
 80016c0:	08008f58 	.word	0x08008f58
 80016c4:	08008f70 	.word	0x08008f70
 80016c8:	08008f74 	.word	0x08008f74
 80016cc:	08008f90 	.word	0x08008f90
 80016d0:	08008e90 	.word	0x08008e90
 80016d4:	08008f94 	.word	0x08008f94
 80016d8:	08008eb0 	.word	0x08008eb0
 80016dc:	08008f98 	.word	0x08008f98

080016e0 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80016e4:	2111      	movs	r1, #17
 80016e6:	480e      	ldr	r0, [pc, #56]	; (8001720 <collectSystemInfo+0x40>)
 80016e8:	f7fe ff30 	bl	800054c <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 80016ec:	f7ff fe60 	bl	80013b0 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 80016f0:	2111      	movs	r1, #17
 80016f2:	480c      	ldr	r0, [pc, #48]	; (8001724 <collectSystemInfo+0x44>)
 80016f4:	f7fe ff2a 	bl	800054c <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 80016f8:	f7ff ff40 	bl	800157c <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80016fc:	2113      	movs	r1, #19
 80016fe:	480a      	ldr	r0, [pc, #40]	; (8001728 <collectSystemInfo+0x48>)
 8001700:	f7fe ff24 	bl	800054c <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8001704:	f7ff fee6 	bl	80014d4 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8001708:	2113      	movs	r1, #19
 800170a:	4808      	ldr	r0, [pc, #32]	; (800172c <collectSystemInfo+0x4c>)
 800170c:	f7fe ff1e 	bl	800054c <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8001710:	f7ff ffa6 	bl	8001660 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8001714:	2103      	movs	r1, #3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <collectSystemInfo+0x50>)
 8001718:	f7fe ff18 	bl	800054c <uartTransmit>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	08008f9c 	.word	0x08008f9c
 8001724:	08008fb0 	.word	0x08008fb0
 8001728:	08008fc4 	.word	0x08008fc4
 800172c:	08008fd8 	.word	0x08008fd8
 8001730:	08008fec 	.word	0x08008fec

08001734 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <readResetSource+0xa0>)
 8001740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	3301      	adds	r3, #1
 800174e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <readResetSource+0xa0>)
 8001752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001754:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	3302      	adds	r3, #2
 8001760:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <readResetSource+0xa0>)
 8001764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001766:	2b00      	cmp	r3, #0
 8001768:	da02      	bge.n	8001770 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	3304      	adds	r3, #4
 800176e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <readResetSource+0xa0>)
 8001772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	3308      	adds	r3, #8
 8001780:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <readResetSource+0xa0>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	3310      	adds	r3, #16
 8001792:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <readResetSource+0xa0>)
 8001796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	3320      	adds	r3, #32
 80017a4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <readResetSource+0xa0>)
 80017a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	3340      	adds	r3, #64	; 0x40
 80017b6:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <readResetSource+0xa0>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <readResetSource+0xa0>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c2:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80017e2:	2106      	movs	r1, #6
 80017e4:	482a      	ldr	r0, [pc, #168]	; (8001890 <printResetSource+0xb8>)
 80017e6:	f7fe feb1 	bl	800054c <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80017f0:	210f      	movs	r1, #15
 80017f2:	4828      	ldr	r0, [pc, #160]	; (8001894 <printResetSource+0xbc>)
 80017f4:	f7fe feaa 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80017f8:	e046      	b.n	8001888 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8001804:	2118      	movs	r1, #24
 8001806:	4824      	ldr	r0, [pc, #144]	; (8001898 <printResetSource+0xc0>)
 8001808:	f7fe fea0 	bl	800054c <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8001816:	2116      	movs	r1, #22
 8001818:	4820      	ldr	r0, [pc, #128]	; (800189c <printResetSource+0xc4>)
 800181a:	f7fe fe97 	bl	800054c <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8001828:	210a      	movs	r1, #10
 800182a:	481d      	ldr	r0, [pc, #116]	; (80018a0 <printResetSource+0xc8>)
 800182c:	f7fe fe8e 	bl	800054c <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800183a:	2110      	movs	r1, #16
 800183c:	4819      	ldr	r0, [pc, #100]	; (80018a4 <printResetSource+0xcc>)
 800183e:	f7fe fe85 	bl	800054c <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 800184c:	210f      	movs	r1, #15
 800184e:	4816      	ldr	r0, [pc, #88]	; (80018a8 <printResetSource+0xd0>)
 8001850:	f7fe fe7c 	bl	800054c <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 800185e:	210f      	movs	r1, #15
 8001860:	4812      	ldr	r0, [pc, #72]	; (80018ac <printResetSource+0xd4>)
 8001862:	f7fe fe73 	bl	800054c <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8001870:	210a      	movs	r1, #10
 8001872:	480f      	ldr	r0, [pc, #60]	; (80018b0 <printResetSource+0xd8>)
 8001874:	f7fe fe6a 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	da03      	bge.n	8001888 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8001880:	2105      	movs	r1, #5
 8001882:	480c      	ldr	r0, [pc, #48]	; (80018b4 <printResetSource+0xdc>)
 8001884:	f7fe fe62 	bl	800054c <uartTransmit>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	08008ff0 	.word	0x08008ff0
 8001894:	08008ff8 	.word	0x08008ff8
 8001898:	08009008 	.word	0x08009008
 800189c:	08009024 	.word	0x08009024
 80018a0:	0800903c 	.word	0x0800903c
 80018a4:	08009048 	.word	0x08009048
 80018a8:	0800905c 	.word	0x0800905c
 80018ac:	0800906c 	.word	0x0800906c
 80018b0:	0800907c 	.word	0x0800907c
 80018b4:	08009088 	.word	0x08009088

080018b8 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d104      	bne.n	80018d2 <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 80018c8:	2107      	movs	r1, #7
 80018ca:	480f      	ldr	r0, [pc, #60]	; (8001908 <hal_error+0x50>)
 80018cc:	f7fe fe3e 	bl	800054c <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 80018d0:	e016      	b.n	8001900 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d104      	bne.n	80018e2 <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 80018d8:	210a      	movs	r1, #10
 80018da:	480c      	ldr	r0, [pc, #48]	; (800190c <hal_error+0x54>)
 80018dc:	f7fe fe36 	bl	800054c <uartTransmit>
}
 80018e0:	e00e      	b.n	8001900 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d104      	bne.n	80018f2 <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 80018e8:	2109      	movs	r1, #9
 80018ea:	4809      	ldr	r0, [pc, #36]	; (8001910 <hal_error+0x58>)
 80018ec:	f7fe fe2e 	bl	800054c <uartTransmit>
}
 80018f0:	e006      	b.n	8001900 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d103      	bne.n	8001900 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 80018f8:	210c      	movs	r1, #12
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <hal_error+0x5c>)
 80018fc:	f7fe fe26 	bl	800054c <uartTransmit>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08009090 	.word	0x08009090
 800190c:	08009098 	.word	0x08009098
 8001910:	080090a4 	.word	0x080090a4
 8001914:	080090b0 	.word	0x080090b0

08001918 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 800191c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001920:	4850      	ldr	r0, [pc, #320]	; (8001a64 <readall_inputs+0x14c>)
 8001922:	f002 ff7b 	bl	800481c <HAL_GPIO_ReadPin>
 8001926:	4603      	mov	r3, r0
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	b2d9      	uxtb	r1, r3
 800192e:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <readall_inputs+0x150>)
 8001930:	7813      	ldrb	r3, [r2, #0]
 8001932:	f361 03c3 	bfi	r3, r1, #3, #1
 8001936:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8001938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193c:	484b      	ldr	r0, [pc, #300]	; (8001a6c <readall_inputs+0x154>)
 800193e:	f002 ff6d 	bl	800481c <HAL_GPIO_ReadPin>
 8001942:	4603      	mov	r3, r0
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	b2d9      	uxtb	r1, r3
 800194a:	4a47      	ldr	r2, [pc, #284]	; (8001a68 <readall_inputs+0x150>)
 800194c:	7813      	ldrb	r3, [r2, #0]
 800194e:	f361 1304 	bfi	r3, r1, #4, #1
 8001952:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8001954:	2101      	movs	r1, #1
 8001956:	4846      	ldr	r0, [pc, #280]	; (8001a70 <readall_inputs+0x158>)
 8001958:	f002 ff60 	bl	800481c <HAL_GPIO_ReadPin>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	b2d9      	uxtb	r1, r3
 8001964:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <readall_inputs+0x150>)
 8001966:	7813      	ldrb	r3, [r2, #0]
 8001968:	f361 1345 	bfi	r3, r1, #5, #1
 800196c:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 800196e:	2104      	movs	r1, #4
 8001970:	483f      	ldr	r0, [pc, #252]	; (8001a70 <readall_inputs+0x158>)
 8001972:	f002 ff53 	bl	800481c <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	b2d9      	uxtb	r1, r3
 800197e:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <readall_inputs+0x150>)
 8001980:	7813      	ldrb	r3, [r2, #0]
 8001982:	f361 1386 	bfi	r3, r1, #6, #1
 8001986:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8001988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198c:	4835      	ldr	r0, [pc, #212]	; (8001a64 <readall_inputs+0x14c>)
 800198e:	f002 ff45 	bl	800481c <HAL_GPIO_ReadPin>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	b2d9      	uxtb	r1, r3
 800199a:	4a36      	ldr	r2, [pc, #216]	; (8001a74 <readall_inputs+0x15c>)
 800199c:	7813      	ldrb	r3, [r2, #0]
 800199e:	f361 0300 	bfi	r3, r1, #0, #1
 80019a2:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 80019a4:	2108      	movs	r1, #8
 80019a6:	482f      	ldr	r0, [pc, #188]	; (8001a64 <readall_inputs+0x14c>)
 80019a8:	f002 ff38 	bl	800481c <HAL_GPIO_ReadPin>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	b2d9      	uxtb	r1, r3
 80019b4:	4a2f      	ldr	r2, [pc, #188]	; (8001a74 <readall_inputs+0x15c>)
 80019b6:	7813      	ldrb	r3, [r2, #0]
 80019b8:	f361 0341 	bfi	r3, r1, #1, #1
 80019bc:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 80019be:	2120      	movs	r1, #32
 80019c0:	4828      	ldr	r0, [pc, #160]	; (8001a64 <readall_inputs+0x14c>)
 80019c2:	f002 ff2b 	bl	800481c <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	b2d9      	uxtb	r1, r3
 80019ce:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <readall_inputs+0x15c>)
 80019d0:	7813      	ldrb	r3, [r2, #0]
 80019d2:	f361 0382 	bfi	r3, r1, #2, #1
 80019d6:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80019d8:	2110      	movs	r1, #16
 80019da:	4822      	ldr	r0, [pc, #136]	; (8001a64 <readall_inputs+0x14c>)
 80019dc:	f002 ff1e 	bl	800481c <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	b2d9      	uxtb	r1, r3
 80019e8:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <readall_inputs+0x15c>)
 80019ea:	7813      	ldrb	r3, [r2, #0]
 80019ec:	f361 03c3 	bfi	r3, r1, #3, #1
 80019f0:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 80019f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f6:	4820      	ldr	r0, [pc, #128]	; (8001a78 <readall_inputs+0x160>)
 80019f8:	f002 ff10 	bl	800481c <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	b2d9      	uxtb	r1, r3
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <readall_inputs+0x15c>)
 8001a06:	7813      	ldrb	r3, [r2, #0]
 8001a08:	f361 1304 	bfi	r3, r1, #4, #1
 8001a0c:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8001a0e:	2104      	movs	r1, #4
 8001a10:	4819      	ldr	r0, [pc, #100]	; (8001a78 <readall_inputs+0x160>)
 8001a12:	f002 ff03 	bl	800481c <HAL_GPIO_ReadPin>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	b2d9      	uxtb	r1, r3
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <readall_inputs+0x164>)
 8001a20:	7813      	ldrb	r3, [r2, #0]
 8001a22:	f361 0300 	bfi	r3, r1, #0, #1
 8001a26:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2c:	4810      	ldr	r0, [pc, #64]	; (8001a70 <readall_inputs+0x158>)
 8001a2e:	f002 fef5 	bl	800481c <HAL_GPIO_ReadPin>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	b2d9      	uxtb	r1, r3
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <readall_inputs+0x164>)
 8001a3c:	7813      	ldrb	r3, [r2, #0]
 8001a3e:	f361 0341 	bfi	r3, r1, #1, #1
 8001a42:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a48:	4809      	ldr	r0, [pc, #36]	; (8001a70 <readall_inputs+0x158>)
 8001a4a:	f002 fee7 	bl	800481c <HAL_GPIO_ReadPin>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	b2d9      	uxtb	r1, r3
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <readall_inputs+0x164>)
 8001a58:	7813      	ldrb	r3, [r2, #0]
 8001a5a:	f361 0382 	bfi	r3, r1, #2, #1
 8001a5e:	7013      	strb	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	20000038 	.word	0x20000038
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40020000 	.word	0x40020000
 8001a74:	2000003c 	.word	0x2000003c
 8001a78:	40021400 	.word	0x40021400
 8001a7c:	20000040 	.word	0x20000040

08001a80 <millis>:
//----------------------------------------------------------------------

// Function millis erstellt
//----------------------------------------------------------------------
uint32_t millis(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001a84:	f001 fdd2 	bl	800362c <HAL_GetTick>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8001a94:	2201      	movs	r2, #1
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	481b      	ldr	r0, [pc, #108]	; (8001b08 <testPCB_Leds+0x78>)
 8001a9a:	f002 fed7 	bl	800484c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa2:	f001 fdcf 	bl	8003644 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	4817      	ldr	r0, [pc, #92]	; (8001b08 <testPCB_Leds+0x78>)
 8001aac:	f002 fece 	bl	800484c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab4:	f001 fdc6 	bl	8003644 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2104      	movs	r1, #4
 8001abc:	4812      	ldr	r0, [pc, #72]	; (8001b08 <testPCB_Leds+0x78>)
 8001abe:	f002 fec5 	bl	800484c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac6:	f001 fdbd 	bl	8003644 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8001aca:	2200      	movs	r2, #0
 8001acc:	2104      	movs	r1, #4
 8001ace:	480e      	ldr	r0, [pc, #56]	; (8001b08 <testPCB_Leds+0x78>)
 8001ad0:	f002 febc 	bl	800484c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad8:	f001 fdb4 	bl	8003644 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae2:	4809      	ldr	r0, [pc, #36]	; (8001b08 <testPCB_Leds+0x78>)
 8001ae4:	f002 feb2 	bl	800484c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aec:	f001 fdaa 	bl	8003644 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af6:	4804      	ldr	r0, [pc, #16]	; (8001b08 <testPCB_Leds+0x78>)
 8001af8:	f002 fea8 	bl	800484c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b00:	f001 fda0 	bl	8003644 <HAL_Delay>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40020400 	.word	0x40020400

08001b0c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b12:	463b      	mov	r3, r7
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b1e:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b20:	4a44      	ldr	r2, [pc, #272]	; (8001c34 <MX_ADC1_Init+0x128>)
 8001b22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b32:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b3e:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b46:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b4c:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b4e:	4a3a      	ldr	r2, [pc, #232]	; (8001c38 <MX_ADC1_Init+0x12c>)
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001b58:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b5a:	2206      	movs	r2, #6
 8001b5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b5e:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b6c:	4830      	ldr	r0, [pc, #192]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b6e:	f001 fdd5 	bl	800371c <HAL_ADC_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b78:	f001 f890 	bl	8002c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b84:	2301      	movs	r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4828      	ldr	r0, [pc, #160]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001b8e:	f001 fe09 	bl	80037a4 <HAL_ADC_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b98:	f001 f880 	bl	8002c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4821      	ldr	r0, [pc, #132]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001baa:	f001 fdfb 	bl	80037a4 <HAL_ADC_ConfigChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bb4:	f001 f872 	bl	8002c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	481a      	ldr	r0, [pc, #104]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001bc6:	f001 fded 	bl	80037a4 <HAL_ADC_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001bd0:	f001 f864 	bl	8002c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001be2:	f001 fddf 	bl	80037a4 <HAL_ADC_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001bec:	f001 f856 	bl	8002c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001bf0:	2306      	movs	r3, #6
 8001bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001bfe:	f001 fdd1 	bl	80037a4 <HAL_ADC_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001c08:	f001 f848 	bl	8002c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_ADC1_Init+0x130>)
 8001c0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001c10:	2306      	movs	r3, #6
 8001c12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c14:	463b      	mov	r3, r7
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_ADC1_Init+0x124>)
 8001c1a:	f001 fdc3 	bl	80037a4 <HAL_ADC_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001c24:	f001 f83a 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000054 	.word	0x20000054
 8001c34:	40012000 	.word	0x40012000
 8001c38:	0f000001 	.word	0x0f000001
 8001c3c:	10000012 	.word	0x10000012

08001c40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <HAL_ADC_MspInit+0x74>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d123      	bne.n	8001caa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_ADC_MspInit+0x78>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001c92:	23f8      	movs	r3, #248	; 0xf8
 8001c94:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c96:	2303      	movs	r3, #3
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <HAL_ADC_MspInit+0x7c>)
 8001ca6:	f002 fc0d 	bl	80044c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020000 	.word	0x40020000

08001cc0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <MX_CAN1_Init+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001ccc:	2210      	movs	r2, #16
 8001cce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001cde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ce2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_CAN1_Init+0x64>)
 8001d10:	f001 ff98 	bl	8003c44 <HAL_CAN_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001d1a:	f000 ffbf 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000009c 	.word	0x2000009c
 8001d28:	40006400 	.word	0x40006400

08001d2c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <MX_CAN3_Init+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d38:	2206      	movs	r2, #6
 8001d3a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d4e:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d56:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_CAN3_Init+0x64>)
 8001d7e:	f001 ff61 	bl	8003c44 <HAL_CAN_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001d88:	f000 ff88 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200000c4 	.word	0x200000c4
 8001d94:	40003400 	.word	0x40003400

08001d98 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2e      	ldr	r2, [pc, #184]	; (8001e70 <HAL_CAN_MspInit+0xd8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d128      	bne.n	8001e0c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dba:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a2d      	ldr	r2, [pc, #180]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001dc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dea:	2303      	movs	r3, #3
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001dfa:	2309      	movs	r3, #9
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	4619      	mov	r1, r3
 8001e04:	481c      	ldr	r0, [pc, #112]	; (8001e78 <HAL_CAN_MspInit+0xe0>)
 8001e06:	f002 fb5d 	bl	80044c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001e0a:	e02d      	b.n	8001e68 <HAL_CAN_MspInit+0xd0>
  else if(canHandle->Instance==CAN3)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_CAN_MspInit+0xe4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d128      	bne.n	8001e68 <HAL_CAN_MspInit+0xd0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001e1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_CAN_MspInit+0xdc>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001e46:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001e58:	230b      	movs	r3, #11
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <HAL_CAN_MspInit+0xe8>)
 8001e64:	f002 fb2e 	bl	80044c4 <HAL_GPIO_Init>
}
 8001e68:	bf00      	nop
 8001e6a:	3730      	adds	r7, #48	; 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40006400 	.word	0x40006400
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40003400 	.word	0x40003400
 8001e80:	40020000 	.word	0x40020000

08001e84 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08e      	sub	sp, #56	; 0x38
 8001e88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e9a:	4bb7      	ldr	r3, [pc, #732]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4ab6      	ldr	r2, [pc, #728]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4bb4      	ldr	r3, [pc, #720]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	4bb1      	ldr	r3, [pc, #708]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4ab0      	ldr	r2, [pc, #704]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4bae      	ldr	r3, [pc, #696]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eca:	4bab      	ldr	r3, [pc, #684]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4aaa      	ldr	r2, [pc, #680]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001ed0:	f043 0320 	orr.w	r3, r3, #32
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4ba8      	ldr	r3, [pc, #672]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee2:	4ba5      	ldr	r3, [pc, #660]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4aa4      	ldr	r2, [pc, #656]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4ba2      	ldr	r3, [pc, #648]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	4b9f      	ldr	r3, [pc, #636]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a9e      	ldr	r2, [pc, #632]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b9c      	ldr	r3, [pc, #624]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	4b99      	ldr	r3, [pc, #612]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a98      	ldr	r2, [pc, #608]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b96      	ldr	r3, [pc, #600]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f2a:	4b93      	ldr	r3, [pc, #588]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a92      	ldr	r2, [pc, #584]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b90      	ldr	r3, [pc, #576]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f42:	4b8d      	ldr	r3, [pc, #564]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a8c      	ldr	r2, [pc, #560]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b8a      	ldr	r3, [pc, #552]	; (8002178 <MX_GPIO_Init+0x2f4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f248 0187 	movw	r1, #32903	; 0x8087
 8001f60:	4886      	ldr	r0, [pc, #536]	; (800217c <MX_GPIO_Init+0x2f8>)
 8001f62:	f002 fc73 	bl	800484c <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f6c:	4884      	ldr	r0, [pc, #528]	; (8002180 <MX_GPIO_Init+0x2fc>)
 8001f6e:	f002 fc6d 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	f242 0102 	movw	r1, #8194	; 0x2002
 8001f78:	4882      	ldr	r0, [pc, #520]	; (8002184 <MX_GPIO_Init+0x300>)
 8001f7a:	f002 fc67 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f240 6102 	movw	r1, #1538	; 0x602
 8001f84:	4880      	ldr	r0, [pc, #512]	; (8002188 <MX_GPIO_Init+0x304>)
 8001f86:	f002 fc61 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f244 0184 	movw	r1, #16516	; 0x4084
 8001f90:	487e      	ldr	r0, [pc, #504]	; (800218c <MX_GPIO_Init+0x308>)
 8001f92:	f002 fc5b 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f9c:	4877      	ldr	r0, [pc, #476]	; (800217c <MX_GPIO_Init+0x2f8>)
 8001f9e:	f002 fc55 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001fa8:	4879      	ldr	r0, [pc, #484]	; (8002190 <MX_GPIO_Init+0x30c>)
 8001faa:	f002 fc4f 	bl	800484c <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2118      	movs	r1, #24
 8001fb2:	4878      	ldr	r0, [pc, #480]	; (8002194 <MX_GPIO_Init+0x310>)
 8001fb4:	f002 fc4a 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001fb8:	f648 0387 	movw	r3, #34951	; 0x8887
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fce:	4619      	mov	r1, r3
 8001fd0:	486a      	ldr	r0, [pc, #424]	; (800217c <MX_GPIO_Init+0x2f8>)
 8001fd2:	f002 fa77 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001fd6:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4864      	ldr	r0, [pc, #400]	; (800217c <MX_GPIO_Init+0x2f8>)
 8001fec:	f002 fa6a 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001ff0:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002002:	4619      	mov	r1, r3
 8002004:	485d      	ldr	r0, [pc, #372]	; (800217c <MX_GPIO_Init+0x2f8>)
 8002006:	f002 fa5d 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800200a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002020:	4619      	mov	r1, r3
 8002022:	4857      	ldr	r0, [pc, #348]	; (8002180 <MX_GPIO_Init+0x2fc>)
 8002024:	f002 fa4e 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002028:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202e:	2303      	movs	r3, #3
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	4850      	ldr	r0, [pc, #320]	; (8002180 <MX_GPIO_Init+0x2fc>)
 800203e:	f002 fa41 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002042:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002048:	2303      	movs	r3, #3
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	484b      	ldr	r0, [pc, #300]	; (8002184 <MX_GPIO_Init+0x300>)
 8002058:	f002 fa34 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 800205c:	f242 0302 	movw	r3, #8194	; 0x2002
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002072:	4619      	mov	r1, r3
 8002074:	4843      	ldr	r0, [pc, #268]	; (8002184 <MX_GPIO_Init+0x300>)
 8002076:	f002 fa25 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 800207a:	f248 0304 	movw	r3, #32772	; 0x8004
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	4619      	mov	r1, r3
 800208e:	483d      	ldr	r0, [pc, #244]	; (8002184 <MX_GPIO_Init+0x300>)
 8002090:	f002 fa18 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8002094:	f641 0305 	movw	r3, #6149	; 0x1805
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209a:	2300      	movs	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	4619      	mov	r1, r3
 80020a8:	4837      	ldr	r0, [pc, #220]	; (8002188 <MX_GPIO_Init+0x304>)
 80020aa:	f002 fa0b 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 80020ae:	f240 6302 	movw	r3, #1538	; 0x602
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	4619      	mov	r1, r3
 80020c6:	4830      	ldr	r0, [pc, #192]	; (8002188 <MX_GPIO_Init+0x304>)
 80020c8:	f002 f9fc 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80020cc:	f64b 7373 	movw	r3, #49011	; 0xbf73
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d2:	2303      	movs	r3, #3
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020de:	4619      	mov	r1, r3
 80020e0:	482a      	ldr	r0, [pc, #168]	; (800218c <MX_GPIO_Init+0x308>)
 80020e2:	f002 f9ef 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80020e6:	f244 0384 	movw	r3, #16516	; 0x4084
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4823      	ldr	r0, [pc, #140]	; (800218c <MX_GPIO_Init+0x308>)
 8002100:	f002 f9e0 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8002104:	f240 1343 	movw	r3, #323	; 0x143
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210a:	2303      	movs	r3, #3
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	4619      	mov	r1, r3
 8002118:	481d      	ldr	r0, [pc, #116]	; (8002190 <MX_GPIO_Init+0x30c>)
 800211a:	f002 f9d3 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 800211e:	f240 7304 	movw	r3, #1796	; 0x704
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002124:	2303      	movs	r3, #3
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	4818      	ldr	r0, [pc, #96]	; (8002194 <MX_GPIO_Init+0x310>)
 8002134:	f002 f9c6 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8002138:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	4811      	ldr	r0, [pc, #68]	; (8002194 <MX_GPIO_Init+0x310>)
 800214e:	f002 f9b9 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8002152:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	4619      	mov	r1, r3
 800216a:	4809      	ldr	r0, [pc, #36]	; (8002190 <MX_GPIO_Init+0x30c>)
 800216c:	f002 f9aa 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8002170:	2318      	movs	r3, #24
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
 8002174:	e010      	b.n	8002198 <MX_GPIO_Init+0x314>
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40021000 	.word	0x40021000
 8002180:	40020800 	.word	0x40020800
 8002184:	40021400 	.word	0x40021400
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40021800 	.word	0x40021800
 8002194:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002198:	2301      	movs	r3, #1
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <MX_GPIO_Init+0x334>)
 80021ac:	f002 f98a 	bl	80044c4 <HAL_GPIO_Init>

}
 80021b0:	bf00      	nop
 80021b2:	3738      	adds	r7, #56	; 0x38
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40020c00 	.word	0x40020c00

080021bc <calculateMovingAverage>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	80fb      	strh	r3, [r7, #6]
 80021c6:	460b      	mov	r3, r1
 80021c8:	80bb      	strh	r3, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 80021ce:	88ba      	ldrh	r2, [r7, #4]
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	1ad2      	subs	r2, r2, r3
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80021da:	b29a      	uxth	r2, r3
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	4413      	add	r3, r2
 80021e0:	b29b      	uxth	r3, r3
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <getDifference>:
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	460a      	mov	r2, r1
 80021f8:	80fb      	strh	r3, [r7, #6]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80bb      	strh	r3, [r7, #4]
	if (a > b)
 80021fe:	88fa      	ldrh	r2, [r7, #6]
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	d904      	bls.n	8002210 <getDifference+0x22>
		return (a - b);
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	88bb      	ldrh	r3, [r7, #4]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	b29b      	uxth	r3, r3
 800220e:	e009      	b.n	8002224 <getDifference+0x36>
	else if (a < b)
 8002210:	88fa      	ldrh	r2, [r7, #6]
 8002212:	88bb      	ldrh	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d204      	bcs.n	8002222 <getDifference+0x34>
		return (b - a);
 8002218:	88ba      	ldrh	r2, [r7, #4]
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	b29b      	uxth	r3, r3
 8002220:	e000      	b.n	8002224 <getDifference+0x36>
		return 0;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b0b8      	sub	sp, #224	; 0xe0
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002236:	f001 f9a8 	bl	800358a <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t data[36] = {0}, temp, CFG[6] = {0};
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002240:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002244:	2220      	movs	r2, #32
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f006 fcf7 	bl	8008c3c <memset>
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002254:	2300      	movs	r3, #0
 8002256:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
  uint32_t tmp;
  uint16_t spannungen[12] = {0}, temperatur[2] = {0}, tmp_mean;
 800225a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	611a      	str	r2, [r3, #16]
 800226a:	615a      	str	r2, [r3, #20]
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	// Definiere Variablen fuer Main-Funktion
	uint16_t dutyCycle, timerPeriod, frequency, count = 0, R_IMD;
 8002272:	2300      	movs	r3, #0
 8002274:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
	uint8_t start_flag = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800227e:	4bc8      	ldr	r3, [pc, #800]	; (80025a0 <main+0x370>)
 8002280:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002284:	461d      	mov	r5, r3
 8002286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800228e:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 8002292:	4bc4      	ldr	r3, [pc, #784]	; (80025a4 <main+0x374>)
 8002294:	f107 0418 	add.w	r4, r7, #24
 8002298:	461d      	mov	r5, r3
 800229a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800229e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022a2:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80022a6:	4bc0      	ldr	r3, [pc, #768]	; (80025a8 <main+0x378>)
 80022a8:	463c      	mov	r4, r7
 80022aa:	461d      	mov	r5, r3
 80022ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022b4:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b8:	f000 fc36 	bl	8002b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022bc:	f7ff fde2 	bl	8001e84 <MX_GPIO_Init>
  MX_CAN1_Init();
 80022c0:	f7ff fcfe 	bl	8001cc0 <MX_CAN1_Init>
  MX_SPI4_Init();
 80022c4:	f000 fd56 	bl	8002d74 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80022c8:	f001 f8a8 	bl	800341c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80022cc:	f7ff fc1e 	bl	8001b0c <MX_ADC1_Init>
  MX_TIM1_Init();
 80022d0:	f000 fea0 	bl	8003014 <MX_TIM1_Init>
  MX_TIM4_Init();
 80022d4:	f000 ff26 	bl	8003124 <MX_TIM4_Init>
  MX_SPI1_Init();
 80022d8:	f000 fd0e 	bl	8002cf8 <MX_SPI1_Init>
  MX_CAN3_Init();
 80022dc:	f7ff fd26 	bl	8001d2c <MX_CAN3_Init>
  MX_TIM6_Init();
 80022e0:	f000 ff9c 	bl	800321c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80022e4:	f7ff fa26 	bl	8001734 <readResetSource>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fa74 	bl	80017d8 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80022f0:	213a      	movs	r1, #58	; 0x3a
 80022f2:	48ae      	ldr	r0, [pc, #696]	; (80025ac <main+0x37c>)
 80022f4:	f7fe f92a 	bl	800054c <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80022f8:	f7ff f9f2 	bl	80016e0 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 80022fc:	f7ff fbc8 	bl	8001a90 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8002300:	f7ff fb0a 	bl	8001918 <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800230a:	48a9      	ldr	r0, [pc, #676]	; (80025b0 <main+0x380>)
 800230c:	f002 fa9e 	bl	800484c <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 8002310:	2014      	movs	r0, #20
 8002312:	f001 f997 	bl	8003644 <HAL_Delay>

    uartTransmit("\n", 1);
 8002316:	2101      	movs	r1, #1
 8002318:	48a6      	ldr	r0, [pc, #664]	; (80025b4 <main+0x384>)
 800231a:	f7fe f917 	bl	800054c <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 800231e:	2122      	movs	r1, #34	; 0x22
 8002320:	48a5      	ldr	r0, [pc, #660]	; (80025b8 <main+0x388>)
 8002322:	f7fe f913 	bl	800054c <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 8002326:	f7fe fbdc 	bl	8000ae2 <ltc6811_check>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002330:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01f      	beq.n	8002378 <main+0x148>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 8002338:	211f      	movs	r1, #31
 800233a:	48a0      	ldr	r0, [pc, #640]	; (80025bc <main+0x38c>)
 800233c:	f7fe f906 	bl	800054c <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 8002340:	4a9f      	ldr	r2, [pc, #636]	; (80025c0 <main+0x390>)
 8002342:	7813      	ldrb	r3, [r2, #0]
 8002344:	f043 0320 	orr.w	r3, r3, #32
 8002348:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 800234a:	4b9d      	ldr	r3, [pc, #628]	; (80025c0 <main+0x390>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800235a:	489a      	ldr	r0, [pc, #616]	; (80025c4 <main+0x394>)
 800235c:	f002 fa76 	bl	800484c <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 8002360:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002364:	210a      	movs	r1, #10
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f904 	bl	8000574 <uartTransmitNumber>
		uartTransmit("\n", 1);
 800236c:	2101      	movs	r1, #1
 800236e:	4891      	ldr	r0, [pc, #580]	; (80025b4 <main+0x384>)
 8002370:	f7fe f8ec 	bl	800054c <uartTransmit>

		return 0;														// Programm abbrechen
 8002374:	2300      	movs	r3, #0
 8002376:	e3bf      	b.n	8002af8 <main+0x8c8>
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 8002378:	2120      	movs	r1, #32
 800237a:	4893      	ldr	r0, [pc, #588]	; (80025c8 <main+0x398>)
 800237c:	f7fe f8e6 	bl	800054c <uartTransmit>
	}

    // LTC6811 initialisieren
	CFG[0] = 0xF8;
 8002380:	23f8      	movs	r3, #248	; 0xf8
 8002382:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	CFG[1] = 0xCF;
 8002386:	23cf      	movs	r3, #207	; 0xcf
 8002388:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	CFG[2] = 0x17;
 800238c:	2317      	movs	r3, #23
 800238e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	CFG[3] = 0xA4;
 8002392:	23a4      	movs	r3, #164	; 0xa4
 8002394:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	CFG[4] = 0x00;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	CFG[5] = 0x00;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	ltc6811_write(WRCFG, &CFG[0]);
 80023a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023a8:	4619      	mov	r1, r3
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe fa83 	bl	80008b6 <ltc6811_write>
		uartTransmitNumber(data[10+i], 10);
	}
	uartTransmit(";", 1);*/

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 80023b0:	f240 7011 	movw	r0, #1809	; 0x711
 80023b4:	f7fe fa55 	bl	8000862 <ltc6811>
	ltc6811(CLRSTAT);
 80023b8:	f240 7013 	movw	r0, #1811	; 0x713
 80023bc:	f7fe fa51 	bl	8000862 <ltc6811>
	ltc6811(CLRAUX);
 80023c0:	f240 7012 	movw	r0, #1810	; 0x712
 80023c4:	f7fe fa4d 	bl	8000862 <ltc6811>

	// Erster ADC Vorgang ist ungueltig
	ltc6811(ADCVAX | MD73 | CELLALL);									// Initial Command Zellen auslesen
 80023c8:	f240 506f 	movw	r0, #1391	; 0x56f
 80023cc:	f7fe fa49 	bl	8000862 <ltc6811>

	tmp_mean = 65535;
 80023d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d4:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	timerPeriod = (HAL_RCC_GetPCLK2Freq() / htim1.Init.Prescaler);
 80023d8:	f002 ff22 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b7b      	ldr	r3, [pc, #492]	; (80025cc <main+0x39c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 80023ea:	4878      	ldr	r0, [pc, #480]	; (80025cc <main+0x39c>)
 80023ec:	f004 fb0c 	bl	8006a08 <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 80023f0:	2100      	movs	r1, #0
 80023f2:	4876      	ldr	r0, [pc, #472]	; (80025cc <main+0x39c>)
 80023f4:	f004 fc2e 	bl	8006c54 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 80023f8:	2104      	movs	r1, #4
 80023fa:	4874      	ldr	r0, [pc, #464]	; (80025cc <main+0x39c>)
 80023fc:	f004 fc2a 	bl	8006c54 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim6);
 8002400:	4873      	ldr	r0, [pc, #460]	; (80025d0 <main+0x3a0>)
 8002402:	f004 fb01 	bl	8006a08 <HAL_TIM_Base_Start_IT>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 8002406:	4873      	ldr	r0, [pc, #460]	; (80025d4 <main+0x3a4>)
 8002408:	f001 fe04 	bl	8004014 <HAL_CAN_Start>
 800240c:	4603      	mov	r3, r0
 800240e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8002412:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <main+0x1f8>
  	{
  		/* Start Error */
  		hal_error(status);
 800241a:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fa4a 	bl	80018b8 <hal_error>
  		Error_Handler();
 8002424:	f000 fc3a 	bl	8002c9c <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8002428:	210a      	movs	r1, #10
 800242a:	486b      	ldr	r0, [pc, #428]	; (80025d8 <main+0x3a8>)
 800242c:	f7fe f88e 	bl	800054c <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8002430:	2102      	movs	r1, #2
 8002432:	4868      	ldr	r0, [pc, #416]	; (80025d4 <main+0x3a4>)
 8002434:	f001 ff0d 	bl	8004252 <HAL_CAN_ActivateNotification>
 8002438:	4603      	mov	r3, r0
 800243a:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 800243e:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <main+0x224>
  	{
  		/* Notification Error */
  		hal_error(status);
 8002446:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fa34 	bl	80018b8 <hal_error>
  		Error_Handler();
 8002450:	f000 fc24 	bl	8002c9c <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8002454:	210d      	movs	r1, #13
 8002456:	4861      	ldr	r0, [pc, #388]	; (80025dc <main+0x3ac>)
 8002458:	f7fe f878 	bl	800054c <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	65fb      	str	r3, [r7, #92]	; 0x5c
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002460:	2300      	movs	r3, #0
 8002462:	663b      	str	r3, [r7, #96]	; 0x60
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002464:	2301      	movs	r3, #1
 8002466:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterIdHigh = 0x0000;
 8002468:	2300      	movs	r3, #0
 800246a:	64bb      	str	r3, [r7, #72]	; 0x48
    sFilterConfig.FilterIdLow = 0x0000;
 800246c:	2300      	movs	r3, #0
 800246e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002470:	2300      	movs	r3, #0
 8002472:	653b      	str	r3, [r7, #80]	; 0x50
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8002474:	2300      	movs	r3, #0
 8002476:	657b      	str	r3, [r7, #84]	; 0x54
    sFilterConfig.FilterFIFOAssignment = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	65bb      	str	r3, [r7, #88]	; 0x58
    sFilterConfig.FilterActivation = ENABLE;
 800247c:	2301      	movs	r3, #1
 800247e:	66bb      	str	r3, [r7, #104]	; 0x68

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8002480:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002484:	4619      	mov	r1, r3
 8002486:	4853      	ldr	r0, [pc, #332]	; (80025d4 <main+0x3a4>)
 8002488:	f001 fcd8 	bl	8003e3c <HAL_CAN_ConfigFilter>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8002492:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <main+0x278>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 800249a:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fa0a 	bl	80018b8 <hal_error>
  		Error_Handler();
 80024a4:	f000 fbfa 	bl	8002c9c <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80024ae:	e00e      	b.n	80024ce <main+0x29e>
    {
    	TxData[j] = (j + 1);
 80024b0:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80024b4:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 80024b8:	3201      	adds	r2, #1
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	33e0      	adds	r3, #224	; 0xe0
 80024be:	443b      	add	r3, r7
 80024c0:	f803 2c68 	strb.w	r2, [r3, #-104]
    for (uint8_t j = 0; j < 8; j++)
 80024c4:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80024c8:	3301      	adds	r3, #1
 80024ca:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80024ce:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80024d2:	2b07      	cmp	r3, #7
 80024d4:	d9ec      	bls.n	80024b0 <main+0x280>
    }

	if (!(sdc_in.sdcinput && 0b00001111))										// SDC OK; Motor, BTB, IMD und HVIL OK
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <main+0x3b0>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 808e 	bne.w	80025fc <main+0x3cc>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 80024e0:	211b      	movs	r1, #27
 80024e2:	4840      	ldr	r0, [pc, #256]	; (80025e4 <main+0x3b4>)
 80024e4:	f7fe f832 	bl	800054c <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 80024e8:	4a35      	ldr	r2, [pc, #212]	; (80025c0 <main+0x390>)
 80024ea:	7813      	ldrb	r3, [r2, #0]
 80024ec:	f36f 1386 	bfc	r3, #6, #1
 80024f0:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 80024f2:	4a33      	ldr	r2, [pc, #204]	; (80025c0 <main+0x390>)
 80024f4:	7813      	ldrb	r3, [r2, #0]
 80024f6:	f043 0320 	orr.w	r3, r3, #32
 80024fa:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuErrorLed = 0;
 80024fc:	4a30      	ldr	r2, [pc, #192]	; (80025c0 <main+0x390>)
 80024fe:	7813      	ldrb	r3, [r2, #0]
 8002500:	f36f 0382 	bfc	r3, #2, #1
 8002504:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <main+0x390>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	2104      	movs	r1, #4
 8002514:	482b      	ldr	r0, [pc, #172]	; (80025c4 <main+0x394>)
 8002516:	f002 f999 	bl	800484c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 800251a:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <main+0x390>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800252a:	4826      	ldr	r0, [pc, #152]	; (80025c4 <main+0x394>)
 800252c:	f002 f98e 	bl	800484c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <main+0x390>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	482a      	ldr	r0, [pc, #168]	; (80025e8 <main+0x3b8>)
 8002540:	f002 f984 	bl	800484c <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if(!(sdc_in.MotorSDC == 1))
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <main+0x3b0>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d103      	bne.n	800255a <main+0x32a>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 8002552:	212a      	movs	r1, #42	; 0x2a
 8002554:	4825      	ldr	r0, [pc, #148]	; (80025ec <main+0x3bc>)
 8002556:	f7fd fff9 	bl	800054c <uartTransmit>
		}

		// BamoCar Fehler
		if (!(sdc_in.BTB_SDC == 1))
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <main+0x3b0>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d103      	bne.n	8002570 <main+0x340>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 8002568:	2128      	movs	r1, #40	; 0x28
 800256a:	4821      	ldr	r0, [pc, #132]	; (80025f0 <main+0x3c0>)
 800256c:	f7fd ffee 	bl	800054c <uartTransmit>
		}

		// HVIL Fehler
		if (!(sdc_in.HVIL == 1))
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <main+0x3b0>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <main+0x356>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 800257e:	2120      	movs	r1, #32
 8002580:	481c      	ldr	r0, [pc, #112]	; (80025f4 <main+0x3c4>)
 8002582:	f7fd ffe3 	bl	800054c <uartTransmit>
		}

		// IMD Fehler
		if (!(sdc_in.IMD_OK_IN == 1))
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <main+0x3b0>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d155      	bne.n	8002640 <main+0x410>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 8002594:	211a      	movs	r1, #26
 8002596:	4818      	ldr	r0, [pc, #96]	; (80025f8 <main+0x3c8>)
 8002598:	f7fd ffd8 	bl	800054c <uartTransmit>
 800259c:	e050      	b.n	8002640 <main+0x410>
 800259e:	bf00      	nop
 80025a0:	08009278 	.word	0x08009278
 80025a4:	08009290 	.word	0x08009290
 80025a8:	080092a8 	.word	0x080092a8
 80025ac:	080090f4 	.word	0x080090f4
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08009130 	.word	0x08009130
 80025b8:	08009134 	.word	0x08009134
 80025bc:	08009158 	.word	0x08009158
 80025c0:	2000004c 	.word	0x2000004c
 80025c4:	40020400 	.word	0x40020400
 80025c8:	08009178 	.word	0x08009178
 80025cc:	200001bc 	.word	0x200001bc
 80025d0:	20000254 	.word	0x20000254
 80025d4:	200000c4 	.word	0x200000c4
 80025d8:	08009198 	.word	0x08009198
 80025dc:	080091a4 	.word	0x080091a4
 80025e0:	2000003c 	.word	0x2000003c
 80025e4:	080091b4 	.word	0x080091b4
 80025e8:	40021800 	.word	0x40021800
 80025ec:	080091d0 	.word	0x080091d0
 80025f0:	080091fc 	.word	0x080091fc
 80025f4:	08009224 	.word	0x08009224
 80025f8:	08009244 	.word	0x08009244
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 80025fc:	4ac8      	ldr	r2, [pc, #800]	; (8002920 <main+0x6f0>)
 80025fe:	7813      	ldrb	r3, [r2, #0]
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 8002606:	4bc6      	ldr	r3, [pc, #792]	; (8002920 <main+0x6f0>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	48c3      	ldr	r0, [pc, #780]	; (8002924 <main+0x6f4>)
 8002616:	f002 f919 	bl	800484c <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 800261a:	4ac3      	ldr	r2, [pc, #780]	; (8002928 <main+0x6f8>)
 800261c:	7813      	ldrb	r3, [r2, #0]
 800261e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002622:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002624:	4bc0      	ldr	r3, [pc, #768]	; (8002928 <main+0x6f8>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	2104      	movs	r1, #4
 8002632:	48be      	ldr	r0, [pc, #760]	; (800292c <main+0x6fc>)
 8002634:	f002 f90a 	bl	800484c <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 8002638:	2115      	movs	r1, #21
 800263a:	48bd      	ldr	r0, [pc, #756]	; (8002930 <main+0x700>)
 800263c:	f7fd ff86 	bl	800054c <uartTransmit>
		uartTransmit("\n", 1);

		temp++;*/

		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8002640:	4bbc      	ldr	r3, [pc, #752]	; (8002934 <main+0x704>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10a      	bne.n	8002660 <main+0x430>
		{
			count++;													// Zaehler count hochzaehlen
 800264a:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800264e:	3301      	adds	r3, #1
 8002650:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8002654:	4bb7      	ldr	r3, [pc, #732]	; (8002934 <main+0x704>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]

			// Setzen des Start Flags,  damit Tasks nur einmal pro ms aufgerufen werden kann
			start_flag = 1;												// Setze Start Flag
 800265a:	2301      	movs	r3, #1
 800265c:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (((count % 500) == 0) && (start_flag == 1))
 8002660:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002664:	4ab4      	ldr	r2, [pc, #720]	; (8002938 <main+0x708>)
 8002666:	fba2 1203 	umull	r1, r2, r2, r3
 800266a:	0952      	lsrs	r2, r2, #5
 800266c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002670:	fb01 f202 	mul.w	r2, r1, r2
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	f040 81e1 	bne.w	8002a40 <main+0x810>
 800267e:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8002682:	2b01      	cmp	r3, #1
 8002684:	f040 81dc 	bne.w	8002a40 <main+0x810>
		{
			if (rising != 0 && falling != 0)
 8002688:	4bac      	ldr	r3, [pc, #688]	; (800293c <main+0x70c>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03b      	beq.n	800270a <main+0x4da>
 8002692:	4bab      	ldr	r3, [pc, #684]	; (8002940 <main+0x710>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d036      	beq.n	800270a <main+0x4da>
			{
				int diff = getDifference(rising, falling);
 800269c:	4ba7      	ldr	r3, [pc, #668]	; (800293c <main+0x70c>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4aa7      	ldr	r2, [pc, #668]	; (8002940 <main+0x710>)
 80026a4:	8812      	ldrh	r2, [r2, #0]
 80026a6:	b292      	uxth	r2, r2
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fd9f 	bl	80021ee <getDifference>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				dutyCycle = round((float)(diff * 100) / (float)rising);	// (width / period ) * 100
 80026b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026ba:	2264      	movs	r2, #100	; 0x64
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026c8:	4b9c      	ldr	r3, [pc, #624]	; (800293c <main+0x70c>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026de:	eeb0 0b47 	vmov.f64	d0, d7
 80026e2:	f006 faf7 	bl	8008cd4 <round>
 80026e6:	eeb0 7b40 	vmov.f64	d7, d0
 80026ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026ee:	ee17 3a90 	vmov	r3, s15
 80026f2:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				frequency = timerPeriod / rising;						// timer restarts after rising edge so time between two rising edge is whatever is measured
 80026f6:	4b91      	ldr	r3, [pc, #580]	; (800293c <main+0x70c>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			{
 8002708:	e005      	b.n	8002716 <main+0x4e6>
			}
			else
			{
				dutyCycle = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				frequency = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			}

			uartTransmitNumber(dutyCycle, 10);
 8002716:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800271a:	210a      	movs	r1, #10
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ff29 	bl	8000574 <uartTransmitNumber>
			uartTransmitNumber(frequency, 10);
 8002722:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8002726:	210a      	movs	r1, #10
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd ff23 	bl	8000574 <uartTransmitNumber>

			if (sdc_in.IMD_OK_IN == 1)
 800272e:	4b85      	ldr	r3, [pc, #532]	; (8002944 <main+0x714>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8125 	beq.w	8002988 <main+0x758>
			{
				switch (frequency)
 800273e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8002742:	2b32      	cmp	r3, #50	; 0x32
 8002744:	f300 811a 	bgt.w	800297c <main+0x74c>
 8002748:	2b14      	cmp	r3, #20
 800274a:	da04      	bge.n	8002756 <main+0x526>
 800274c:	2b00      	cmp	r3, #0
 800274e:	d047      	beq.n	80027e0 <main+0x5b0>
 8002750:	2b0a      	cmp	r3, #10
 8002752:	d067      	beq.n	8002824 <main+0x5f4>
 8002754:	e112      	b.n	800297c <main+0x74c>
 8002756:	3b14      	subs	r3, #20
 8002758:	2b1e      	cmp	r3, #30
 800275a:	f200 810f 	bhi.w	800297c <main+0x74c>
 800275e:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <main+0x534>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	08002871 	.word	0x08002871
 8002768:	0800297d 	.word	0x0800297d
 800276c:	0800297d 	.word	0x0800297d
 8002770:	0800297d 	.word	0x0800297d
 8002774:	0800297d 	.word	0x0800297d
 8002778:	0800297d 	.word	0x0800297d
 800277c:	0800297d 	.word	0x0800297d
 8002780:	0800297d 	.word	0x0800297d
 8002784:	0800297d 	.word	0x0800297d
 8002788:	0800297d 	.word	0x0800297d
 800278c:	080028bd 	.word	0x080028bd
 8002790:	0800297d 	.word	0x0800297d
 8002794:	0800297d 	.word	0x0800297d
 8002798:	0800297d 	.word	0x0800297d
 800279c:	0800297d 	.word	0x0800297d
 80027a0:	0800297d 	.word	0x0800297d
 80027a4:	0800297d 	.word	0x0800297d
 80027a8:	0800297d 	.word	0x0800297d
 80027ac:	0800297d 	.word	0x0800297d
 80027b0:	0800297d 	.word	0x0800297d
 80027b4:	080028f7 	.word	0x080028f7
 80027b8:	0800297d 	.word	0x0800297d
 80027bc:	0800297d 	.word	0x0800297d
 80027c0:	0800297d 	.word	0x0800297d
 80027c4:	0800297d 	.word	0x0800297d
 80027c8:	0800297d 	.word	0x0800297d
 80027cc:	0800297d 	.word	0x0800297d
 80027d0:	0800297d 	.word	0x0800297d
 80027d4:	0800297d 	.word	0x0800297d
 80027d8:	0800297d 	.word	0x0800297d
 80027dc:	08002953 	.word	0x08002953
				{
					case 0:
						system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 80027e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027e4:	484f      	ldr	r0, [pc, #316]	; (8002924 <main+0x6f4>)
 80027e6:	f002 f819 	bl	800481c <HAL_GPIO_ReadPin>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	b2d9      	uxtb	r1, r3
 80027f2:	4a55      	ldr	r2, [pc, #340]	; (8002948 <main+0x718>)
 80027f4:	7813      	ldrb	r3, [r2, #0]
 80027f6:	f361 03c3 	bfi	r3, r1, #3, #1
 80027fa:	7013      	strb	r3, [r2, #0]
						if (system_in.IMD_PWM == 1)
 80027fc:	4b52      	ldr	r3, [pc, #328]	; (8002948 <main+0x718>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <main+0x5e8>
						{
							system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_KL15;
 800280a:	4a4f      	ldr	r2, [pc, #316]	; (8002948 <main+0x718>)
 800280c:	7813      	ldrb	r3, [r2, #0]
 800280e:	2106      	movs	r1, #6
 8002810:	f361 0302 	bfi	r3, r1, #0, #3
 8002814:	7013      	strb	r3, [r2, #0]
						}
						else
						{
							system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;
						}
						break;
 8002816:	e110      	b.n	8002a3a <main+0x80a>
							system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;
 8002818:	4a4b      	ldr	r2, [pc, #300]	; (8002948 <main+0x718>)
 800281a:	7813      	ldrb	r3, [r2, #0]
 800281c:	f36f 0302 	bfc	r3, #0, #3
 8002820:	7013      	strb	r3, [r2, #0]
						break;
 8002822:	e10a      	b.n	8002a3a <main+0x80a>
					case 10:
						system_in.IMD_PWM_STATUS = IMD_NORMAL;
 8002824:	4a48      	ldr	r2, [pc, #288]	; (8002948 <main+0x718>)
 8002826:	7813      	ldrb	r3, [r2, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	f361 0302 	bfi	r3, r1, #0, #3
 800282e:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 95)								// IMD PWM
 8002830:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002834:	2b05      	cmp	r3, #5
 8002836:	d915      	bls.n	8002864 <main+0x634>
 8002838:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800283c:	2b5e      	cmp	r3, #94	; 0x5e
 800283e:	d811      	bhi.n	8002864 <main+0x634>
						{
							R_IMD = 90 * 1200 / (dutyCycle - 5) - 1200;
 8002840:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002844:	3b05      	subs	r3, #5
 8002846:	4a41      	ldr	r2, [pc, #260]	; (800294c <main+0x71c>)
 8002848:	fb92 f3f3 	sdiv	r3, r2, r3
 800284c:	b29b      	uxth	r3, r3
 800284e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002852:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
							uartTransmitNumber(R_IMD, 10);
 8002856:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800285a:	210a      	movs	r1, #10
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe89 	bl	8000574 <uartTransmitNumber>
						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
						}
						break;
 8002862:	e0ea      	b.n	8002a3a <main+0x80a>
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002864:	4a38      	ldr	r2, [pc, #224]	; (8002948 <main+0x718>)
 8002866:	7813      	ldrb	r3, [r2, #0]
 8002868:	f043 0307 	orr.w	r3, r3, #7
 800286c:	7013      	strb	r3, [r2, #0]
						break;
 800286e:	e0e4      	b.n	8002a3a <main+0x80a>
					case 20:
						system_in.IMD_PWM_STATUS = IMD_UNTERSPANNUNG;
 8002870:	4a35      	ldr	r2, [pc, #212]	; (8002948 <main+0x718>)
 8002872:	7813      	ldrb	r3, [r2, #0]
 8002874:	2102      	movs	r1, #2
 8002876:	f361 0302 	bfi	r3, r1, #0, #3
 800287a:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 95)								// IMD PWM
 800287c:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002880:	2b05      	cmp	r3, #5
 8002882:	d915      	bls.n	80028b0 <main+0x680>
 8002884:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002888:	2b5e      	cmp	r3, #94	; 0x5e
 800288a:	d811      	bhi.n	80028b0 <main+0x680>
						{
							R_IMD = 90 * 1200 / (dutyCycle - 5) - 1200;
 800288c:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002890:	3b05      	subs	r3, #5
 8002892:	4a2e      	ldr	r2, [pc, #184]	; (800294c <main+0x71c>)
 8002894:	fb92 f3f3 	sdiv	r3, r2, r3
 8002898:	b29b      	uxth	r3, r3
 800289a:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800289e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
							uartTransmitNumber(R_IMD, 10);
 80028a2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80028a6:	210a      	movs	r1, #10
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe63 	bl	8000574 <uartTransmitNumber>
						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
						}
						break;
 80028ae:	e0c4      	b.n	8002a3a <main+0x80a>
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 80028b0:	4a25      	ldr	r2, [pc, #148]	; (8002948 <main+0x718>)
 80028b2:	7813      	ldrb	r3, [r2, #0]
 80028b4:	f043 0307 	orr.w	r3, r3, #7
 80028b8:	7013      	strb	r3, [r2, #0]
						break;
 80028ba:	e0be      	b.n	8002a3a <main+0x80a>
					case 30:
						system_in.IMD_PWM_STATUS = IMD_SCHNELLSTART;
 80028bc:	4a22      	ldr	r2, [pc, #136]	; (8002948 <main+0x718>)
 80028be:	7813      	ldrb	r3, [r2, #0]
 80028c0:	2103      	movs	r1, #3
 80028c2:	f361 0302 	bfi	r3, r1, #0, #3
 80028c6:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 11)								// IMD Gut
 80028c8:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d903      	bls.n	80028d8 <main+0x6a8>
 80028d0:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80028d4:	2b0a      	cmp	r3, #10
 80028d6:	d90d      	bls.n	80028f4 <main+0x6c4>
						{

						}
						else if (dutyCycle > 89 && dutyCycle < 95)							// IMD Schlecht
 80028d8:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80028dc:	2b59      	cmp	r3, #89	; 0x59
 80028de:	d903      	bls.n	80028e8 <main+0x6b8>
 80028e0:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80028e4:	2b5e      	cmp	r3, #94	; 0x5e
 80028e6:	d905      	bls.n	80028f4 <main+0x6c4>
						{

						}
						else																// IMD Fehlerhaft
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <main+0x718>)
 80028ea:	7813      	ldrb	r3, [r2, #0]
 80028ec:	f043 0307 	orr.w	r3, r3, #7
 80028f0:	7013      	strb	r3, [r2, #0]
						}
						break;
 80028f2:	e0a2      	b.n	8002a3a <main+0x80a>
 80028f4:	e0a1      	b.n	8002a3a <main+0x80a>
					case 40:
						system_in.IMD_PWM_STATUS = IMD_GERAETEFEHLER;
 80028f6:	4a14      	ldr	r2, [pc, #80]	; (8002948 <main+0x718>)
 80028f8:	7813      	ldrb	r3, [r2, #0]
 80028fa:	2104      	movs	r1, #4
 80028fc:	f361 0302 	bfi	r3, r1, #0, #3
 8002900:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 47 && dutyCycle < 53)								// IMD PWM
 8002902:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002906:	2b2f      	cmp	r3, #47	; 0x2f
 8002908:	d903      	bls.n	8002912 <main+0x6e2>
 800290a:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800290e:	2b34      	cmp	r3, #52	; 0x34
 8002910:	d91e      	bls.n	8002950 <main+0x720>
						{

						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002912:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <main+0x718>)
 8002914:	7813      	ldrb	r3, [r2, #0]
 8002916:	f043 0307 	orr.w	r3, r3, #7
 800291a:	7013      	strb	r3, [r2, #0]
						}
						break;
 800291c:	e08d      	b.n	8002a3a <main+0x80a>
 800291e:	bf00      	nop
 8002920:	20000044 	.word	0x20000044
 8002924:	40021000 	.word	0x40021000
 8002928:	2000004c 	.word	0x2000004c
 800292c:	40020400 	.word	0x40020400
 8002930:	08009260 	.word	0x08009260
 8002934:	200000f0 	.word	0x200000f0
 8002938:	10624dd3 	.word	0x10624dd3
 800293c:	200000ec 	.word	0x200000ec
 8002940:	200000ee 	.word	0x200000ee
 8002944:	2000003c 	.word	0x2000003c
 8002948:	20000038 	.word	0x20000038
 800294c:	0001a5e0 	.word	0x0001a5e0
 8002950:	e073      	b.n	8002a3a <main+0x80a>
					case 50:
						system_in.IMD_PWM_STATUS = IMD_ANSCHLUSSFEHLER_ERDE;
 8002952:	4a6b      	ldr	r2, [pc, #428]	; (8002b00 <main+0x8d0>)
 8002954:	7813      	ldrb	r3, [r2, #0]
 8002956:	2105      	movs	r1, #5
 8002958:	f361 0302 	bfi	r3, r1, #0, #3
 800295c:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 47 && dutyCycle < 53)								// IMD PWM
 800295e:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002962:	2b2f      	cmp	r3, #47	; 0x2f
 8002964:	d903      	bls.n	800296e <main+0x73e>
 8002966:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800296a:	2b34      	cmp	r3, #52	; 0x34
 800296c:	d905      	bls.n	800297a <main+0x74a>
						{

						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 800296e:	4a64      	ldr	r2, [pc, #400]	; (8002b00 <main+0x8d0>)
 8002970:	7813      	ldrb	r3, [r2, #0]
 8002972:	f043 0307 	orr.w	r3, r3, #7
 8002976:	7013      	strb	r3, [r2, #0]
						}
						break;																// IMD Error, kein anderes Ereignis zutrefend
 8002978:	e05f      	b.n	8002a3a <main+0x80a>
 800297a:	e05e      	b.n	8002a3a <main+0x80a>
					default:
						system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 800297c:	4a60      	ldr	r2, [pc, #384]	; (8002b00 <main+0x8d0>)
 800297e:	7813      	ldrb	r3, [r2, #0]
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	7013      	strb	r3, [r2, #0]
						break;
 8002986:	e058      	b.n	8002a3a <main+0x80a>
				}
			}
			else
			{
				switch (frequency)
 8002988:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800298c:	2b0a      	cmp	r3, #10
 800298e:	d002      	beq.n	8002996 <main+0x766>
 8002990:	2b14      	cmp	r3, #20
 8002992:	d026      	beq.n	80029e2 <main+0x7b2>
 8002994:	e04b      	b.n	8002a2e <main+0x7fe>
				{

					case 10:
						system_in.IMD_PWM_STATUS = IMD_NORMAL;
 8002996:	4a5a      	ldr	r2, [pc, #360]	; (8002b00 <main+0x8d0>)
 8002998:	7813      	ldrb	r3, [r2, #0]
 800299a:	2101      	movs	r1, #1
 800299c:	f361 0302 	bfi	r3, r1, #0, #3
 80029a0:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 95)								// IMD PWM
 80029a2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	d915      	bls.n	80029d6 <main+0x7a6>
 80029aa:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80029ae:	2b5e      	cmp	r3, #94	; 0x5e
 80029b0:	d811      	bhi.n	80029d6 <main+0x7a6>
						{
							R_IMD = 90 * 1200 / (dutyCycle - 5) - 1200;
 80029b2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80029b6:	3b05      	subs	r3, #5
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <main+0x8d4>)
 80029ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80029be:	b29b      	uxth	r3, r3
 80029c0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80029c4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
							uartTransmitNumber(R_IMD, 10);
 80029c8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80029cc:	210a      	movs	r1, #10
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fdd0 	bl	8000574 <uartTransmitNumber>
						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
						}
						break;
 80029d4:	e031      	b.n	8002a3a <main+0x80a>
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 80029d6:	4a4a      	ldr	r2, [pc, #296]	; (8002b00 <main+0x8d0>)
 80029d8:	7813      	ldrb	r3, [r2, #0]
 80029da:	f043 0307 	orr.w	r3, r3, #7
 80029de:	7013      	strb	r3, [r2, #0]
						break;
 80029e0:	e02b      	b.n	8002a3a <main+0x80a>
					case 20:
						system_in.IMD_PWM_STATUS = IMD_UNTERSPANNUNG;
 80029e2:	4a47      	ldr	r2, [pc, #284]	; (8002b00 <main+0x8d0>)
 80029e4:	7813      	ldrb	r3, [r2, #0]
 80029e6:	2102      	movs	r1, #2
 80029e8:	f361 0302 	bfi	r3, r1, #0, #3
 80029ec:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 95)								// IMD PWM
 80029ee:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	d915      	bls.n	8002a22 <main+0x7f2>
 80029f6:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80029fa:	2b5e      	cmp	r3, #94	; 0x5e
 80029fc:	d811      	bhi.n	8002a22 <main+0x7f2>
						{
							R_IMD = 90 * 1200 / (dutyCycle - 5) - 1200;
 80029fe:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002a02:	3b05      	subs	r3, #5
 8002a04:	4a3f      	ldr	r2, [pc, #252]	; (8002b04 <main+0x8d4>)
 8002a06:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002a10:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
							uartTransmitNumber(R_IMD, 10);
 8002a14:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8002a18:	210a      	movs	r1, #10
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdaa 	bl	8000574 <uartTransmitNumber>
						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
						}
						break;																// IMD Error, kein anderes Ereignis zutrefend
 8002a20:	e00b      	b.n	8002a3a <main+0x80a>
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002a22:	4a37      	ldr	r2, [pc, #220]	; (8002b00 <main+0x8d0>)
 8002a24:	7813      	ldrb	r3, [r2, #0]
 8002a26:	f043 0307 	orr.w	r3, r3, #7
 8002a2a:	7013      	strb	r3, [r2, #0]
						break;																// IMD Error, kein anderes Ereignis zutrefend
 8002a2c:	e005      	b.n	8002a3a <main+0x80a>
					default:
						system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <main+0x8d0>)
 8002a30:	7813      	ldrb	r3, [r2, #0]
 8002a32:	f043 0307 	orr.w	r3, r3, #7
 8002a36:	7013      	strb	r3, [r2, #0]
						break;
 8002a38:	bf00      	nop
				}
			}
	
			count = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
		}
		
		if ((count % 250) == 0)
 8002a40:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002a44:	4a30      	ldr	r2, [pc, #192]	; (8002b08 <main+0x8d8>)
 8002a46:	fba2 1203 	umull	r1, r2, r2, r3
 8002a4a:	0912      	lsrs	r2, r2, #4
 8002a4c:	21fa      	movs	r1, #250	; 0xfa
 8002a4e:	fb01 f202 	mul.w	r2, r1, r2
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d14a      	bne.n	8002af0 <main+0x8c0>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <main+0x8dc>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			OutData[1] = highcurrent_out.high_out;
 8002a62:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <main+0x8e0>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			OutData[2] = leuchten_out.ledoutput;
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <main+0x8e4>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			OutData[3] = komfort_out.komfortoutput;
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <main+0x8e8>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8002a7a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002a7e:	f107 0118 	add.w	r1, r7, #24
 8002a82:	2301      	movs	r3, #1
 8002a84:	4825      	ldr	r0, [pc, #148]	; (8002b1c <main+0x8ec>)
 8002a86:	f001 fb09 	bl	800409c <HAL_CAN_AddTxMessage>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			hal_error(status);
 8002a90:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe ff0f 	bl	80018b8 <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <main+0x8d0>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			InData[1] = sdc_in.sdcinput;
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <main+0x8f0>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			InData[2] = komfort_in.komfortinput;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <main+0x8f4>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8002ab2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002ab6:	4639      	mov	r1, r7
 8002ab8:	2301      	movs	r3, #1
 8002aba:	4818      	ldr	r0, [pc, #96]	; (8002b1c <main+0x8ec>)
 8002abc:	f001 faee 	bl	800409c <HAL_CAN_AddTxMessage>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			hal_error(status);
 8002ac6:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fef4 	bl	80018b8 <hal_error>
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8002ad0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002ad4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4810      	ldr	r0, [pc, #64]	; (8002b1c <main+0x8ec>)
 8002adc:	f001 fade 	bl	800409c <HAL_CAN_AddTxMessage>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			hal_error(status);
 8002ae6:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fee4 	bl	80018b8 <hal_error>
		}

		// Zuruecksetzen des Start Flags, damit Tasks erst nach einer ms wieder aufgerufen werden kann
		start_flag = 0;																		// Zuruechsetze Start Flag
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
		if (millisekunden_flag_1 == 1)
 8002af6:	e5a3      	b.n	8002640 <main+0x410>
  }
  /* USER CODE END 3 */
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	37e0      	adds	r7, #224	; 0xe0
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bdb0      	pop	{r4, r5, r7, pc}
 8002b00:	20000038 	.word	0x20000038
 8002b04:	0001a5e0 	.word	0x0001a5e0
 8002b08:	10624dd3 	.word	0x10624dd3
 8002b0c:	20000044 	.word	0x20000044
 8002b10:	20000048 	.word	0x20000048
 8002b14:	2000004c 	.word	0x2000004c
 8002b18:	20000050 	.word	0x20000050
 8002b1c:	200000c4 	.word	0x200000c4
 8002b20:	2000003c 	.word	0x2000003c
 8002b24:	20000040 	.word	0x20000040

08002b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b094      	sub	sp, #80	; 0x50
 8002b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	2234      	movs	r2, #52	; 0x34
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f006 f880 	bl	8008c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <SystemClock_Config+0xd8>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	4a2b      	ldr	r2, [pc, #172]	; (8002c00 <SystemClock_Config+0xd8>)
 8002b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b56:	6413      	str	r3, [r2, #64]	; 0x40
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <SystemClock_Config+0xd8>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <SystemClock_Config+0xdc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <SystemClock_Config+0xdc>)
 8002b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <SystemClock_Config+0xdc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b86:	2302      	movs	r3, #2
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b90:	2319      	movs	r3, #25
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002b94:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002b98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 feb8 	bl	8004920 <HAL_RCC_OscConfig>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002bb6:	f000 f871 	bl	8002c9c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002bba:	f001 fe61 	bl	8004880 <HAL_PWREx_EnableOverDrive>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002bc4:	f000 f86a 	bl	8002c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bc8:	230f      	movs	r3, #15
 8002bca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bde:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002be0:	f107 0308 	add.w	r3, r7, #8
 8002be4:	2107      	movs	r1, #7
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 f948 	bl	8004e7c <HAL_RCC_ClockConfig>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002bf2:	f000 f853 	bl	8002c9c <Error_Handler>
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	3750      	adds	r7, #80	; 0x50
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40007000 	.word	0x40007000

08002c08 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d102      	bne.n	8002c1e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8002c18:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d12c      	bne.n	8002c80 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7f1b      	ldrb	r3, [r3, #28]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d112      	bne.n	8002c54 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8002c2e:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29c      	uxth	r4, r3
 8002c34:	2100      	movs	r1, #0
 8002c36:	4816      	ldr	r0, [pc, #88]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c38:	f004 fc6e 	bl	8007518 <HAL_TIM_ReadCapturedValue>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2240      	movs	r2, #64	; 0x40
 8002c42:	4619      	mov	r1, r3
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff fab9 	bl	80021bc <calculateMovingAverage>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c50:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 8002c52:	e015      	b.n	8002c80 <HAL_TIM_PeriodElapsedCallback+0x78>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7f1b      	ldrb	r3, [r3, #28]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d111      	bne.n	8002c80 <HAL_TIM_PeriodElapsedCallback+0x78>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29c      	uxth	r4, r3
 8002c62:	2104      	movs	r1, #4
 8002c64:	480a      	ldr	r0, [pc, #40]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c66:	f004 fc57 	bl	8007518 <HAL_TIM_ReadCapturedValue>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	4619      	mov	r1, r3
 8002c72:	4620      	mov	r0, r4
 8002c74:	f7ff faa2 	bl	80021bc <calculateMovingAverage>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c7e:	801a      	strh	r2, [r3, #0]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}
 8002c88:	20000254 	.word	0x20000254
 8002c8c:	200000f0 	.word	0x200000f0
 8002c90:	200001bc 	.word	0x200001bc
 8002c94:	200000ec 	.word	0x200000ec
 8002c98:	200000ee 	.word	0x200000ee

08002c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca0:	b672      	cpsid	i
}
 8002ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002ca4:	4a11      	ldr	r2, [pc, #68]	; (8002cec <Error_Handler+0x50>)
 8002ca6:	7813      	ldrb	r3, [r2, #0]
 8002ca8:	f043 0320 	orr.w	r3, r3, #32
 8002cac:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002cae:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <Error_Handler+0x50>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cbe:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <Error_Handler+0x54>)
 8002cc0:	f001 fdc4 	bl	800484c <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002cc4:	4a09      	ldr	r2, [pc, #36]	; (8002cec <Error_Handler+0x50>)
 8002cc6:	7813      	ldrb	r3, [r2, #0]
 8002cc8:	f36f 1386 	bfc	r3, #6, #1
 8002ccc:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <Error_Handler+0x50>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2104      	movs	r1, #4
 8002cdc:	4804      	ldr	r0, [pc, #16]	; (8002cf0 <Error_Handler+0x54>)
 8002cde:	f001 fdb5 	bl	800484c <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002ce2:	2122      	movs	r1, #34	; 0x22
 8002ce4:	4803      	ldr	r0, [pc, #12]	; (8002cf4 <Error_Handler+0x58>)
 8002ce6:	f7fd fc31 	bl	800054c <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 8002cea:	e7fe      	b.n	8002cea <Error_Handler+0x4e>
 8002cec:	2000004c 	.word	0x2000004c
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	080092c0 	.word	0x080092c0

08002cf8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <MX_SPI1_Init+0x78>)
 8002d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d10:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d26:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d46:	2207      	movs	r2, #7
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d52:	2208      	movs	r2, #8
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_SPI1_Init+0x74>)
 8002d58:	f002 fe9e 	bl	8005a98 <HAL_SPI_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d62:	f7ff ff9b 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200000f4 	.word	0x200000f4
 8002d70:	40013000 	.word	0x40013000

08002d74 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <MX_SPI4_Init+0x78>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d84:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002d8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d92:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002d96:	2202      	movs	r2, #2
 8002d98:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002daa:	2230      	movs	r2, #48	; 0x30
 8002dac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002dc2:	2207      	movs	r2, #7
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <MX_SPI4_Init+0x74>)
 8002dd4:	f002 fe60 	bl	8005a98 <HAL_SPI_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002dde:	f7ff ff5d 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000158 	.word	0x20000158
 8002dec:	40013400 	.word	0x40013400

08002df0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	; 0x30
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 031c 	add.w	r3, r7, #28
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3d      	ldr	r2, [pc, #244]	; (8002f04 <HAL_SPI_MspInit+0x114>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d145      	bne.n	8002e9e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a3c      	ldr	r2, [pc, #240]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e42:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a30      	ldr	r2, [pc, #192]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e66:	2303      	movs	r3, #3
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e6a:	2305      	movs	r3, #5
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	4619      	mov	r1, r3
 8002e74:	4825      	ldr	r0, [pc, #148]	; (8002f0c <HAL_SPI_MspInit+0x11c>)
 8002e76:	f001 fb25 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8002e7a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e8c:	2305      	movs	r3, #5
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	4619      	mov	r1, r3
 8002e96:	481e      	ldr	r0, [pc, #120]	; (8002f10 <HAL_SPI_MspInit+0x120>)
 8002e98:	f001 fb14 	bl	80044c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002e9c:	e02d      	b.n	8002efa <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <HAL_SPI_MspInit+0x124>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d128      	bne.n	8002efa <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002eae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eb2:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002ec6:	f043 0310 	orr.w	r3, r3, #16
 8002eca:	6313      	str	r3, [r2, #48]	; 0x30
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_SPI_MspInit+0x118>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8002ed8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002eea:	2305      	movs	r3, #5
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eee:	f107 031c 	add.w	r3, r7, #28
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4808      	ldr	r0, [pc, #32]	; (8002f18 <HAL_SPI_MspInit+0x128>)
 8002ef6:	f001 fae5 	bl	80044c4 <HAL_GPIO_Init>
}
 8002efa:	bf00      	nop
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40013000 	.word	0x40013000
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40020c00 	.word	0x40020c00
 8002f10:	40021800 	.word	0x40021800
 8002f14:	40013400 	.word	0x40013400
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_MspInit+0x44>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <HAL_MspInit+0x44>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_MspInit+0x44>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_MspInit+0x44>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_MspInit+0x44>)
 8002f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f44:	6453      	str	r3, [r2, #68]	; 0x44
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_MspInit+0x44>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800

08002f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 fb24 	bl	8003604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <TIM1_CC_IRQHandler+0x10>)
 8002fc6:	f003 ff95 	bl	8006ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200001bc 	.word	0x200001bc

08002fd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <TIM6_DAC_IRQHandler+0x10>)
 8002fda:	f003 ff8b 	bl	8006ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000254 	.word	0x20000254

08002fe8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <SystemInit+0x28>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	4a07      	ldr	r2, [pc, #28]	; (8003010 <SystemInit+0x28>)
 8002ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <SystemInit+0x28>)
 8002ffe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003002:	609a      	str	r2, [r3, #8]
#endif
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	; 0x30
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800301a:	f107 031c 	add.w	r3, r7, #28
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800302a:	f107 030c 	add.w	r3, r7, #12
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003038:	463b      	mov	r3, r7
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003042:	4b36      	ldr	r3, [pc, #216]	; (800311c <MX_TIM1_Init+0x108>)
 8003044:	4a36      	ldr	r2, [pc, #216]	; (8003120 <MX_TIM1_Init+0x10c>)
 8003046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 8003048:	4b34      	ldr	r3, [pc, #208]	; (800311c <MX_TIM1_Init+0x108>)
 800304a:	f240 22a2 	movw	r2, #674	; 0x2a2
 800304e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003050:	4b32      	ldr	r3, [pc, #200]	; (800311c <MX_TIM1_Init+0x108>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003056:	4b31      	ldr	r3, [pc, #196]	; (800311c <MX_TIM1_Init+0x108>)
 8003058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800305c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305e:	4b2f      	ldr	r3, [pc, #188]	; (800311c <MX_TIM1_Init+0x108>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003064:	4b2d      	ldr	r3, [pc, #180]	; (800311c <MX_TIM1_Init+0x108>)
 8003066:	2200      	movs	r2, #0
 8003068:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306a:	4b2c      	ldr	r3, [pc, #176]	; (800311c <MX_TIM1_Init+0x108>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003070:	482a      	ldr	r0, [pc, #168]	; (800311c <MX_TIM1_Init+0x108>)
 8003072:	f003 fd98 	bl	8006ba6 <HAL_TIM_IC_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800307c:	f7ff fe0e 	bl	8002c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003080:	2304      	movs	r3, #4
 8003082:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003084:	2350      	movs	r3, #80	; 0x50
 8003086:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800308c:	2300      	movs	r3, #0
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4619      	mov	r1, r3
 800309a:	4820      	ldr	r0, [pc, #128]	; (800311c <MX_TIM1_Init+0x108>)
 800309c:	f004 f9fa 	bl	8007494 <HAL_TIM_SlaveConfigSynchro>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80030a6:	f7ff fdf9 	bl	8002c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030ae:	2301      	movs	r3, #1
 80030b0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	2200      	movs	r2, #0
 80030c0:	4619      	mov	r1, r3
 80030c2:	4816      	ldr	r0, [pc, #88]	; (800311c <MX_TIM1_Init+0x108>)
 80030c4:	f004 f835 	bl	8007132 <HAL_TIM_IC_ConfigChannel>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80030ce:	f7ff fde5 	bl	8002c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80030d2:	2302      	movs	r3, #2
 80030d4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80030d6:	2302      	movs	r3, #2
 80030d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	2204      	movs	r2, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	480e      	ldr	r0, [pc, #56]	; (800311c <MX_TIM1_Init+0x108>)
 80030e4:	f004 f825 	bl	8007132 <HAL_TIM_IC_ConfigChannel>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80030ee:	f7ff fdd5 	bl	8002c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030fe:	463b      	mov	r3, r7
 8003100:	4619      	mov	r1, r3
 8003102:	4806      	ldr	r0, [pc, #24]	; (800311c <MX_TIM1_Init+0x108>)
 8003104:	f004 ffd4 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800310e:	f7ff fdc5 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003112:	bf00      	nop
 8003114:	3730      	adds	r7, #48	; 0x30
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200001bc 	.word	0x200001bc
 8003120:	40010000 	.word	0x40010000

08003124 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800312a:	f107 031c 	add.w	r3, r7, #28
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003136:	463b      	mov	r3, r7
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
 8003144:	615a      	str	r2, [r3, #20]
 8003146:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <MX_TIM4_Init+0xf0>)
 800314a:	4a33      	ldr	r2, [pc, #204]	; (8003218 <MX_TIM4_Init+0xf4>)
 800314c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800314e:	4b31      	ldr	r3, [pc, #196]	; (8003214 <MX_TIM4_Init+0xf0>)
 8003150:	2200      	movs	r2, #0
 8003152:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003154:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <MX_TIM4_Init+0xf0>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <MX_TIM4_Init+0xf0>)
 800315c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003160:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003162:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <MX_TIM4_Init+0xf0>)
 8003164:	2200      	movs	r2, #0
 8003166:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003168:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <MX_TIM4_Init+0xf0>)
 800316a:	2200      	movs	r2, #0
 800316c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800316e:	4829      	ldr	r0, [pc, #164]	; (8003214 <MX_TIM4_Init+0xf0>)
 8003170:	f003 fcc2 	bl	8006af8 <HAL_TIM_PWM_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800317a:	f7ff fd8f 	bl	8002c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003186:	f107 031c 	add.w	r3, r7, #28
 800318a:	4619      	mov	r1, r3
 800318c:	4821      	ldr	r0, [pc, #132]	; (8003214 <MX_TIM4_Init+0xf0>)
 800318e:	f004 ff8f 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003198:	f7ff fd80 	bl	8002c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800319c:	2360      	movs	r3, #96	; 0x60
 800319e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031ac:	463b      	mov	r3, r7
 80031ae:	2200      	movs	r2, #0
 80031b0:	4619      	mov	r1, r3
 80031b2:	4818      	ldr	r0, [pc, #96]	; (8003214 <MX_TIM4_Init+0xf0>)
 80031b4:	f004 f85a 	bl	800726c <HAL_TIM_PWM_ConfigChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80031be:	f7ff fd6d 	bl	8002c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031c2:	463b      	mov	r3, r7
 80031c4:	2204      	movs	r2, #4
 80031c6:	4619      	mov	r1, r3
 80031c8:	4812      	ldr	r0, [pc, #72]	; (8003214 <MX_TIM4_Init+0xf0>)
 80031ca:	f004 f84f 	bl	800726c <HAL_TIM_PWM_ConfigChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80031d4:	f7ff fd62 	bl	8002c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031d8:	463b      	mov	r3, r7
 80031da:	2208      	movs	r2, #8
 80031dc:	4619      	mov	r1, r3
 80031de:	480d      	ldr	r0, [pc, #52]	; (8003214 <MX_TIM4_Init+0xf0>)
 80031e0:	f004 f844 	bl	800726c <HAL_TIM_PWM_ConfigChannel>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80031ea:	f7ff fd57 	bl	8002c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031ee:	463b      	mov	r3, r7
 80031f0:	220c      	movs	r2, #12
 80031f2:	4619      	mov	r1, r3
 80031f4:	4807      	ldr	r0, [pc, #28]	; (8003214 <MX_TIM4_Init+0xf0>)
 80031f6:	f004 f839 	bl	800726c <HAL_TIM_PWM_ConfigChannel>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8003200:	f7ff fd4c 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003204:	4803      	ldr	r0, [pc, #12]	; (8003214 <MX_TIM4_Init+0xf0>)
 8003206:	f000 f8d1 	bl	80033ac <HAL_TIM_MspPostInit>

}
 800320a:	bf00      	nop
 800320c:	3728      	adds	r7, #40	; 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000208 	.word	0x20000208
 8003218:	40000800 	.word	0x40000800

0800321c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <MX_TIM6_Init+0x64>)
 800322e:	4a15      	ldr	r2, [pc, #84]	; (8003284 <MX_TIM6_Init+0x68>)
 8003230:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <MX_TIM6_Init+0x64>)
 8003234:	221b      	movs	r2, #27
 8003236:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <MX_TIM6_Init+0x64>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <MX_TIM6_Init+0x64>)
 8003240:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003244:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <MX_TIM6_Init+0x64>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800324c:	480c      	ldr	r0, [pc, #48]	; (8003280 <MX_TIM6_Init+0x64>)
 800324e:	f003 fb83 	bl	8006958 <HAL_TIM_Base_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003258:	f7ff fd20 	bl	8002c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4805      	ldr	r0, [pc, #20]	; (8003280 <MX_TIM6_Init+0x64>)
 800326a:	f004 ff21 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003274:	f7ff fd12 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000254 	.word	0x20000254
 8003284:	40001000 	.word	0x40001000

08003288 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <HAL_TIM_IC_MspInit+0x8c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d130      	bne.n	800330c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_TIM_IC_MspInit+0x90>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	4a1a      	ldr	r2, [pc, #104]	; (8003318 <HAL_TIM_IC_MspInit+0x90>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6453      	str	r3, [r2, #68]	; 0x44
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <HAL_TIM_IC_MspInit+0x90>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_TIM_IC_MspInit+0x90>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_TIM_IC_MspInit+0x90>)
 80032c8:	f043 0310 	orr.w	r3, r3, #16
 80032cc:	6313      	str	r3, [r2, #48]	; 0x30
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_TIM_IC_MspInit+0x90>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80032da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e8:	2300      	movs	r3, #0
 80032ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032ec:	2301      	movs	r3, #1
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4619      	mov	r1, r3
 80032f6:	4809      	ldr	r0, [pc, #36]	; (800331c <HAL_TIM_IC_MspInit+0x94>)
 80032f8:	f001 f8e4 	bl	80044c4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	201b      	movs	r0, #27
 8003302:	f001 f8a8 	bl	8004456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003306:	201b      	movs	r0, #27
 8003308:	f001 f8c1 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800330c:	bf00      	nop
 800330e:	3728      	adds	r7, #40	; 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40010000 	.word	0x40010000
 8003318:	40023800 	.word	0x40023800
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <HAL_TIM_PWM_MspInit+0x38>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10b      	bne.n	800334a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_TIM_PWM_MspInit+0x3c>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_TIM_PWM_MspInit+0x3c>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_TIM_PWM_MspInit+0x3c>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40000800 	.word	0x40000800
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <HAL_TIM_Base_MspInit+0x44>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d113      	bne.n	800339a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_TIM_Base_MspInit+0x48>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <HAL_TIM_Base_MspInit+0x48>)
 8003378:	f043 0310 	orr.w	r3, r3, #16
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_TIM_Base_MspInit+0x48>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	2036      	movs	r0, #54	; 0x36
 8003390:	f001 f861 	bl	8004456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003394:	2036      	movs	r0, #54	; 0x36
 8003396:	f001 f87a 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40001000 	.word	0x40001000
 80033a8:	40023800 	.word	0x40023800

080033ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 030c 	add.w	r3, r7, #12
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a11      	ldr	r2, [pc, #68]	; (8003410 <HAL_TIM_MspPostInit+0x64>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d11c      	bne.n	8003408 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_TIM_MspPostInit+0x68>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_TIM_MspPostInit+0x68>)
 80033d4:	f043 0308 	orr.w	r3, r3, #8
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_TIM_MspPostInit+0x68>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80033e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80033ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033f8:	2302      	movs	r3, #2
 80033fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	4619      	mov	r1, r3
 8003402:	4805      	ldr	r0, [pc, #20]	; (8003418 <HAL_TIM_MspPostInit+0x6c>)
 8003404:	f001 f85e 	bl	80044c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003408:	bf00      	nop
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40000800 	.word	0x40000800
 8003414:	40023800 	.word	0x40023800
 8003418:	40020c00 	.word	0x40020c00

0800341c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <MX_USART2_UART_Init+0x58>)
 8003422:	4a15      	ldr	r2, [pc, #84]	; (8003478 <MX_USART2_UART_Init+0x5c>)
 8003424:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <MX_USART2_UART_Init+0x58>)
 8003428:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800342c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800342e:	4b11      	ldr	r3, [pc, #68]	; (8003474 <MX_USART2_UART_Init+0x58>)
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <MX_USART2_UART_Init+0x58>)
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800343a:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <MX_USART2_UART_Init+0x58>)
 800343c:	2200      	movs	r2, #0
 800343e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <MX_USART2_UART_Init+0x58>)
 8003442:	220c      	movs	r2, #12
 8003444:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <MX_USART2_UART_Init+0x58>)
 8003448:	2200      	movs	r2, #0
 800344a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <MX_USART2_UART_Init+0x58>)
 800344e:	2200      	movs	r2, #0
 8003450:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <MX_USART2_UART_Init+0x58>)
 8003454:	2200      	movs	r2, #0
 8003456:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <MX_USART2_UART_Init+0x58>)
 800345a:	2200      	movs	r2, #0
 800345c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800345e:	4805      	ldr	r0, [pc, #20]	; (8003474 <MX_USART2_UART_Init+0x58>)
 8003460:	f004 fed2 	bl	8008208 <HAL_UART_Init>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800346a:	f7ff fc17 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200002a0 	.word	0x200002a0
 8003478:	40004400 	.word	0x40004400

0800347c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b0ae      	sub	sp, #184	; 0xb8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	2290      	movs	r2, #144	; 0x90
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f005 fbcd 	bl	8008c3c <memset>
  if(uartHandle->Instance==USART2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a21      	ldr	r2, [pc, #132]	; (800352c <HAL_UART_MspInit+0xb0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d13a      	bne.n	8003522 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 fec5 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80034c4:	f7ff fbea 	bl	8002c9c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_UART_MspInit+0xb4>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_UART_MspInit+0xb4>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d2:	6413      	str	r3, [r2, #64]	; 0x40
 80034d4:	4b16      	ldr	r3, [pc, #88]	; (8003530 <HAL_UART_MspInit+0xb4>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_UART_MspInit+0xb4>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <HAL_UART_MspInit+0xb4>)
 80034e6:	f043 0308 	orr.w	r3, r3, #8
 80034ea:	6313      	str	r3, [r2, #48]	; 0x30
 80034ec:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_UART_MspInit+0xb4>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80034f8:	2360      	movs	r3, #96	; 0x60
 80034fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350a:	2303      	movs	r3, #3
 800350c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003510:	2307      	movs	r3, #7
 8003512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003516:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800351a:	4619      	mov	r1, r3
 800351c:	4805      	ldr	r0, [pc, #20]	; (8003534 <HAL_UART_MspInit+0xb8>)
 800351e:	f000 ffd1 	bl	80044c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003522:	bf00      	nop
 8003524:	37b8      	adds	r7, #184	; 0xb8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40004400 	.word	0x40004400
 8003530:	40023800 	.word	0x40023800
 8003534:	40020c00 	.word	0x40020c00

08003538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003570 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800353c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800353e:	e003      	b.n	8003548 <LoopCopyDataInit>

08003540 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003542:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003544:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003546:	3104      	adds	r1, #4

08003548 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003548:	480b      	ldr	r0, [pc, #44]	; (8003578 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800354c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800354e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003550:	d3f6      	bcc.n	8003540 <CopyDataInit>
  ldr  r2, =_sbss
 8003552:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003554:	e002      	b.n	800355c <LoopFillZerobss>

08003556 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003556:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003558:	f842 3b04 	str.w	r3, [r2], #4

0800355c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800355e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003560:	d3f9      	bcc.n	8003556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003562:	f7ff fd41 	bl	8002fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003566:	f005 fb45 	bl	8008bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800356a:	f7fe fe61 	bl	8002230 <main>
  bx  lr    
 800356e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003570:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003574:	08009534 	.word	0x08009534
  ldr  r0, =_sdata
 8003578:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800357c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003580:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003584:	20000328 	.word	0x20000328

08003588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003588:	e7fe      	b.n	8003588 <ADC_IRQHandler>

0800358a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800358e:	2003      	movs	r0, #3
 8003590:	f000 ff56 	bl	8004440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003594:	2000      	movs	r0, #0
 8003596:	f000 f805 	bl	80035a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800359a:	f7ff fcbf 	bl	8002f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_InitTick+0x54>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_InitTick+0x58>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 ff71 	bl	80044aa <HAL_SYSTICK_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00e      	b.n	80035f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d80a      	bhi.n	80035ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d8:	2200      	movs	r2, #0
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	f000 ff39 	bl	8004456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035e4:	4a06      	ldr	r2, [pc, #24]	; (8003600 <HAL_InitTick+0x5c>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20000000 	.word	0x20000000
 80035fc:	20000008 	.word	0x20000008
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_IncTick+0x20>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_IncTick+0x24>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4413      	add	r3, r2
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <HAL_IncTick+0x24>)
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000008 	.word	0x20000008
 8003628:	20000324 	.word	0x20000324

0800362c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return uwTick;
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_GetTick+0x14>)
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000324 	.word	0x20000324

08003644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff ffee 	bl	800362c <HAL_GetTick>
 8003650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d005      	beq.n	800366a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_Delay+0x44>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800366a:	bf00      	nop
 800366c:	f7ff ffde 	bl	800362c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	429a      	cmp	r2, r3
 800367a:	d8f7      	bhi.n	800366c <HAL_Delay+0x28>
  {
  }
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000008 	.word	0x20000008

0800368c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <HAL_GetHalVersion+0x10>)
}
 8003692:	4618      	mov	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	01020a00 	.word	0x01020a00

080036a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <HAL_GetREVID+0x14>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0c1b      	lsrs	r3, r3, #16
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e0042000 	.word	0xe0042000

080036b8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <HAL_GetDEVID+0x18>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e0042000 	.word	0xe0042000

080036d4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_GetUIDw0+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	1ff0f420 	.word	0x1ff0f420

080036ec <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_GetUIDw1+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	1ff0f424 	.word	0x1ff0f424

08003704 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_GetUIDw2+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	1ff0f428 	.word	0x1ff0f428

0800371c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e031      	b.n	8003796 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fe fa80 	bl	8001c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_ADC_Init+0x84>)
 8003760:	4013      	ands	r3, r2
 8003762:	f043 0202 	orr.w	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f970 	bl	8003a50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
 8003786:	e001      	b.n	800378c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	ffffeefd 	.word	0xffffeefd

080037a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x1c>
 80037bc:	2302      	movs	r3, #2
 80037be:	e136      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x28a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	d93a      	bls.n	8003846 <HAL_ADC_ConfigChannel+0xa2>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d8:	d035      	beq.n	8003846 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68d9      	ldr	r1, [r3, #12]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	3b1e      	subs	r3, #30
 80037f0:	2207      	movs	r2, #7
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43da      	mvns	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	400a      	ands	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a8d      	ldr	r2, [pc, #564]	; (8003a3c <HAL_ADC_ConfigChannel+0x298>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10a      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68d9      	ldr	r1, [r3, #12]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	061a      	lsls	r2, r3, #24
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800381e:	e035      	b.n	800388c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68d9      	ldr	r1, [r3, #12]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	4618      	mov	r0, r3
 8003832:	4603      	mov	r3, r0
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4403      	add	r3, r0
 8003838:	3b1e      	subs	r3, #30
 800383a:	409a      	lsls	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003844:	e022      	b.n	800388c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6919      	ldr	r1, [r3, #16]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	2207      	movs	r2, #7
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43da      	mvns	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	400a      	ands	r2, r1
 8003868:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6919      	ldr	r1, [r3, #16]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	4618      	mov	r0, r3
 800387c:	4603      	mov	r3, r0
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4403      	add	r3, r0
 8003882:	409a      	lsls	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d824      	bhi.n	80038de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	3b05      	subs	r3, #5
 80038a6:	221f      	movs	r2, #31
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43da      	mvns	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	400a      	ands	r2, r1
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	3b05      	subs	r3, #5
 80038d0:	fa00 f203 	lsl.w	r2, r0, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	635a      	str	r2, [r3, #52]	; 0x34
 80038dc:	e04c      	b.n	8003978 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d824      	bhi.n	8003930 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	3b23      	subs	r3, #35	; 0x23
 80038f8:	221f      	movs	r2, #31
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	400a      	ands	r2, r1
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	b29b      	uxth	r3, r3
 8003914:	4618      	mov	r0, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	3b23      	subs	r3, #35	; 0x23
 8003922:	fa00 f203 	lsl.w	r2, r0, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
 800392e:	e023      	b.n	8003978 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	3b41      	subs	r3, #65	; 0x41
 8003942:	221f      	movs	r2, #31
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43da      	mvns	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	400a      	ands	r2, r1
 8003950:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	4618      	mov	r0, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	3b41      	subs	r3, #65	; 0x41
 800396c:	fa00 f203 	lsl.w	r2, r0, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <HAL_ADC_ConfigChannel+0x29c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10a      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x1f4>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800398a:	d105      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a2c      	ldr	r2, [pc, #176]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 8003992:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003996:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <HAL_ADC_ConfigChannel+0x29c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d10f      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x21e>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b12      	cmp	r3, #18
 80039a8:	d10b      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 80039b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039b4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039b6:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 80039bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <HAL_ADC_ConfigChannel+0x29c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d12b      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x280>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1a      	ldr	r2, [pc, #104]	; (8003a3c <HAL_ADC_ConfigChannel+0x298>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <HAL_ADC_ConfigChannel+0x23a>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b11      	cmp	r3, #17
 80039dc:	d122      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 80039e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80039e8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_ADC_ConfigChannel+0x2a0>)
 80039f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <HAL_ADC_ConfigChannel+0x298>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d111      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_ADC_ConfigChannel+0x2a4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HAL_ADC_ConfigChannel+0x2a8>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0c9a      	lsrs	r2, r3, #18
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a16:	e002      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f9      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	10000012 	.word	0x10000012
 8003a40:	40012000 	.word	0x40012000
 8003a44:	40012300 	.word	0x40012300
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	431bde83 	.word	0x431bde83

08003a50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a58:	4b78      	ldr	r3, [pc, #480]	; (8003c3c <ADC_Init+0x1ec>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a77      	ldr	r2, [pc, #476]	; (8003c3c <ADC_Init+0x1ec>)
 8003a5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a62:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a64:	4b75      	ldr	r3, [pc, #468]	; (8003c3c <ADC_Init+0x1ec>)
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4973      	ldr	r1, [pc, #460]	; (8003c3c <ADC_Init+0x1ec>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	021a      	lsls	r2, r3, #8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6899      	ldr	r1, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	4a58      	ldr	r2, [pc, #352]	; (8003c40 <ADC_Init+0x1f0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d022      	beq.n	8003b2a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003af2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6899      	ldr	r1, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6899      	ldr	r1, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	e00f      	b.n	8003b4a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0202 	bic.w	r2, r2, #2
 8003b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6899      	ldr	r1, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	005a      	lsls	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	035a      	lsls	r2, r3, #13
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e007      	b.n	8003bc0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	051a      	lsls	r2, r3, #20
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6899      	ldr	r1, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c02:	025a      	lsls	r2, r3, #9
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	029a      	lsls	r2, r3, #10
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40012300 	.word	0x40012300
 8003c40:	0f000001 	.word	0x0f000001

08003c44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0ed      	b.n	8003e32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe f898 	bl	8001d98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c78:	f7ff fcd8 	bl	800362c <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c7e:	e012      	b.n	8003ca6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c80:	f7ff fcd4 	bl	800362c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b0a      	cmp	r3, #10
 8003c8c:	d90b      	bls.n	8003ca6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0c5      	b.n	8003e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0e5      	beq.n	8003c80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0202 	bic.w	r2, r2, #2
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cc4:	f7ff fcb2 	bl	800362c <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cca:	e012      	b.n	8003cf2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ccc:	f7ff fcae 	bl	800362c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b0a      	cmp	r3, #10
 8003cd8:	d90b      	bls.n	8003cf2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2205      	movs	r2, #5
 8003cea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e09f      	b.n	8003e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e5      	bne.n	8003ccc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	7e1b      	ldrb	r3, [r3, #24]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d108      	bne.n	8003d1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e007      	b.n	8003d2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7e5b      	ldrb	r3, [r3, #25]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d108      	bne.n	8003d44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e007      	b.n	8003d54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7e9b      	ldrb	r3, [r3, #26]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d108      	bne.n	8003d6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0220 	orr.w	r2, r2, #32
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e007      	b.n	8003d7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0220 	bic.w	r2, r2, #32
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7edb      	ldrb	r3, [r3, #27]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0210 	bic.w	r2, r2, #16
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e007      	b.n	8003da8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0210 	orr.w	r2, r2, #16
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7f1b      	ldrb	r3, [r3, #28]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d108      	bne.n	8003dc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0208 	orr.w	r2, r2, #8
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e007      	b.n	8003dd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0208 	bic.w	r2, r2, #8
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7f5b      	ldrb	r3, [r3, #29]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d108      	bne.n	8003dec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0204 	orr.w	r2, r2, #4
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e007      	b.n	8003dfc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0204 	bic.w	r2, r2, #4
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	ea42 0103 	orr.w	r1, r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	1e5a      	subs	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e52:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d003      	beq.n	8003e62 <HAL_CAN_ConfigFilter+0x26>
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f040 80c7 	bne.w	8003ff0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a69      	ldr	r2, [pc, #420]	; (800400c <HAL_CAN_ConfigFilter+0x1d0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d001      	beq.n	8003e70 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003e6c:	4b68      	ldr	r3, [pc, #416]	; (8004010 <HAL_CAN_ConfigFilter+0x1d4>)
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	4a63      	ldr	r2, [pc, #396]	; (8004010 <HAL_CAN_ConfigFilter+0x1d4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d111      	bne.n	8003eac <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e8e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d123      	bne.n	8003f1e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ef8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3248      	adds	r2, #72	; 0x48
 8003efe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f12:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f14:	6979      	ldr	r1, [r7, #20]
 8003f16:	3348      	adds	r3, #72	; 0x48
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d122      	bne.n	8003f6c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	3248      	adds	r2, #72	; 0x48
 8003f4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f62:	6979      	ldr	r1, [r7, #20]
 8003f64:	3348      	adds	r3, #72	; 0x48
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	440b      	add	r3, r1
 8003f6a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	401a      	ands	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003f86:	e007      	b.n	8003f98 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003fb2:	e007      	b.n	8003fc4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fe2:	f023 0201 	bic.w	r2, r3, #1
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e006      	b.n	8003ffe <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40003400 	.word	0x40003400
 8004010:	40006400 	.word	0x40006400

08004014 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d12e      	bne.n	8004086 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004040:	f7ff faf4 	bl	800362c <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004046:	e012      	b.n	800406e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004048:	f7ff faf0 	bl	800362c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b0a      	cmp	r3, #10
 8004054:	d90b      	bls.n	800406e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2205      	movs	r2, #5
 8004066:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e012      	b.n	8004094 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e5      	bne.n	8004048 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e006      	b.n	8004094 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800409c:	b480      	push	{r7}
 800409e:	b089      	sub	sp, #36	; 0x24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80040ba:	7ffb      	ldrb	r3, [r7, #31]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d003      	beq.n	80040c8 <HAL_CAN_AddTxMessage+0x2c>
 80040c0:	7ffb      	ldrb	r3, [r7, #31]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	f040 80b8 	bne.w	8004238 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80a0 	beq.w	8004228 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	0e1b      	lsrs	r3, r3, #24
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d907      	bls.n	8004108 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e09e      	b.n	8004246 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004108:	2201      	movs	r2, #1
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	409a      	lsls	r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10d      	bne.n	8004136 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	6809      	ldr	r1, [r1, #0]
 8004128:	431a      	orrs	r2, r3
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3318      	adds	r3, #24
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	440b      	add	r3, r1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e00f      	b.n	8004156 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004140:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800414a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3318      	adds	r3, #24
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	440b      	add	r3, r1
 8004154:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6819      	ldr	r1, [r3, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3318      	adds	r3, #24
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	440b      	add	r3, r1
 8004166:	3304      	adds	r3, #4
 8004168:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	7d1b      	ldrb	r3, [r3, #20]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d111      	bne.n	8004196 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	3318      	adds	r3, #24
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4413      	add	r3, r2
 800417e:	3304      	adds	r3, #4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	6811      	ldr	r1, [r2, #0]
 8004186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	3318      	adds	r3, #24
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	440b      	add	r3, r1
 8004192:	3304      	adds	r3, #4
 8004194:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3307      	adds	r3, #7
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	061a      	lsls	r2, r3, #24
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3306      	adds	r3, #6
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3305      	adds	r3, #5
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	4313      	orrs	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	3204      	adds	r2, #4
 80041b6:	7812      	ldrb	r2, [r2, #0]
 80041b8:	4610      	mov	r0, r2
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	6811      	ldr	r1, [r2, #0]
 80041be:	ea43 0200 	orr.w	r2, r3, r0
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	440b      	add	r3, r1
 80041c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80041cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3303      	adds	r3, #3
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	061a      	lsls	r2, r3, #24
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3302      	adds	r3, #2
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3301      	adds	r3, #1
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	4610      	mov	r0, r2
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	6811      	ldr	r1, [r2, #0]
 80041f4:	ea43 0200 	orr.w	r2, r3, r0
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	440b      	add	r3, r1
 80041fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004202:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3318      	adds	r3, #24
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	4413      	add	r3, r2
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3318      	adds	r3, #24
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	440b      	add	r3, r1
 8004222:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e00e      	b.n	8004246 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e006      	b.n	8004246 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3724      	adds	r7, #36	; 0x24
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004262:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d002      	beq.n	8004270 <HAL_CAN_ActivateNotification+0x1e>
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d109      	bne.n	8004284 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6959      	ldr	r1, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e006      	b.n	8004292 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <__NVIC_SetPriorityGrouping+0x40>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042bc:	4013      	ands	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <__NVIC_SetPriorityGrouping+0x44>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ce:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <__NVIC_SetPriorityGrouping+0x40>)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	60d3      	str	r3, [r2, #12]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	e000ed00 	.word	0xe000ed00
 80042e4:	05fa0000 	.word	0x05fa0000

080042e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <__NVIC_GetPriorityGrouping+0x18>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	f003 0307 	and.w	r3, r3, #7
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	2b00      	cmp	r3, #0
 8004314:	db0b      	blt.n	800432e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	f003 021f 	and.w	r2, r3, #31
 800431c:	4907      	ldr	r1, [pc, #28]	; (800433c <__NVIC_EnableIRQ+0x38>)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2001      	movs	r0, #1
 8004326:	fa00 f202 	lsl.w	r2, r0, r2
 800432a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000e100 	.word	0xe000e100

08004340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	6039      	str	r1, [r7, #0]
 800434a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004350:	2b00      	cmp	r3, #0
 8004352:	db0a      	blt.n	800436a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	490c      	ldr	r1, [pc, #48]	; (800438c <__NVIC_SetPriority+0x4c>)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	0112      	lsls	r2, r2, #4
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	440b      	add	r3, r1
 8004364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004368:	e00a      	b.n	8004380 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4908      	ldr	r1, [pc, #32]	; (8004390 <__NVIC_SetPriority+0x50>)
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	3b04      	subs	r3, #4
 8004378:	0112      	lsls	r2, r2, #4
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	440b      	add	r3, r1
 800437e:	761a      	strb	r2, [r3, #24]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000e100 	.word	0xe000e100
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	; 0x24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f1c3 0307 	rsb	r3, r3, #7
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	bf28      	it	cs
 80043b2:	2304      	movcs	r3, #4
 80043b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d902      	bls.n	80043c4 <NVIC_EncodePriority+0x30>
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3b03      	subs	r3, #3
 80043c2:	e000      	b.n	80043c6 <NVIC_EncodePriority+0x32>
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c8:	f04f 32ff 	mov.w	r2, #4294967295
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43da      	mvns	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	401a      	ands	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043dc:	f04f 31ff 	mov.w	r1, #4294967295
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	43d9      	mvns	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ec:	4313      	orrs	r3, r2
         );
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3724      	adds	r7, #36	; 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3b01      	subs	r3, #1
 8004408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800440c:	d301      	bcc.n	8004412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800440e:	2301      	movs	r3, #1
 8004410:	e00f      	b.n	8004432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <SysTick_Config+0x40>)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3b01      	subs	r3, #1
 8004418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441a:	210f      	movs	r1, #15
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	f7ff ff8e 	bl	8004340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <SysTick_Config+0x40>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442a:	4b04      	ldr	r3, [pc, #16]	; (800443c <SysTick_Config+0x40>)
 800442c:	2207      	movs	r2, #7
 800442e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	e000e010 	.word	0xe000e010

08004440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff ff29 	bl	80042a0 <__NVIC_SetPriorityGrouping>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af00      	add	r7, sp, #0
 800445c:	4603      	mov	r3, r0
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004468:	f7ff ff3e 	bl	80042e8 <__NVIC_GetPriorityGrouping>
 800446c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	6978      	ldr	r0, [r7, #20]
 8004474:	f7ff ff8e 	bl	8004394 <NVIC_EncodePriority>
 8004478:	4602      	mov	r2, r0
 800447a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447e:	4611      	mov	r1, r2
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff5d 	bl	8004340 <__NVIC_SetPriority>
}
 8004486:	bf00      	nop
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	4603      	mov	r3, r0
 8004496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ff31 	bl	8004304 <__NVIC_EnableIRQ>
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff ffa2 	bl	80043fc <SysTick_Config>
 80044b8:	4603      	mov	r3, r0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e175      	b.n	80047d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044e4:	2201      	movs	r2, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f040 8164 	bne.w	80047ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d005      	beq.n	800451a <HAL_GPIO_Init+0x56>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d130      	bne.n	800457c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004550:	2201      	movs	r2, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 0201 	and.w	r2, r3, #1
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b03      	cmp	r3, #3
 8004586:	d017      	beq.n	80045b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d123      	bne.n	800460c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	220f      	movs	r2, #15
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3208      	adds	r2, #8
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80be 	beq.w	80047ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464e:	4b66      	ldr	r3, [pc, #408]	; (80047e8 <HAL_GPIO_Init+0x324>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	4a65      	ldr	r2, [pc, #404]	; (80047e8 <HAL_GPIO_Init+0x324>)
 8004654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004658:	6453      	str	r3, [r2, #68]	; 0x44
 800465a:	4b63      	ldr	r3, [pc, #396]	; (80047e8 <HAL_GPIO_Init+0x324>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004666:	4a61      	ldr	r2, [pc, #388]	; (80047ec <HAL_GPIO_Init+0x328>)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	3302      	adds	r3, #2
 800466e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	220f      	movs	r2, #15
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4013      	ands	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a58      	ldr	r2, [pc, #352]	; (80047f0 <HAL_GPIO_Init+0x32c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d037      	beq.n	8004702 <HAL_GPIO_Init+0x23e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a57      	ldr	r2, [pc, #348]	; (80047f4 <HAL_GPIO_Init+0x330>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d031      	beq.n	80046fe <HAL_GPIO_Init+0x23a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a56      	ldr	r2, [pc, #344]	; (80047f8 <HAL_GPIO_Init+0x334>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d02b      	beq.n	80046fa <HAL_GPIO_Init+0x236>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a55      	ldr	r2, [pc, #340]	; (80047fc <HAL_GPIO_Init+0x338>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d025      	beq.n	80046f6 <HAL_GPIO_Init+0x232>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a54      	ldr	r2, [pc, #336]	; (8004800 <HAL_GPIO_Init+0x33c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01f      	beq.n	80046f2 <HAL_GPIO_Init+0x22e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a53      	ldr	r2, [pc, #332]	; (8004804 <HAL_GPIO_Init+0x340>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d019      	beq.n	80046ee <HAL_GPIO_Init+0x22a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a52      	ldr	r2, [pc, #328]	; (8004808 <HAL_GPIO_Init+0x344>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_GPIO_Init+0x226>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a51      	ldr	r2, [pc, #324]	; (800480c <HAL_GPIO_Init+0x348>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00d      	beq.n	80046e6 <HAL_GPIO_Init+0x222>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a50      	ldr	r2, [pc, #320]	; (8004810 <HAL_GPIO_Init+0x34c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d007      	beq.n	80046e2 <HAL_GPIO_Init+0x21e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a4f      	ldr	r2, [pc, #316]	; (8004814 <HAL_GPIO_Init+0x350>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <HAL_GPIO_Init+0x21a>
 80046da:	2309      	movs	r3, #9
 80046dc:	e012      	b.n	8004704 <HAL_GPIO_Init+0x240>
 80046de:	230a      	movs	r3, #10
 80046e0:	e010      	b.n	8004704 <HAL_GPIO_Init+0x240>
 80046e2:	2308      	movs	r3, #8
 80046e4:	e00e      	b.n	8004704 <HAL_GPIO_Init+0x240>
 80046e6:	2307      	movs	r3, #7
 80046e8:	e00c      	b.n	8004704 <HAL_GPIO_Init+0x240>
 80046ea:	2306      	movs	r3, #6
 80046ec:	e00a      	b.n	8004704 <HAL_GPIO_Init+0x240>
 80046ee:	2305      	movs	r3, #5
 80046f0:	e008      	b.n	8004704 <HAL_GPIO_Init+0x240>
 80046f2:	2304      	movs	r3, #4
 80046f4:	e006      	b.n	8004704 <HAL_GPIO_Init+0x240>
 80046f6:	2303      	movs	r3, #3
 80046f8:	e004      	b.n	8004704 <HAL_GPIO_Init+0x240>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e002      	b.n	8004704 <HAL_GPIO_Init+0x240>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_GPIO_Init+0x240>
 8004702:	2300      	movs	r3, #0
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	f002 0203 	and.w	r2, r2, #3
 800470a:	0092      	lsls	r2, r2, #2
 800470c:	4093      	lsls	r3, r2
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004714:	4935      	ldr	r1, [pc, #212]	; (80047ec <HAL_GPIO_Init+0x328>)
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	3302      	adds	r3, #2
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <HAL_GPIO_Init+0x354>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004746:	4a34      	ldr	r2, [pc, #208]	; (8004818 <HAL_GPIO_Init+0x354>)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_GPIO_Init+0x354>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004770:	4a29      	ldr	r2, [pc, #164]	; (8004818 <HAL_GPIO_Init+0x354>)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004776:	4b28      	ldr	r3, [pc, #160]	; (8004818 <HAL_GPIO_Init+0x354>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <HAL_GPIO_Init+0x354>)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047a0:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <HAL_GPIO_Init+0x354>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <HAL_GPIO_Init+0x354>)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3301      	adds	r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b0f      	cmp	r3, #15
 80047d4:	f67f ae86 	bls.w	80044e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	3724      	adds	r7, #36	; 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40013800 	.word	0x40013800
 80047f0:	40020000 	.word	0x40020000
 80047f4:	40020400 	.word	0x40020400
 80047f8:	40020800 	.word	0x40020800
 80047fc:	40020c00 	.word	0x40020c00
 8004800:	40021000 	.word	0x40021000
 8004804:	40021400 	.word	0x40021400
 8004808:	40021800 	.word	0x40021800
 800480c:	40021c00 	.word	0x40021c00
 8004810:	40022000 	.word	0x40022000
 8004814:	40022400 	.word	0x40022400
 8004818:	40013c00 	.word	0x40013c00

0800481c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e001      	b.n	800483e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
 8004858:	4613      	mov	r3, r2
 800485a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800485c:	787b      	ldrb	r3, [r7, #1]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004868:	e003      	b.n	8004872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	041a      	lsls	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	619a      	str	r2, [r3, #24]
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	4b23      	ldr	r3, [pc, #140]	; (8004918 <HAL_PWREx_EnableOverDrive+0x98>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_PWREx_EnableOverDrive+0x98>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004894:	6413      	str	r3, [r2, #64]	; 0x40
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_PWREx_EnableOverDrive+0x98>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048a2:	4b1e      	ldr	r3, [pc, #120]	; (800491c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1d      	ldr	r2, [pc, #116]	; (800491c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048ae:	f7fe febd 	bl	800362c <HAL_GetTick>
 80048b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048b4:	e009      	b.n	80048ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048b6:	f7fe feb9 	bl	800362c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c4:	d901      	bls.n	80048ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e022      	b.n	8004910 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d6:	d1ee      	bne.n	80048b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0f      	ldr	r2, [pc, #60]	; (800491c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048e4:	f7fe fea2 	bl	800362c <HAL_GetTick>
 80048e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048ea:	e009      	b.n	8004900 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048ec:	f7fe fe9e 	bl	800362c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048fa:	d901      	bls.n	8004900 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e007      	b.n	8004910 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800490c:	d1ee      	bne.n	80048ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	40007000 	.word	0x40007000

08004920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004928:	2300      	movs	r3, #0
 800492a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e29b      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8087 	beq.w	8004a52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004944:	4b96      	ldr	r3, [pc, #600]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b04      	cmp	r3, #4
 800494e:	d00c      	beq.n	800496a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004950:	4b93      	ldr	r3, [pc, #588]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d112      	bne.n	8004982 <HAL_RCC_OscConfig+0x62>
 800495c:	4b90      	ldr	r3, [pc, #576]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004964:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004968:	d10b      	bne.n	8004982 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496a:	4b8d      	ldr	r3, [pc, #564]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d06c      	beq.n	8004a50 <HAL_RCC_OscConfig+0x130>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d168      	bne.n	8004a50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e275      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498a:	d106      	bne.n	800499a <HAL_RCC_OscConfig+0x7a>
 800498c:	4b84      	ldr	r3, [pc, #528]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a83      	ldr	r2, [pc, #524]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	e02e      	b.n	80049f8 <HAL_RCC_OscConfig+0xd8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0x9c>
 80049a2:	4b7f      	ldr	r3, [pc, #508]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7e      	ldr	r2, [pc, #504]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b7c      	ldr	r3, [pc, #496]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a7b      	ldr	r2, [pc, #492]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e01d      	b.n	80049f8 <HAL_RCC_OscConfig+0xd8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0xc0>
 80049c6:	4b76      	ldr	r3, [pc, #472]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a75      	ldr	r2, [pc, #468]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	4b73      	ldr	r3, [pc, #460]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a72      	ldr	r2, [pc, #456]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e00b      	b.n	80049f8 <HAL_RCC_OscConfig+0xd8>
 80049e0:	4b6f      	ldr	r3, [pc, #444]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a6e      	ldr	r2, [pc, #440]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	4b6c      	ldr	r3, [pc, #432]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a6b      	ldr	r2, [pc, #428]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 80049f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d013      	beq.n	8004a28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fe fe14 	bl	800362c <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fe fe10 	bl	800362c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	; 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e229      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0xe8>
 8004a26:	e014      	b.n	8004a52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fe fe00 	bl	800362c <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a30:	f7fe fdfc 	bl	800362c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e215      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	4b57      	ldr	r3, [pc, #348]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x110>
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d069      	beq.n	8004b32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a5e:	4b50      	ldr	r3, [pc, #320]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6a:	4b4d      	ldr	r3, [pc, #308]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d11c      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x190>
 8004a76:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d116      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a82:	4b47      	ldr	r3, [pc, #284]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_RCC_OscConfig+0x17a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e1e9      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9a:	4b41      	ldr	r3, [pc, #260]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	493d      	ldr	r1, [pc, #244]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	e040      	b.n	8004b32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d023      	beq.n	8004b00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab8:	4b39      	ldr	r3, [pc, #228]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a38      	ldr	r2, [pc, #224]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fe fdb2 	bl	800362c <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004acc:	f7fe fdae 	bl	800362c <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e1c7      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ade:	4b30      	ldr	r3, [pc, #192]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4929      	ldr	r1, [pc, #164]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]
 8004afe:	e018      	b.n	8004b32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a26      	ldr	r2, [pc, #152]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0c:	f7fe fd8e 	bl	800362c <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b14:	f7fe fd8a 	bl	800362c <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e1a3      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b26:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d038      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d019      	beq.n	8004b7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4a:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b52:	f7fe fd6b 	bl	800362c <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5a:	f7fe fd67 	bl	800362c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e180      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCC_OscConfig+0x23a>
 8004b78:	e01a      	b.n	8004bb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <HAL_RCC_OscConfig+0x280>)
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b86:	f7fe fd51 	bl	800362c <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b8c:	e00a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8e:	f7fe fd4d 	bl	800362c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d903      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e166      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
 8004ba0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba4:	4b92      	ldr	r3, [pc, #584]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ee      	bne.n	8004b8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80a4 	beq.w	8004d06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbe:	4b8c      	ldr	r3, [pc, #560]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10d      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b89      	ldr	r3, [pc, #548]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4a88      	ldr	r2, [pc, #544]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd6:	4b86      	ldr	r3, [pc, #536]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be6:	4b83      	ldr	r3, [pc, #524]	; (8004df4 <HAL_RCC_OscConfig+0x4d4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d118      	bne.n	8004c24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004bf2:	4b80      	ldr	r3, [pc, #512]	; (8004df4 <HAL_RCC_OscConfig+0x4d4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a7f      	ldr	r2, [pc, #508]	; (8004df4 <HAL_RCC_OscConfig+0x4d4>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7fe fd15 	bl	800362c <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7fe fd11 	bl	800362c <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b64      	cmp	r3, #100	; 0x64
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e12a      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c18:	4b76      	ldr	r3, [pc, #472]	; (8004df4 <HAL_RCC_OscConfig+0x4d4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x31a>
 8004c2c:	4b70      	ldr	r3, [pc, #448]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a6f      	ldr	r2, [pc, #444]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	e02d      	b.n	8004c96 <HAL_RCC_OscConfig+0x376>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x33c>
 8004c42:	4b6b      	ldr	r3, [pc, #428]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a6a      	ldr	r2, [pc, #424]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4e:	4b68      	ldr	r3, [pc, #416]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a67      	ldr	r2, [pc, #412]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5a:	e01c      	b.n	8004c96 <HAL_RCC_OscConfig+0x376>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	d10c      	bne.n	8004c7e <HAL_RCC_OscConfig+0x35e>
 8004c64:	4b62      	ldr	r3, [pc, #392]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	4a61      	ldr	r2, [pc, #388]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c6a:	f043 0304 	orr.w	r3, r3, #4
 8004c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c70:	4b5f      	ldr	r3, [pc, #380]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	4a5e      	ldr	r2, [pc, #376]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7c:	e00b      	b.n	8004c96 <HAL_RCC_OscConfig+0x376>
 8004c7e:	4b5c      	ldr	r3, [pc, #368]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	4a5b      	ldr	r2, [pc, #364]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8a:	4b59      	ldr	r3, [pc, #356]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	4a58      	ldr	r2, [pc, #352]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d015      	beq.n	8004cca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9e:	f7fe fcc5 	bl	800362c <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fe fcc1 	bl	800362c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e0d8      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	4b4c      	ldr	r3, [pc, #304]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ee      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x386>
 8004cc8:	e014      	b.n	8004cf4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cca:	f7fe fcaf 	bl	800362c <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7fe fcab 	bl	800362c <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0c2      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce8:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ee      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cf4:	7dfb      	ldrb	r3, [r7, #23]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	4a3c      	ldr	r2, [pc, #240]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 80ae 	beq.w	8004e6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d10:	4b37      	ldr	r3, [pc, #220]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d06d      	beq.n	8004df8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d14b      	bne.n	8004dbc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a31      	ldr	r2, [pc, #196]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fe fc7c 	bl	800362c <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d38:	f7fe fc78 	bl	800362c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e091      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4a:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69da      	ldr	r2, [r3, #28]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	019b      	lsls	r3, r3, #6
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	041b      	lsls	r3, r3, #16
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	491b      	ldr	r1, [pc, #108]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d88:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fe fc4a 	bl	800362c <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fe fc46 	bl	800362c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e05f      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dae:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x47c>
 8004dba:	e057      	b.n	8004e6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a0b      	ldr	r2, [pc, #44]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fe fc30 	bl	800362c <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fe fc2c 	bl	800362c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e045      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de2:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_OscConfig+0x4d0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x4b0>
 8004dee:	e03d      	b.n	8004e6c <HAL_RCC_OscConfig+0x54c>
 8004df0:	40023800 	.word	0x40023800
 8004df4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004df8:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <HAL_RCC_OscConfig+0x558>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d030      	beq.n	8004e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d129      	bne.n	8004e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d122      	bne.n	8004e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d119      	bne.n	8004e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	3b01      	subs	r3, #1
 8004e42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d10f      	bne.n	8004e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d107      	bne.n	8004e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023800 	.word	0x40023800

08004e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0d0      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e94:	4b6a      	ldr	r3, [pc, #424]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d910      	bls.n	8004ec4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b67      	ldr	r3, [pc, #412]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 020f 	bic.w	r2, r3, #15
 8004eaa:	4965      	ldr	r1, [pc, #404]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b63      	ldr	r3, [pc, #396]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0b8      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d020      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004edc:	4b59      	ldr	r3, [pc, #356]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4a58      	ldr	r2, [pc, #352]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef4:	4b53      	ldr	r3, [pc, #332]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4a52      	ldr	r2, [pc, #328]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004efe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f00:	4b50      	ldr	r3, [pc, #320]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	494d      	ldr	r1, [pc, #308]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d040      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	4b47      	ldr	r3, [pc, #284]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d115      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e07f      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3e:	4b41      	ldr	r3, [pc, #260]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e073      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	4b3d      	ldr	r3, [pc, #244]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e06b      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5e:	4b39      	ldr	r3, [pc, #228]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 0203 	bic.w	r2, r3, #3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4936      	ldr	r1, [pc, #216]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f70:	f7fe fb5c 	bl	800362c <HAL_GetTick>
 8004f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f78:	f7fe fb58 	bl	800362c <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e053      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	4b2d      	ldr	r3, [pc, #180]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 020c 	and.w	r2, r3, #12
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d1eb      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d210      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 020f 	bic.w	r2, r3, #15
 8004fb6:	4922      	ldr	r1, [pc, #136]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	4b20      	ldr	r3, [pc, #128]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d001      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e032      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fdc:	4b19      	ldr	r3, [pc, #100]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4916      	ldr	r1, [pc, #88]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	490e      	ldr	r1, [pc, #56]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800500e:	f000 f821 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8005012:	4602      	mov	r2, r0
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	490a      	ldr	r1, [pc, #40]	; (8005048 <HAL_RCC_ClockConfig+0x1cc>)
 8005020:	5ccb      	ldrb	r3, [r1, r3]
 8005022:	fa22 f303 	lsr.w	r3, r2, r3
 8005026:	4a09      	ldr	r2, [pc, #36]	; (800504c <HAL_RCC_ClockConfig+0x1d0>)
 8005028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <HAL_RCC_ClockConfig+0x1d4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fab8 	bl	80035a4 <HAL_InitTick>

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023c00 	.word	0x40023c00
 8005044:	40023800 	.word	0x40023800
 8005048:	080094e4 	.word	0x080094e4
 800504c:	20000000 	.word	0x20000000
 8005050:	20000004 	.word	0x20000004

08005054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005058:	b090      	sub	sp, #64	; 0x40
 800505a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
 8005060:	2300      	movs	r3, #0
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005064:	2300      	movs	r3, #0
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800506c:	4b59      	ldr	r3, [pc, #356]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 030c 	and.w	r3, r3, #12
 8005074:	2b08      	cmp	r3, #8
 8005076:	d00d      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0x40>
 8005078:	2b08      	cmp	r3, #8
 800507a:	f200 80a1 	bhi.w	80051c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0x34>
 8005082:	2b04      	cmp	r3, #4
 8005084:	d003      	beq.n	800508e <HAL_RCC_GetSysClockFreq+0x3a>
 8005086:	e09b      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005088:	4b53      	ldr	r3, [pc, #332]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800508a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800508c:	e09b      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800508e:	4b53      	ldr	r3, [pc, #332]	; (80051dc <HAL_RCC_GetSysClockFreq+0x188>)
 8005090:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005092:	e098      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005094:	4b4f      	ldr	r3, [pc, #316]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800509e:	4b4d      	ldr	r3, [pc, #308]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d028      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050aa:	4b4a      	ldr	r3, [pc, #296]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	2200      	movs	r2, #0
 80050b2:	623b      	str	r3, [r7, #32]
 80050b4:	627a      	str	r2, [r7, #36]	; 0x24
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050bc:	2100      	movs	r1, #0
 80050be:	4b47      	ldr	r3, [pc, #284]	; (80051dc <HAL_RCC_GetSysClockFreq+0x188>)
 80050c0:	fb03 f201 	mul.w	r2, r3, r1
 80050c4:	2300      	movs	r3, #0
 80050c6:	fb00 f303 	mul.w	r3, r0, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	4a43      	ldr	r2, [pc, #268]	; (80051dc <HAL_RCC_GetSysClockFreq+0x188>)
 80050ce:	fba0 1202 	umull	r1, r2, r0, r2
 80050d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d4:	460a      	mov	r2, r1
 80050d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80050d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050da:	4413      	add	r3, r2
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	2200      	movs	r2, #0
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	61fa      	str	r2, [r7, #28]
 80050e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80050ee:	f7fb f8ab 	bl	8000248 <__aeabi_uldivmod>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4613      	mov	r3, r2
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fa:	e053      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fc:	4b35      	ldr	r3, [pc, #212]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	099b      	lsrs	r3, r3, #6
 8005102:	2200      	movs	r2, #0
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	617a      	str	r2, [r7, #20]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800510e:	f04f 0b00 	mov.w	fp, #0
 8005112:	4652      	mov	r2, sl
 8005114:	465b      	mov	r3, fp
 8005116:	f04f 0000 	mov.w	r0, #0
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	0159      	lsls	r1, r3, #5
 8005120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005124:	0150      	lsls	r0, r2, #5
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	ebb2 080a 	subs.w	r8, r2, sl
 800512e:	eb63 090b 	sbc.w	r9, r3, fp
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800513e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005142:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005146:	ebb2 0408 	subs.w	r4, r2, r8
 800514a:	eb63 0509 	sbc.w	r5, r3, r9
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	00eb      	lsls	r3, r5, #3
 8005158:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800515c:	00e2      	lsls	r2, r4, #3
 800515e:	4614      	mov	r4, r2
 8005160:	461d      	mov	r5, r3
 8005162:	eb14 030a 	adds.w	r3, r4, sl
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	eb45 030b 	adc.w	r3, r5, fp
 800516c:	607b      	str	r3, [r7, #4]
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800517a:	4629      	mov	r1, r5
 800517c:	028b      	lsls	r3, r1, #10
 800517e:	4621      	mov	r1, r4
 8005180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005184:	4621      	mov	r1, r4
 8005186:	028a      	lsls	r2, r1, #10
 8005188:	4610      	mov	r0, r2
 800518a:	4619      	mov	r1, r3
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	2200      	movs	r2, #0
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	60fa      	str	r2, [r7, #12]
 8005194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005198:	f7fb f856 	bl	8000248 <__aeabi_uldivmod>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4613      	mov	r3, r2
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80051a4:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	0c1b      	lsrs	r3, r3, #16
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	3301      	adds	r3, #1
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80051b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051be:	e002      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3740      	adds	r7, #64	; 0x40
 80051cc:	46bd      	mov	sp, r7
 80051ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d2:	bf00      	nop
 80051d4:	40023800 	.word	0x40023800
 80051d8:	00f42400 	.word	0x00f42400
 80051dc:	017d7840 	.word	0x017d7840

080051e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e4:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051e6:	681b      	ldr	r3, [r3, #0]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000000 	.word	0x20000000

080051f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051fc:	f7ff fff0 	bl	80051e0 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	0a9b      	lsrs	r3, r3, #10
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <HAL_RCC_GetPCLK1Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	080094f4 	.word	0x080094f4

08005220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005224:	f7ff ffdc 	bl	80051e0 <HAL_RCC_GetHCLKFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	0b5b      	lsrs	r3, r3, #13
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	4903      	ldr	r1, [pc, #12]	; (8005244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800523c:	4618      	mov	r0, r3
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40023800 	.word	0x40023800
 8005244:	080094f4 	.word	0x080094f4

08005248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d012      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005270:	4b69      	ldr	r3, [pc, #420]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4a68      	ldr	r2, [pc, #416]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005276:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800527a:	6093      	str	r3, [r2, #8]
 800527c:	4b66      	ldr	r3, [pc, #408]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005284:	4964      	ldr	r1, [pc, #400]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005292:	2301      	movs	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d017      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052a2:	4b5d      	ldr	r3, [pc, #372]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	4959      	ldr	r1, [pc, #356]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c0:	d101      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052c2:	2301      	movs	r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80052ce:	2301      	movs	r3, #1
 80052d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d017      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052de:	4b4e      	ldr	r3, [pc, #312]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	494a      	ldr	r1, [pc, #296]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fc:	d101      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800530a:	2301      	movs	r3, #1
 800530c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800531a:	2301      	movs	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 808b 	beq.w	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800532c:	4b3a      	ldr	r3, [pc, #232]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	4a39      	ldr	r2, [pc, #228]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005336:	6413      	str	r3, [r2, #64]	; 0x40
 8005338:	4b37      	ldr	r3, [pc, #220]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005344:	4b35      	ldr	r3, [pc, #212]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a34      	ldr	r2, [pc, #208]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800534a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005350:	f7fe f96c 	bl	800362c <HAL_GetTick>
 8005354:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005356:	e008      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005358:	f7fe f968 	bl	800362c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e38f      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800536a:	4b2c      	ldr	r3, [pc, #176]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005376:	4b28      	ldr	r3, [pc, #160]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d035      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	429a      	cmp	r2, r3
 8005392:	d02e      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005394:	4b20      	ldr	r3, [pc, #128]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800539e:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053aa:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a1a      	ldr	r2, [pc, #104]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80053b6:	4a18      	ldr	r2, [pc, #96]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053bc:	4b16      	ldr	r3, [pc, #88]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d114      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fe f930 	bl	800362c <HAL_GetTick>
 80053cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ce:	e00a      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d0:	f7fe f92c 	bl	800362c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	; 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e351      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0ee      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053fe:	d111      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800540c:	4b04      	ldr	r3, [pc, #16]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800540e:	400b      	ands	r3, r1
 8005410:	4901      	ldr	r1, [pc, #4]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005412:	4313      	orrs	r3, r2
 8005414:	608b      	str	r3, [r1, #8]
 8005416:	e00b      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005418:	40023800 	.word	0x40023800
 800541c:	40007000 	.word	0x40007000
 8005420:	0ffffcff 	.word	0x0ffffcff
 8005424:	4bac      	ldr	r3, [pc, #688]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4aab      	ldr	r2, [pc, #684]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800542e:	6093      	str	r3, [r2, #8]
 8005430:	4ba9      	ldr	r3, [pc, #676]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005432:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543c:	49a6      	ldr	r1, [pc, #664]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800543e:	4313      	orrs	r3, r2
 8005440:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d010      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800544e:	4ba2      	ldr	r3, [pc, #648]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005454:	4aa0      	ldr	r2, [pc, #640]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800545a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800545e:	4b9e      	ldr	r3, [pc, #632]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005460:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	499b      	ldr	r1, [pc, #620]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800547c:	4b96      	ldr	r3, [pc, #600]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800548a:	4993      	ldr	r1, [pc, #588]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800549e:	4b8e      	ldr	r3, [pc, #568]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054ac:	498a      	ldr	r1, [pc, #552]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c0:	4b85      	ldr	r3, [pc, #532]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ce:	4982      	ldr	r1, [pc, #520]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054e2:	4b7d      	ldr	r3, [pc, #500]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f0:	4979      	ldr	r1, [pc, #484]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005504:	4b74      	ldr	r3, [pc, #464]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550a:	f023 0203 	bic.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005512:	4971      	ldr	r1, [pc, #452]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005526:	4b6c      	ldr	r3, [pc, #432]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552c:	f023 020c 	bic.w	r2, r3, #12
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005534:	4968      	ldr	r1, [pc, #416]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005548:	4b63      	ldr	r3, [pc, #396]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005556:	4960      	ldr	r1, [pc, #384]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800556a:	4b5b      	ldr	r3, [pc, #364]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	4957      	ldr	r1, [pc, #348]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800558c:	4b52      	ldr	r3, [pc, #328]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559a:	494f      	ldr	r1, [pc, #316]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80055ae:	4b4a      	ldr	r3, [pc, #296]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	4946      	ldr	r1, [pc, #280]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80055d0:	4b41      	ldr	r3, [pc, #260]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	493e      	ldr	r1, [pc, #248]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055f2:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005600:	4935      	ldr	r1, [pc, #212]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005614:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005622:	492d      	ldr	r1, [pc, #180]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d011      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005636:	4b28      	ldr	r3, [pc, #160]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005644:	4924      	ldr	r1, [pc, #144]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005654:	d101      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005656:	2301      	movs	r3, #1
 8005658:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005666:	2301      	movs	r3, #1
 8005668:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005684:	4914      	ldr	r1, [pc, #80]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00b      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a8:	490b      	ldr	r1, [pc, #44]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00f      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056cc:	4902      	ldr	r1, [pc, #8]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056d4:	e002      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056e8:	4b8a      	ldr	r3, [pc, #552]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f8:	4986      	ldr	r1, [pc, #536]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800570c:	4b81      	ldr	r3, [pc, #516]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800570e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005712:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800571c:	497d      	ldr	r1, [pc, #500]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d006      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80d6 	beq.w	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005738:	4b76      	ldr	r3, [pc, #472]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a75      	ldr	r2, [pc, #468]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800573e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005744:	f7fd ff72 	bl	800362c <HAL_GetTick>
 8005748:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800574a:	e008      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800574c:	f7fd ff6e 	bl	800362c <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e195      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800575e:	4b6d      	ldr	r3, [pc, #436]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f0      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d021      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	2b00      	cmp	r3, #0
 800577c:	d11d      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800577e:	4b65      	ldr	r3, [pc, #404]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005784:	0c1b      	lsrs	r3, r3, #16
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800578c:	4b61      	ldr	r3, [pc, #388]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800578e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005792:	0e1b      	lsrs	r3, r3, #24
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	019a      	lsls	r2, r3, #6
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	041b      	lsls	r3, r3, #16
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	061b      	lsls	r3, r3, #24
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	071b      	lsls	r3, r3, #28
 80057b2:	4958      	ldr	r1, [pc, #352]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ce:	d00a      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02e      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057e4:	d129      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057e6:	4b4b      	ldr	r3, [pc, #300]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ec:	0c1b      	lsrs	r3, r3, #16
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057f4:	4b47      	ldr	r3, [pc, #284]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057fa:	0f1b      	lsrs	r3, r3, #28
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	019a      	lsls	r2, r3, #6
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	061b      	lsls	r3, r3, #24
 8005814:	431a      	orrs	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	071b      	lsls	r3, r3, #28
 800581a:	493e      	ldr	r1, [pc, #248]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005822:	4b3c      	ldr	r3, [pc, #240]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005828:	f023 021f 	bic.w	r2, r3, #31
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	3b01      	subs	r3, #1
 8005832:	4938      	ldr	r1, [pc, #224]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01d      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005846:	4b33      	ldr	r3, [pc, #204]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800584c:	0e1b      	lsrs	r3, r3, #24
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005854:	4b2f      	ldr	r3, [pc, #188]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800585a:	0f1b      	lsrs	r3, r3, #28
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	019a      	lsls	r2, r3, #6
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	431a      	orrs	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	061b      	lsls	r3, r3, #24
 8005874:	431a      	orrs	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	071b      	lsls	r3, r3, #28
 800587a:	4926      	ldr	r1, [pc, #152]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d011      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	019a      	lsls	r2, r3, #6
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	071b      	lsls	r3, r3, #28
 80058aa:	491a      	ldr	r1, [pc, #104]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058b2:	4b18      	ldr	r3, [pc, #96]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a17      	ldr	r2, [pc, #92]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058be:	f7fd feb5 	bl	800362c <HAL_GetTick>
 80058c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058c6:	f7fd feb1 	bl	800362c <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b64      	cmp	r3, #100	; 0x64
 80058d2:	d901      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e0d8      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058d8:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0f0      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	f040 80ce 	bne.w	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a08      	ldr	r2, [pc, #32]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f8:	f7fd fe98 	bl	800362c <HAL_GetTick>
 80058fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058fe:	e00b      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005900:	f7fd fe94 	bl	800362c <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b64      	cmp	r3, #100	; 0x64
 800590c:	d904      	bls.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e0bb      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005912:	bf00      	nop
 8005914:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005918:	4b5e      	ldr	r3, [pc, #376]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005924:	d0ec      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005942:	2b00      	cmp	r3, #0
 8005944:	d02e      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d12a      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800594e:	4b51      	ldr	r3, [pc, #324]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800595c:	4b4d      	ldr	r3, [pc, #308]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	0f1b      	lsrs	r3, r3, #28
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	019a      	lsls	r2, r3, #6
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	061b      	lsls	r3, r3, #24
 800597c:	431a      	orrs	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	071b      	lsls	r3, r3, #28
 8005982:	4944      	ldr	r1, [pc, #272]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800598a:	4b42      	ldr	r3, [pc, #264]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800598c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005990:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	3b01      	subs	r3, #1
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	493d      	ldr	r1, [pc, #244]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d022      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b8:	d11d      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059ba:	4b36      	ldr	r3, [pc, #216]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	0e1b      	lsrs	r3, r3, #24
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059c8:	4b32      	ldr	r3, [pc, #200]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ce:	0f1b      	lsrs	r3, r3, #28
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	019a      	lsls	r2, r3, #6
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	431a      	orrs	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	061b      	lsls	r3, r3, #24
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	071b      	lsls	r3, r3, #28
 80059ee:	4929      	ldr	r1, [pc, #164]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d028      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a02:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	0e1b      	lsrs	r3, r3, #24
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a10:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	019a      	lsls	r2, r3, #6
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	061b      	lsls	r3, r3, #24
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	071b      	lsls	r3, r3, #28
 8005a36:	4917      	ldr	r1, [pc, #92]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a3e:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4911      	ldr	r1, [pc, #68]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a0e      	ldr	r2, [pc, #56]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a60:	f7fd fde4 	bl	800362c <HAL_GetTick>
 8005a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a68:	f7fd fde0 	bl	800362c <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b64      	cmp	r3, #100	; 0x64
 8005a74:	d901      	bls.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e007      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a86:	d1ef      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40023800 	.word	0x40023800

08005a98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e09d      	b.n	8005be6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d108      	bne.n	8005ac4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aba:	d009      	beq.n	8005ad0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	61da      	str	r2, [r3, #28]
 8005ac2:	e005      	b.n	8005ad0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fd f980 	bl	8002df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b10:	d902      	bls.n	8005b18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e002      	b.n	8005b1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b26:	d007      	beq.n	8005b38 <HAL_SPI_Init+0xa0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b30:	d002      	beq.n	8005b38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	ea42 0103 	orr.w	r1, r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	f003 0204 	and.w	r2, r3, #4
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bb4:	ea42 0103 	orr.w	r1, r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b088      	sub	sp, #32
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_SPI_Transmit+0x22>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e158      	b.n	8005ec2 <HAL_SPI_Transmit+0x2d4>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c18:	f7fd fd08 	bl	800362c <HAL_GetTick>
 8005c1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c1e:	88fb      	ldrh	r3, [r7, #6]
 8005c20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d002      	beq.n	8005c34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c32:	e13d      	b.n	8005eb0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_SPI_Transmit+0x52>
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d102      	bne.n	8005c46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c44:	e134      	b.n	8005eb0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2203      	movs	r2, #3
 8005c4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	88fa      	ldrh	r2, [r7, #6]
 8005c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	88fa      	ldrh	r2, [r7, #6]
 8005c64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c90:	d10f      	bne.n	8005cb2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d007      	beq.n	8005cd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd8:	d94b      	bls.n	8005d72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_SPI_Transmit+0xfa>
 8005ce2:	8afb      	ldrh	r3, [r7, #22]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d13e      	bne.n	8005d66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	1c9a      	adds	r2, r3, #2
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d0c:	e02b      	b.n	8005d66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d112      	bne.n	8005d42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	881a      	ldrh	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	1c9a      	adds	r2, r3, #2
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d40:	e011      	b.n	8005d66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d42:	f7fd fc73 	bl	800362c <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d803      	bhi.n	8005d5a <HAL_SPI_Transmit+0x16c>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d102      	bne.n	8005d60 <HAL_SPI_Transmit+0x172>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d64:	e0a4      	b.n	8005eb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ce      	bne.n	8005d0e <HAL_SPI_Transmit+0x120>
 8005d70:	e07c      	b.n	8005e6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_SPI_Transmit+0x192>
 8005d7a:	8afb      	ldrh	r3, [r7, #22]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d170      	bne.n	8005e62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d912      	bls.n	8005db0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	881a      	ldrh	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	1c9a      	adds	r2, r3, #2
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b02      	subs	r3, #2
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dae:	e058      	b.n	8005e62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	7812      	ldrb	r2, [r2, #0]
 8005dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005dd6:	e044      	b.n	8005e62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d12b      	bne.n	8005e3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d912      	bls.n	8005e16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df4:	881a      	ldrh	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	1c9a      	adds	r2, r3, #2
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b02      	subs	r3, #2
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e14:	e025      	b.n	8005e62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	7812      	ldrb	r2, [r2, #0]
 8005e22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e3c:	e011      	b.n	8005e62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e3e:	f7fd fbf5 	bl	800362c <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d803      	bhi.n	8005e56 <HAL_SPI_Transmit+0x268>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d102      	bne.n	8005e5c <HAL_SPI_Transmit+0x26e>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d102      	bne.n	8005e62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e60:	e026      	b.n	8005eb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1b5      	bne.n	8005dd8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fd07 	bl	8006884 <SPI_EndRxTxTransaction>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e000      	b.n	8005eb0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b088      	sub	sp, #32
 8005ece:	af02      	add	r7, sp, #8
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee6:	d112      	bne.n	8005f0e <HAL_SPI_Receive+0x44>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10e      	bne.n	8005f0e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	4613      	mov	r3, r2
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f910 	bl	800612a <HAL_SPI_TransmitReceive>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	e109      	b.n	8006122 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_SPI_Receive+0x52>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e102      	b.n	8006122 <HAL_SPI_Receive+0x258>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f24:	f7fd fb82 	bl	800362c <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d002      	beq.n	8005f3c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f36:	2302      	movs	r3, #2
 8005f38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f3a:	e0e9      	b.n	8006110 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_SPI_Receive+0x7e>
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f4c:	e0e0      	b.n	8006110 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2204      	movs	r2, #4
 8005f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f98:	d908      	bls.n	8005fac <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	e007      	b.n	8005fbc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc4:	d10f      	bne.n	8005fe6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fe4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d007      	beq.n	8006004 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006002:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800600c:	d867      	bhi.n	80060de <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800600e:	e030      	b.n	8006072 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	d117      	bne.n	800604e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f103 020c 	add.w	r2, r3, #12
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	7812      	ldrb	r2, [r2, #0]
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800604c:	e011      	b.n	8006072 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800604e:	f7fd faed 	bl	800362c <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d803      	bhi.n	8006066 <HAL_SPI_Receive+0x19c>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d102      	bne.n	800606c <HAL_SPI_Receive+0x1a2>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006070:	e04e      	b.n	8006110 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1c8      	bne.n	8006010 <HAL_SPI_Receive+0x146>
 800607e:	e034      	b.n	80060ea <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b01      	cmp	r3, #1
 800608c:	d115      	bne.n	80060ba <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	b292      	uxth	r2, r2
 800609a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	1c9a      	adds	r2, r3, #2
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80060b8:	e011      	b.n	80060de <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ba:	f7fd fab7 	bl	800362c <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d803      	bhi.n	80060d2 <HAL_SPI_Receive+0x208>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Receive+0x20e>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060dc:	e018      	b.n	8006110 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1ca      	bne.n	8006080 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fb4c 	bl	800678c <SPI_EndRxTransaction>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	75fb      	strb	r3, [r7, #23]
 800610c:	e000      	b.n	8006110 <HAL_SPI_Receive+0x246>
  }

error :
 800610e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b08a      	sub	sp, #40	; 0x28
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
 8006136:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006138:	2301      	movs	r3, #1
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_SPI_TransmitReceive+0x26>
 800614c:	2302      	movs	r3, #2
 800614e:	e1fb      	b.n	8006548 <HAL_SPI_TransmitReceive+0x41e>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006158:	f7fd fa68 	bl	800362c <HAL_GetTick>
 800615c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006164:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800616c:	887b      	ldrh	r3, [r7, #2]
 800616e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006170:	887b      	ldrh	r3, [r7, #2]
 8006172:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006174:	7efb      	ldrb	r3, [r7, #27]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d00e      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x6e>
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006180:	d106      	bne.n	8006190 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d102      	bne.n	8006190 <HAL_SPI_TransmitReceive+0x66>
 800618a:	7efb      	ldrb	r3, [r7, #27]
 800618c:	2b04      	cmp	r3, #4
 800618e:	d003      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006190:	2302      	movs	r3, #2
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006196:	e1cd      	b.n	8006534 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <HAL_SPI_TransmitReceive+0x80>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_TransmitReceive+0x80>
 80061a4:	887b      	ldrh	r3, [r7, #2]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061b0:	e1c0      	b.n	8006534 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d003      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2205      	movs	r2, #5
 80061c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	887a      	ldrh	r2, [r7, #2]
 80061d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	887a      	ldrh	r2, [r7, #2]
 80061de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	887a      	ldrh	r2, [r7, #2]
 80061ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	887a      	ldrh	r2, [r7, #2]
 80061f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006208:	d802      	bhi.n	8006210 <HAL_SPI_TransmitReceive+0xe6>
 800620a:	8a3b      	ldrh	r3, [r7, #16]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d908      	bls.n	8006222 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800621e:	605a      	str	r2, [r3, #4]
 8006220:	e007      	b.n	8006232 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006230:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d007      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800624e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006258:	d97c      	bls.n	8006354 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_SPI_TransmitReceive+0x13e>
 8006262:	8a7b      	ldrh	r3, [r7, #18]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d169      	bne.n	800633c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	881a      	ldrh	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	1c9a      	adds	r2, r3, #2
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800628c:	e056      	b.n	800633c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d11b      	bne.n	80062d4 <HAL_SPI_TransmitReceive+0x1aa>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <HAL_SPI_TransmitReceive+0x1aa>
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d113      	bne.n	80062d4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	881a      	ldrh	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	1c9a      	adds	r2, r3, #2
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d11c      	bne.n	800631c <HAL_SPI_TransmitReceive+0x1f2>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	b292      	uxth	r2, r2
 80062fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	1c9a      	adds	r2, r3, #2
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006318:	2301      	movs	r3, #1
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800631c:	f7fd f986 	bl	800362c <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006328:	429a      	cmp	r2, r3
 800632a:	d807      	bhi.n	800633c <HAL_SPI_TransmitReceive+0x212>
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d003      	beq.n	800633c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800633a:	e0fb      	b.n	8006534 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1a3      	bne.n	800628e <HAL_SPI_TransmitReceive+0x164>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d19d      	bne.n	800628e <HAL_SPI_TransmitReceive+0x164>
 8006352:	e0df      	b.n	8006514 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_SPI_TransmitReceive+0x23a>
 800635c:	8a7b      	ldrh	r3, [r7, #18]
 800635e:	2b01      	cmp	r3, #1
 8006360:	f040 80cb 	bne.w	80064fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d912      	bls.n	8006394 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	881a      	ldrh	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	1c9a      	adds	r2, r3, #2
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b02      	subs	r3, #2
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006392:	e0b2      	b.n	80064fa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ba:	e09e      	b.n	80064fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d134      	bne.n	8006434 <HAL_SPI_TransmitReceive+0x30a>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d02f      	beq.n	8006434 <HAL_SPI_TransmitReceive+0x30a>
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d12c      	bne.n	8006434 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d912      	bls.n	800640a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	881a      	ldrh	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	1c9a      	adds	r2, r3, #2
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b02      	subs	r3, #2
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006408:	e012      	b.n	8006430 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	330c      	adds	r3, #12
 8006414:	7812      	ldrb	r2, [r2, #0]
 8006416:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b01      	cmp	r3, #1
 8006440:	d148      	bne.n	80064d4 <HAL_SPI_TransmitReceive+0x3aa>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d042      	beq.n	80064d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b01      	cmp	r3, #1
 8006458:	d923      	bls.n	80064a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	b292      	uxth	r2, r2
 8006466:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	1c9a      	adds	r2, r3, #2
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b02      	subs	r3, #2
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b01      	cmp	r3, #1
 800648e:	d81f      	bhi.n	80064d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800649e:	605a      	str	r2, [r3, #4]
 80064a0:	e016      	b.n	80064d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f103 020c 	add.w	r2, r3, #12
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	7812      	ldrb	r2, [r2, #0]
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064d0:	2301      	movs	r3, #1
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064d4:	f7fd f8aa 	bl	800362c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d803      	bhi.n	80064ec <HAL_SPI_TransmitReceive+0x3c2>
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d102      	bne.n	80064f2 <HAL_SPI_TransmitReceive+0x3c8>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80064f8:	e01c      	b.n	8006534 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fe:	b29b      	uxth	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	f47f af5b 	bne.w	80063bc <HAL_SPI_TransmitReceive+0x292>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	f47f af54 	bne.w	80063bc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f9b3 	bl	8006884 <SPI_EndRxTxTransaction>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d006      	beq.n	8006532 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	661a      	str	r2, [r3, #96]	; 0x60
 8006530:	e000      	b.n	8006534 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006532:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006548:	4618      	mov	r0, r3
 800654a:	3728      	adds	r7, #40	; 0x28
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	4613      	mov	r3, r2
 800655e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006560:	f7fd f864 	bl	800362c <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4413      	add	r3, r2
 800656e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006570:	f7fd f85c 	bl	800362c <HAL_GetTick>
 8006574:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	015b      	lsls	r3, r3, #5
 800657c:	0d1b      	lsrs	r3, r3, #20
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	fb02 f303 	mul.w	r3, r2, r3
 8006584:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006586:	e054      	b.n	8006632 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d050      	beq.n	8006632 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006590:	f7fd f84c 	bl	800362c <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	429a      	cmp	r2, r3
 800659e:	d902      	bls.n	80065a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d13d      	bne.n	8006622 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065be:	d111      	bne.n	80065e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c8:	d004      	beq.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d2:	d107      	bne.n	80065e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ec:	d10f      	bne.n	800660e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800660c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e017      	b.n	8006652 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	3b01      	subs	r3, #1
 8006630:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4013      	ands	r3, r2
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	429a      	cmp	r2, r3
 8006640:	bf0c      	ite	eq
 8006642:	2301      	moveq	r3, #1
 8006644:	2300      	movne	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	429a      	cmp	r2, r3
 800664e:	d19b      	bne.n	8006588 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3720      	adds	r7, #32
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000000 	.word	0x20000000

08006660 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	; 0x28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006672:	f7fc ffdb 	bl	800362c <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	4413      	add	r3, r2
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006682:	f7fc ffd3 	bl	800362c <HAL_GetTick>
 8006686:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	330c      	adds	r3, #12
 800668e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006690:	4b3d      	ldr	r3, [pc, #244]	; (8006788 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	00da      	lsls	r2, r3, #3
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	0d1b      	lsrs	r3, r3, #20
 80066a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066a8:	e060      	b.n	800676c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066b0:	d107      	bne.n	80066c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d050      	beq.n	800676c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066ca:	f7fc ffaf 	bl	800362c <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d902      	bls.n	80066e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d13d      	bne.n	800675c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f8:	d111      	bne.n	800671e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006702:	d004      	beq.n	800670e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670c:	d107      	bne.n	800671e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800671c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006726:	d10f      	bne.n	8006748 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006746:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e010      	b.n	800677e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	3b01      	subs	r3, #1
 800676a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4013      	ands	r3, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d196      	bne.n	80066aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3728      	adds	r7, #40	; 0x28
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000000 	.word	0x20000000

0800678c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af02      	add	r7, sp, #8
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a0:	d111      	bne.n	80067c6 <SPI_EndRxTransaction+0x3a>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067aa:	d004      	beq.n	80067b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b4:	d107      	bne.n	80067c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ce:	d112      	bne.n	80067f6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2200      	movs	r2, #0
 80067d8:	2180      	movs	r1, #128	; 0x80
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff feb8 	bl	8006550 <SPI_WaitFlagStateUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d021      	beq.n	800682a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e03d      	b.n	8006872 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <SPI_EndRxTransaction+0xf0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a21      	ldr	r2, [pc, #132]	; (8006880 <SPI_EndRxTransaction+0xf4>)
 80067fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006800:	0d5b      	lsrs	r3, r3, #21
 8006802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	3b01      	subs	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d0f2      	beq.n	800680c <SPI_EndRxTransaction+0x80>
 8006826:	e000      	b.n	800682a <SPI_EndRxTransaction+0x9e>
        break;
 8006828:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006832:	d11d      	bne.n	8006870 <SPI_EndRxTransaction+0xe4>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683c:	d004      	beq.n	8006848 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006846:	d113      	bne.n	8006870 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2200      	movs	r2, #0
 8006850:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff ff03 	bl	8006660 <SPI_WaitFifoStateUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006864:	f043 0220 	orr.w	r2, r3, #32
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e000      	b.n	8006872 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000000 	.word	0x20000000
 8006880:	165e9f81 	.word	0x165e9f81

08006884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7ff fedf 	bl	8006660 <SPI_WaitFifoStateUntilTimeout>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d007      	beq.n	80068b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e046      	b.n	8006946 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068b8:	4b25      	ldr	r3, [pc, #148]	; (8006950 <SPI_EndRxTxTransaction+0xcc>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a25      	ldr	r2, [pc, #148]	; (8006954 <SPI_EndRxTxTransaction+0xd0>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	0d5b      	lsrs	r3, r3, #21
 80068c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068c8:	fb02 f303 	mul.w	r3, r2, r3
 80068cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d6:	d112      	bne.n	80068fe <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2200      	movs	r2, #0
 80068e0:	2180      	movs	r1, #128	; 0x80
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff fe34 	bl	8006550 <SPI_WaitFlagStateUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d016      	beq.n	800691c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f2:	f043 0220 	orr.w	r2, r3, #32
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e023      	b.n	8006946 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	3b01      	subs	r3, #1
 8006908:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b80      	cmp	r3, #128	; 0x80
 8006916:	d0f2      	beq.n	80068fe <SPI_EndRxTxTransaction+0x7a>
 8006918:	e000      	b.n	800691c <SPI_EndRxTxTransaction+0x98>
        break;
 800691a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7ff fe99 	bl	8006660 <SPI_WaitFifoStateUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e000      	b.n	8006946 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000000 	.word	0x20000000
 8006954:	165e9f81 	.word	0x165e9f81

08006958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e049      	b.n	80069fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fc fcee 	bl	8003360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3304      	adds	r3, #4
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f000 fe2a 	bl	80075f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d001      	beq.n	8006a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e054      	b.n	8006aca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a26      	ldr	r2, [pc, #152]	; (8006ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d022      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x80>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4a:	d01d      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x80>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a22      	ldr	r2, [pc, #136]	; (8006adc <HAL_TIM_Base_Start_IT+0xd4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d018      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x80>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a21      	ldr	r2, [pc, #132]	; (8006ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d013      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x80>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00e      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x80>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d009      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x80>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <HAL_TIM_Base_Start_IT+0xe4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x80>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d115      	bne.n	8006ab4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <HAL_TIM_Base_Start_IT+0xec>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b06      	cmp	r3, #6
 8006a98:	d015      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0xbe>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa0:	d011      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0201 	orr.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab2:	e008      	b.n	8006ac6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0201 	orr.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e000      	b.n	8006ac8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40001800 	.word	0x40001800
 8006af4:	00010007 	.word	0x00010007

08006af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e049      	b.n	8006b9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fc fbfe 	bl	8003320 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f000 fd5a 	bl	80075f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e049      	b.n	8006c4c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fc fb5b 	bl	8003288 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f000 fd03 	bl	80075f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_IC_Start_IT+0x1e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	e023      	b.n	8006cba <HAL_TIM_IC_Start_IT+0x66>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d104      	bne.n	8006c82 <HAL_TIM_IC_Start_IT+0x2e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	e01b      	b.n	8006cba <HAL_TIM_IC_Start_IT+0x66>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d104      	bne.n	8006c92 <HAL_TIM_IC_Start_IT+0x3e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	e013      	b.n	8006cba <HAL_TIM_IC_Start_IT+0x66>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d104      	bne.n	8006ca2 <HAL_TIM_IC_Start_IT+0x4e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	e00b      	b.n	8006cba <HAL_TIM_IC_Start_IT+0x66>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b10      	cmp	r3, #16
 8006ca6:	d104      	bne.n	8006cb2 <HAL_TIM_IC_Start_IT+0x5e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	e003      	b.n	8006cba <HAL_TIM_IC_Start_IT+0x66>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <HAL_TIM_IC_Start_IT+0x78>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	e013      	b.n	8006cf4 <HAL_TIM_IC_Start_IT+0xa0>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d104      	bne.n	8006cdc <HAL_TIM_IC_Start_IT+0x88>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	e00b      	b.n	8006cf4 <HAL_TIM_IC_Start_IT+0xa0>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d104      	bne.n	8006cec <HAL_TIM_IC_Start_IT+0x98>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	e003      	b.n	8006cf4 <HAL_TIM_IC_Start_IT+0xa0>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d102      	bne.n	8006d02 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cfc:	7b7b      	ldrb	r3, [r7, #13]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d001      	beq.n	8006d06 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e0e2      	b.n	8006ecc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d104      	bne.n	8006d16 <HAL_TIM_IC_Start_IT+0xc2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d14:	e023      	b.n	8006d5e <HAL_TIM_IC_Start_IT+0x10a>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d104      	bne.n	8006d26 <HAL_TIM_IC_Start_IT+0xd2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d24:	e01b      	b.n	8006d5e <HAL_TIM_IC_Start_IT+0x10a>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d104      	bne.n	8006d36 <HAL_TIM_IC_Start_IT+0xe2>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d34:	e013      	b.n	8006d5e <HAL_TIM_IC_Start_IT+0x10a>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b0c      	cmp	r3, #12
 8006d3a:	d104      	bne.n	8006d46 <HAL_TIM_IC_Start_IT+0xf2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d44:	e00b      	b.n	8006d5e <HAL_TIM_IC_Start_IT+0x10a>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d104      	bne.n	8006d56 <HAL_TIM_IC_Start_IT+0x102>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d54:	e003      	b.n	8006d5e <HAL_TIM_IC_Start_IT+0x10a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <HAL_TIM_IC_Start_IT+0x11a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d6c:	e013      	b.n	8006d96 <HAL_TIM_IC_Start_IT+0x142>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_IC_Start_IT+0x12a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d7c:	e00b      	b.n	8006d96 <HAL_TIM_IC_Start_IT+0x142>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_IC_Start_IT+0x13a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d8c:	e003      	b.n	8006d96 <HAL_TIM_IC_Start_IT+0x142>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b0c      	cmp	r3, #12
 8006d9a:	d841      	bhi.n	8006e20 <HAL_TIM_IC_Start_IT+0x1cc>
 8006d9c:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <HAL_TIM_IC_Start_IT+0x150>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006dd9 	.word	0x08006dd9
 8006da8:	08006e21 	.word	0x08006e21
 8006dac:	08006e21 	.word	0x08006e21
 8006db0:	08006e21 	.word	0x08006e21
 8006db4:	08006deb 	.word	0x08006deb
 8006db8:	08006e21 	.word	0x08006e21
 8006dbc:	08006e21 	.word	0x08006e21
 8006dc0:	08006e21 	.word	0x08006e21
 8006dc4:	08006dfd 	.word	0x08006dfd
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	08006e21 	.word	0x08006e21
 8006dd0:	08006e21 	.word	0x08006e21
 8006dd4:	08006e0f 	.word	0x08006e0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0202 	orr.w	r2, r2, #2
 8006de6:	60da      	str	r2, [r3, #12]
      break;
 8006de8:	e01d      	b.n	8006e26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0204 	orr.w	r2, r2, #4
 8006df8:	60da      	str	r2, [r3, #12]
      break;
 8006dfa:	e014      	b.n	8006e26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0208 	orr.w	r2, r2, #8
 8006e0a:	60da      	str	r2, [r3, #12]
      break;
 8006e0c:	e00b      	b.n	8006e26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0210 	orr.w	r2, r2, #16
 8006e1c:	60da      	str	r2, [r3, #12]
      break;
 8006e1e:	e002      	b.n	8006e26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
      break;
 8006e24:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d14e      	bne.n	8006eca <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2201      	movs	r2, #1
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f001 f916 	bl	8008066 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a25      	ldr	r2, [pc, #148]	; (8006ed4 <HAL_TIM_IC_Start_IT+0x280>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d022      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x236>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4c:	d01d      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x236>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a21      	ldr	r2, [pc, #132]	; (8006ed8 <HAL_TIM_IC_Start_IT+0x284>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d018      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x236>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1f      	ldr	r2, [pc, #124]	; (8006edc <HAL_TIM_IC_Start_IT+0x288>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x236>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1e      	ldr	r2, [pc, #120]	; (8006ee0 <HAL_TIM_IC_Start_IT+0x28c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00e      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x236>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a1c      	ldr	r2, [pc, #112]	; (8006ee4 <HAL_TIM_IC_Start_IT+0x290>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x236>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1b      	ldr	r2, [pc, #108]	; (8006ee8 <HAL_TIM_IC_Start_IT+0x294>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x236>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a19      	ldr	r2, [pc, #100]	; (8006eec <HAL_TIM_IC_Start_IT+0x298>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d115      	bne.n	8006eb6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <HAL_TIM_IC_Start_IT+0x29c>)
 8006e92:	4013      	ands	r3, r2
 8006e94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b06      	cmp	r3, #6
 8006e9a:	d015      	beq.n	8006ec8 <HAL_TIM_IC_Start_IT+0x274>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea2:	d011      	beq.n	8006ec8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0201 	orr.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb4:	e008      	b.n	8006ec8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e000      	b.n	8006eca <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40010000 	.word	0x40010000
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800
 8006ee0:	40000c00 	.word	0x40000c00
 8006ee4:	40010400 	.word	0x40010400
 8006ee8:	40014000 	.word	0x40014000
 8006eec:	40001800 	.word	0x40001800
 8006ef0:	00010007 	.word	0x00010007

08006ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d122      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d11b      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f06f 0202 	mvn.w	r2, #2
 8006f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fb3c 	bl	80075b4 <HAL_TIM_IC_CaptureCallback>
 8006f3c:	e005      	b.n	8006f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fb2e 	bl	80075a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fb3f 	bl	80075c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d122      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d11b      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f06f 0204 	mvn.w	r2, #4
 8006f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fb12 	bl	80075b4 <HAL_TIM_IC_CaptureCallback>
 8006f90:	e005      	b.n	8006f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fb04 	bl	80075a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb15 	bl	80075c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	d122      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d11b      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0208 	mvn.w	r2, #8
 8006fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fae8 	bl	80075b4 <HAL_TIM_IC_CaptureCallback>
 8006fe4:	e005      	b.n	8006ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fada 	bl	80075a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 faeb 	bl	80075c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0310 	and.w	r3, r3, #16
 8007002:	2b10      	cmp	r3, #16
 8007004:	d122      	bne.n	800704c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0310 	and.w	r3, r3, #16
 8007010:	2b10      	cmp	r3, #16
 8007012:	d11b      	bne.n	800704c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0210 	mvn.w	r2, #16
 800701c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2208      	movs	r2, #8
 8007022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fabe 	bl	80075b4 <HAL_TIM_IC_CaptureCallback>
 8007038:	e005      	b.n	8007046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fab0 	bl	80075a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fac1 	bl	80075c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10e      	bne.n	8007078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b01      	cmp	r3, #1
 8007066:	d107      	bne.n	8007078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0201 	mvn.w	r2, #1
 8007070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fb fdc8 	bl	8002c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d10e      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007090:	2b80      	cmp	r3, #128	; 0x80
 8007092:	d107      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800709c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 f89e 	bl	80081e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b2:	d10e      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070be:	2b80      	cmp	r3, #128	; 0x80
 80070c0:	d107      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f891 	bl	80081f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d10e      	bne.n	80070fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d107      	bne.n	80070fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fa6f 	bl	80075dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b20      	cmp	r3, #32
 800710a:	d10e      	bne.n	800712a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b20      	cmp	r3, #32
 8007118:	d107      	bne.n	800712a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f06f 0220 	mvn.w	r2, #32
 8007122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 f851 	bl	80081cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIM_IC_ConfigChannel+0x1e>
 800714c:	2302      	movs	r3, #2
 800714e:	e088      	b.n	8007262 <HAL_TIM_IC_ConfigChannel+0x130>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11b      	bne.n	8007196 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6819      	ldr	r1, [r3, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f000 fdd1 	bl	8007d14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 020c 	bic.w	r2, r2, #12
 8007180:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6999      	ldr	r1, [r3, #24]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	619a      	str	r2, [r3, #24]
 8007194:	e060      	b.n	8007258 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b04      	cmp	r3, #4
 800719a:	d11c      	bne.n	80071d6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f000 fe55 	bl	8007e5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071be:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6999      	ldr	r1, [r3, #24]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	021a      	lsls	r2, r3, #8
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	619a      	str	r2, [r3, #24]
 80071d4:	e040      	b.n	8007258 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d11b      	bne.n	8007214 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	6819      	ldr	r1, [r3, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f000 fea2 	bl	8007f34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69da      	ldr	r2, [r3, #28]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 020c 	bic.w	r2, r2, #12
 80071fe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69d9      	ldr	r1, [r3, #28]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	61da      	str	r2, [r3, #28]
 8007212:	e021      	b.n	8007258 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b0c      	cmp	r3, #12
 8007218:	d11c      	bne.n	8007254 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6819      	ldr	r1, [r3, #0]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f000 febf 	bl	8007fac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800723c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69d9      	ldr	r1, [r3, #28]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	021a      	lsls	r2, r3, #8
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	61da      	str	r2, [r3, #28]
 8007252:	e001      	b.n	8007258 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007286:	2302      	movs	r3, #2
 8007288:	e0ff      	b.n	800748a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b14      	cmp	r3, #20
 8007296:	f200 80f0 	bhi.w	800747a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072f5 	.word	0x080072f5
 80072a4:	0800747b 	.word	0x0800747b
 80072a8:	0800747b 	.word	0x0800747b
 80072ac:	0800747b 	.word	0x0800747b
 80072b0:	08007335 	.word	0x08007335
 80072b4:	0800747b 	.word	0x0800747b
 80072b8:	0800747b 	.word	0x0800747b
 80072bc:	0800747b 	.word	0x0800747b
 80072c0:	08007377 	.word	0x08007377
 80072c4:	0800747b 	.word	0x0800747b
 80072c8:	0800747b 	.word	0x0800747b
 80072cc:	0800747b 	.word	0x0800747b
 80072d0:	080073b7 	.word	0x080073b7
 80072d4:	0800747b 	.word	0x0800747b
 80072d8:	0800747b 	.word	0x0800747b
 80072dc:	0800747b 	.word	0x0800747b
 80072e0:	080073f9 	.word	0x080073f9
 80072e4:	0800747b 	.word	0x0800747b
 80072e8:	0800747b 	.word	0x0800747b
 80072ec:	0800747b 	.word	0x0800747b
 80072f0:	08007439 	.word	0x08007439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fa18 	bl	8007730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0208 	orr.w	r2, r2, #8
 800730e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0204 	bic.w	r2, r2, #4
 800731e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6999      	ldr	r1, [r3, #24]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	619a      	str	r2, [r3, #24]
      break;
 8007332:	e0a5      	b.n	8007480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fa6a 	bl	8007814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800734e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6999      	ldr	r1, [r3, #24]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	021a      	lsls	r2, r3, #8
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	619a      	str	r2, [r3, #24]
      break;
 8007374:	e084      	b.n	8007480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fac1 	bl	8007904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69da      	ldr	r2, [r3, #28]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0208 	orr.w	r2, r2, #8
 8007390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0204 	bic.w	r2, r2, #4
 80073a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69d9      	ldr	r1, [r3, #28]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	61da      	str	r2, [r3, #28]
      break;
 80073b4:	e064      	b.n	8007480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fb17 	bl	80079f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69d9      	ldr	r1, [r3, #28]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	021a      	lsls	r2, r3, #8
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	61da      	str	r2, [r3, #28]
      break;
 80073f6:	e043      	b.n	8007480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fb4e 	bl	8007aa0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0208 	orr.w	r2, r2, #8
 8007412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0204 	bic.w	r2, r2, #4
 8007422:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007436:	e023      	b.n	8007480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fb80 	bl	8007b44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	021a      	lsls	r2, r3, #8
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007478:	e002      	b.n	8007480 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
      break;
 800747e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007488:	7dfb      	ldrb	r3, [r7, #23]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop

08007494 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_TIM_SlaveConfigSynchro+0x18>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e031      	b.n	8007510 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fb94 	bl	8007bec <TIM_SlaveTimer_SetConfig>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e018      	b.n	8007510 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074fc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b0c      	cmp	r3, #12
 800752a:	d831      	bhi.n	8007590 <HAL_TIM_ReadCapturedValue+0x78>
 800752c:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <HAL_TIM_ReadCapturedValue+0x1c>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	08007569 	.word	0x08007569
 8007538:	08007591 	.word	0x08007591
 800753c:	08007591 	.word	0x08007591
 8007540:	08007591 	.word	0x08007591
 8007544:	08007573 	.word	0x08007573
 8007548:	08007591 	.word	0x08007591
 800754c:	08007591 	.word	0x08007591
 8007550:	08007591 	.word	0x08007591
 8007554:	0800757d 	.word	0x0800757d
 8007558:	08007591 	.word	0x08007591
 800755c:	08007591 	.word	0x08007591
 8007560:	08007591 	.word	0x08007591
 8007564:	08007587 	.word	0x08007587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	60fb      	str	r3, [r7, #12]

      break;
 8007570:	e00f      	b.n	8007592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	60fb      	str	r3, [r7, #12]

      break;
 800757a:	e00a      	b.n	8007592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	60fb      	str	r3, [r7, #12]

      break;
 8007584:	e005      	b.n	8007592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	60fb      	str	r3, [r7, #12]

      break;
 800758e:	e000      	b.n	8007592 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007590:	bf00      	nop
  }

  return tmpreg;
 8007592:	68fb      	ldr	r3, [r7, #12]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a40      	ldr	r2, [pc, #256]	; (8007704 <TIM_Base_SetConfig+0x114>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d013      	beq.n	8007630 <TIM_Base_SetConfig+0x40>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760e:	d00f      	beq.n	8007630 <TIM_Base_SetConfig+0x40>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a3d      	ldr	r2, [pc, #244]	; (8007708 <TIM_Base_SetConfig+0x118>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00b      	beq.n	8007630 <TIM_Base_SetConfig+0x40>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a3c      	ldr	r2, [pc, #240]	; (800770c <TIM_Base_SetConfig+0x11c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d007      	beq.n	8007630 <TIM_Base_SetConfig+0x40>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a3b      	ldr	r2, [pc, #236]	; (8007710 <TIM_Base_SetConfig+0x120>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d003      	beq.n	8007630 <TIM_Base_SetConfig+0x40>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a3a      	ldr	r2, [pc, #232]	; (8007714 <TIM_Base_SetConfig+0x124>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d108      	bne.n	8007642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a2f      	ldr	r2, [pc, #188]	; (8007704 <TIM_Base_SetConfig+0x114>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d02b      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007650:	d027      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a2c      	ldr	r2, [pc, #176]	; (8007708 <TIM_Base_SetConfig+0x118>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d023      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a2b      	ldr	r2, [pc, #172]	; (800770c <TIM_Base_SetConfig+0x11c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d01f      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a2a      	ldr	r2, [pc, #168]	; (8007710 <TIM_Base_SetConfig+0x120>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d01b      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a29      	ldr	r2, [pc, #164]	; (8007714 <TIM_Base_SetConfig+0x124>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d017      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a28      	ldr	r2, [pc, #160]	; (8007718 <TIM_Base_SetConfig+0x128>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d013      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a27      	ldr	r2, [pc, #156]	; (800771c <TIM_Base_SetConfig+0x12c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00f      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a26      	ldr	r2, [pc, #152]	; (8007720 <TIM_Base_SetConfig+0x130>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00b      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a25      	ldr	r2, [pc, #148]	; (8007724 <TIM_Base_SetConfig+0x134>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d007      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a24      	ldr	r2, [pc, #144]	; (8007728 <TIM_Base_SetConfig+0x138>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d003      	beq.n	80076a2 <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a23      	ldr	r2, [pc, #140]	; (800772c <TIM_Base_SetConfig+0x13c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d108      	bne.n	80076b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a0a      	ldr	r2, [pc, #40]	; (8007704 <TIM_Base_SetConfig+0x114>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_Base_SetConfig+0xf8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a0c      	ldr	r2, [pc, #48]	; (8007714 <TIM_Base_SetConfig+0x124>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d103      	bne.n	80076f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	691a      	ldr	r2, [r3, #16]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	615a      	str	r2, [r3, #20]
}
 80076f6:	bf00      	nop
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40010000 	.word	0x40010000
 8007708:	40000400 	.word	0x40000400
 800770c:	40000800 	.word	0x40000800
 8007710:	40000c00 	.word	0x40000c00
 8007714:	40010400 	.word	0x40010400
 8007718:	40014000 	.word	0x40014000
 800771c:	40014400 	.word	0x40014400
 8007720:	40014800 	.word	0x40014800
 8007724:	40001800 	.word	0x40001800
 8007728:	40001c00 	.word	0x40001c00
 800772c:	40002000 	.word	0x40002000

08007730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	f023 0201 	bic.w	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4b2b      	ldr	r3, [pc, #172]	; (8007808 <TIM_OC1_SetConfig+0xd8>)
 800775c:	4013      	ands	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0303 	bic.w	r3, r3, #3
 8007766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 0302 	bic.w	r3, r3, #2
 8007778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a21      	ldr	r2, [pc, #132]	; (800780c <TIM_OC1_SetConfig+0xdc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d003      	beq.n	8007794 <TIM_OC1_SetConfig+0x64>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a20      	ldr	r2, [pc, #128]	; (8007810 <TIM_OC1_SetConfig+0xe0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d10c      	bne.n	80077ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f023 0308 	bic.w	r3, r3, #8
 800779a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f023 0304 	bic.w	r3, r3, #4
 80077ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a16      	ldr	r2, [pc, #88]	; (800780c <TIM_OC1_SetConfig+0xdc>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_OC1_SetConfig+0x8e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a15      	ldr	r2, [pc, #84]	; (8007810 <TIM_OC1_SetConfig+0xe0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d111      	bne.n	80077e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	621a      	str	r2, [r3, #32]
}
 80077fc:	bf00      	nop
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	fffeff8f 	.word	0xfffeff8f
 800780c:	40010000 	.word	0x40010000
 8007810:	40010400 	.word	0x40010400

08007814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f023 0210 	bic.w	r2, r3, #16
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	4b2e      	ldr	r3, [pc, #184]	; (80078f8 <TIM_OC2_SetConfig+0xe4>)
 8007840:	4013      	ands	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800784a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f023 0320 	bic.w	r3, r3, #32
 800785e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	4313      	orrs	r3, r2
 800786a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a23      	ldr	r2, [pc, #140]	; (80078fc <TIM_OC2_SetConfig+0xe8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d003      	beq.n	800787c <TIM_OC2_SetConfig+0x68>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a22      	ldr	r2, [pc, #136]	; (8007900 <TIM_OC2_SetConfig+0xec>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d10d      	bne.n	8007898 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a18      	ldr	r2, [pc, #96]	; (80078fc <TIM_OC2_SetConfig+0xe8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d003      	beq.n	80078a8 <TIM_OC2_SetConfig+0x94>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a17      	ldr	r2, [pc, #92]	; (8007900 <TIM_OC2_SetConfig+0xec>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d113      	bne.n	80078d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	621a      	str	r2, [r3, #32]
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	feff8fff 	.word	0xfeff8fff
 80078fc:	40010000 	.word	0x40010000
 8007900:	40010400 	.word	0x40010400

08007904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4b2d      	ldr	r3, [pc, #180]	; (80079e4 <TIM_OC3_SetConfig+0xe0>)
 8007930:	4013      	ands	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800794c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a22      	ldr	r2, [pc, #136]	; (80079e8 <TIM_OC3_SetConfig+0xe4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d003      	beq.n	800796a <TIM_OC3_SetConfig+0x66>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a21      	ldr	r2, [pc, #132]	; (80079ec <TIM_OC3_SetConfig+0xe8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d10d      	bne.n	8007986 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	021b      	lsls	r3, r3, #8
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	4313      	orrs	r3, r2
 800797c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <TIM_OC3_SetConfig+0xe4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d003      	beq.n	8007996 <TIM_OC3_SetConfig+0x92>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a16      	ldr	r2, [pc, #88]	; (80079ec <TIM_OC3_SetConfig+0xe8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d113      	bne.n	80079be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800799c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	621a      	str	r2, [r3, #32]
}
 80079d8:	bf00      	nop
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	fffeff8f 	.word	0xfffeff8f
 80079e8:	40010000 	.word	0x40010000
 80079ec:	40010400 	.word	0x40010400

080079f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4b1e      	ldr	r3, [pc, #120]	; (8007a94 <TIM_OC4_SetConfig+0xa4>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	031b      	lsls	r3, r3, #12
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a13      	ldr	r2, [pc, #76]	; (8007a98 <TIM_OC4_SetConfig+0xa8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_OC4_SetConfig+0x68>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a12      	ldr	r2, [pc, #72]	; (8007a9c <TIM_OC4_SetConfig+0xac>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d109      	bne.n	8007a6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	019b      	lsls	r3, r3, #6
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	621a      	str	r2, [r3, #32]
}
 8007a86:	bf00      	nop
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	feff8fff 	.word	0xfeff8fff
 8007a98:	40010000 	.word	0x40010000
 8007a9c:	40010400 	.word	0x40010400

08007aa0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <TIM_OC5_SetConfig+0x98>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ae0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	041b      	lsls	r3, r3, #16
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a12      	ldr	r2, [pc, #72]	; (8007b3c <TIM_OC5_SetConfig+0x9c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC5_SetConfig+0x5e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a11      	ldr	r2, [pc, #68]	; (8007b40 <TIM_OC5_SetConfig+0xa0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d109      	bne.n	8007b12 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	621a      	str	r2, [r3, #32]
}
 8007b2c:	bf00      	nop
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	fffeff8f 	.word	0xfffeff8f
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40010400 	.word	0x40010400

08007b44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	4b1c      	ldr	r3, [pc, #112]	; (8007be0 <TIM_OC6_SetConfig+0x9c>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	051b      	lsls	r3, r3, #20
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <TIM_OC6_SetConfig+0xa0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_OC6_SetConfig+0x60>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <TIM_OC6_SetConfig+0xa4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d109      	bne.n	8007bb8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007baa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	029b      	lsls	r3, r3, #10
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	621a      	str	r2, [r3, #32]
}
 8007bd2:	bf00      	nop
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	feff8fff 	.word	0xfeff8fff
 8007be4:	40010000 	.word	0x40010000
 8007be8:	40010400 	.word	0x40010400

08007bec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c08:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4b3e      	ldr	r3, [pc, #248]	; (8007d10 <TIM_SlaveTimer_SetConfig+0x124>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b70      	cmp	r3, #112	; 0x70
 8007c34:	d01a      	beq.n	8007c6c <TIM_SlaveTimer_SetConfig+0x80>
 8007c36:	2b70      	cmp	r3, #112	; 0x70
 8007c38:	d860      	bhi.n	8007cfc <TIM_SlaveTimer_SetConfig+0x110>
 8007c3a:	2b60      	cmp	r3, #96	; 0x60
 8007c3c:	d054      	beq.n	8007ce8 <TIM_SlaveTimer_SetConfig+0xfc>
 8007c3e:	2b60      	cmp	r3, #96	; 0x60
 8007c40:	d85c      	bhi.n	8007cfc <TIM_SlaveTimer_SetConfig+0x110>
 8007c42:	2b50      	cmp	r3, #80	; 0x50
 8007c44:	d046      	beq.n	8007cd4 <TIM_SlaveTimer_SetConfig+0xe8>
 8007c46:	2b50      	cmp	r3, #80	; 0x50
 8007c48:	d858      	bhi.n	8007cfc <TIM_SlaveTimer_SetConfig+0x110>
 8007c4a:	2b40      	cmp	r3, #64	; 0x40
 8007c4c:	d019      	beq.n	8007c82 <TIM_SlaveTimer_SetConfig+0x96>
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	d854      	bhi.n	8007cfc <TIM_SlaveTimer_SetConfig+0x110>
 8007c52:	2b30      	cmp	r3, #48	; 0x30
 8007c54:	d055      	beq.n	8007d02 <TIM_SlaveTimer_SetConfig+0x116>
 8007c56:	2b30      	cmp	r3, #48	; 0x30
 8007c58:	d850      	bhi.n	8007cfc <TIM_SlaveTimer_SetConfig+0x110>
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d051      	beq.n	8007d02 <TIM_SlaveTimer_SetConfig+0x116>
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d84c      	bhi.n	8007cfc <TIM_SlaveTimer_SetConfig+0x110>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d04d      	beq.n	8007d02 <TIM_SlaveTimer_SetConfig+0x116>
 8007c66:	2b10      	cmp	r3, #16
 8007c68:	d04b      	beq.n	8007d02 <TIM_SlaveTimer_SetConfig+0x116>
 8007c6a:	e047      	b.n	8007cfc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68d9      	ldr	r1, [r3, #12]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f000 f9d3 	bl	8008026 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007c80:	e040      	b.n	8007d04 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	d101      	bne.n	8007c8e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e03b      	b.n	8007d06 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6a1a      	ldr	r2, [r3, #32]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0201 	bic.w	r2, r2, #1
 8007ca4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cb4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	621a      	str	r2, [r3, #32]
      break;
 8007cd2:	e017      	b.n	8007d04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	6899      	ldr	r1, [r3, #8]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	f000 f88b 	bl	8007dfc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007ce6:	e00d      	b.n	8007d04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6818      	ldr	r0, [r3, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	6899      	ldr	r1, [r3, #8]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f000 f8ed 	bl	8007ed4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007cfa:	e003      	b.n	8007d04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007d00:	e000      	b.n	8007d04 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007d02:	bf00      	nop
  }

  return status;
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	fffefff8 	.word	0xfffefff8

08007d14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f023 0201 	bic.w	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a28      	ldr	r2, [pc, #160]	; (8007de0 <TIM_TI1_SetConfig+0xcc>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d01b      	beq.n	8007d7a <TIM_TI1_SetConfig+0x66>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d48:	d017      	beq.n	8007d7a <TIM_TI1_SetConfig+0x66>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4a25      	ldr	r2, [pc, #148]	; (8007de4 <TIM_TI1_SetConfig+0xd0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d013      	beq.n	8007d7a <TIM_TI1_SetConfig+0x66>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4a24      	ldr	r2, [pc, #144]	; (8007de8 <TIM_TI1_SetConfig+0xd4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00f      	beq.n	8007d7a <TIM_TI1_SetConfig+0x66>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4a23      	ldr	r2, [pc, #140]	; (8007dec <TIM_TI1_SetConfig+0xd8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00b      	beq.n	8007d7a <TIM_TI1_SetConfig+0x66>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4a22      	ldr	r2, [pc, #136]	; (8007df0 <TIM_TI1_SetConfig+0xdc>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d007      	beq.n	8007d7a <TIM_TI1_SetConfig+0x66>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4a21      	ldr	r2, [pc, #132]	; (8007df4 <TIM_TI1_SetConfig+0xe0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d003      	beq.n	8007d7a <TIM_TI1_SetConfig+0x66>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4a20      	ldr	r2, [pc, #128]	; (8007df8 <TIM_TI1_SetConfig+0xe4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d101      	bne.n	8007d7e <TIM_TI1_SetConfig+0x6a>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e000      	b.n	8007d80 <TIM_TI1_SetConfig+0x6c>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d008      	beq.n	8007d96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	e003      	b.n	8007d9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f043 0301 	orr.w	r3, r3, #1
 8007d9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f023 030a 	bic.w	r3, r3, #10
 8007db8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f003 030a 	and.w	r3, r3, #10
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	621a      	str	r2, [r3, #32]
}
 8007dd2:	bf00      	nop
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	40010000 	.word	0x40010000
 8007de4:	40000400 	.word	0x40000400
 8007de8:	40000800 	.word	0x40000800
 8007dec:	40000c00 	.word	0x40000c00
 8007df0:	40010400 	.word	0x40010400
 8007df4:	40014000 	.word	0x40014000
 8007df8:	40001800 	.word	0x40001800

08007dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f023 0201 	bic.w	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f023 030a 	bic.w	r3, r3, #10
 8007e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b087      	sub	sp, #28
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	607a      	str	r2, [r7, #4]
 8007e66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f023 0210 	bic.w	r2, r3, #16
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	021b      	lsls	r3, r3, #8
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	031b      	lsls	r3, r3, #12
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	621a      	str	r2, [r3, #32]
}
 8007ec8:	bf00      	nop
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	f023 0210 	bic.w	r2, r3, #16
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007efe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	031b      	lsls	r3, r3, #12
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	621a      	str	r2, [r3, #32]
}
 8007f28:	bf00      	nop
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f023 0303 	bic.w	r3, r3, #3
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007f84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	621a      	str	r2, [r3, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	031b      	lsls	r3, r3, #12
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	031b      	lsls	r3, r3, #12
 8008004:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	621a      	str	r2, [r3, #32]
}
 800801a:	bf00      	nop
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008026:	b480      	push	{r7}
 8008028:	b087      	sub	sp, #28
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008040:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	021a      	lsls	r2, r3, #8
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	431a      	orrs	r2, r3
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4313      	orrs	r3, r2
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	609a      	str	r2, [r3, #8]
}
 800805a:	bf00      	nop
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008066:	b480      	push	{r7}
 8008068:	b087      	sub	sp, #28
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f003 031f 	and.w	r3, r3, #31
 8008078:	2201      	movs	r2, #1
 800807a:	fa02 f303 	lsl.w	r3, r2, r3
 800807e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a1a      	ldr	r2, [r3, #32]
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	43db      	mvns	r3, r3
 8008088:	401a      	ands	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1a      	ldr	r2, [r3, #32]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f003 031f 	and.w	r3, r3, #31
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	fa01 f303 	lsl.w	r3, r1, r3
 800809e:	431a      	orrs	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	621a      	str	r2, [r3, #32]
}
 80080a4:	bf00      	nop
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e06d      	b.n	80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a30      	ldr	r2, [pc, #192]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d004      	beq.n	80080fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2f      	ldr	r2, [pc, #188]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d108      	bne.n	800810e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008102:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008114:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a20      	ldr	r2, [pc, #128]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d022      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813a:	d01d      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1d      	ldr	r2, [pc, #116]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d018      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d013      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a1a      	ldr	r2, [pc, #104]	; (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00e      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d009      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d004      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d10c      	bne.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	4313      	orrs	r3, r2
 8008188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	40010000 	.word	0x40010000
 80081b4:	40010400 	.word	0x40010400
 80081b8:	40000400 	.word	0x40000400
 80081bc:	40000800 	.word	0x40000800
 80081c0:	40000c00 	.word	0x40000c00
 80081c4:	40014000 	.word	0x40014000
 80081c8:	40001800 	.word	0x40001800

080081cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e040      	b.n	800829c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7fb f926 	bl	800347c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2224      	movs	r2, #36	; 0x24
 8008234:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 0201 	bic.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f8c0 	bl	80083cc <UART_SetConfig>
 800824c:	4603      	mov	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e022      	b.n	800829c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fb18 	bl	8008894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fb9f 	bl	80089d8 <UART_CheckIdleState>
 800829a:	4603      	mov	r3, r0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	; 0x28
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	4613      	mov	r3, r2
 80082b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	f040 8081 	bne.w	80083c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <HAL_UART_Transmit+0x26>
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e079      	b.n	80083c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_UART_Transmit+0x38>
 80082d8:	2302      	movs	r3, #2
 80082da:	e072      	b.n	80083c2 <HAL_UART_Transmit+0x11e>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2221      	movs	r2, #33	; 0x21
 80082f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082f2:	f7fb f99b 	bl	800362c <HAL_GetTick>
 80082f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	88fa      	ldrh	r2, [r7, #6]
 8008304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008310:	d108      	bne.n	8008324 <HAL_UART_Transmit+0x80>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d104      	bne.n	8008324 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800831a:	2300      	movs	r3, #0
 800831c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	e003      	b.n	800832c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008334:	e02c      	b.n	8008390 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2200      	movs	r2, #0
 800833e:	2180      	movs	r1, #128	; 0x80
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 fb92 	bl	8008a6a <UART_WaitOnFlagUntilTimeout>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e038      	b.n	80083c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10b      	bne.n	800836e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	3302      	adds	r3, #2
 800836a:	61bb      	str	r3, [r7, #24]
 800836c:	e007      	b.n	800837e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	781a      	ldrb	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	3301      	adds	r3, #1
 800837c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008384:	b29b      	uxth	r3, r3
 8008386:	3b01      	subs	r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008396:	b29b      	uxth	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1cc      	bne.n	8008336 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2200      	movs	r2, #0
 80083a4:	2140      	movs	r1, #64	; 0x40
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fb5f 	bl	8008a6a <UART_WaitOnFlagUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e005      	b.n	80083c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2220      	movs	r2, #32
 80083ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	e000      	b.n	80083c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80083c0:	2302      	movs	r3, #2
  }
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4ba6      	ldr	r3, [pc, #664]	; (8008690 <UART_SetConfig+0x2c4>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6812      	ldr	r2, [r2, #0]
 80083fe:	6979      	ldr	r1, [r7, #20]
 8008400:	430b      	orrs	r3, r1
 8008402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	430a      	orrs	r2, r1
 800843c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a94      	ldr	r2, [pc, #592]	; (8008694 <UART_SetConfig+0x2c8>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d120      	bne.n	800848a <UART_SetConfig+0xbe>
 8008448:	4b93      	ldr	r3, [pc, #588]	; (8008698 <UART_SetConfig+0x2cc>)
 800844a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d816      	bhi.n	8008484 <UART_SetConfig+0xb8>
 8008456:	a201      	add	r2, pc, #4	; (adr r2, 800845c <UART_SetConfig+0x90>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	0800846d 	.word	0x0800846d
 8008460:	08008479 	.word	0x08008479
 8008464:	08008473 	.word	0x08008473
 8008468:	0800847f 	.word	0x0800847f
 800846c:	2301      	movs	r3, #1
 800846e:	77fb      	strb	r3, [r7, #31]
 8008470:	e150      	b.n	8008714 <UART_SetConfig+0x348>
 8008472:	2302      	movs	r3, #2
 8008474:	77fb      	strb	r3, [r7, #31]
 8008476:	e14d      	b.n	8008714 <UART_SetConfig+0x348>
 8008478:	2304      	movs	r3, #4
 800847a:	77fb      	strb	r3, [r7, #31]
 800847c:	e14a      	b.n	8008714 <UART_SetConfig+0x348>
 800847e:	2308      	movs	r3, #8
 8008480:	77fb      	strb	r3, [r7, #31]
 8008482:	e147      	b.n	8008714 <UART_SetConfig+0x348>
 8008484:	2310      	movs	r3, #16
 8008486:	77fb      	strb	r3, [r7, #31]
 8008488:	e144      	b.n	8008714 <UART_SetConfig+0x348>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a83      	ldr	r2, [pc, #524]	; (800869c <UART_SetConfig+0x2d0>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d132      	bne.n	80084fa <UART_SetConfig+0x12e>
 8008494:	4b80      	ldr	r3, [pc, #512]	; (8008698 <UART_SetConfig+0x2cc>)
 8008496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800849a:	f003 030c 	and.w	r3, r3, #12
 800849e:	2b0c      	cmp	r3, #12
 80084a0:	d828      	bhi.n	80084f4 <UART_SetConfig+0x128>
 80084a2:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <UART_SetConfig+0xdc>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084dd 	.word	0x080084dd
 80084ac:	080084f5 	.word	0x080084f5
 80084b0:	080084f5 	.word	0x080084f5
 80084b4:	080084f5 	.word	0x080084f5
 80084b8:	080084e9 	.word	0x080084e9
 80084bc:	080084f5 	.word	0x080084f5
 80084c0:	080084f5 	.word	0x080084f5
 80084c4:	080084f5 	.word	0x080084f5
 80084c8:	080084e3 	.word	0x080084e3
 80084cc:	080084f5 	.word	0x080084f5
 80084d0:	080084f5 	.word	0x080084f5
 80084d4:	080084f5 	.word	0x080084f5
 80084d8:	080084ef 	.word	0x080084ef
 80084dc:	2300      	movs	r3, #0
 80084de:	77fb      	strb	r3, [r7, #31]
 80084e0:	e118      	b.n	8008714 <UART_SetConfig+0x348>
 80084e2:	2302      	movs	r3, #2
 80084e4:	77fb      	strb	r3, [r7, #31]
 80084e6:	e115      	b.n	8008714 <UART_SetConfig+0x348>
 80084e8:	2304      	movs	r3, #4
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	e112      	b.n	8008714 <UART_SetConfig+0x348>
 80084ee:	2308      	movs	r3, #8
 80084f0:	77fb      	strb	r3, [r7, #31]
 80084f2:	e10f      	b.n	8008714 <UART_SetConfig+0x348>
 80084f4:	2310      	movs	r3, #16
 80084f6:	77fb      	strb	r3, [r7, #31]
 80084f8:	e10c      	b.n	8008714 <UART_SetConfig+0x348>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a68      	ldr	r2, [pc, #416]	; (80086a0 <UART_SetConfig+0x2d4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d120      	bne.n	8008546 <UART_SetConfig+0x17a>
 8008504:	4b64      	ldr	r3, [pc, #400]	; (8008698 <UART_SetConfig+0x2cc>)
 8008506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800850e:	2b30      	cmp	r3, #48	; 0x30
 8008510:	d013      	beq.n	800853a <UART_SetConfig+0x16e>
 8008512:	2b30      	cmp	r3, #48	; 0x30
 8008514:	d814      	bhi.n	8008540 <UART_SetConfig+0x174>
 8008516:	2b20      	cmp	r3, #32
 8008518:	d009      	beq.n	800852e <UART_SetConfig+0x162>
 800851a:	2b20      	cmp	r3, #32
 800851c:	d810      	bhi.n	8008540 <UART_SetConfig+0x174>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <UART_SetConfig+0x15c>
 8008522:	2b10      	cmp	r3, #16
 8008524:	d006      	beq.n	8008534 <UART_SetConfig+0x168>
 8008526:	e00b      	b.n	8008540 <UART_SetConfig+0x174>
 8008528:	2300      	movs	r3, #0
 800852a:	77fb      	strb	r3, [r7, #31]
 800852c:	e0f2      	b.n	8008714 <UART_SetConfig+0x348>
 800852e:	2302      	movs	r3, #2
 8008530:	77fb      	strb	r3, [r7, #31]
 8008532:	e0ef      	b.n	8008714 <UART_SetConfig+0x348>
 8008534:	2304      	movs	r3, #4
 8008536:	77fb      	strb	r3, [r7, #31]
 8008538:	e0ec      	b.n	8008714 <UART_SetConfig+0x348>
 800853a:	2308      	movs	r3, #8
 800853c:	77fb      	strb	r3, [r7, #31]
 800853e:	e0e9      	b.n	8008714 <UART_SetConfig+0x348>
 8008540:	2310      	movs	r3, #16
 8008542:	77fb      	strb	r3, [r7, #31]
 8008544:	e0e6      	b.n	8008714 <UART_SetConfig+0x348>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a56      	ldr	r2, [pc, #344]	; (80086a4 <UART_SetConfig+0x2d8>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d120      	bne.n	8008592 <UART_SetConfig+0x1c6>
 8008550:	4b51      	ldr	r3, [pc, #324]	; (8008698 <UART_SetConfig+0x2cc>)
 8008552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800855a:	2bc0      	cmp	r3, #192	; 0xc0
 800855c:	d013      	beq.n	8008586 <UART_SetConfig+0x1ba>
 800855e:	2bc0      	cmp	r3, #192	; 0xc0
 8008560:	d814      	bhi.n	800858c <UART_SetConfig+0x1c0>
 8008562:	2b80      	cmp	r3, #128	; 0x80
 8008564:	d009      	beq.n	800857a <UART_SetConfig+0x1ae>
 8008566:	2b80      	cmp	r3, #128	; 0x80
 8008568:	d810      	bhi.n	800858c <UART_SetConfig+0x1c0>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <UART_SetConfig+0x1a8>
 800856e:	2b40      	cmp	r3, #64	; 0x40
 8008570:	d006      	beq.n	8008580 <UART_SetConfig+0x1b4>
 8008572:	e00b      	b.n	800858c <UART_SetConfig+0x1c0>
 8008574:	2300      	movs	r3, #0
 8008576:	77fb      	strb	r3, [r7, #31]
 8008578:	e0cc      	b.n	8008714 <UART_SetConfig+0x348>
 800857a:	2302      	movs	r3, #2
 800857c:	77fb      	strb	r3, [r7, #31]
 800857e:	e0c9      	b.n	8008714 <UART_SetConfig+0x348>
 8008580:	2304      	movs	r3, #4
 8008582:	77fb      	strb	r3, [r7, #31]
 8008584:	e0c6      	b.n	8008714 <UART_SetConfig+0x348>
 8008586:	2308      	movs	r3, #8
 8008588:	77fb      	strb	r3, [r7, #31]
 800858a:	e0c3      	b.n	8008714 <UART_SetConfig+0x348>
 800858c:	2310      	movs	r3, #16
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e0c0      	b.n	8008714 <UART_SetConfig+0x348>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a44      	ldr	r2, [pc, #272]	; (80086a8 <UART_SetConfig+0x2dc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d125      	bne.n	80085e8 <UART_SetConfig+0x21c>
 800859c:	4b3e      	ldr	r3, [pc, #248]	; (8008698 <UART_SetConfig+0x2cc>)
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085aa:	d017      	beq.n	80085dc <UART_SetConfig+0x210>
 80085ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085b0:	d817      	bhi.n	80085e2 <UART_SetConfig+0x216>
 80085b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b6:	d00b      	beq.n	80085d0 <UART_SetConfig+0x204>
 80085b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085bc:	d811      	bhi.n	80085e2 <UART_SetConfig+0x216>
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <UART_SetConfig+0x1fe>
 80085c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c6:	d006      	beq.n	80085d6 <UART_SetConfig+0x20a>
 80085c8:	e00b      	b.n	80085e2 <UART_SetConfig+0x216>
 80085ca:	2300      	movs	r3, #0
 80085cc:	77fb      	strb	r3, [r7, #31]
 80085ce:	e0a1      	b.n	8008714 <UART_SetConfig+0x348>
 80085d0:	2302      	movs	r3, #2
 80085d2:	77fb      	strb	r3, [r7, #31]
 80085d4:	e09e      	b.n	8008714 <UART_SetConfig+0x348>
 80085d6:	2304      	movs	r3, #4
 80085d8:	77fb      	strb	r3, [r7, #31]
 80085da:	e09b      	b.n	8008714 <UART_SetConfig+0x348>
 80085dc:	2308      	movs	r3, #8
 80085de:	77fb      	strb	r3, [r7, #31]
 80085e0:	e098      	b.n	8008714 <UART_SetConfig+0x348>
 80085e2:	2310      	movs	r3, #16
 80085e4:	77fb      	strb	r3, [r7, #31]
 80085e6:	e095      	b.n	8008714 <UART_SetConfig+0x348>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a2f      	ldr	r2, [pc, #188]	; (80086ac <UART_SetConfig+0x2e0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d125      	bne.n	800863e <UART_SetConfig+0x272>
 80085f2:	4b29      	ldr	r3, [pc, #164]	; (8008698 <UART_SetConfig+0x2cc>)
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008600:	d017      	beq.n	8008632 <UART_SetConfig+0x266>
 8008602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008606:	d817      	bhi.n	8008638 <UART_SetConfig+0x26c>
 8008608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800860c:	d00b      	beq.n	8008626 <UART_SetConfig+0x25a>
 800860e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008612:	d811      	bhi.n	8008638 <UART_SetConfig+0x26c>
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <UART_SetConfig+0x254>
 8008618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861c:	d006      	beq.n	800862c <UART_SetConfig+0x260>
 800861e:	e00b      	b.n	8008638 <UART_SetConfig+0x26c>
 8008620:	2301      	movs	r3, #1
 8008622:	77fb      	strb	r3, [r7, #31]
 8008624:	e076      	b.n	8008714 <UART_SetConfig+0x348>
 8008626:	2302      	movs	r3, #2
 8008628:	77fb      	strb	r3, [r7, #31]
 800862a:	e073      	b.n	8008714 <UART_SetConfig+0x348>
 800862c:	2304      	movs	r3, #4
 800862e:	77fb      	strb	r3, [r7, #31]
 8008630:	e070      	b.n	8008714 <UART_SetConfig+0x348>
 8008632:	2308      	movs	r3, #8
 8008634:	77fb      	strb	r3, [r7, #31]
 8008636:	e06d      	b.n	8008714 <UART_SetConfig+0x348>
 8008638:	2310      	movs	r3, #16
 800863a:	77fb      	strb	r3, [r7, #31]
 800863c:	e06a      	b.n	8008714 <UART_SetConfig+0x348>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1b      	ldr	r2, [pc, #108]	; (80086b0 <UART_SetConfig+0x2e4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d138      	bne.n	80086ba <UART_SetConfig+0x2ee>
 8008648:	4b13      	ldr	r3, [pc, #76]	; (8008698 <UART_SetConfig+0x2cc>)
 800864a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800864e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008656:	d017      	beq.n	8008688 <UART_SetConfig+0x2bc>
 8008658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800865c:	d82a      	bhi.n	80086b4 <UART_SetConfig+0x2e8>
 800865e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008662:	d00b      	beq.n	800867c <UART_SetConfig+0x2b0>
 8008664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008668:	d824      	bhi.n	80086b4 <UART_SetConfig+0x2e8>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <UART_SetConfig+0x2aa>
 800866e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008672:	d006      	beq.n	8008682 <UART_SetConfig+0x2b6>
 8008674:	e01e      	b.n	80086b4 <UART_SetConfig+0x2e8>
 8008676:	2300      	movs	r3, #0
 8008678:	77fb      	strb	r3, [r7, #31]
 800867a:	e04b      	b.n	8008714 <UART_SetConfig+0x348>
 800867c:	2302      	movs	r3, #2
 800867e:	77fb      	strb	r3, [r7, #31]
 8008680:	e048      	b.n	8008714 <UART_SetConfig+0x348>
 8008682:	2304      	movs	r3, #4
 8008684:	77fb      	strb	r3, [r7, #31]
 8008686:	e045      	b.n	8008714 <UART_SetConfig+0x348>
 8008688:	2308      	movs	r3, #8
 800868a:	77fb      	strb	r3, [r7, #31]
 800868c:	e042      	b.n	8008714 <UART_SetConfig+0x348>
 800868e:	bf00      	nop
 8008690:	efff69f3 	.word	0xefff69f3
 8008694:	40011000 	.word	0x40011000
 8008698:	40023800 	.word	0x40023800
 800869c:	40004400 	.word	0x40004400
 80086a0:	40004800 	.word	0x40004800
 80086a4:	40004c00 	.word	0x40004c00
 80086a8:	40005000 	.word	0x40005000
 80086ac:	40011400 	.word	0x40011400
 80086b0:	40007800 	.word	0x40007800
 80086b4:	2310      	movs	r3, #16
 80086b6:	77fb      	strb	r3, [r7, #31]
 80086b8:	e02c      	b.n	8008714 <UART_SetConfig+0x348>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a72      	ldr	r2, [pc, #456]	; (8008888 <UART_SetConfig+0x4bc>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d125      	bne.n	8008710 <UART_SetConfig+0x344>
 80086c4:	4b71      	ldr	r3, [pc, #452]	; (800888c <UART_SetConfig+0x4c0>)
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80086ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086d2:	d017      	beq.n	8008704 <UART_SetConfig+0x338>
 80086d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086d8:	d817      	bhi.n	800870a <UART_SetConfig+0x33e>
 80086da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086de:	d00b      	beq.n	80086f8 <UART_SetConfig+0x32c>
 80086e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086e4:	d811      	bhi.n	800870a <UART_SetConfig+0x33e>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <UART_SetConfig+0x326>
 80086ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086ee:	d006      	beq.n	80086fe <UART_SetConfig+0x332>
 80086f0:	e00b      	b.n	800870a <UART_SetConfig+0x33e>
 80086f2:	2300      	movs	r3, #0
 80086f4:	77fb      	strb	r3, [r7, #31]
 80086f6:	e00d      	b.n	8008714 <UART_SetConfig+0x348>
 80086f8:	2302      	movs	r3, #2
 80086fa:	77fb      	strb	r3, [r7, #31]
 80086fc:	e00a      	b.n	8008714 <UART_SetConfig+0x348>
 80086fe:	2304      	movs	r3, #4
 8008700:	77fb      	strb	r3, [r7, #31]
 8008702:	e007      	b.n	8008714 <UART_SetConfig+0x348>
 8008704:	2308      	movs	r3, #8
 8008706:	77fb      	strb	r3, [r7, #31]
 8008708:	e004      	b.n	8008714 <UART_SetConfig+0x348>
 800870a:	2310      	movs	r3, #16
 800870c:	77fb      	strb	r3, [r7, #31]
 800870e:	e001      	b.n	8008714 <UART_SetConfig+0x348>
 8008710:	2310      	movs	r3, #16
 8008712:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871c:	d15b      	bne.n	80087d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800871e:	7ffb      	ldrb	r3, [r7, #31]
 8008720:	2b08      	cmp	r3, #8
 8008722:	d828      	bhi.n	8008776 <UART_SetConfig+0x3aa>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <UART_SetConfig+0x360>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	08008751 	.word	0x08008751
 8008730:	08008759 	.word	0x08008759
 8008734:	08008761 	.word	0x08008761
 8008738:	08008777 	.word	0x08008777
 800873c:	08008767 	.word	0x08008767
 8008740:	08008777 	.word	0x08008777
 8008744:	08008777 	.word	0x08008777
 8008748:	08008777 	.word	0x08008777
 800874c:	0800876f 	.word	0x0800876f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008750:	f7fc fd52 	bl	80051f8 <HAL_RCC_GetPCLK1Freq>
 8008754:	61b8      	str	r0, [r7, #24]
        break;
 8008756:	e013      	b.n	8008780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008758:	f7fc fd62 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 800875c:	61b8      	str	r0, [r7, #24]
        break;
 800875e:	e00f      	b.n	8008780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008760:	4b4b      	ldr	r3, [pc, #300]	; (8008890 <UART_SetConfig+0x4c4>)
 8008762:	61bb      	str	r3, [r7, #24]
        break;
 8008764:	e00c      	b.n	8008780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008766:	f7fc fc75 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 800876a:	61b8      	str	r0, [r7, #24]
        break;
 800876c:	e008      	b.n	8008780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008772:	61bb      	str	r3, [r7, #24]
        break;
 8008774:	e004      	b.n	8008780 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	77bb      	strb	r3, [r7, #30]
        break;
 800877e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d074      	beq.n	8008870 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	005a      	lsls	r2, r3, #1
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	085b      	lsrs	r3, r3, #1
 8008790:	441a      	add	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	fbb2 f3f3 	udiv	r3, r2, r3
 800879a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2b0f      	cmp	r3, #15
 80087a0:	d916      	bls.n	80087d0 <UART_SetConfig+0x404>
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a8:	d212      	bcs.n	80087d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	f023 030f 	bic.w	r3, r3, #15
 80087b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	b29a      	uxth	r2, r3
 80087c0:	89fb      	ldrh	r3, [r7, #14]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	89fa      	ldrh	r2, [r7, #14]
 80087cc:	60da      	str	r2, [r3, #12]
 80087ce:	e04f      	b.n	8008870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	77bb      	strb	r3, [r7, #30]
 80087d4:	e04c      	b.n	8008870 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087d6:	7ffb      	ldrb	r3, [r7, #31]
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d828      	bhi.n	800882e <UART_SetConfig+0x462>
 80087dc:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <UART_SetConfig+0x418>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	08008809 	.word	0x08008809
 80087e8:	08008811 	.word	0x08008811
 80087ec:	08008819 	.word	0x08008819
 80087f0:	0800882f 	.word	0x0800882f
 80087f4:	0800881f 	.word	0x0800881f
 80087f8:	0800882f 	.word	0x0800882f
 80087fc:	0800882f 	.word	0x0800882f
 8008800:	0800882f 	.word	0x0800882f
 8008804:	08008827 	.word	0x08008827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008808:	f7fc fcf6 	bl	80051f8 <HAL_RCC_GetPCLK1Freq>
 800880c:	61b8      	str	r0, [r7, #24]
        break;
 800880e:	e013      	b.n	8008838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008810:	f7fc fd06 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 8008814:	61b8      	str	r0, [r7, #24]
        break;
 8008816:	e00f      	b.n	8008838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008818:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <UART_SetConfig+0x4c4>)
 800881a:	61bb      	str	r3, [r7, #24]
        break;
 800881c:	e00c      	b.n	8008838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800881e:	f7fc fc19 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8008822:	61b8      	str	r0, [r7, #24]
        break;
 8008824:	e008      	b.n	8008838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800882a:	61bb      	str	r3, [r7, #24]
        break;
 800882c:	e004      	b.n	8008838 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800882e:	2300      	movs	r3, #0
 8008830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	77bb      	strb	r3, [r7, #30]
        break;
 8008836:	bf00      	nop
    }

    if (pclk != 0U)
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d018      	beq.n	8008870 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	085a      	lsrs	r2, r3, #1
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	441a      	add	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008850:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	2b0f      	cmp	r3, #15
 8008856:	d909      	bls.n	800886c <UART_SetConfig+0x4a0>
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885e:	d205      	bcs.n	800886c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	b29a      	uxth	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	e001      	b.n	8008870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800887c:	7fbb      	ldrb	r3, [r7, #30]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3720      	adds	r7, #32
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	40007c00 	.word	0x40007c00
 800888c:	40023800 	.word	0x40023800
 8008890:	00f42400 	.word	0x00f42400

08008894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00a      	beq.n	80088be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00a      	beq.n	80088e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	f003 0308 	and.w	r3, r3, #8
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01a      	beq.n	80089aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008992:	d10a      	bne.n	80089aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	605a      	str	r2, [r3, #4]
  }
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af02      	add	r7, sp, #8
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089e8:	f7fa fe20 	bl	800362c <HAL_GetTick>
 80089ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d10e      	bne.n	8008a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f82d 	bl	8008a6a <UART_WaitOnFlagUntilTimeout>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e023      	b.n	8008a62 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d10e      	bne.n	8008a46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f817 	bl	8008a6a <UART_WaitOnFlagUntilTimeout>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e00d      	b.n	8008a62 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b09c      	sub	sp, #112	; 0x70
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	603b      	str	r3, [r7, #0]
 8008a76:	4613      	mov	r3, r2
 8008a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a7a:	e0a5      	b.n	8008bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	f000 80a1 	beq.w	8008bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a86:	f7fa fdd1 	bl	800362c <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d302      	bcc.n	8008a9c <UART_WaitOnFlagUntilTimeout+0x32>
 8008a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d13e      	bne.n	8008b1a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008abc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ac0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e6      	bne.n	8008a9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	f023 0301 	bic.w	r3, r3, #1
 8008ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008aee:	64ba      	str	r2, [r7, #72]	; 0x48
 8008af0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e5      	bne.n	8008ace <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2220      	movs	r2, #32
 8008b06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e067      	b.n	8008bea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d04f      	beq.n	8008bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b36:	d147      	bne.n	8008bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	e853 3f00 	ldrex	r3, [r3]
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b60:	637b      	str	r3, [r7, #52]	; 0x34
 8008b62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b68:	e841 2300 	strex	r3, r2, [r1]
 8008b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e6      	bne.n	8008b42 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3308      	adds	r3, #8
 8008b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	613b      	str	r3, [r7, #16]
   return(result);
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f023 0301 	bic.w	r3, r3, #1
 8008b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3308      	adds	r3, #8
 8008b92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b94:	623a      	str	r2, [r7, #32]
 8008b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b98:	69f9      	ldr	r1, [r7, #28]
 8008b9a:	6a3a      	ldr	r2, [r7, #32]
 8008b9c:	e841 2300 	strex	r3, r2, [r1]
 8008ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e5      	bne.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2220      	movs	r2, #32
 8008bac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e010      	b.n	8008bea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69da      	ldr	r2, [r3, #28]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2301      	moveq	r3, #1
 8008bda:	2300      	movne	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	461a      	mov	r2, r3
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	f43f af4a 	beq.w	8008a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3770      	adds	r7, #112	; 0x70
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <__libc_init_array>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	4d0d      	ldr	r5, [pc, #52]	; (8008c2c <__libc_init_array+0x38>)
 8008bf8:	4c0d      	ldr	r4, [pc, #52]	; (8008c30 <__libc_init_array+0x3c>)
 8008bfa:	1b64      	subs	r4, r4, r5
 8008bfc:	10a4      	asrs	r4, r4, #2
 8008bfe:	2600      	movs	r6, #0
 8008c00:	42a6      	cmp	r6, r4
 8008c02:	d109      	bne.n	8008c18 <__libc_init_array+0x24>
 8008c04:	4d0b      	ldr	r5, [pc, #44]	; (8008c34 <__libc_init_array+0x40>)
 8008c06:	4c0c      	ldr	r4, [pc, #48]	; (8008c38 <__libc_init_array+0x44>)
 8008c08:	f000 f8aa 	bl	8008d60 <_init>
 8008c0c:	1b64      	subs	r4, r4, r5
 8008c0e:	10a4      	asrs	r4, r4, #2
 8008c10:	2600      	movs	r6, #0
 8008c12:	42a6      	cmp	r6, r4
 8008c14:	d105      	bne.n	8008c22 <__libc_init_array+0x2e>
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1c:	4798      	blx	r3
 8008c1e:	3601      	adds	r6, #1
 8008c20:	e7ee      	b.n	8008c00 <__libc_init_array+0xc>
 8008c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c26:	4798      	blx	r3
 8008c28:	3601      	adds	r6, #1
 8008c2a:	e7f2      	b.n	8008c12 <__libc_init_array+0x1e>
 8008c2c:	0800952c 	.word	0x0800952c
 8008c30:	0800952c 	.word	0x0800952c
 8008c34:	0800952c 	.word	0x0800952c
 8008c38:	08009530 	.word	0x08009530

08008c3c <memset>:
 8008c3c:	4402      	add	r2, r0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d100      	bne.n	8008c46 <memset+0xa>
 8008c44:	4770      	bx	lr
 8008c46:	f803 1b01 	strb.w	r1, [r3], #1
 8008c4a:	e7f9      	b.n	8008c40 <memset+0x4>

08008c4c <__utoa>:
 8008c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c4e:	4c1f      	ldr	r4, [pc, #124]	; (8008ccc <__utoa+0x80>)
 8008c50:	b08b      	sub	sp, #44	; 0x2c
 8008c52:	4605      	mov	r5, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	466e      	mov	r6, sp
 8008c58:	f104 0c20 	add.w	ip, r4, #32
 8008c5c:	6820      	ldr	r0, [r4, #0]
 8008c5e:	6861      	ldr	r1, [r4, #4]
 8008c60:	4637      	mov	r7, r6
 8008c62:	c703      	stmia	r7!, {r0, r1}
 8008c64:	3408      	adds	r4, #8
 8008c66:	4564      	cmp	r4, ip
 8008c68:	463e      	mov	r6, r7
 8008c6a:	d1f7      	bne.n	8008c5c <__utoa+0x10>
 8008c6c:	7921      	ldrb	r1, [r4, #4]
 8008c6e:	7139      	strb	r1, [r7, #4]
 8008c70:	1e91      	subs	r1, r2, #2
 8008c72:	6820      	ldr	r0, [r4, #0]
 8008c74:	6038      	str	r0, [r7, #0]
 8008c76:	2922      	cmp	r1, #34	; 0x22
 8008c78:	f04f 0100 	mov.w	r1, #0
 8008c7c:	d904      	bls.n	8008c88 <__utoa+0x3c>
 8008c7e:	7019      	strb	r1, [r3, #0]
 8008c80:	460b      	mov	r3, r1
 8008c82:	4618      	mov	r0, r3
 8008c84:	b00b      	add	sp, #44	; 0x2c
 8008c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c88:	1e58      	subs	r0, r3, #1
 8008c8a:	4684      	mov	ip, r0
 8008c8c:	fbb5 f7f2 	udiv	r7, r5, r2
 8008c90:	fb02 5617 	mls	r6, r2, r7, r5
 8008c94:	3628      	adds	r6, #40	; 0x28
 8008c96:	446e      	add	r6, sp
 8008c98:	460c      	mov	r4, r1
 8008c9a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008c9e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008ca2:	462e      	mov	r6, r5
 8008ca4:	42b2      	cmp	r2, r6
 8008ca6:	f101 0101 	add.w	r1, r1, #1
 8008caa:	463d      	mov	r5, r7
 8008cac:	d9ee      	bls.n	8008c8c <__utoa+0x40>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	545a      	strb	r2, [r3, r1]
 8008cb2:	1919      	adds	r1, r3, r4
 8008cb4:	1aa5      	subs	r5, r4, r2
 8008cb6:	42aa      	cmp	r2, r5
 8008cb8:	dae3      	bge.n	8008c82 <__utoa+0x36>
 8008cba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008cbe:	780e      	ldrb	r6, [r1, #0]
 8008cc0:	7006      	strb	r6, [r0, #0]
 8008cc2:	3201      	adds	r2, #1
 8008cc4:	f801 5901 	strb.w	r5, [r1], #-1
 8008cc8:	e7f4      	b.n	8008cb4 <__utoa+0x68>
 8008cca:	bf00      	nop
 8008ccc:	080094fc 	.word	0x080094fc

08008cd0 <utoa>:
 8008cd0:	f7ff bfbc 	b.w	8008c4c <__utoa>

08008cd4 <round>:
 8008cd4:	ee10 1a90 	vmov	r1, s1
 8008cd8:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8008cdc:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8008ce0:	2a13      	cmp	r2, #19
 8008ce2:	b510      	push	{r4, lr}
 8008ce4:	ee10 3a10 	vmov	r3, s0
 8008ce8:	dc19      	bgt.n	8008d1e <round+0x4a>
 8008cea:	2a00      	cmp	r2, #0
 8008cec:	da09      	bge.n	8008d02 <round+0x2e>
 8008cee:	3201      	adds	r2, #1
 8008cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008cf4:	d103      	bne.n	8008cfe <round+0x2a>
 8008cf6:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008cfa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008cfe:	2000      	movs	r0, #0
 8008d00:	e026      	b.n	8008d50 <round+0x7c>
 8008d02:	4816      	ldr	r0, [pc, #88]	; (8008d5c <round+0x88>)
 8008d04:	4110      	asrs	r0, r2
 8008d06:	ea01 0400 	and.w	r4, r1, r0
 8008d0a:	4323      	orrs	r3, r4
 8008d0c:	d00e      	beq.n	8008d2c <round+0x58>
 8008d0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d12:	fa43 f202 	asr.w	r2, r3, r2
 8008d16:	4411      	add	r1, r2
 8008d18:	ea21 0100 	bic.w	r1, r1, r0
 8008d1c:	e7ef      	b.n	8008cfe <round+0x2a>
 8008d1e:	2a33      	cmp	r2, #51	; 0x33
 8008d20:	dd05      	ble.n	8008d2e <round+0x5a>
 8008d22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008d26:	d101      	bne.n	8008d2c <round+0x58>
 8008d28:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008d2c:	bd10      	pop	{r4, pc}
 8008d2e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8008d32:	f04f 30ff 	mov.w	r0, #4294967295
 8008d36:	40e0      	lsrs	r0, r4
 8008d38:	4203      	tst	r3, r0
 8008d3a:	d0f7      	beq.n	8008d2c <round+0x58>
 8008d3c:	2401      	movs	r4, #1
 8008d3e:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8008d42:	fa04 f202 	lsl.w	r2, r4, r2
 8008d46:	189b      	adds	r3, r3, r2
 8008d48:	bf28      	it	cs
 8008d4a:	1909      	addcs	r1, r1, r4
 8008d4c:	ea23 0000 	bic.w	r0, r3, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4602      	mov	r2, r0
 8008d54:	ec43 2b10 	vmov	d0, r2, r3
 8008d58:	e7e8      	b.n	8008d2c <round+0x58>
 8008d5a:	bf00      	nop
 8008d5c:	000fffff 	.word	0x000fffff

08008d60 <_init>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	bf00      	nop
 8008d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d66:	bc08      	pop	{r3}
 8008d68:	469e      	mov	lr, r3
 8008d6a:	4770      	bx	lr

08008d6c <_fini>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	bf00      	nop
 8008d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d72:	bc08      	pop	{r3}
 8008d74:	469e      	mov	lr, r3
 8008d76:	4770      	bx	lr
