
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bec  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b8  080060b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c0  080060c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080060c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000000c  080060d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080060d4  00020308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017835  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003411  00000000  00000000  0003786f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  0003bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4dc  00000000  00000000  0003d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fa6  00000000  00000000  00068514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010747d  00000000  00000000  000804ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187937  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c84  00000000  00000000  0018798c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005dcc 	.word	0x08005dcc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005dcc 	.word	0x08005dcc

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f004 ff6b 	bl	8005430 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000280 	.word	0x20000280

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f005 fc24 	bl	8005dc8 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f004 ff4a 	bl	8005430 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000280 	.word	0x20000280

080005a8 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80005ac:	2112      	movs	r1, #18
 80005ae:	4822      	ldr	r0, [pc, #136]	; (8000638 <collectMiddlewareInfo+0x90>)
 80005b0:	f7ff ffc6 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80005b4:	210a      	movs	r1, #10
 80005b6:	2005      	movs	r0, #5
 80005b8:	f7ff ffd6 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 80005bc:	2101      	movs	r1, #1
 80005be:	481f      	ldr	r0, [pc, #124]	; (800063c <collectMiddlewareInfo+0x94>)
 80005c0:	f7ff ffbe 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80005c4:	210a      	movs	r1, #10
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff ffce 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80005cc:	2110      	movs	r1, #16
 80005ce:	481c      	ldr	r0, [pc, #112]	; (8000640 <collectMiddlewareInfo+0x98>)
 80005d0:	f7ff ffb6 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80005d4:	f001 fbf4 	bl	8001dc0 <HAL_GetHalVersion>
 80005d8:	4603      	mov	r3, r0
 80005da:	0e1b      	lsrs	r3, r3, #24
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	210a      	movs	r1, #10
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffc1 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80005e6:	2101      	movs	r1, #1
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <collectMiddlewareInfo+0x94>)
 80005ea:	f7ff ffa9 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80005ee:	f001 fbe7 	bl	8001dc0 <HAL_GetHalVersion>
 80005f2:	4603      	mov	r3, r0
 80005f4:	0c1b      	lsrs	r3, r3, #16
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	210a      	movs	r1, #10
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffb4 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000600:	2101      	movs	r1, #1
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <collectMiddlewareInfo+0x94>)
 8000604:	f7ff ff9c 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000608:	f001 fbda 	bl	8001dc0 <HAL_GetHalVersion>
 800060c:	4603      	mov	r3, r0
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	b2db      	uxtb	r3, r3
 8000612:	210a      	movs	r1, #10
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffa7 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800061a:	2101      	movs	r1, #1
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <collectMiddlewareInfo+0x94>)
 800061e:	f7ff ff8f 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000622:	f001 fbcd 	bl	8001dc0 <HAL_GetHalVersion>
 8000626:	4603      	mov	r3, r0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	210a      	movs	r1, #10
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff9b 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	08005de4 	.word	0x08005de4
 800063c:	08005df8 	.word	0x08005df8
 8000640:	08005dfc 	.word	0x08005dfc

08000644 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 8000648:	2110      	movs	r1, #16
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <collectSoftwareInfo+0x60>)
 800064c:	f7ff ff78 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000650:	2108      	movs	r1, #8
 8000652:	4815      	ldr	r0, [pc, #84]	; (80006a8 <collectSoftwareInfo+0x64>)
 8000654:	f7ff ff74 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000658:	210f      	movs	r1, #15
 800065a:	4814      	ldr	r0, [pc, #80]	; (80006ac <collectSoftwareInfo+0x68>)
 800065c:	f7ff ff70 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000660:	210c      	movs	r1, #12
 8000662:	4813      	ldr	r0, [pc, #76]	; (80006b0 <collectSoftwareInfo+0x6c>)
 8000664:	f7ff ff6c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000668:	210d      	movs	r1, #13
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <collectSoftwareInfo+0x70>)
 800066c:	f7ff ff68 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000670:	2129      	movs	r1, #41	; 0x29
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <collectSoftwareInfo+0x74>)
 8000674:	f7ff ff64 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000678:	210f      	movs	r1, #15
 800067a:	4810      	ldr	r0, [pc, #64]	; (80006bc <collectSoftwareInfo+0x78>)
 800067c:	f7ff ff60 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000680:	210c      	movs	r1, #12
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <collectSoftwareInfo+0x7c>)
 8000684:	f7ff ff5c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000688:	210f      	movs	r1, #15
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <collectSoftwareInfo+0x80>)
 800068c:	f7ff ff58 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000690:	2109      	movs	r1, #9
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <collectSoftwareInfo+0x84>)
 8000694:	f7ff ff54 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);
 8000698:	2101      	movs	r1, #1
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <collectSoftwareInfo+0x88>)
 800069c:	f7ff ff50 	bl	8000540 <uartTransmit>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	08005e0c 	.word	0x08005e0c
 80006a8:	08005e1c 	.word	0x08005e1c
 80006ac:	08005e24 	.word	0x08005e24
 80006b0:	08005e34 	.word	0x08005e34
 80006b4:	08005e40 	.word	0x08005e40
 80006b8:	08005e50 	.word	0x08005e50
 80006bc:	08005e7c 	.word	0x08005e7c
 80006c0:	08005e8c 	.word	0x08005e8c
 80006c4:	08005e98 	.word	0x08005e98
 80006c8:	08005ea8 	.word	0x08005ea8
 80006cc:	08005eb4 	.word	0x08005eb4

080006d0 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80006d6:	2113      	movs	r1, #19
 80006d8:	483b      	ldr	r0, [pc, #236]	; (80007c8 <collectHardwareInfo+0xf8>)
 80006da:	f7ff ff31 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80006de:	f001 fb85 	bl	8001dec <HAL_GetDEVID>
 80006e2:	4603      	mov	r3, r0
 80006e4:	210a      	movs	r1, #10
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff3e 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80006ec:	2115      	movs	r1, #21
 80006ee:	4837      	ldr	r0, [pc, #220]	; (80007cc <collectHardwareInfo+0xfc>)
 80006f0:	f7ff ff26 	bl	8000540 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80006f4:	f001 fb6e 	bl	8001dd4 <HAL_GetREVID>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f242 0201 	movw	r2, #8193	; 0x2001
 80006fe:	4293      	cmp	r3, r2
 8000700:	d016      	beq.n	8000730 <collectHardwareInfo+0x60>
 8000702:	f242 0201 	movw	r2, #8193	; 0x2001
 8000706:	4293      	cmp	r3, r2
 8000708:	d817      	bhi.n	800073a <collectHardwareInfo+0x6a>
 800070a:	f241 0201 	movw	r2, #4097	; 0x1001
 800070e:	4293      	cmp	r3, r2
 8000710:	d004      	beq.n	800071c <collectHardwareInfo+0x4c>
 8000712:	f241 0203 	movw	r2, #4099	; 0x1003
 8000716:	4293      	cmp	r3, r2
 8000718:	d005      	beq.n	8000726 <collectHardwareInfo+0x56>
 800071a:	e00e      	b.n	800073a <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 800071c:	2101      	movs	r1, #1
 800071e:	482c      	ldr	r0, [pc, #176]	; (80007d0 <collectHardwareInfo+0x100>)
 8000720:	f7ff ff0e 	bl	8000540 <uartTransmit>
			break;
 8000724:	e011      	b.n	800074a <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000726:	2101      	movs	r1, #1
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <collectHardwareInfo+0x104>)
 800072a:	f7ff ff09 	bl	8000540 <uartTransmit>
			break;
 800072e:	e00c      	b.n	800074a <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000730:	2101      	movs	r1, #1
 8000732:	4829      	ldr	r0, [pc, #164]	; (80007d8 <collectHardwareInfo+0x108>)
 8000734:	f7ff ff04 	bl	8000540 <uartTransmit>
			break;
 8000738:	e007      	b.n	800074a <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800073a:	f001 fb4b 	bl	8001dd4 <HAL_GetREVID>
 800073e:	4603      	mov	r3, r0
 8000740:	210a      	movs	r1, #10
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff10 	bl	8000568 <uartTransmitNumber>
			break;
 8000748:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 800074a:	2113      	movs	r1, #19
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <collectHardwareInfo+0x10c>)
 800074e:	f7ff fef7 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000752:	f002 fddb 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8000756:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <collectHardwareInfo+0x110>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	0c9b      	lsrs	r3, r3, #18
 8000762:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000764:	210a      	movs	r1, #10
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff fefe 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 800076c:	2104      	movs	r1, #4
 800076e:	481d      	ldr	r0, [pc, #116]	; (80007e4 <collectHardwareInfo+0x114>)
 8000770:	f7ff fee6 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000774:	210f      	movs	r1, #15
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <collectHardwareInfo+0x118>)
 8000778:	f7ff fee2 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 800077c:	f001 fb44 	bl	8001e08 <HAL_GetUIDw0>
 8000780:	4603      	mov	r3, r0
 8000782:	2110      	movs	r1, #16
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff feef 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 800078a:	2101      	movs	r1, #1
 800078c:	4817      	ldr	r0, [pc, #92]	; (80007ec <collectHardwareInfo+0x11c>)
 800078e:	f7ff fed7 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000792:	f001 fb45 	bl	8001e20 <HAL_GetUIDw1>
 8000796:	4603      	mov	r3, r0
 8000798:	2110      	movs	r1, #16
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fee4 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80007a0:	2101      	movs	r1, #1
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <collectHardwareInfo+0x11c>)
 80007a4:	f7ff fecc 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 80007a8:	f001 fb46 	bl	8001e38 <HAL_GetUIDw2>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2110      	movs	r1, #16
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fed9 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80007b6:	2101      	movs	r1, #1
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <collectHardwareInfo+0x120>)
 80007ba:	f7ff fec1 	bl	8000540 <uartTransmit>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	08005eb8 	.word	0x08005eb8
 80007cc:	08005ecc 	.word	0x08005ecc
 80007d0:	08005ee4 	.word	0x08005ee4
 80007d4:	08005ee8 	.word	0x08005ee8
 80007d8:	08005eec 	.word	0x08005eec
 80007dc:	08005ef0 	.word	0x08005ef0
 80007e0:	431bde83 	.word	0x431bde83
 80007e4:	08005f04 	.word	0x08005f04
 80007e8:	08005f0c 	.word	0x08005f0c
 80007ec:	08005f1c 	.word	0x08005f1c
 80007f0:	08005eb4 	.word	0x08005eb4

080007f4 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80007f8:	2111      	movs	r1, #17
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <collectSystemInfo+0x34>)
 80007fc:	f7ff fea0 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000800:	f7ff ff66 	bl	80006d0 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000804:	2111      	movs	r1, #17
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <collectSystemInfo+0x38>)
 8000808:	f7ff fe9a 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 800080c:	f7ff ff1a 	bl	8000644 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000810:	2113      	movs	r1, #19
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <collectSystemInfo+0x3c>)
 8000814:	f7ff fe94 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000818:	f7ff fec6 	bl	80005a8 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 800081c:	2103      	movs	r1, #3
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <collectSystemInfo+0x40>)
 8000820:	f7ff fe8e 	bl	8000540 <uartTransmit>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08005f20 	.word	0x08005f20
 800082c:	08005f34 	.word	0x08005f34
 8000830:	08005f48 	.word	0x08005f48
 8000834:	08005f5c 	.word	0x08005f5c

08000838 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800083e:	2300      	movs	r3, #0
 8000840:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <readResetSource+0xa0>)
 8000844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <readResetSource+0xa0>)
 8000856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000858:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	3302      	adds	r3, #2
 8000864:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <readResetSource+0xa0>)
 8000868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800086a:	2b00      	cmp	r3, #0
 800086c:	da02      	bge.n	8000874 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	3304      	adds	r3, #4
 8000872:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <readResetSource+0xa0>)
 8000876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3308      	adds	r3, #8
 8000884:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <readResetSource+0xa0>)
 8000888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800088a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	3310      	adds	r3, #16
 8000896:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <readResetSource+0xa0>)
 800089a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	3320      	adds	r3, #32
 80008a8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <readResetSource+0xa0>)
 80008ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	3340      	adds	r3, #64	; 0x40
 80008ba:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <readResetSource+0xa0>)
 80008be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <readResetSource+0xa0>)
 80008c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008c6:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80008e6:	2106      	movs	r1, #6
 80008e8:	482a      	ldr	r0, [pc, #168]	; (8000994 <printResetSource+0xb8>)
 80008ea:	f7ff fe29 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d104      	bne.n	80008fe <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80008f4:	210f      	movs	r1, #15
 80008f6:	4828      	ldr	r0, [pc, #160]	; (8000998 <printResetSource+0xbc>)
 80008f8:	f7ff fe22 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80008fc:	e046      	b.n	800098c <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000908:	2118      	movs	r1, #24
 800090a:	4824      	ldr	r0, [pc, #144]	; (800099c <printResetSource+0xc0>)
 800090c:	f7ff fe18 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 800091a:	2116      	movs	r1, #22
 800091c:	4820      	ldr	r0, [pc, #128]	; (80009a0 <printResetSource+0xc4>)
 800091e:	f7ff fe0f 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 800092c:	210a      	movs	r1, #10
 800092e:	481d      	ldr	r0, [pc, #116]	; (80009a4 <printResetSource+0xc8>)
 8000930:	f7ff fe06 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800093e:	2110      	movs	r1, #16
 8000940:	4819      	ldr	r0, [pc, #100]	; (80009a8 <printResetSource+0xcc>)
 8000942:	f7ff fdfd 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000950:	210f      	movs	r1, #15
 8000952:	4816      	ldr	r0, [pc, #88]	; (80009ac <printResetSource+0xd0>)
 8000954:	f7ff fdf4 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 0320 	and.w	r3, r3, #32
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000962:	210f      	movs	r1, #15
 8000964:	4812      	ldr	r0, [pc, #72]	; (80009b0 <printResetSource+0xd4>)
 8000966:	f7ff fdeb 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000970:	2b00      	cmp	r3, #0
 8000972:	d003      	beq.n	800097c <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000974:	210a      	movs	r1, #10
 8000976:	480f      	ldr	r0, [pc, #60]	; (80009b4 <printResetSource+0xd8>)
 8000978:	f7ff fde2 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	da03      	bge.n	800098c <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000984:	2105      	movs	r1, #5
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <printResetSource+0xdc>)
 8000988:	f7ff fdda 	bl	8000540 <uartTransmit>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08005f60 	.word	0x08005f60
 8000998:	08005f68 	.word	0x08005f68
 800099c:	08005f78 	.word	0x08005f78
 80009a0:	08005f94 	.word	0x08005f94
 80009a4:	08005fac 	.word	0x08005fac
 80009a8:	08005fb8 	.word	0x08005fb8
 80009ac:	08005fcc 	.word	0x08005fcc
 80009b0:	08005fdc 	.word	0x08005fdc
 80009b4:	08005fec 	.word	0x08005fec
 80009b8:	08005ff8 	.word	0x08005ff8

080009bc <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 80009c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c4:	4850      	ldr	r0, [pc, #320]	; (8000b08 <readall_inputs+0x14c>)
 80009c6:	f002 f885 	bl	8002ad4 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	b2d9      	uxtb	r1, r3
 80009d2:	4a4e      	ldr	r2, [pc, #312]	; (8000b0c <readall_inputs+0x150>)
 80009d4:	7813      	ldrb	r3, [r2, #0]
 80009d6:	f361 0300 	bfi	r3, r1, #0, #1
 80009da:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80009dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e0:	484b      	ldr	r0, [pc, #300]	; (8000b10 <readall_inputs+0x154>)
 80009e2:	f002 f877 	bl	8002ad4 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	b2d9      	uxtb	r1, r3
 80009ee:	4a47      	ldr	r2, [pc, #284]	; (8000b0c <readall_inputs+0x150>)
 80009f0:	7813      	ldrb	r3, [r2, #0]
 80009f2:	f361 0341 	bfi	r3, r1, #1, #1
 80009f6:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 80009f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fc:	4845      	ldr	r0, [pc, #276]	; (8000b14 <readall_inputs+0x158>)
 80009fe:	f002 f869 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	b2d9      	uxtb	r1, r3
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <readall_inputs+0x150>)
 8000a0c:	7813      	ldrb	r3, [r2, #0]
 8000a0e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a12:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a18:	483e      	ldr	r0, [pc, #248]	; (8000b14 <readall_inputs+0x158>)
 8000a1a:	f002 f85b 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	b2d9      	uxtb	r1, r3
 8000a26:	4a39      	ldr	r2, [pc, #228]	; (8000b0c <readall_inputs+0x150>)
 8000a28:	7813      	ldrb	r3, [r2, #0]
 8000a2a:	f361 1304 	bfi	r3, r1, #4, #1
 8000a2e:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000a30:	2101      	movs	r1, #1
 8000a32:	4838      	ldr	r0, [pc, #224]	; (8000b14 <readall_inputs+0x158>)
 8000a34:	f002 f84e 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	b2d9      	uxtb	r1, r3
 8000a40:	4a32      	ldr	r2, [pc, #200]	; (8000b0c <readall_inputs+0x150>)
 8000a42:	7813      	ldrb	r3, [r2, #0]
 8000a44:	f361 1345 	bfi	r3, r1, #5, #1
 8000a48:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	4831      	ldr	r0, [pc, #196]	; (8000b14 <readall_inputs+0x158>)
 8000a4e:	f002 f841 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	b2d9      	uxtb	r1, r3
 8000a5a:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <readall_inputs+0x150>)
 8000a5c:	7813      	ldrb	r3, [r2, #0]
 8000a5e:	f361 1386 	bfi	r3, r1, #6, #1
 8000a62:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a68:	4827      	ldr	r0, [pc, #156]	; (8000b08 <readall_inputs+0x14c>)
 8000a6a:	f002 f833 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	b2d9      	uxtb	r1, r3
 8000a76:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <readall_inputs+0x15c>)
 8000a78:	7813      	ldrb	r3, [r2, #0]
 8000a7a:	f361 0300 	bfi	r3, r1, #0, #1
 8000a7e:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000a80:	2108      	movs	r1, #8
 8000a82:	4821      	ldr	r0, [pc, #132]	; (8000b08 <readall_inputs+0x14c>)
 8000a84:	f002 f826 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	b2d9      	uxtb	r1, r3
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <readall_inputs+0x15c>)
 8000a92:	7813      	ldrb	r3, [r2, #0]
 8000a94:	f361 0341 	bfi	r3, r1, #1, #1
 8000a98:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	481a      	ldr	r0, [pc, #104]	; (8000b08 <readall_inputs+0x14c>)
 8000a9e:	f002 f819 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	b2d9      	uxtb	r1, r3
 8000aaa:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <readall_inputs+0x15c>)
 8000aac:	7813      	ldrb	r3, [r2, #0]
 8000aae:	f361 0382 	bfi	r3, r1, #2, #1
 8000ab2:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000ab4:	2110      	movs	r1, #16
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <readall_inputs+0x14c>)
 8000ab8:	f002 f80c 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	b2d9      	uxtb	r1, r3
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <readall_inputs+0x15c>)
 8000ac6:	7813      	ldrb	r3, [r2, #0]
 8000ac8:	f361 03c3 	bfi	r3, r1, #3, #1
 8000acc:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad2:	4812      	ldr	r0, [pc, #72]	; (8000b1c <readall_inputs+0x160>)
 8000ad4:	f001 fffe 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	b2d9      	uxtb	r1, r3
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <readall_inputs+0x15c>)
 8000ae2:	7813      	ldrb	r3, [r2, #0]
 8000ae4:	f361 1304 	bfi	r3, r1, #4, #1
 8000ae8:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8000aea:	2104      	movs	r1, #4
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <readall_inputs+0x160>)
 8000aee:	f001 fff1 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	b2d9      	uxtb	r1, r3
 8000afa:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <readall_inputs+0x164>)
 8000afc:	7813      	ldrb	r3, [r2, #0]
 8000afe:	f361 0300 	bfi	r3, r1, #0, #1
 8000b02:	7013      	strb	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	20000030 	.word	0x20000030
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	40020000 	.word	0x40020000
 8000b18:	20000038 	.word	0x20000038
 8000b1c:	40021400 	.word	0x40021400
 8000b20:	20000034 	.word	0x20000034

08000b24 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	481b      	ldr	r0, [pc, #108]	; (8000b9c <testPCB_Leds+0x78>)
 8000b2e:	f001 ffe9 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b36:	f001 f91f 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	4817      	ldr	r0, [pc, #92]	; (8000b9c <testPCB_Leds+0x78>)
 8000b40:	f001 ffe0 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b48:	f001 f916 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2104      	movs	r1, #4
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <testPCB_Leds+0x78>)
 8000b52:	f001 ffd7 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5a:	f001 f90d 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2104      	movs	r1, #4
 8000b62:	480e      	ldr	r0, [pc, #56]	; (8000b9c <testPCB_Leds+0x78>)
 8000b64:	f001 ffce 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6c:	f001 f904 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <testPCB_Leds+0x78>)
 8000b78:	f001 ffc4 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b80:	f001 f8fa 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <testPCB_Leds+0x78>)
 8000b8c:	f001 ffba 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b94:	f001 f8f0 	bl	8001d78 <HAL_Delay>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <MX_ADC1_Init+0x9c>)
 8000bb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <MX_ADC1_Init+0xa0>)
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000c02:	f001 f925 	bl	8001e50 <HAL_ADC_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c0c:	f000 fc34 	bl	8001478 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c10:	2304      	movs	r3, #4
 8000c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_ADC1_Init+0x98>)
 8000c22:	f001 f959 	bl	8001ed8 <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c2c:	f000 fc24 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000003c 	.word	0x2000003c
 8000c3c:	40012000 	.word	0x40012000
 8000c40:	0f000001 	.word	0x0f000001

08000c44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <HAL_ADC_MspInit+0x74>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d123      	bne.n	8000cae <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_ADC_MspInit+0x78>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <HAL_ADC_MspInit+0x78>)
 8000c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_ADC_MspInit+0x78>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_ADC_MspInit+0x78>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_ADC_MspInit+0x78>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_ADC_MspInit+0x78>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8000c96:	23f8      	movs	r3, #248	; 0xf8
 8000c98:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <HAL_ADC_MspInit+0x7c>)
 8000caa:	f001 fd67 	bl	800277c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40012000 	.word	0x40012000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000cca:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <MX_CAN1_Init+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000cd0:	2210      	movs	r2, #16
 8000cd2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000ce2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ce6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_CAN1_Init+0x64>)
 8000d14:	f001 fb24 	bl	8002360 <HAL_CAN_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000d1e:	f000 fbab 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000ac 	.word	0x200000ac
 8000d2c:	40006400 	.word	0x40006400

08000d30 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <MX_CAN3_Init+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d3c:	2206      	movs	r2, #6
 8000d3e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d4e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d52:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d5a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_CAN3_Init+0x64>)
 8000d82:	f001 faed 	bl	8002360 <HAL_CAN_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000d8c:	f000 fb74 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000084 	.word	0x20000084
 8000d98:	40003400 	.word	0x40003400

08000d9c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <HAL_CAN_MspInit+0x12c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d131      	bne.n	8000e22 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000dbe:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <HAL_CAN_MspInit+0x130>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a41      	ldr	r2, [pc, #260]	; (8000ecc <HAL_CAN_MspInit+0x130>)
 8000dc6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000dc8:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <HAL_CAN_MspInit+0x130>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d10b      	bne.n	8000de8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dda:	6413      	str	r3, [r2, #64]	; 0x40
 8000ddc:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de4:	623b      	str	r3, [r7, #32]
 8000de6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a38      	ldr	r2, [pc, #224]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e00:	2303      	movs	r3, #3
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e10:	2309      	movs	r3, #9
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	482e      	ldr	r0, [pc, #184]	; (8000ed4 <HAL_CAN_MspInit+0x138>)
 8000e1c:	f001 fcae 	bl	800277c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000e20:	e04e      	b.n	8000ec0 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a2c      	ldr	r2, [pc, #176]	; (8000ed8 <HAL_CAN_MspInit+0x13c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d149      	bne.n	8000ec0 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_CAN_MspInit+0x130>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_CAN_MspInit+0x130>)
 8000e64:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_CAN_MspInit+0x130>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d10b      	bne.n	8000e86 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_CAN_MspInit+0x134>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000e9e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <HAL_CAN_MspInit+0x140>)
 8000ebc:	f001 fc5e 	bl	800277c <HAL_GPIO_Init>
}
 8000ec0:	bf00      	nop
 8000ec2:	3738      	adds	r7, #56	; 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40006400 	.word	0x40006400
 8000ecc:	20000028 	.word	0x20000028
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40003400 	.word	0x40003400
 8000edc:	40020000 	.word	0x40020000

08000ee0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4bb6      	ldr	r3, [pc, #728]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4ab5      	ldr	r2, [pc, #724]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4bb3      	ldr	r3, [pc, #716]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4bb0      	ldr	r3, [pc, #704]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4aaf      	ldr	r2, [pc, #700]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4bad      	ldr	r3, [pc, #692]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	4baa      	ldr	r3, [pc, #680]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4aa9      	ldr	r2, [pc, #676]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4ba7      	ldr	r3, [pc, #668]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	4ba4      	ldr	r3, [pc, #656]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4aa3      	ldr	r2, [pc, #652]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4ba1      	ldr	r3, [pc, #644]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b9e      	ldr	r3, [pc, #632]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a9d      	ldr	r2, [pc, #628]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b9b      	ldr	r3, [pc, #620]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b98      	ldr	r3, [pc, #608]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a97      	ldr	r2, [pc, #604]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b95      	ldr	r3, [pc, #596]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f86:	4b92      	ldr	r3, [pc, #584]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a91      	ldr	r2, [pc, #580]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b8f      	ldr	r3, [pc, #572]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9e:	4b8c      	ldr	r3, [pc, #560]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a8b      	ldr	r2, [pc, #556]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b89      	ldr	r3, [pc, #548]	; (80011d0 <MX_GPIO_Init+0x2f0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f248 0187 	movw	r1, #32903	; 0x8087
 8000fbc:	4885      	ldr	r0, [pc, #532]	; (80011d4 <MX_GPIO_Init+0x2f4>)
 8000fbe:	f001 fda1 	bl	8002b04 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	4883      	ldr	r0, [pc, #524]	; (80011d8 <MX_GPIO_Init+0x2f8>)
 8000fca:	f001 fd9b 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f242 0102 	movw	r1, #8194	; 0x2002
 8000fd4:	4881      	ldr	r0, [pc, #516]	; (80011dc <MX_GPIO_Init+0x2fc>)
 8000fd6:	f001 fd95 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f240 6102 	movw	r1, #1538	; 0x602
 8000fe0:	487f      	ldr	r0, [pc, #508]	; (80011e0 <MX_GPIO_Init+0x300>)
 8000fe2:	f001 fd8f 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f244 0184 	movw	r1, #16516	; 0x4084
 8000fec:	487d      	ldr	r0, [pc, #500]	; (80011e4 <MX_GPIO_Init+0x304>)
 8000fee:	f001 fd89 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8000ff8:	487b      	ldr	r0, [pc, #492]	; (80011e8 <MX_GPIO_Init+0x308>)
 8000ffa:	f001 fd83 	bl	8002b04 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2118      	movs	r1, #24
 8001002:	487a      	ldr	r0, [pc, #488]	; (80011ec <MX_GPIO_Init+0x30c>)
 8001004:	f001 fd7e 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001008:	f248 0387 	movw	r3, #32903	; 0x8087
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	486c      	ldr	r0, [pc, #432]	; (80011d4 <MX_GPIO_Init+0x2f4>)
 8001022:	f001 fbab 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001026:	f44f 739c 	mov.w	r3, #312	; 0x138
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	4866      	ldr	r0, [pc, #408]	; (80011d4 <MX_GPIO_Init+0x2f4>)
 800103c:	f001 fb9e 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001040:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001046:	2303      	movs	r3, #3
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	485f      	ldr	r0, [pc, #380]	; (80011d4 <MX_GPIO_Init+0x2f4>)
 8001056:	f001 fb91 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800105a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4859      	ldr	r0, [pc, #356]	; (80011d8 <MX_GPIO_Init+0x2f8>)
 8001074:	f001 fb82 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001078:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	4852      	ldr	r0, [pc, #328]	; (80011d8 <MX_GPIO_Init+0x2f8>)
 800108e:	f001 fb75 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001092:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001098:	2303      	movs	r3, #3
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	484d      	ldr	r0, [pc, #308]	; (80011dc <MX_GPIO_Init+0x2fc>)
 80010a8:	f001 fb68 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80010ac:	f242 0302 	movw	r3, #8194	; 0x2002
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4845      	ldr	r0, [pc, #276]	; (80011dc <MX_GPIO_Init+0x2fc>)
 80010c6:	f001 fb59 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 80010ca:	f248 0304 	movw	r3, #32772	; 0x8004
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	483f      	ldr	r0, [pc, #252]	; (80011dc <MX_GPIO_Init+0x2fc>)
 80010e0:	f001 fb4c 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80010e4:	f641 0305 	movw	r3, #6149	; 0x1805
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	4619      	mov	r1, r3
 80010f8:	4839      	ldr	r0, [pc, #228]	; (80011e0 <MX_GPIO_Init+0x300>)
 80010fa:	f001 fb3f 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 80010fe:	f240 6302 	movw	r3, #1538	; 0x602
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4832      	ldr	r0, [pc, #200]	; (80011e0 <MX_GPIO_Init+0x300>)
 8001118:	f001 fb30 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800111c:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	482c      	ldr	r0, [pc, #176]	; (80011e4 <MX_GPIO_Init+0x304>)
 8001132:	f001 fb23 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001136:	f244 0384 	movw	r3, #16516	; 0x4084
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <MX_GPIO_Init+0x304>)
 8001150:	f001 fb14 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8001154:	f240 1343 	movw	r3, #323	; 0x143
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115a:	2303      	movs	r3, #3
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	481f      	ldr	r0, [pc, #124]	; (80011e8 <MX_GPIO_Init+0x308>)
 800116a:	f001 fb07 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 800116e:	f240 7304 	movw	r3, #1796	; 0x704
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001174:	2303      	movs	r3, #3
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	481a      	ldr	r0, [pc, #104]	; (80011ec <MX_GPIO_Init+0x30c>)
 8001184:	f001 fafa 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_GPIO_Init+0x30c>)
 800119e:	f001 faed 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80011a2:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MX_GPIO_Init+0x308>)
 80011bc:	f001 fade 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80011c0:	2318      	movs	r3, #24
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e00f      	b.n	80011f0 <MX_GPIO_Init+0x310>
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40021400 	.word	0x40021400
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_GPIO_Init+0x328>)
 80011fa:	f001 fabf 	bl	800277c <HAL_GPIO_Init>

}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020c00 	.word	0x40020c00

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f000 fd54 	bl	8001cbe <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint16_t count = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121a:	f000 f885 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121e:	f7ff fe5f 	bl	8000ee0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001222:	f7ff fd4f 	bl	8000cc4 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001226:	f000 f96d 	bl	8001504 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 800122a:	f000 fcab 	bl	8001b84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800122e:	f7ff fcb7 	bl	8000ba0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001232:	f000 faad 	bl	8001790 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001236:	f000 fb31 	bl	800189c <MX_TIM4_Init>
  MX_SPI1_Init();
 800123a:	f000 f925 	bl	8001488 <MX_SPI1_Init>
  MX_CAN3_Init();
 800123e:	f7ff fd77 	bl	8000d30 <MX_CAN3_Init>
  MX_TIM6_Init();
 8001242:	f000 fba7 	bl	8001994 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001246:	f7ff faf7 	bl	8000838 <readResetSource>
 800124a:	4603      	mov	r3, r0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fb45 	bl	80008dc <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001252:	213a      	movs	r1, #58	; 0x3a
 8001254:	482d      	ldr	r0, [pc, #180]	; (800130c <main+0x100>)
 8001256:	f7ff f973 	bl	8000540 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 800125a:	f7ff facb 	bl	80007f4 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 800125e:	f7ff fc61 	bl	8000b24 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001262:	f7ff fbab 	bl	80009bc <readall_inputs>

  	// Start timer
  	HAL_TIM_Base_Start(&htim6);
 8001266:	482a      	ldr	r0, [pc, #168]	; (8001310 <main+0x104>)
 8001268:	f002 fe64 	bl	8003f34 <HAL_TIM_Base_Start>

	// Leds Testen// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	4828      	ldr	r0, [pc, #160]	; (8001314 <main+0x108>)
 8001272:	f001 fc47 	bl	8002b04 <HAL_GPIO_WritePin>
#define TEST_BLUE_LED				"\nTeste Blaue LED\n"
uartTransmit(TEST_BLUE_LED, sizeof(TEST_BLUE_LED));
 8001276:	2112      	movs	r1, #18
 8001278:	4827      	ldr	r0, [pc, #156]	; (8001318 <main+0x10c>)
 800127a:	f7ff f961 	bl	8000540 <uartTransmit>
    HAL_Delay(1000);
 800127e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001282:	f000 fd79 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4822      	ldr	r0, [pc, #136]	; (8001314 <main+0x108>)
 800128c:	f001 fc3a 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001294:	f000 fd70 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2104      	movs	r1, #4
 800129c:	481d      	ldr	r0, [pc, #116]	; (8001314 <main+0x108>)
 800129e:	f001 fc31 	bl	8002b04 <HAL_GPIO_WritePin>
#define TEST_GREEN_LED				"\nTeste Gruene Led\n"
uartTransmit(TEST_GREEN_LED, sizeof(TEST_GREEN_LED));
 80012a2:	2113      	movs	r1, #19
 80012a4:	481d      	ldr	r0, [pc, #116]	; (800131c <main+0x110>)
 80012a6:	f7ff f94b 	bl	8000540 <uartTransmit>
    HAL_Delay(1000);
 80012aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ae:	f000 fd63 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2104      	movs	r1, #4
 80012b6:	4817      	ldr	r0, [pc, #92]	; (8001314 <main+0x108>)
 80012b8:	f001 fc24 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80012bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c0:	f000 fd5a 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ca:	4812      	ldr	r0, [pc, #72]	; (8001314 <main+0x108>)
 80012cc:	f001 fc1a 	bl	8002b04 <HAL_GPIO_WritePin>
#define TEST_RED_LED				"\nTeste Rote Led\n"
uartTransmit(TEST_RED_LED, sizeof(TEST_RED_LED));
 80012d0:	2111      	movs	r1, #17
 80012d2:	4813      	ldr	r0, [pc, #76]	; (8001320 <main+0x114>)
 80012d4:	f7ff f934 	bl	8000540 <uartTransmit>
    HAL_Delay(1000);
 80012d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012dc:	f000 fd4c 	bl	8001d78 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <main+0x108>)
 80012e8:	f001 fc0c 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80012ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f0:	f000 fd42 	bl	8001d78 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <main+0x118>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d1fa      	bne.n	80012f4 <main+0xe8>
		{
			count++;													// Zaehler count hochzaehlen
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	3301      	adds	r3, #1
 8001302:	80fb      	strh	r3, [r7, #6]
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <main+0x118>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
		if (millisekunden_flag_1 == 1)
 800130a:	e7f3      	b.n	80012f4 <main+0xe8>
 800130c:	08006000 	.word	0x08006000
 8001310:	200001e8 	.word	0x200001e8
 8001314:	40020400 	.word	0x40020400
 8001318:	0800603c 	.word	0x0800603c
 800131c:	08006050 	.word	0x08006050
 8001320:	08006064 	.word	0x08006064
 8001324:	2000002c 	.word	0x2000002c

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0b8      	sub	sp, #224	; 0xe0
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001332:	2234      	movs	r2, #52	; 0x34
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fcfc 	bl	8005d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	2290      	movs	r2, #144	; 0x90
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f004 fced 	bl	8005d34 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <SystemClock_Config+0x11c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a39      	ldr	r2, [pc, #228]	; (8001444 <SystemClock_Config+0x11c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <SystemClock_Config+0x11c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <SystemClock_Config+0x120>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a34      	ldr	r2, [pc, #208]	; (8001448 <SystemClock_Config+0x120>)
 8001378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <SystemClock_Config+0x120>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138a:	2301      	movs	r3, #1
 800138c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013a6:	2319      	movs	r3, #25
 80013a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80013ac:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80013b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80013ba:	2308      	movs	r3, #8
 80013bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fc04 	bl	8002bd8 <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013d6:	f000 f84f 	bl	8001478 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013da:	f001 fbad 	bl	8002b38 <HAL_PWREx_EnableOverDrive>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013e4:	f000 f848 	bl	8001478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	230f      	movs	r3, #15
 80013ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800140a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800140e:	2107      	movs	r1, #7
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fe8f 	bl	8003134 <HAL_RCC_ClockConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800141c:	f000 f82c 	bl	8001478 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001424:	2300      	movs	r3, #0
 8001426:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f857 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8001438:	f000 f81e 	bl	8001478 <Error_Handler>
  }
}
 800143c:	bf00      	nop
 800143e:	37e0      	adds	r7, #224	; 0xe0
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d102      	bne.n	8001462 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
	}
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200001e8 	.word	0x200001e8
 8001474:	2000002c 	.word	0x2000002c

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_SPI1_Init+0x74>)
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <MX_SPI1_Init+0x78>)
 8001490:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_SPI1_Init+0x74>)
 8001494:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001498:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_SPI1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_SPI1_Init+0x74>)
 80014a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_SPI1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_SPI1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_SPI1_Init+0x74>)
 80014b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_SPI1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_SPI1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_SPI1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_SPI1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_SPI1_Init+0x74>)
 80014d6:	2207      	movs	r2, #7
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_SPI1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_SPI1_Init+0x74>)
 80014e2:	2208      	movs	r2, #8
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_SPI1_Init+0x74>)
 80014e8:	f002 fc22 	bl	8003d30 <HAL_SPI_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f7ff ffc1 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000138 	.word	0x20000138
 8001500:	40013000 	.word	0x40013000

08001504 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_SPI4_Init+0x74>)
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <MX_SPI4_Init+0x78>)
 800150c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_SPI4_Init+0x74>)
 8001510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001514:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_SPI4_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_SPI4_Init+0x74>)
 800151e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001522:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_SPI4_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <MX_SPI4_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_SPI4_Init+0x74>)
 8001532:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001536:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_SPI4_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_SPI4_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_SPI4_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_SPI4_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_SPI4_Init+0x74>)
 8001552:	2207      	movs	r2, #7
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_SPI4_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_SPI4_Init+0x74>)
 800155e:	2208      	movs	r2, #8
 8001560:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_SPI4_Init+0x74>)
 8001564:	f002 fbe4 	bl	8003d30 <HAL_SPI_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800156e:	f7ff ff83 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000d4 	.word	0x200000d4
 800157c:	40013400 	.word	0x40013400

08001580 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	; 0x30
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3d      	ldr	r2, [pc, #244]	; (8001694 <HAL_SPI_MspInit+0x114>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d145      	bne.n	800162e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_SPI_MspInit+0x118>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <HAL_SPI_MspInit+0x118>)
 80015a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_SPI_MspInit+0x118>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_SPI_MspInit+0x118>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a36      	ldr	r2, [pc, #216]	; (8001698 <HAL_SPI_MspInit+0x118>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_SPI_MspInit+0x118>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_SPI_MspInit+0x118>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a30      	ldr	r2, [pc, #192]	; (8001698 <HAL_SPI_MspInit+0x118>)
 80015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_SPI_MspInit+0x118>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015fa:	2305      	movs	r3, #5
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4825      	ldr	r0, [pc, #148]	; (800169c <HAL_SPI_MspInit+0x11c>)
 8001606:	f001 f8b9 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 800160a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800161c:	2305      	movs	r3, #5
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	481e      	ldr	r0, [pc, #120]	; (80016a0 <HAL_SPI_MspInit+0x120>)
 8001628:	f001 f8a8 	bl	800277c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800162c:	e02d      	b.n	800168a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_SPI_MspInit+0x124>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d128      	bne.n	800168a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_SPI_MspInit+0x118>)
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	4a16      	ldr	r2, [pc, #88]	; (8001698 <HAL_SPI_MspInit+0x118>)
 800163e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001642:	6453      	str	r3, [r2, #68]	; 0x44
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_SPI_MspInit+0x118>)
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_SPI_MspInit+0x118>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_SPI_MspInit+0x118>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_SPI_MspInit+0x118>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001668:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800167a:	2305      	movs	r3, #5
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <HAL_SPI_MspInit+0x128>)
 8001686:	f001 f879 	bl	800277c <HAL_GPIO_Init>
}
 800168a:	bf00      	nop
 800168c:	3730      	adds	r7, #48	; 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40013000 	.word	0x40013000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021800 	.word	0x40021800
 80016a4:	40013400 	.word	0x40013400
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_MspInit+0x44>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_MspInit+0x44>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_MspInit+0x44>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_MspInit+0x44>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_MspInit+0x44>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 faf6 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM6_DAC_IRQHandler+0x10>)
 8001756:	f002 fd0b 	bl	8004170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200001e8 	.word	0x200001e8

08001764 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <SystemInit+0x28>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <SystemInit+0x28>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <SystemInit+0x28>)
 800177a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800177e:	609a      	str	r2, [r3, #8]
#endif
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017be:	4b35      	ldr	r3, [pc, #212]	; (8001894 <MX_TIM1_Init+0x104>)
 80017c0:	4a35      	ldr	r2, [pc, #212]	; (8001898 <MX_TIM1_Init+0x108>)
 80017c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <MX_TIM1_Init+0x104>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <MX_TIM1_Init+0x104>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <MX_TIM1_Init+0x104>)
 80017d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <MX_TIM1_Init+0x104>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <MX_TIM1_Init+0x104>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <MX_TIM1_Init+0x104>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80017ea:	482a      	ldr	r0, [pc, #168]	; (8001894 <MX_TIM1_Init+0x104>)
 80017ec:	f002 fc69 	bl	80040c2 <HAL_TIM_IC_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80017f6:	f7ff fe3f 	bl	8001478 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80017fa:	2304      	movs	r3, #4
 80017fc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80017fe:	2350      	movs	r3, #80	; 0x50
 8001800:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	481f      	ldr	r0, [pc, #124]	; (8001894 <MX_TIM1_Init+0x104>)
 8001816:	f002 ff6f 	bl	80046f8 <HAL_TIM_SlaveConfigSynchro>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001820:	f7ff fe2a 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001828:	2301      	movs	r3, #1
 800182a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	4619      	mov	r1, r3
 800183c:	4815      	ldr	r0, [pc, #84]	; (8001894 <MX_TIM1_Init+0x104>)
 800183e:	f002 fdb6 	bl	80043ae <HAL_TIM_IC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001848:	f7ff fe16 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800184c:	2302      	movs	r3, #2
 800184e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2204      	movs	r2, #4
 800185a:	4619      	mov	r1, r3
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_TIM1_Init+0x104>)
 800185e:	f002 fda6 	bl	80043ae <HAL_TIM_IC_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001868:	f7ff fe06 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_TIM1_Init+0x104>)
 800187e:	f003 fcdd 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001888:	f7ff fdf6 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3730      	adds	r7, #48	; 0x30
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000234 	.word	0x20000234
 8001898:	40010000 	.word	0x40010000

0800189c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ae:	463b      	mov	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
 80018bc:	615a      	str	r2, [r3, #20]
 80018be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018c0:	4b32      	ldr	r3, [pc, #200]	; (800198c <MX_TIM4_Init+0xf0>)
 80018c2:	4a33      	ldr	r2, [pc, #204]	; (8001990 <MX_TIM4_Init+0xf4>)
 80018c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <MX_TIM4_Init+0xf0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b2f      	ldr	r3, [pc, #188]	; (800198c <MX_TIM4_Init+0xf0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <MX_TIM4_Init+0xf0>)
 80018d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <MX_TIM4_Init+0xf0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <MX_TIM4_Init+0xf0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018e6:	4829      	ldr	r0, [pc, #164]	; (800198c <MX_TIM4_Init+0xf0>)
 80018e8:	f002 fb94 	bl	8004014 <HAL_TIM_PWM_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80018f2:	f7ff fdc1 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	4821      	ldr	r0, [pc, #132]	; (800198c <MX_TIM4_Init+0xf0>)
 8001906:	f003 fc99 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001910:	f7ff fdb2 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001914:	2360      	movs	r3, #96	; 0x60
 8001916:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	4818      	ldr	r0, [pc, #96]	; (800198c <MX_TIM4_Init+0xf0>)
 800192c:	f002 fdd4 	bl	80044d8 <HAL_TIM_PWM_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001936:	f7ff fd9f 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	2204      	movs	r2, #4
 800193e:	4619      	mov	r1, r3
 8001940:	4812      	ldr	r0, [pc, #72]	; (800198c <MX_TIM4_Init+0xf0>)
 8001942:	f002 fdc9 	bl	80044d8 <HAL_TIM_PWM_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800194c:	f7ff fd94 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001950:	463b      	mov	r3, r7
 8001952:	2208      	movs	r2, #8
 8001954:	4619      	mov	r1, r3
 8001956:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_TIM4_Init+0xf0>)
 8001958:	f002 fdbe 	bl	80044d8 <HAL_TIM_PWM_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001962:	f7ff fd89 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001966:	463b      	mov	r3, r7
 8001968:	220c      	movs	r2, #12
 800196a:	4619      	mov	r1, r3
 800196c:	4807      	ldr	r0, [pc, #28]	; (800198c <MX_TIM4_Init+0xf0>)
 800196e:	f002 fdb3 	bl	80044d8 <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001978:	f7ff fd7e 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800197c:	4803      	ldr	r0, [pc, #12]	; (800198c <MX_TIM4_Init+0xf0>)
 800197e:	f000 f8c9 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000019c 	.word	0x2000019c
 8001990:	40000800 	.word	0x40000800

08001994 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <MX_TIM6_Init+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019ac:	221b      	movs	r2, #27
 80019ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80019bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019c6:	f002 fa5e 	bl	8003e86 <HAL_TIM_Base_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019d0:	f7ff fd52 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019e2:	f003 fc2b 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019ec:	f7ff fd44 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200001e8 	.word	0x200001e8
 80019fc:	40001000 	.word	0x40001000

08001a00 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_TIM_IC_MspInit+0x7c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d128      	bne.n	8001a74 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_TIM_IC_MspInit+0x80>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <HAL_TIM_IC_MspInit+0x80>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_TIM_IC_MspInit+0x80>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_TIM_IC_MspInit+0x80>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_TIM_IC_MspInit+0x80>)
 8001a40:	f043 0310 	orr.w	r3, r3, #16
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_TIM_IC_MspInit+0x80>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8001a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_TIM_IC_MspInit+0x84>)
 8001a70:	f000 fe84 	bl	800277c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_TIM_PWM_MspInit+0x38>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10b      	bne.n	8001ab2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40000800 	.word	0x40000800
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_TIM_Base_MspInit+0x44>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d113      	bne.n	8001b02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_TIM_Base_MspInit+0x48>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <HAL_TIM_Base_MspInit+0x48>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_TIM_Base_MspInit+0x48>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	2036      	movs	r0, #54	; 0x36
 8001af8:	f000 fe09 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001afc:	2036      	movs	r0, #54	; 0x36
 8001afe:	f000 fe22 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40001000 	.word	0x40001000
 8001b10:	40023800 	.word	0x40023800

08001b14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_TIM_MspPostInit+0x64>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d11c      	bne.n	8001b70 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 8001b4e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_TIM_MspPostInit+0x6c>)
 8001b6c:	f000 fe06 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40000800 	.word	0x40000800
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020c00 	.word	0x40020c00

08001b84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <MX_USART2_UART_Init+0x5c>)
 8001b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001b90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_USART2_UART_Init+0x58>)
 8001bc8:	f003 fbe4 	bl	8005394 <HAL_UART_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bd2:	f7ff fc51 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000280 	.word	0x20000280
 8001be0:	40004400 	.word	0x40004400

08001be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_UART_MspInit+0x7c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d127      	bne.n	8001c56 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c36:	2360      	movs	r3, #96	; 0x60
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c46:	2307      	movs	r3, #7
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_UART_MspInit+0x84>)
 8001c52:	f000 fd93 	bl	800277c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40004400 	.word	0x40004400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020c00 	.word	0x40020c00

08001c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c72:	e003      	b.n	8001c7c <LoopCopyDataInit>

08001c74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c7a:	3104      	adds	r1, #4

08001c7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c84:	d3f6      	bcc.n	8001c74 <CopyDataInit>
  ldr  r2, =_sbss
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c88:	e002      	b.n	8001c90 <LoopFillZerobss>

08001c8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c8c:	f842 3b04 	str.w	r3, [r2], #4

08001c90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c94:	d3f9      	bcc.n	8001c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c96:	f7ff fd65 	bl	8001764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f004 f827 	bl	8005cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9e:	f7ff fab5 	bl	800120c <main>
  bx  lr    
 8001ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001ca8:	080060c8 	.word	0x080060c8
  ldr  r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cb0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001cb4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001cb8:	20000308 	.word	0x20000308

08001cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC_IRQHandler>

08001cbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	f000 fd18 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 f805 	bl	8001cd8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001cce:	f7ff fced 	bl	80016ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fd33 	bl	8002762 <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f000 fcfb 	bl	800270e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20000004 	.word	0x20000004

08001d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000304 	.word	0x20000304

08001d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_GetTick+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000304 	.word	0x20000304

08001d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff ffee 	bl	8001d60 <HAL_GetTick>
 8001d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d005      	beq.n	8001d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_Delay+0x44>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d9e:	bf00      	nop
 8001da0:	f7ff ffde 	bl	8001d60 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d8f7      	bhi.n	8001da0 <HAL_Delay+0x28>
  {
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_GetHalVersion+0x10>)
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	01020900 	.word	0x01020900

08001dd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetREVID+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e0042000 	.word	0xe0042000

08001dec <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <HAL_GetDEVID+0x18>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e0042000 	.word	0xe0042000

08001e08 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetUIDw0+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	1ff0f420 	.word	0x1ff0f420

08001e20 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetUIDw1+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	1ff0f424 	.word	0x1ff0f424

08001e38 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetUIDw2+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	1ff0f428 	.word	0x1ff0f428

08001e50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e031      	b.n	8001eca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fee8 	bl	8000c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d116      	bne.n	8001ebc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_ADC_Init+0x84>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	f043 0202 	orr.w	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f964 	bl	800216c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eba:	e001      	b.n	8001ec0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	ffffeefd 	.word	0xffffeefd

08001ed8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1c>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e12a      	b.n	800214a <HAL_ADC_ConfigChannel+0x272>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b09      	cmp	r3, #9
 8001f02:	d93a      	bls.n	8001f7a <HAL_ADC_ConfigChannel+0xa2>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f0c:	d035      	beq.n	8001f7a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68d9      	ldr	r1, [r3, #12]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	3b1e      	subs	r3, #30
 8001f24:	2207      	movs	r2, #7
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	400a      	ands	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a87      	ldr	r2, [pc, #540]	; (8002158 <HAL_ADC_ConfigChannel+0x280>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10a      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68d9      	ldr	r1, [r3, #12]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	061a      	lsls	r2, r3, #24
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f52:	e035      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68d9      	ldr	r1, [r3, #12]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4403      	add	r3, r0
 8001f6c:	3b1e      	subs	r3, #30
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f78:	e022      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6919      	ldr	r1, [r3, #16]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	2207      	movs	r2, #7
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43da      	mvns	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6919      	ldr	r1, [r3, #16]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4403      	add	r3, r0
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b06      	cmp	r3, #6
 8001fc6:	d824      	bhi.n	8002012 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b05      	subs	r3, #5
 8001fda:	221f      	movs	r2, #31
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3b05      	subs	r3, #5
 8002004:	fa00 f203 	lsl.w	r2, r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	635a      	str	r2, [r3, #52]	; 0x34
 8002010:	e04c      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d824      	bhi.n	8002064 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	3b23      	subs	r3, #35	; 0x23
 800202c:	221f      	movs	r2, #31
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	400a      	ands	r2, r1
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	4618      	mov	r0, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	3b23      	subs	r3, #35	; 0x23
 8002056:	fa00 f203 	lsl.w	r2, r0, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
 8002062:	e023      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b41      	subs	r3, #65	; 0x41
 8002076:	221f      	movs	r2, #31
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43da      	mvns	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	400a      	ands	r2, r1
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	3b41      	subs	r3, #65	; 0x41
 80020a0:	fa00 f203 	lsl.w	r2, r0, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2a      	ldr	r2, [pc, #168]	; (800215c <HAL_ADC_ConfigChannel+0x284>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d10a      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1f4>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020be:	d105      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_ADC_ConfigChannel+0x288>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_ADC_ConfigChannel+0x288>)
 80020c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_ADC_ConfigChannel+0x284>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d109      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x212>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d105      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_ADC_ConfigChannel+0x288>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_ADC_ConfigChannel+0x288>)
 80020e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_ADC_ConfigChannel+0x284>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d125      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x268>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_ADC_ConfigChannel+0x280>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d003      	beq.n	8002106 <HAL_ADC_ConfigChannel+0x22e>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b11      	cmp	r3, #17
 8002104:	d11c      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_ADC_ConfigChannel+0x288>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_ADC_ConfigChannel+0x288>)
 800210c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002110:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_ADC_ConfigChannel+0x280>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d111      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_ADC_ConfigChannel+0x28c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_ADC_ConfigChannel+0x290>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0c9a      	lsrs	r2, r3, #18
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002132:	e002      	b.n	800213a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3b01      	subs	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	10000012 	.word	0x10000012
 800215c:	40012000 	.word	0x40012000
 8002160:	40012300 	.word	0x40012300
 8002164:	20000000 	.word	0x20000000
 8002168:	431bde83 	.word	0x431bde83

0800216c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002174:	4b78      	ldr	r3, [pc, #480]	; (8002358 <ADC_Init+0x1ec>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a77      	ldr	r2, [pc, #476]	; (8002358 <ADC_Init+0x1ec>)
 800217a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800217e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002180:	4b75      	ldr	r3, [pc, #468]	; (8002358 <ADC_Init+0x1ec>)
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4973      	ldr	r1, [pc, #460]	; (8002358 <ADC_Init+0x1ec>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800219c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	021a      	lsls	r2, r3, #8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6899      	ldr	r1, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <ADC_Init+0x1f0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800220e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6899      	ldr	r1, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e00f      	b.n	8002266 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002264:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0202 	bic.w	r2, r2, #2
 8002274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6899      	ldr	r1, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	005a      	lsls	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	3b01      	subs	r3, #1
 80022c0:	035a      	lsls	r2, r3, #13
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	e007      	b.n	80022dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	051a      	lsls	r2, r3, #20
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800231e:	025a      	lsls	r2, r3, #9
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6899      	ldr	r1, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	029a      	lsls	r2, r3, #10
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40012300 	.word	0x40012300
 800235c:	0f000001 	.word	0x0f000001

08002360 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0ed      	b.n	800254e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe fd0c 	bl	8000d9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0202 	bic.w	r2, r2, #2
 8002392:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002394:	f7ff fce4 	bl	8001d60 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800239a:	e012      	b.n	80023c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800239c:	f7ff fce0 	bl	8001d60 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b0a      	cmp	r3, #10
 80023a8:	d90b      	bls.n	80023c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2205      	movs	r2, #5
 80023ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0c5      	b.n	800254e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1e5      	bne.n	800239c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e0:	f7ff fcbe 	bl	8001d60 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023e6:	e012      	b.n	800240e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e8:	f7ff fcba 	bl	8001d60 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b0a      	cmp	r3, #10
 80023f4:	d90b      	bls.n	800240e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2205      	movs	r2, #5
 8002406:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e09f      	b.n	800254e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0e5      	beq.n	80023e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7e1b      	ldrb	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d108      	bne.n	8002436 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e007      	b.n	8002446 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7e5b      	ldrb	r3, [r3, #25]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d108      	bne.n	8002460 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e007      	b.n	8002470 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7e9b      	ldrb	r3, [r3, #26]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d108      	bne.n	800248a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0220 	orr.w	r2, r2, #32
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e007      	b.n	800249a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0220 	bic.w	r2, r2, #32
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7edb      	ldrb	r3, [r3, #27]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d108      	bne.n	80024b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0210 	bic.w	r2, r2, #16
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e007      	b.n	80024c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0210 	orr.w	r2, r2, #16
 80024c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7f1b      	ldrb	r3, [r3, #28]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d108      	bne.n	80024de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0208 	orr.w	r2, r2, #8
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e007      	b.n	80024ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0208 	bic.w	r2, r2, #8
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7f5b      	ldrb	r3, [r3, #29]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d108      	bne.n	8002508 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0204 	orr.w	r2, r2, #4
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e007      	b.n	8002518 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0204 	bic.w	r2, r2, #4
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	ea42 0103 	orr.w	r1, r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	1e5a      	subs	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <__NVIC_SetPriorityGrouping+0x40>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 8002582:	4313      	orrs	r3, r2
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x40>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00
 800259c:	05fa0000 	.word	0x05fa0000

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0b      	blt.n	80025e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4907      	ldr	r1, [pc, #28]	; (80025f4 <__NVIC_EnableIRQ+0x38>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000e100 	.word	0xe000e100

080025f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	6039      	str	r1, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	2b00      	cmp	r3, #0
 800260a:	db0a      	blt.n	8002622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	490c      	ldr	r1, [pc, #48]	; (8002644 <__NVIC_SetPriority+0x4c>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	440b      	add	r3, r1
 800261c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002620:	e00a      	b.n	8002638 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4908      	ldr	r1, [pc, #32]	; (8002648 <__NVIC_SetPriority+0x50>)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	3b04      	subs	r3, #4
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	440b      	add	r3, r1
 8002636:	761a      	strb	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1c3 0307 	rsb	r3, r3, #7
 8002666:	2b04      	cmp	r3, #4
 8002668:	bf28      	it	cs
 800266a:	2304      	movcs	r3, #4
 800266c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3304      	adds	r3, #4
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <NVIC_EncodePriority+0x30>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3b03      	subs	r3, #3
 800267a:	e000      	b.n	800267e <NVIC_EncodePriority+0x32>
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	f04f 32ff 	mov.w	r2, #4294967295
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	401a      	ands	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43d9      	mvns	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	4313      	orrs	r3, r2
         );
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f7ff ff8e 	bl	80025f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff29 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff3e 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff8e 	bl	800264c <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5d 	bl	80025f8 <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff31 	bl	80025bc <__NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffa2 	bl	80026b4 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	e175      	b.n	8002a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800279c:	2201      	movs	r2, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	f040 8164 	bne.w	8002a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d00b      	beq.n	80027da <HAL_GPIO_Init+0x5e>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ce:	2b11      	cmp	r3, #17
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b12      	cmp	r3, #18
 80027d8:	d130      	bne.n	800283c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	2203      	movs	r2, #3
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 0201 	and.w	r2, r3, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x100>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b12      	cmp	r3, #18
 800287a:	d123      	bne.n	80028c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	08da      	lsrs	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3208      	adds	r2, #8
 8002884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	08da      	lsrs	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3208      	adds	r2, #8
 80028be:	69b9      	ldr	r1, [r7, #24]
 80028c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0203 	and.w	r2, r3, #3
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80be 	beq.w	8002a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002906:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800291e:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <HAL_GPIO_Init+0x328>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_GPIO_Init+0x32c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d037      	beq.n	80029ba <HAL_GPIO_Init+0x23e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_GPIO_Init+0x330>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d031      	beq.n	80029b6 <HAL_GPIO_Init+0x23a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02b      	beq.n	80029b2 <HAL_GPIO_Init+0x236>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a55      	ldr	r2, [pc, #340]	; (8002ab4 <HAL_GPIO_Init+0x338>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d025      	beq.n	80029ae <HAL_GPIO_Init+0x232>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_GPIO_Init+0x33c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <HAL_GPIO_Init+0x22e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a53      	ldr	r2, [pc, #332]	; (8002abc <HAL_GPIO_Init+0x340>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_GPIO_Init+0x22a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_GPIO_Init+0x344>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <HAL_GPIO_Init+0x348>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x222>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a50      	ldr	r2, [pc, #320]	; (8002ac8 <HAL_GPIO_Init+0x34c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x21e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4f      	ldr	r2, [pc, #316]	; (8002acc <HAL_GPIO_Init+0x350>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x21a>
 8002992:	2309      	movs	r3, #9
 8002994:	e012      	b.n	80029bc <HAL_GPIO_Init+0x240>
 8002996:	230a      	movs	r3, #10
 8002998:	e010      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299a:	2308      	movs	r3, #8
 800299c:	e00e      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a2:	2306      	movs	r3, #6
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	; (8002aa4 <HAL_GPIO_Init+0x328>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029fe:	4a34      	ldr	r2, [pc, #208]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a28:	4a29      	ldr	r2, [pc, #164]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a52:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae86 	bls.w	800279c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40021c00 	.word	0x40021c00
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40022400 	.word	0x40022400
 8002ad0:	40013c00 	.word	0x40013c00

08002ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	887b      	ldrh	r3, [r7, #2]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	e001      	b.n	8002af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b66:	f7ff f8fb 	bl	8001d60 <HAL_GetTick>
 8002b6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b6c:	e009      	b.n	8002b82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b6e:	f7ff f8f7 	bl	8001d60 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7c:	d901      	bls.n	8002b82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e022      	b.n	8002bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0f      	ldr	r2, [pc, #60]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7ff f8e0 	bl	8001d60 <HAL_GetTick>
 8002ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ba2:	e009      	b.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba4:	f7ff f8dc 	bl	8001d60 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb2:	d901      	bls.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e007      	b.n	8002bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40007000 	.word	0x40007000

08002bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e29b      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8087 	beq.w	8002d0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfc:	4b96      	ldr	r3, [pc, #600]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d00c      	beq.n	8002c22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c08:	4b93      	ldr	r3, [pc, #588]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d112      	bne.n	8002c3a <HAL_RCC_OscConfig+0x62>
 8002c14:	4b90      	ldr	r3, [pc, #576]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c22:	4b8d      	ldr	r3, [pc, #564]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d06c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x130>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d168      	bne.n	8002d08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e275      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x7a>
 8002c44:	4b84      	ldr	r3, [pc, #528]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a83      	ldr	r2, [pc, #524]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	e02e      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x9c>
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7e      	ldr	r2, [pc, #504]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b7c      	ldr	r3, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7b      	ldr	r2, [pc, #492]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0xc0>
 8002c7e:	4b76      	ldr	r3, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a75      	ldr	r2, [pc, #468]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a72      	ldr	r2, [pc, #456]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd8>
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b6c      	ldr	r3, [pc, #432]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6b      	ldr	r2, [pc, #428]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f852 	bl	8001d60 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7ff f84e 	bl	8001d60 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e229      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe8>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7ff f83e 	bl	8001d60 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7ff f83a 	bl	8001d60 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e215      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x110>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d069      	beq.n	8002dea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d16:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d22:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x190>
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1e9      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	493d      	ldr	r1, [pc, #244]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e040      	b.n	8002dea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d023      	beq.n	8002db8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fff0 	bl	8001d60 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d84:	f7fe ffec 	bl	8001d60 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1c7      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4929      	ldr	r1, [pc, #164]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
 8002db6:	e018      	b.n	8002dea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe ffcc 	bl	8001d60 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7fe ffc8 	bl	8001d60 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1a3      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d038      	beq.n	8002e68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d019      	beq.n	8002e32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfe:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe ffa9 	bl	8001d60 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e12:	f7fe ffa5 	bl	8001d60 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e180      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x23a>
 8002e30:	e01a      	b.n	8002e68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe ff8f 	bl	8001d60 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fe ff8b 	bl	8001d60 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d903      	bls.n	8002e5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e166      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
 8002e58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b92      	ldr	r3, [pc, #584]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ee      	bne.n	8002e46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a4 	beq.w	8002fbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b8c      	ldr	r3, [pc, #560]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10d      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4b89      	ldr	r3, [pc, #548]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	4a88      	ldr	r2, [pc, #544]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8e:	4b86      	ldr	r3, [pc, #536]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9e:	4b83      	ldr	r3, [pc, #524]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d118      	bne.n	8002edc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002eaa:	4b80      	ldr	r3, [pc, #512]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7f      	ldr	r2, [pc, #508]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe ff53 	bl	8001d60 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebe:	f7fe ff4f 	bl	8001d60 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	; 0x64
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e12a      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed0:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x31a>
 8002ee4:	4b70      	ldr	r3, [pc, #448]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a6f      	ldr	r2, [pc, #444]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef0:	e02d      	b.n	8002f4e <HAL_RCC_OscConfig+0x376>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x33c>
 8002efa:	4b6b      	ldr	r3, [pc, #428]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a6a      	ldr	r2, [pc, #424]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	4b68      	ldr	r3, [pc, #416]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a67      	ldr	r2, [pc, #412]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	e01c      	b.n	8002f4e <HAL_RCC_OscConfig+0x376>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCC_OscConfig+0x35e>
 8002f1c:	4b62      	ldr	r3, [pc, #392]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	4b5f      	ldr	r3, [pc, #380]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a5e      	ldr	r2, [pc, #376]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0x376>
 8002f36:	4b5c      	ldr	r3, [pc, #368]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a5b      	ldr	r2, [pc, #364]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	4b59      	ldr	r3, [pc, #356]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a58      	ldr	r2, [pc, #352]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d015      	beq.n	8002f82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fe ff03 	bl	8001d60 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe feff 	bl	8001d60 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0d8      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	4b4c      	ldr	r3, [pc, #304]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ee      	beq.n	8002f5e <HAL_RCC_OscConfig+0x386>
 8002f80:	e014      	b.n	8002fac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fe feed 	bl	8001d60 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fee9 	bl	8001d60 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0c2      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	4b41      	ldr	r3, [pc, #260]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ee      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a3c      	ldr	r2, [pc, #240]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80ae 	beq.w	8003124 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc8:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d06d      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d14b      	bne.n	8003074 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a31      	ldr	r2, [pc, #196]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe feba 	bl	8001d60 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe feb6 	bl	8001d60 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e091      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	019b      	lsls	r3, r3, #6
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	041b      	lsls	r3, r3, #16
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	491b      	ldr	r1, [pc, #108]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fe88 	bl	8001d60 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe fe84 	bl	8001d60 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e05f      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x47c>
 8003072:	e057      	b.n	8003124 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe fe6e 	bl	8001d60 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fe6a 	bl	8001d60 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e045      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x4b0>
 80030a6:	e03d      	b.n	8003124 <HAL_RCC_OscConfig+0x54c>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <HAL_RCC_OscConfig+0x558>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d030      	beq.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d129      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d122      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d119      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	3b01      	subs	r3, #1
 80030fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d10f      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0d0      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d910      	bls.n	800317c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 020f 	bic.w	r2, r3, #15
 8003162:	4965      	ldr	r1, [pc, #404]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a58      	ldr	r2, [pc, #352]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 800319a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800319e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	494d      	ldr	r1, [pc, #308]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d040      	beq.n	8003258 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d115      	bne.n	8003216 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e073      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e06b      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b39      	ldr	r3, [pc, #228]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4936      	ldr	r1, [pc, #216]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003228:	f7fe fd9a 	bl	8001d60 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fe fd96 	bl	8001d60 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e053      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d210      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 020f 	bic.w	r2, r3, #15
 800326e:	4922      	ldr	r1, [pc, #136]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e032      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4916      	ldr	r1, [pc, #88]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	490e      	ldr	r1, [pc, #56]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032c6:	f000 f821 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	490a      	ldr	r1, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x1cc>)
 80032d8:	5ccb      	ldrb	r3, [r1, r3]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1d0>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1d4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fcf6 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00
 80032fc:	40023800 	.word	0x40023800
 8003300:	08006078 	.word	0x08006078
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b5b0      	push	{r4, r5, r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003312:	2100      	movs	r1, #0
 8003314:	6079      	str	r1, [r7, #4]
 8003316:	2100      	movs	r1, #0
 8003318:	60f9      	str	r1, [r7, #12]
 800331a:	2100      	movs	r1, #0
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800331e:	2100      	movs	r1, #0
 8003320:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003322:	4952      	ldr	r1, [pc, #328]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003324:	6889      	ldr	r1, [r1, #8]
 8003326:	f001 010c 	and.w	r1, r1, #12
 800332a:	2908      	cmp	r1, #8
 800332c:	d00d      	beq.n	800334a <HAL_RCC_GetSysClockFreq+0x3e>
 800332e:	2908      	cmp	r1, #8
 8003330:	f200 8094 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x150>
 8003334:	2900      	cmp	r1, #0
 8003336:	d002      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x32>
 8003338:	2904      	cmp	r1, #4
 800333a:	d003      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x38>
 800333c:	e08e      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800333e:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <HAL_RCC_GetSysClockFreq+0x164>)
 8003340:	60bb      	str	r3, [r7, #8]
      break;
 8003342:	e08e      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003344:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <HAL_RCC_GetSysClockFreq+0x168>)
 8003346:	60bb      	str	r3, [r7, #8]
      break;
 8003348:	e08b      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800334a:	4948      	ldr	r1, [pc, #288]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 800334c:	6849      	ldr	r1, [r1, #4]
 800334e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003352:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003354:	4945      	ldr	r1, [pc, #276]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003356:	6849      	ldr	r1, [r1, #4]
 8003358:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800335c:	2900      	cmp	r1, #0
 800335e:	d024      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003360:	4942      	ldr	r1, [pc, #264]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003362:	6849      	ldr	r1, [r1, #4]
 8003364:	0989      	lsrs	r1, r1, #6
 8003366:	4608      	mov	r0, r1
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003370:	f04f 0500 	mov.w	r5, #0
 8003374:	ea00 0204 	and.w	r2, r0, r4
 8003378:	ea01 0305 	and.w	r3, r1, r5
 800337c:	493d      	ldr	r1, [pc, #244]	; (8003474 <HAL_RCC_GetSysClockFreq+0x168>)
 800337e:	fb01 f003 	mul.w	r0, r1, r3
 8003382:	2100      	movs	r1, #0
 8003384:	fb01 f102 	mul.w	r1, r1, r2
 8003388:	1844      	adds	r4, r0, r1
 800338a:	493a      	ldr	r1, [pc, #232]	; (8003474 <HAL_RCC_GetSysClockFreq+0x168>)
 800338c:	fba2 0101 	umull	r0, r1, r2, r1
 8003390:	1863      	adds	r3, r4, r1
 8003392:	4619      	mov	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	461a      	mov	r2, r3
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	f7fc ff54 	bl	8000248 <__aeabi_uldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4613      	mov	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e04a      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033aa:	4b30      	ldr	r3, [pc, #192]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	461a      	mov	r2, r3
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	ea02 0400 	and.w	r4, r2, r0
 80033c2:	ea03 0501 	and.w	r5, r3, r1
 80033c6:	4620      	mov	r0, r4
 80033c8:	4629      	mov	r1, r5
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	014b      	lsls	r3, r1, #5
 80033d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033d8:	0142      	lsls	r2, r0, #5
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	1b00      	subs	r0, r0, r4
 80033e0:	eb61 0105 	sbc.w	r1, r1, r5
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	018b      	lsls	r3, r1, #6
 80033ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033f2:	0182      	lsls	r2, r0, #6
 80033f4:	1a12      	subs	r2, r2, r0
 80033f6:	eb63 0301 	sbc.w	r3, r3, r1
 80033fa:	f04f 0000 	mov.w	r0, #0
 80033fe:	f04f 0100 	mov.w	r1, #0
 8003402:	00d9      	lsls	r1, r3, #3
 8003404:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003408:	00d0      	lsls	r0, r2, #3
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	1912      	adds	r2, r2, r4
 8003410:	eb45 0303 	adc.w	r3, r5, r3
 8003414:	f04f 0000 	mov.w	r0, #0
 8003418:	f04f 0100 	mov.w	r1, #0
 800341c:	0299      	lsls	r1, r3, #10
 800341e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003422:	0290      	lsls	r0, r2, #10
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	461a      	mov	r2, r3
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	f7fc ff08 	bl	8000248 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	60bb      	str	r3, [r7, #8]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_RCC_GetSysClockFreq+0x164>)
 800345e:	60bb      	str	r3, [r7, #8]
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	68bb      	ldr	r3, [r7, #8]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bdb0      	pop	{r4, r5, r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	017d7840 	.word	0x017d7840

08003478 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_RCC_GetHCLKFreq+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000000 	.word	0x20000000

08003490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003494:	f7ff fff0 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0a9b      	lsrs	r3, r3, #10
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08006088 	.word	0x08006088

080034b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034bc:	f7ff ffdc 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0b5b      	lsrs	r3, r3, #13
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4903      	ldr	r1, [pc, #12]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	08006088 	.word	0x08006088

080034e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d012      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003508:	4b69      	ldr	r3, [pc, #420]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a68      	ldr	r2, [pc, #416]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	4964      	ldr	r1, [pc, #400]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d017      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353a:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	4959      	ldr	r1, [pc, #356]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003576:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800357c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	494a      	ldr	r1, [pc, #296]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 808b 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	4a39      	ldr	r2, [pc, #228]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ce:	6413      	str	r3, [r2, #64]	; 0x40
 80035d0:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a34      	ldr	r2, [pc, #208]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fe fbba 	bl	8001d60 <HAL_GetTick>
 80035ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fe fbb6 	bl	8001d60 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e38f      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003602:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800360e:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003616:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d035      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	429a      	cmp	r2, r3
 800362a:	d02e      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003634:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003636:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d114      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fb7e 	bl	8001d60 <HAL_GetTick>
 8003664:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe fb7a 	bl	8001d60 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e351      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0ee      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003696:	d111      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	4901      	ldr	r1, [pc, #4]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
 80036ae:	e00b      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40007000 	.word	0x40007000
 80036b8:	0ffffcff 	.word	0x0ffffcff
 80036bc:	4bb3      	ldr	r3, [pc, #716]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4ab2      	ldr	r2, [pc, #712]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036c6:	6093      	str	r3, [r2, #8]
 80036c8:	4bb0      	ldr	r3, [pc, #704]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d4:	49ad      	ldr	r1, [pc, #692]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036e6:	4ba9      	ldr	r3, [pc, #676]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ec:	4aa7      	ldr	r2, [pc, #668]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036f6:	4ba5      	ldr	r3, [pc, #660]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	49a2      	ldr	r1, [pc, #648]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003714:	4b9d      	ldr	r3, [pc, #628]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003722:	499a      	ldr	r1, [pc, #616]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003736:	4b95      	ldr	r3, [pc, #596]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003744:	4991      	ldr	r1, [pc, #580]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003758:	4b8c      	ldr	r3, [pc, #560]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003766:	4989      	ldr	r1, [pc, #548]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800377a:	4b84      	ldr	r3, [pc, #528]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	4980      	ldr	r1, [pc, #512]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800379c:	4b7b      	ldr	r3, [pc, #492]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	4978      	ldr	r1, [pc, #480]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	f023 020c 	bic.w	r2, r3, #12
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	496f      	ldr	r1, [pc, #444]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	4967      	ldr	r1, [pc, #412]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003802:	4b62      	ldr	r3, [pc, #392]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	495e      	ldr	r1, [pc, #376]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003824:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	4956      	ldr	r1, [pc, #344]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003846:	4b51      	ldr	r3, [pc, #324]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	494d      	ldr	r1, [pc, #308]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003868:	4b48      	ldr	r3, [pc, #288]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	4945      	ldr	r1, [pc, #276]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800388a:	4b40      	ldr	r3, [pc, #256]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	493c      	ldr	r1, [pc, #240]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ba:	4934      	ldr	r1, [pc, #208]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d011      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038ce:	4b2f      	ldr	r3, [pc, #188]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038dc:	492b      	ldr	r1, [pc, #172]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ec:	d101      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800390e:	4b1f      	ldr	r3, [pc, #124]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391c:	491b      	ldr	r1, [pc, #108]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003940:	4912      	ldr	r1, [pc, #72]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003964:	4909      	ldr	r1, [pc, #36]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00f      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800397e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	4986      	ldr	r1, [pc, #536]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039a4:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b4:	497d      	ldr	r1, [pc, #500]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d006      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80d6 	beq.w	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039d0:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a75      	ldr	r2, [pc, #468]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039dc:	f7fe f9c0 	bl	8001d60 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039e4:	f7fe f9bc 	bl	8001d60 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e195      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f6:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d021      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11d      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a24:	4b61      	ldr	r3, [pc, #388]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2a:	0e1b      	lsrs	r3, r3, #24
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	019a      	lsls	r2, r3, #6
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	071b      	lsls	r3, r3, #28
 8003a4a:	4958      	ldr	r1, [pc, #352]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02e      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7c:	d129      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a8c:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a92:	0f1b      	lsrs	r3, r3, #28
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	019a      	lsls	r2, r3, #6
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	071b      	lsls	r3, r3, #28
 8003ab2:	493e      	ldr	r1, [pc, #248]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aba:	4b3c      	ldr	r3, [pc, #240]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac0:	f023 021f 	bic.w	r2, r3, #31
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	4938      	ldr	r1, [pc, #224]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01d      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae4:	0e1b      	lsrs	r3, r3, #24
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aec:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af2:	0f1b      	lsrs	r3, r3, #28
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	019a      	lsls	r2, r3, #6
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	061b      	lsls	r3, r3, #24
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	071b      	lsls	r3, r3, #28
 8003b12:	4926      	ldr	r1, [pc, #152]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d011      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	019a      	lsls	r2, r3, #6
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	071b      	lsls	r3, r3, #28
 8003b42:	491a      	ldr	r1, [pc, #104]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b4a:	4b18      	ldr	r3, [pc, #96]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b56:	f7fe f903 	bl	8001d60 <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b5e:	f7fe f8ff 	bl	8001d60 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b64      	cmp	r3, #100	; 0x64
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e0d8      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	f040 80ce 	bne.w	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a08      	ldr	r2, [pc, #32]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fe f8e6 	bl	8001d60 <HAL_GetTick>
 8003b94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b98:	f7fe f8e2 	bl	8001d60 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d904      	bls.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0bb      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bb0:	4b5e      	ldr	r3, [pc, #376]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bbc:	d0ec      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02e      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d12a      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003be6:	4b51      	ldr	r3, [pc, #324]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bf4:	4b4d      	ldr	r3, [pc, #308]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	0f1b      	lsrs	r3, r3, #28
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	019a      	lsls	r2, r3, #6
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	061b      	lsls	r3, r3, #24
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	071b      	lsls	r3, r3, #28
 8003c1a:	4944      	ldr	r1, [pc, #272]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c22:	4b42      	ldr	r3, [pc, #264]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	3b01      	subs	r3, #1
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	493d      	ldr	r1, [pc, #244]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d022      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c50:	d11d      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	0e1b      	lsrs	r3, r3, #24
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	0f1b      	lsrs	r3, r3, #28
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	019a      	lsls	r2, r3, #6
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	071b      	lsls	r3, r3, #28
 8003c86:	4929      	ldr	r1, [pc, #164]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d028      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c9a:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	0e1b      	lsrs	r3, r3, #24
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	019a      	lsls	r2, r3, #6
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	071b      	lsls	r3, r3, #28
 8003cce:	4917      	ldr	r1, [pc, #92]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4911      	ldr	r1, [pc, #68]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf8:	f7fe f832 	bl	8001d60 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d00:	f7fe f82e 	bl	8001d60 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e007      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1e:	d1ef      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800

08003d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e09d      	b.n	8003e7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d52:	d009      	beq.n	8003d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	61da      	str	r2, [r3, #28]
 8003d5a:	e005      	b.n	8003d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd fbfc 	bl	8001580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003da8:	d902      	bls.n	8003db0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	e002      	b.n	8003db6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003dbe:	d007      	beq.n	8003dd0 <HAL_SPI_Init+0xa0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dc8:	d002      	beq.n	8003dd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e12:	ea42 0103 	orr.w	r1, r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	f003 0204 	and.w	r2, r3, #4
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e4c:	ea42 0103 	orr.w	r1, r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e049      	b.n	8003f2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fd fe0b 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f000 fc81 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d001      	beq.n	8003f4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e04c      	b.n	8003fe6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <HAL_TIM_Base_Start+0xc0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d022      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f66:	d01d      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <HAL_TIM_Base_Start+0xc4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d018      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <HAL_TIM_Base_Start+0xc8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <HAL_TIM_Base_Start+0xcc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00e      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	; (8004004 <HAL_TIM_Base_Start+0xd0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d009      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1c      	ldr	r2, [pc, #112]	; (8004008 <HAL_TIM_Base_Start+0xd4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1b      	ldr	r2, [pc, #108]	; (800400c <HAL_TIM_Base_Start+0xd8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d115      	bne.n	8003fd0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_TIM_Base_Start+0xdc>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d015      	beq.n	8003fe2 <HAL_TIM_Base_Start+0xae>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbc:	d011      	beq.n	8003fe2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0201 	orr.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fce:	e008      	b.n	8003fe2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e000      	b.n	8003fe4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800
 8004000:	40000c00 	.word	0x40000c00
 8004004:	40010400 	.word	0x40010400
 8004008:	40014000 	.word	0x40014000
 800400c:	40001800 	.word	0x40001800
 8004010:	00010007 	.word	0x00010007

08004014 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e049      	b.n	80040ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd fd24 	bl	8001a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f000 fbba 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e049      	b.n	8004168 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fd fc89 	bl	8001a00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f000 fb63 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d122      	bne.n	80041cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d11b      	bne.n	80041cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0202 	mvn.w	r2, #2
 800419c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 faec 	bl	8004790 <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fade 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 faef 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d122      	bne.n	8004220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d11b      	bne.n	8004220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0204 	mvn.w	r2, #4
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fac2 	bl	8004790 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fab4 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fac5 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b08      	cmp	r3, #8
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0208 	mvn.w	r2, #8
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2204      	movs	r2, #4
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fa98 	bl	8004790 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa8a 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fa9b 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b10      	cmp	r3, #16
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b10      	cmp	r3, #16
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0210 	mvn.w	r2, #16
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2208      	movs	r2, #8
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa6e 	bl	8004790 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa60 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fa71 	bl	80047a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d10e      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d107      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0201 	mvn.w	r2, #1
 80042ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd f8ac 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f001 f826 	bl	800536c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432e:	d10e      	bne.n	800434e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d107      	bne.n	800434e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f001 f819 	bl	8005380 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d10e      	bne.n	800437a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d107      	bne.n	800437a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fa1f 	bl	80047b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b20      	cmp	r3, #32
 8004386:	d10e      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b20      	cmp	r3, #32
 8004394:	d107      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f06f 0220 	mvn.w	r2, #32
 800439e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 ffd9 	bl	8005358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e082      	b.n	80044ce <HAL_TIM_IC_ConfigChannel+0x120>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11b      	bne.n	800440e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f000 fd7f 	bl	8004ee8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 020c 	bic.w	r2, r2, #12
 80043f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6999      	ldr	r1, [r3, #24]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	619a      	str	r2, [r3, #24]
 800440c:	e05a      	b.n	80044c4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d11c      	bne.n	800444e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6819      	ldr	r1, [r3, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f000 fe03 	bl	800502e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004436:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6999      	ldr	r1, [r3, #24]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	021a      	lsls	r2, r3, #8
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	619a      	str	r2, [r3, #24]
 800444c:	e03a      	b.n	80044c4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d11b      	bne.n	800448c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f000 fe50 	bl	8005108 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69da      	ldr	r2, [r3, #28]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 020c 	bic.w	r2, r2, #12
 8004476:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69d9      	ldr	r1, [r3, #28]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	61da      	str	r2, [r3, #28]
 800448a:	e01b      	b.n	80044c4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f000 fe70 	bl	8005180 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69d9      	ldr	r1, [r3, #28]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	021a      	lsls	r2, r3, #8
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e0fd      	b.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x216>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b14      	cmp	r3, #20
 80044fe:	f200 80f0 	bhi.w	80046e2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004502:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	0800455d 	.word	0x0800455d
 800450c:	080046e3 	.word	0x080046e3
 8004510:	080046e3 	.word	0x080046e3
 8004514:	080046e3 	.word	0x080046e3
 8004518:	0800459d 	.word	0x0800459d
 800451c:	080046e3 	.word	0x080046e3
 8004520:	080046e3 	.word	0x080046e3
 8004524:	080046e3 	.word	0x080046e3
 8004528:	080045df 	.word	0x080045df
 800452c:	080046e3 	.word	0x080046e3
 8004530:	080046e3 	.word	0x080046e3
 8004534:	080046e3 	.word	0x080046e3
 8004538:	0800461f 	.word	0x0800461f
 800453c:	080046e3 	.word	0x080046e3
 8004540:	080046e3 	.word	0x080046e3
 8004544:	080046e3 	.word	0x080046e3
 8004548:	08004661 	.word	0x08004661
 800454c:	080046e3 	.word	0x080046e3
 8004550:	080046e3 	.word	0x080046e3
 8004554:	080046e3 	.word	0x080046e3
 8004558:	080046a1 	.word	0x080046a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f9d2 	bl	800490c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0208 	orr.w	r2, r2, #8
 8004576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0204 	bic.w	r2, r2, #4
 8004586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6999      	ldr	r1, [r3, #24]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	619a      	str	r2, [r3, #24]
      break;
 800459a:	e0a3      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fa24 	bl	80049f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6999      	ldr	r1, [r3, #24]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	619a      	str	r2, [r3, #24]
      break;
 80045dc:	e082      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fa7b 	bl	8004ae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0208 	orr.w	r2, r2, #8
 80045f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0204 	bic.w	r2, r2, #4
 8004608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69d9      	ldr	r1, [r3, #28]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	61da      	str	r2, [r3, #28]
      break;
 800461c:	e062      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fad1 	bl	8004bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69d9      	ldr	r1, [r3, #28]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	021a      	lsls	r2, r3, #8
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	61da      	str	r2, [r3, #28]
      break;
 800465e:	e041      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fb08 	bl	8004c7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0208 	orr.w	r2, r2, #8
 800467a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0204 	bic.w	r2, r2, #4
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800469e:	e021      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fb3a 	bl	8004d20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	021a      	lsls	r2, r3, #8
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046e0:	e000      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80046e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop

080046f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIM_SlaveConfigSynchro+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e031      	b.n	8004774 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004720:	6839      	ldr	r1, [r7, #0]
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fb50 	bl	8004dc8 <TIM_SlaveTimer_SetConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e018      	b.n	8004774 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004750:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004760:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a40      	ldr	r2, [pc, #256]	; (80048e0 <TIM_Base_SetConfig+0x114>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d00f      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3d      	ldr	r2, [pc, #244]	; (80048e4 <TIM_Base_SetConfig+0x118>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00b      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3c      	ldr	r2, [pc, #240]	; (80048e8 <TIM_Base_SetConfig+0x11c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d007      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3b      	ldr	r2, [pc, #236]	; (80048ec <TIM_Base_SetConfig+0x120>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a3a      	ldr	r2, [pc, #232]	; (80048f0 <TIM_Base_SetConfig+0x124>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d108      	bne.n	800481e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2f      	ldr	r2, [pc, #188]	; (80048e0 <TIM_Base_SetConfig+0x114>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d02b      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d027      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2c      	ldr	r2, [pc, #176]	; (80048e4 <TIM_Base_SetConfig+0x118>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d023      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2b      	ldr	r2, [pc, #172]	; (80048e8 <TIM_Base_SetConfig+0x11c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01f      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <TIM_Base_SetConfig+0x120>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01b      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a29      	ldr	r2, [pc, #164]	; (80048f0 <TIM_Base_SetConfig+0x124>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d017      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a28      	ldr	r2, [pc, #160]	; (80048f4 <TIM_Base_SetConfig+0x128>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a27      	ldr	r2, [pc, #156]	; (80048f8 <TIM_Base_SetConfig+0x12c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00f      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a26      	ldr	r2, [pc, #152]	; (80048fc <TIM_Base_SetConfig+0x130>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00b      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a25      	ldr	r2, [pc, #148]	; (8004900 <TIM_Base_SetConfig+0x134>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a24      	ldr	r2, [pc, #144]	; (8004904 <TIM_Base_SetConfig+0x138>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a23      	ldr	r2, [pc, #140]	; (8004908 <TIM_Base_SetConfig+0x13c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d108      	bne.n	8004890 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <TIM_Base_SetConfig+0x114>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_Base_SetConfig+0xf8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a0c      	ldr	r2, [pc, #48]	; (80048f0 <TIM_Base_SetConfig+0x124>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d103      	bne.n	80048cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	615a      	str	r2, [r3, #20]
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40010400 	.word	0x40010400
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40014400 	.word	0x40014400
 80048fc:	40014800 	.word	0x40014800
 8004900:	40001800 	.word	0x40001800
 8004904:	40001c00 	.word	0x40001c00
 8004908:	40002000 	.word	0x40002000

0800490c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4b2b      	ldr	r3, [pc, #172]	; (80049e4 <TIM_OC1_SetConfig+0xd8>)
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0303 	bic.w	r3, r3, #3
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 0302 	bic.w	r3, r3, #2
 8004954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <TIM_OC1_SetConfig+0xdc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_OC1_SetConfig+0x64>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a20      	ldr	r2, [pc, #128]	; (80049ec <TIM_OC1_SetConfig+0xe0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d10c      	bne.n	800498a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f023 0308 	bic.w	r3, r3, #8
 8004976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 0304 	bic.w	r3, r3, #4
 8004988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <TIM_OC1_SetConfig+0xdc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_OC1_SetConfig+0x8e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <TIM_OC1_SetConfig+0xe0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d111      	bne.n	80049be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	621a      	str	r2, [r3, #32]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	fffeff8f 	.word	0xfffeff8f
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010400 	.word	0x40010400

080049f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0210 	bic.w	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4b2e      	ldr	r3, [pc, #184]	; (8004ad4 <TIM_OC2_SetConfig+0xe4>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f023 0320 	bic.w	r3, r3, #32
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a23      	ldr	r2, [pc, #140]	; (8004ad8 <TIM_OC2_SetConfig+0xe8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC2_SetConfig+0x68>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a22      	ldr	r2, [pc, #136]	; (8004adc <TIM_OC2_SetConfig+0xec>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10d      	bne.n	8004a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <TIM_OC2_SetConfig+0xe8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC2_SetConfig+0x94>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a17      	ldr	r2, [pc, #92]	; (8004adc <TIM_OC2_SetConfig+0xec>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d113      	bne.n	8004aac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	feff8fff 	.word	0xfeff8fff
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	40010400 	.word	0x40010400

08004ae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <TIM_OC3_SetConfig+0xe0>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <TIM_OC3_SetConfig+0xe4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_OC3_SetConfig+0x66>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a21      	ldr	r2, [pc, #132]	; (8004bc8 <TIM_OC3_SetConfig+0xe8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10d      	bne.n	8004b62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a17      	ldr	r2, [pc, #92]	; (8004bc4 <TIM_OC3_SetConfig+0xe4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_OC3_SetConfig+0x92>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a16      	ldr	r2, [pc, #88]	; (8004bc8 <TIM_OC3_SetConfig+0xe8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d113      	bne.n	8004b9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	621a      	str	r2, [r3, #32]
}
 8004bb4:	bf00      	nop
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	fffeff8f 	.word	0xfffeff8f
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40010400 	.word	0x40010400

08004bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <TIM_OC4_SetConfig+0xa4>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	031b      	lsls	r3, r3, #12
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <TIM_OC4_SetConfig+0xa8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d003      	beq.n	8004c34 <TIM_OC4_SetConfig+0x68>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <TIM_OC4_SetConfig+0xac>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d109      	bne.n	8004c48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	019b      	lsls	r3, r3, #6
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	621a      	str	r2, [r3, #32]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	feff8fff 	.word	0xfeff8fff
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40010400 	.word	0x40010400

08004c7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <TIM_OC5_SetConfig+0x98>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <TIM_OC5_SetConfig+0x9c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC5_SetConfig+0x5e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <TIM_OC5_SetConfig+0xa0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d109      	bne.n	8004cee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	fffeff8f 	.word	0xfffeff8f
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40010400 	.word	0x40010400

08004d20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <TIM_OC6_SetConfig+0x9c>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	051b      	lsls	r3, r3, #20
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <TIM_OC6_SetConfig+0xa0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_OC6_SetConfig+0x60>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <TIM_OC6_SetConfig+0xa4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d109      	bne.n	8004d94 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	feff8fff 	.word	0xfeff8fff
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40010400 	.word	0x40010400

08004dc8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <TIM_SlaveTimer_SetConfig+0x11c>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b70      	cmp	r3, #112	; 0x70
 8004e0c:	d01a      	beq.n	8004e44 <TIM_SlaveTimer_SetConfig+0x7c>
 8004e0e:	2b70      	cmp	r3, #112	; 0x70
 8004e10:	d860      	bhi.n	8004ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8004e12:	2b60      	cmp	r3, #96	; 0x60
 8004e14:	d054      	beq.n	8004ec0 <TIM_SlaveTimer_SetConfig+0xf8>
 8004e16:	2b60      	cmp	r3, #96	; 0x60
 8004e18:	d85c      	bhi.n	8004ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8004e1a:	2b50      	cmp	r3, #80	; 0x50
 8004e1c:	d046      	beq.n	8004eac <TIM_SlaveTimer_SetConfig+0xe4>
 8004e1e:	2b50      	cmp	r3, #80	; 0x50
 8004e20:	d858      	bhi.n	8004ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d019      	beq.n	8004e5a <TIM_SlaveTimer_SetConfig+0x92>
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d854      	bhi.n	8004ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8004e2a:	2b30      	cmp	r3, #48	; 0x30
 8004e2c:	d054      	beq.n	8004ed8 <TIM_SlaveTimer_SetConfig+0x110>
 8004e2e:	2b30      	cmp	r3, #48	; 0x30
 8004e30:	d850      	bhi.n	8004ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d050      	beq.n	8004ed8 <TIM_SlaveTimer_SetConfig+0x110>
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d84c      	bhi.n	8004ed4 <TIM_SlaveTimer_SetConfig+0x10c>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d04c      	beq.n	8004ed8 <TIM_SlaveTimer_SetConfig+0x110>
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d04a      	beq.n	8004ed8 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004e42:	e047      	b.n	8004ed4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68d9      	ldr	r1, [r3, #12]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f000 f9d1 	bl	80051fa <TIM_ETR_SetConfig>
      break;
 8004e58:	e03f      	b.n	8004eda <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d101      	bne.n	8004e66 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e03a      	b.n	8004edc <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a1a      	ldr	r2, [r3, #32]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0201 	bic.w	r2, r2, #1
 8004e7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e8c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	621a      	str	r2, [r3, #32]
      break;
 8004eaa:	e016      	b.n	8004eda <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f000 f889 	bl	8004fd0 <TIM_TI1_ConfigInputStage>
      break;
 8004ebe:	e00c      	b.n	8004eda <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6899      	ldr	r1, [r3, #8]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f000 f8eb 	bl	80050a8 <TIM_TI2_ConfigInputStage>
      break;
 8004ed2:	e002      	b.n	8004eda <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004ed8:	bf00      	nop
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	fffefff8 	.word	0xfffefff8

08004ee8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f023 0201 	bic.w	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4a28      	ldr	r2, [pc, #160]	; (8004fb4 <TIM_TI1_SetConfig+0xcc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01b      	beq.n	8004f4e <TIM_TI1_SetConfig+0x66>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d017      	beq.n	8004f4e <TIM_TI1_SetConfig+0x66>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4a25      	ldr	r2, [pc, #148]	; (8004fb8 <TIM_TI1_SetConfig+0xd0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <TIM_TI1_SetConfig+0x66>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a24      	ldr	r2, [pc, #144]	; (8004fbc <TIM_TI1_SetConfig+0xd4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00f      	beq.n	8004f4e <TIM_TI1_SetConfig+0x66>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <TIM_TI1_SetConfig+0xd8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00b      	beq.n	8004f4e <TIM_TI1_SetConfig+0x66>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a22      	ldr	r2, [pc, #136]	; (8004fc4 <TIM_TI1_SetConfig+0xdc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d007      	beq.n	8004f4e <TIM_TI1_SetConfig+0x66>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a21      	ldr	r2, [pc, #132]	; (8004fc8 <TIM_TI1_SetConfig+0xe0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d003      	beq.n	8004f4e <TIM_TI1_SetConfig+0x66>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a20      	ldr	r2, [pc, #128]	; (8004fcc <TIM_TI1_SetConfig+0xe4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <TIM_TI1_SetConfig+0x6a>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <TIM_TI1_SetConfig+0x6c>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e003      	b.n	8004f72 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f023 030a 	bic.w	r3, r3, #10
 8004f8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f003 030a 	and.w	r3, r3, #10
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40010400 	.word	0x40010400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40001800 	.word	0x40001800

08004fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0201 	bic.w	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 030a 	bic.w	r3, r3, #10
 800500c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	621a      	str	r2, [r3, #32]
}
 8005022:	bf00      	nop
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800502e:	b480      	push	{r7}
 8005030:	b087      	sub	sp, #28
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	f023 0210 	bic.w	r2, r3, #16
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800506c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	031b      	lsls	r3, r3, #12
 8005072:	b29b      	uxth	r3, r3
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005080:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f023 0210 	bic.w	r2, r3, #16
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	031b      	lsls	r3, r3, #12
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	621a      	str	r2, [r3, #32]
}
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f023 0303 	bic.w	r3, r3, #3
 8005134:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005144:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	b2db      	uxtb	r3, r3
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005158:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	031b      	lsls	r3, r3, #12
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80051d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	031b      	lsls	r3, r3, #12
 80051d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b087      	sub	sp, #28
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005214:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	021a      	lsls	r2, r3, #8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	431a      	orrs	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4313      	orrs	r3, r2
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	609a      	str	r2, [r3, #8]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005250:	2302      	movs	r3, #2
 8005252:	e06d      	b.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a30      	ldr	r2, [pc, #192]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2f      	ldr	r2, [pc, #188]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d108      	bne.n	800529a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800528e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a20      	ldr	r2, [pc, #128]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d022      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d01d      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d018      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d013      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1a      	ldr	r2, [pc, #104]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00e      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a15      	ldr	r2, [pc, #84]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d009      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a16      	ldr	r2, [pc, #88]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a15      	ldr	r2, [pc, #84]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10c      	bne.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40010000 	.word	0x40010000
 8005340:	40010400 	.word	0x40010400
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40014000 	.word	0x40014000
 8005354:	40001800 	.word	0x40001800

08005358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e040      	b.n	8005428 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc fc14 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2224      	movs	r2, #36	; 0x24
 80053c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8c0 	bl	8005558 <UART_SetConfig>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e022      	b.n	8005428 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fb16 	bl	8005a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800540e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fb9d 	bl	8005b60 <UART_CheckIdleState>
 8005426:	4603      	mov	r3, r0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005444:	2b20      	cmp	r3, #32
 8005446:	f040 8081 	bne.w	800554c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_UART_Transmit+0x26>
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e079      	b.n	800554e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_UART_Transmit+0x38>
 8005464:	2302      	movs	r3, #2
 8005466:	e072      	b.n	800554e <HAL_UART_Transmit+0x11e>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2221      	movs	r2, #33	; 0x21
 800547c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800547e:	f7fc fc6f 	bl	8001d60 <HAL_GetTick>
 8005482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	88fa      	ldrh	r2, [r7, #6]
 8005490:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549c:	d108      	bne.n	80054b0 <HAL_UART_Transmit+0x80>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	e003      	b.n	80054b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80054c0:	e02c      	b.n	800551c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2180      	movs	r1, #128	; 0x80
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fb90 	bl	8005bf2 <UART_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e038      	b.n	800554e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	3302      	adds	r3, #2
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	e007      	b.n	800550a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	3301      	adds	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1cc      	bne.n	80054c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2200      	movs	r2, #0
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fb5d 	bl	8005bf2 <UART_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e005      	b.n	800554e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4ba7      	ldr	r3, [pc, #668]	; (8005820 <UART_SetConfig+0x2c8>)
 8005584:	4013      	ands	r3, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	6979      	ldr	r1, [r7, #20]
 800558c:	430b      	orrs	r3, r1
 800558e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a95      	ldr	r2, [pc, #596]	; (8005824 <UART_SetConfig+0x2cc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d120      	bne.n	8005616 <UART_SetConfig+0xbe>
 80055d4:	4b94      	ldr	r3, [pc, #592]	; (8005828 <UART_SetConfig+0x2d0>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d816      	bhi.n	8005610 <UART_SetConfig+0xb8>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <UART_SetConfig+0x90>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005605 	.word	0x08005605
 80055f0:	080055ff 	.word	0x080055ff
 80055f4:	0800560b 	.word	0x0800560b
 80055f8:	2301      	movs	r3, #1
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e14f      	b.n	800589e <UART_SetConfig+0x346>
 80055fe:	2302      	movs	r3, #2
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e14c      	b.n	800589e <UART_SetConfig+0x346>
 8005604:	2304      	movs	r3, #4
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e149      	b.n	800589e <UART_SetConfig+0x346>
 800560a:	2308      	movs	r3, #8
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e146      	b.n	800589e <UART_SetConfig+0x346>
 8005610:	2310      	movs	r3, #16
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e143      	b.n	800589e <UART_SetConfig+0x346>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a84      	ldr	r2, [pc, #528]	; (800582c <UART_SetConfig+0x2d4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d132      	bne.n	8005686 <UART_SetConfig+0x12e>
 8005620:	4b81      	ldr	r3, [pc, #516]	; (8005828 <UART_SetConfig+0x2d0>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	f003 030c 	and.w	r3, r3, #12
 800562a:	2b0c      	cmp	r3, #12
 800562c:	d828      	bhi.n	8005680 <UART_SetConfig+0x128>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0xdc>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005669 	.word	0x08005669
 8005638:	08005681 	.word	0x08005681
 800563c:	08005681 	.word	0x08005681
 8005640:	08005681 	.word	0x08005681
 8005644:	08005675 	.word	0x08005675
 8005648:	08005681 	.word	0x08005681
 800564c:	08005681 	.word	0x08005681
 8005650:	08005681 	.word	0x08005681
 8005654:	0800566f 	.word	0x0800566f
 8005658:	08005681 	.word	0x08005681
 800565c:	08005681 	.word	0x08005681
 8005660:	08005681 	.word	0x08005681
 8005664:	0800567b 	.word	0x0800567b
 8005668:	2300      	movs	r3, #0
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e117      	b.n	800589e <UART_SetConfig+0x346>
 800566e:	2302      	movs	r3, #2
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e114      	b.n	800589e <UART_SetConfig+0x346>
 8005674:	2304      	movs	r3, #4
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e111      	b.n	800589e <UART_SetConfig+0x346>
 800567a:	2308      	movs	r3, #8
 800567c:	77fb      	strb	r3, [r7, #31]
 800567e:	e10e      	b.n	800589e <UART_SetConfig+0x346>
 8005680:	2310      	movs	r3, #16
 8005682:	77fb      	strb	r3, [r7, #31]
 8005684:	e10b      	b.n	800589e <UART_SetConfig+0x346>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a69      	ldr	r2, [pc, #420]	; (8005830 <UART_SetConfig+0x2d8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d120      	bne.n	80056d2 <UART_SetConfig+0x17a>
 8005690:	4b65      	ldr	r3, [pc, #404]	; (8005828 <UART_SetConfig+0x2d0>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800569a:	2b30      	cmp	r3, #48	; 0x30
 800569c:	d013      	beq.n	80056c6 <UART_SetConfig+0x16e>
 800569e:	2b30      	cmp	r3, #48	; 0x30
 80056a0:	d814      	bhi.n	80056cc <UART_SetConfig+0x174>
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d009      	beq.n	80056ba <UART_SetConfig+0x162>
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d810      	bhi.n	80056cc <UART_SetConfig+0x174>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <UART_SetConfig+0x15c>
 80056ae:	2b10      	cmp	r3, #16
 80056b0:	d006      	beq.n	80056c0 <UART_SetConfig+0x168>
 80056b2:	e00b      	b.n	80056cc <UART_SetConfig+0x174>
 80056b4:	2300      	movs	r3, #0
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e0f1      	b.n	800589e <UART_SetConfig+0x346>
 80056ba:	2302      	movs	r3, #2
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e0ee      	b.n	800589e <UART_SetConfig+0x346>
 80056c0:	2304      	movs	r3, #4
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e0eb      	b.n	800589e <UART_SetConfig+0x346>
 80056c6:	2308      	movs	r3, #8
 80056c8:	77fb      	strb	r3, [r7, #31]
 80056ca:	e0e8      	b.n	800589e <UART_SetConfig+0x346>
 80056cc:	2310      	movs	r3, #16
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e0e5      	b.n	800589e <UART_SetConfig+0x346>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a57      	ldr	r2, [pc, #348]	; (8005834 <UART_SetConfig+0x2dc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d120      	bne.n	800571e <UART_SetConfig+0x1c6>
 80056dc:	4b52      	ldr	r3, [pc, #328]	; (8005828 <UART_SetConfig+0x2d0>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056e6:	2bc0      	cmp	r3, #192	; 0xc0
 80056e8:	d013      	beq.n	8005712 <UART_SetConfig+0x1ba>
 80056ea:	2bc0      	cmp	r3, #192	; 0xc0
 80056ec:	d814      	bhi.n	8005718 <UART_SetConfig+0x1c0>
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d009      	beq.n	8005706 <UART_SetConfig+0x1ae>
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d810      	bhi.n	8005718 <UART_SetConfig+0x1c0>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <UART_SetConfig+0x1a8>
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d006      	beq.n	800570c <UART_SetConfig+0x1b4>
 80056fe:	e00b      	b.n	8005718 <UART_SetConfig+0x1c0>
 8005700:	2300      	movs	r3, #0
 8005702:	77fb      	strb	r3, [r7, #31]
 8005704:	e0cb      	b.n	800589e <UART_SetConfig+0x346>
 8005706:	2302      	movs	r3, #2
 8005708:	77fb      	strb	r3, [r7, #31]
 800570a:	e0c8      	b.n	800589e <UART_SetConfig+0x346>
 800570c:	2304      	movs	r3, #4
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e0c5      	b.n	800589e <UART_SetConfig+0x346>
 8005712:	2308      	movs	r3, #8
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e0c2      	b.n	800589e <UART_SetConfig+0x346>
 8005718:	2310      	movs	r3, #16
 800571a:	77fb      	strb	r3, [r7, #31]
 800571c:	e0bf      	b.n	800589e <UART_SetConfig+0x346>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a45      	ldr	r2, [pc, #276]	; (8005838 <UART_SetConfig+0x2e0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d125      	bne.n	8005774 <UART_SetConfig+0x21c>
 8005728:	4b3f      	ldr	r3, [pc, #252]	; (8005828 <UART_SetConfig+0x2d0>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005736:	d017      	beq.n	8005768 <UART_SetConfig+0x210>
 8005738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800573c:	d817      	bhi.n	800576e <UART_SetConfig+0x216>
 800573e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005742:	d00b      	beq.n	800575c <UART_SetConfig+0x204>
 8005744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005748:	d811      	bhi.n	800576e <UART_SetConfig+0x216>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <UART_SetConfig+0x1fe>
 800574e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005752:	d006      	beq.n	8005762 <UART_SetConfig+0x20a>
 8005754:	e00b      	b.n	800576e <UART_SetConfig+0x216>
 8005756:	2300      	movs	r3, #0
 8005758:	77fb      	strb	r3, [r7, #31]
 800575a:	e0a0      	b.n	800589e <UART_SetConfig+0x346>
 800575c:	2302      	movs	r3, #2
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e09d      	b.n	800589e <UART_SetConfig+0x346>
 8005762:	2304      	movs	r3, #4
 8005764:	77fb      	strb	r3, [r7, #31]
 8005766:	e09a      	b.n	800589e <UART_SetConfig+0x346>
 8005768:	2308      	movs	r3, #8
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e097      	b.n	800589e <UART_SetConfig+0x346>
 800576e:	2310      	movs	r3, #16
 8005770:	77fb      	strb	r3, [r7, #31]
 8005772:	e094      	b.n	800589e <UART_SetConfig+0x346>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a30      	ldr	r2, [pc, #192]	; (800583c <UART_SetConfig+0x2e4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d125      	bne.n	80057ca <UART_SetConfig+0x272>
 800577e:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <UART_SetConfig+0x2d0>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800578c:	d017      	beq.n	80057be <UART_SetConfig+0x266>
 800578e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005792:	d817      	bhi.n	80057c4 <UART_SetConfig+0x26c>
 8005794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005798:	d00b      	beq.n	80057b2 <UART_SetConfig+0x25a>
 800579a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579e:	d811      	bhi.n	80057c4 <UART_SetConfig+0x26c>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <UART_SetConfig+0x254>
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a8:	d006      	beq.n	80057b8 <UART_SetConfig+0x260>
 80057aa:	e00b      	b.n	80057c4 <UART_SetConfig+0x26c>
 80057ac:	2301      	movs	r3, #1
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	e075      	b.n	800589e <UART_SetConfig+0x346>
 80057b2:	2302      	movs	r3, #2
 80057b4:	77fb      	strb	r3, [r7, #31]
 80057b6:	e072      	b.n	800589e <UART_SetConfig+0x346>
 80057b8:	2304      	movs	r3, #4
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e06f      	b.n	800589e <UART_SetConfig+0x346>
 80057be:	2308      	movs	r3, #8
 80057c0:	77fb      	strb	r3, [r7, #31]
 80057c2:	e06c      	b.n	800589e <UART_SetConfig+0x346>
 80057c4:	2310      	movs	r3, #16
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e069      	b.n	800589e <UART_SetConfig+0x346>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <UART_SetConfig+0x2e8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d137      	bne.n	8005844 <UART_SetConfig+0x2ec>
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <UART_SetConfig+0x2d0>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80057de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057e2:	d017      	beq.n	8005814 <UART_SetConfig+0x2bc>
 80057e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057e8:	d817      	bhi.n	800581a <UART_SetConfig+0x2c2>
 80057ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ee:	d00b      	beq.n	8005808 <UART_SetConfig+0x2b0>
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d811      	bhi.n	800581a <UART_SetConfig+0x2c2>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <UART_SetConfig+0x2aa>
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	d006      	beq.n	800580e <UART_SetConfig+0x2b6>
 8005800:	e00b      	b.n	800581a <UART_SetConfig+0x2c2>
 8005802:	2300      	movs	r3, #0
 8005804:	77fb      	strb	r3, [r7, #31]
 8005806:	e04a      	b.n	800589e <UART_SetConfig+0x346>
 8005808:	2302      	movs	r3, #2
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e047      	b.n	800589e <UART_SetConfig+0x346>
 800580e:	2304      	movs	r3, #4
 8005810:	77fb      	strb	r3, [r7, #31]
 8005812:	e044      	b.n	800589e <UART_SetConfig+0x346>
 8005814:	2308      	movs	r3, #8
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	e041      	b.n	800589e <UART_SetConfig+0x346>
 800581a:	2310      	movs	r3, #16
 800581c:	77fb      	strb	r3, [r7, #31]
 800581e:	e03e      	b.n	800589e <UART_SetConfig+0x346>
 8005820:	efff69f3 	.word	0xefff69f3
 8005824:	40011000 	.word	0x40011000
 8005828:	40023800 	.word	0x40023800
 800582c:	40004400 	.word	0x40004400
 8005830:	40004800 	.word	0x40004800
 8005834:	40004c00 	.word	0x40004c00
 8005838:	40005000 	.word	0x40005000
 800583c:	40011400 	.word	0x40011400
 8005840:	40007800 	.word	0x40007800
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a71      	ldr	r2, [pc, #452]	; (8005a10 <UART_SetConfig+0x4b8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d125      	bne.n	800589a <UART_SetConfig+0x342>
 800584e:	4b71      	ldr	r3, [pc, #452]	; (8005a14 <UART_SetConfig+0x4bc>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005858:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800585c:	d017      	beq.n	800588e <UART_SetConfig+0x336>
 800585e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005862:	d817      	bhi.n	8005894 <UART_SetConfig+0x33c>
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005868:	d00b      	beq.n	8005882 <UART_SetConfig+0x32a>
 800586a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586e:	d811      	bhi.n	8005894 <UART_SetConfig+0x33c>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <UART_SetConfig+0x324>
 8005874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005878:	d006      	beq.n	8005888 <UART_SetConfig+0x330>
 800587a:	e00b      	b.n	8005894 <UART_SetConfig+0x33c>
 800587c:	2300      	movs	r3, #0
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e00d      	b.n	800589e <UART_SetConfig+0x346>
 8005882:	2302      	movs	r3, #2
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e00a      	b.n	800589e <UART_SetConfig+0x346>
 8005888:	2304      	movs	r3, #4
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e007      	b.n	800589e <UART_SetConfig+0x346>
 800588e:	2308      	movs	r3, #8
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e004      	b.n	800589e <UART_SetConfig+0x346>
 8005894:	2310      	movs	r3, #16
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e001      	b.n	800589e <UART_SetConfig+0x346>
 800589a:	2310      	movs	r3, #16
 800589c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a6:	d15b      	bne.n	8005960 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80058a8:	7ffb      	ldrb	r3, [r7, #31]
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d827      	bhi.n	80058fe <UART_SetConfig+0x3a6>
 80058ae:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x35c>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058e9 	.word	0x080058e9
 80058c0:	080058ff 	.word	0x080058ff
 80058c4:	080058ef 	.word	0x080058ef
 80058c8:	080058ff 	.word	0x080058ff
 80058cc:	080058ff 	.word	0x080058ff
 80058d0:	080058ff 	.word	0x080058ff
 80058d4:	080058f7 	.word	0x080058f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fd fdda 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 80058dc:	61b8      	str	r0, [r7, #24]
        break;
 80058de:	e013      	b.n	8005908 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e0:	f7fd fdea 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 80058e4:	61b8      	str	r0, [r7, #24]
        break;
 80058e6:	e00f      	b.n	8005908 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e8:	4b4b      	ldr	r3, [pc, #300]	; (8005a18 <UART_SetConfig+0x4c0>)
 80058ea:	61bb      	str	r3, [r7, #24]
        break;
 80058ec:	e00c      	b.n	8005908 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ee:	f7fd fd0d 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80058f2:	61b8      	str	r0, [r7, #24]
        break;
 80058f4:	e008      	b.n	8005908 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fa:	61bb      	str	r3, [r7, #24]
        break;
 80058fc:	e004      	b.n	8005908 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	77bb      	strb	r3, [r7, #30]
        break;
 8005906:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d074      	beq.n	80059f8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	005a      	lsls	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	441a      	add	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	b29b      	uxth	r3, r3
 8005924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d916      	bls.n	800595a <UART_SetConfig+0x402>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005932:	d212      	bcs.n	800595a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f023 030f 	bic.w	r3, r3, #15
 800593c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	b29b      	uxth	r3, r3
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	b29a      	uxth	r2, r3
 800594a:	89fb      	ldrh	r3, [r7, #14]
 800594c:	4313      	orrs	r3, r2
 800594e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	89fa      	ldrh	r2, [r7, #14]
 8005956:	60da      	str	r2, [r3, #12]
 8005958:	e04e      	b.n	80059f8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	77bb      	strb	r3, [r7, #30]
 800595e:	e04b      	b.n	80059f8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005960:	7ffb      	ldrb	r3, [r7, #31]
 8005962:	2b08      	cmp	r3, #8
 8005964:	d827      	bhi.n	80059b6 <UART_SetConfig+0x45e>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0x414>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	08005991 	.word	0x08005991
 8005970:	08005999 	.word	0x08005999
 8005974:	080059a1 	.word	0x080059a1
 8005978:	080059b7 	.word	0x080059b7
 800597c:	080059a7 	.word	0x080059a7
 8005980:	080059b7 	.word	0x080059b7
 8005984:	080059b7 	.word	0x080059b7
 8005988:	080059b7 	.word	0x080059b7
 800598c:	080059af 	.word	0x080059af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005990:	f7fd fd7e 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 8005994:	61b8      	str	r0, [r7, #24]
        break;
 8005996:	e013      	b.n	80059c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005998:	f7fd fd8e 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 800599c:	61b8      	str	r0, [r7, #24]
        break;
 800599e:	e00f      	b.n	80059c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <UART_SetConfig+0x4c0>)
 80059a2:	61bb      	str	r3, [r7, #24]
        break;
 80059a4:	e00c      	b.n	80059c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a6:	f7fd fcb1 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80059aa:	61b8      	str	r0, [r7, #24]
        break;
 80059ac:	e008      	b.n	80059c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b2:	61bb      	str	r3, [r7, #24]
        break;
 80059b4:	e004      	b.n	80059c0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	77bb      	strb	r3, [r7, #30]
        break;
 80059be:	bf00      	nop
    }

    if (pclk != 0U)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d018      	beq.n	80059f8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	085a      	lsrs	r2, r3, #1
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	441a      	add	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	b29b      	uxth	r3, r3
 80059da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	d908      	bls.n	80059f4 <UART_SetConfig+0x49c>
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e8:	d204      	bcs.n	80059f4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	e001      	b.n	80059f8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a04:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40007c00 	.word	0x40007c00
 8005a14:	40023800 	.word	0x40023800
 8005a18:	00f42400 	.word	0x00f42400

08005a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01a      	beq.n	8005b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b1a:	d10a      	bne.n	8005b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  }
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b70:	f7fc f8f6 	bl	8001d60 <HAL_GetTick>
 8005b74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d10e      	bne.n	8005ba2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f82d 	bl	8005bf2 <UART_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e023      	b.n	8005bea <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d10e      	bne.n	8005bce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f817 	bl	8005bf2 <UART_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e00d      	b.n	8005bea <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c02:	e05e      	b.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d05a      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0c:	f7fc f8a8 	bl	8001d60 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d302      	bcc.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d11b      	bne.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0201 	bic.w	r2, r2, #1
 8005c40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e043      	b.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02c      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c76:	d124      	bne.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e00f      	b.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	bf0c      	ite	eq
 8005cd2:	2301      	moveq	r3, #1
 8005cd4:	2300      	movne	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d091      	beq.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <__libc_init_array>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	4d0d      	ldr	r5, [pc, #52]	; (8005d24 <__libc_init_array+0x38>)
 8005cf0:	4c0d      	ldr	r4, [pc, #52]	; (8005d28 <__libc_init_array+0x3c>)
 8005cf2:	1b64      	subs	r4, r4, r5
 8005cf4:	10a4      	asrs	r4, r4, #2
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	42a6      	cmp	r6, r4
 8005cfa:	d109      	bne.n	8005d10 <__libc_init_array+0x24>
 8005cfc:	4d0b      	ldr	r5, [pc, #44]	; (8005d2c <__libc_init_array+0x40>)
 8005cfe:	4c0c      	ldr	r4, [pc, #48]	; (8005d30 <__libc_init_array+0x44>)
 8005d00:	f000 f864 	bl	8005dcc <_init>
 8005d04:	1b64      	subs	r4, r4, r5
 8005d06:	10a4      	asrs	r4, r4, #2
 8005d08:	2600      	movs	r6, #0
 8005d0a:	42a6      	cmp	r6, r4
 8005d0c:	d105      	bne.n	8005d1a <__libc_init_array+0x2e>
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d14:	4798      	blx	r3
 8005d16:	3601      	adds	r6, #1
 8005d18:	e7ee      	b.n	8005cf8 <__libc_init_array+0xc>
 8005d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d1e:	4798      	blx	r3
 8005d20:	3601      	adds	r6, #1
 8005d22:	e7f2      	b.n	8005d0a <__libc_init_array+0x1e>
 8005d24:	080060c0 	.word	0x080060c0
 8005d28:	080060c0 	.word	0x080060c0
 8005d2c:	080060c0 	.word	0x080060c0
 8005d30:	080060c4 	.word	0x080060c4

08005d34 <memset>:
 8005d34:	4402      	add	r2, r0
 8005d36:	4603      	mov	r3, r0
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d100      	bne.n	8005d3e <memset+0xa>
 8005d3c:	4770      	bx	lr
 8005d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d42:	e7f9      	b.n	8005d38 <memset+0x4>

08005d44 <__utoa>:
 8005d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d46:	4c1f      	ldr	r4, [pc, #124]	; (8005dc4 <__utoa+0x80>)
 8005d48:	b08b      	sub	sp, #44	; 0x2c
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	466e      	mov	r6, sp
 8005d50:	f104 0c20 	add.w	ip, r4, #32
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	6861      	ldr	r1, [r4, #4]
 8005d58:	4637      	mov	r7, r6
 8005d5a:	c703      	stmia	r7!, {r0, r1}
 8005d5c:	3408      	adds	r4, #8
 8005d5e:	4564      	cmp	r4, ip
 8005d60:	463e      	mov	r6, r7
 8005d62:	d1f7      	bne.n	8005d54 <__utoa+0x10>
 8005d64:	7921      	ldrb	r1, [r4, #4]
 8005d66:	7139      	strb	r1, [r7, #4]
 8005d68:	1e91      	subs	r1, r2, #2
 8005d6a:	6820      	ldr	r0, [r4, #0]
 8005d6c:	6038      	str	r0, [r7, #0]
 8005d6e:	2922      	cmp	r1, #34	; 0x22
 8005d70:	f04f 0100 	mov.w	r1, #0
 8005d74:	d904      	bls.n	8005d80 <__utoa+0x3c>
 8005d76:	7019      	strb	r1, [r3, #0]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	b00b      	add	sp, #44	; 0x2c
 8005d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d80:	1e58      	subs	r0, r3, #1
 8005d82:	4684      	mov	ip, r0
 8005d84:	fbb5 f7f2 	udiv	r7, r5, r2
 8005d88:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005d8c:	fb02 5617 	mls	r6, r2, r7, r5
 8005d90:	4476      	add	r6, lr
 8005d92:	460c      	mov	r4, r1
 8005d94:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005d98:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005d9c:	462e      	mov	r6, r5
 8005d9e:	42b2      	cmp	r2, r6
 8005da0:	f101 0101 	add.w	r1, r1, #1
 8005da4:	463d      	mov	r5, r7
 8005da6:	d9ed      	bls.n	8005d84 <__utoa+0x40>
 8005da8:	2200      	movs	r2, #0
 8005daa:	545a      	strb	r2, [r3, r1]
 8005dac:	1919      	adds	r1, r3, r4
 8005dae:	1aa5      	subs	r5, r4, r2
 8005db0:	42aa      	cmp	r2, r5
 8005db2:	dae2      	bge.n	8005d7a <__utoa+0x36>
 8005db4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005db8:	780e      	ldrb	r6, [r1, #0]
 8005dba:	7006      	strb	r6, [r0, #0]
 8005dbc:	3201      	adds	r2, #1
 8005dbe:	f801 5901 	strb.w	r5, [r1], #-1
 8005dc2:	e7f4      	b.n	8005dae <__utoa+0x6a>
 8005dc4:	08006090 	.word	0x08006090

08005dc8 <utoa>:
 8005dc8:	f7ff bfbc 	b.w	8005d44 <__utoa>

08005dcc <_init>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr

08005dd8 <_fini>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	bf00      	nop
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr
