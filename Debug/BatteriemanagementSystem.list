
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080050b4  080050b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050cc  080050cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d4  080050d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080050dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  080050e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080050e8  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ebd  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d03  00000000  00000000  00034ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00037c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00038dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000344a  00000000  00000000  00039e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016165  00000000  00000000  0003d2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106d19  00000000  00000000  00053407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  0015a174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800509c 	.word	0x0800509c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800509c 	.word	0x0800509c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <power_on>:
//----------------------------------------------------------------------

// Selbsterhalten einschalten / DCDC-Wandler einschalten
//----------------------------------------------------------------------
void power_on(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	system_out.Power_On = 1;																		// Power On Variable setzen
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <power_on+0x28>)
 8000536:	7813      	ldrb	r3, [r2, #0]
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, system_out.Power_On);						// Selbsthaltung DCDC-Wandler Motorsteuergeraet
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <power_on+0x28>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <power_on+0x2c>)
 8000550:	f001 fe04 	bl	800215c <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000030 	.word	0x20000030
 800055c:	40020800 	.word	0x40020800

08000560 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <MX_ADC1_Init+0x98>)
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <MX_ADC1_Init+0x9c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <MX_ADC1_Init+0x98>)
 800057a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <MX_ADC1_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <MX_ADC1_Init+0x98>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_ADC1_Init+0x98>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <MX_ADC1_Init+0x98>)
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_ADC1_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_ADC1_Init+0x98>)
 80005a2:	4a17      	ldr	r2, [pc, #92]	; (8000600 <MX_ADC1_Init+0xa0>)
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_ADC1_Init+0x98>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <MX_ADC1_Init+0x98>)
 80005c2:	f000 ffb5 	bl	8001530 <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005cc:	f000 fb86 	bl	8000cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_ADC1_Init+0x98>)
 80005e2:	f000 ffe9 	bl	80015b8 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005ec:	f000 fb76 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000003c 	.word	0x2000003c
 80005fc:	40012000 	.word	0x40012000
 8000600:	0f000001 	.word	0x0f000001

08000604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_ADC_MspInit+0x74>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d123      	bne.n	800066e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_ADC_MspInit+0x78>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <HAL_ADC_MspInit+0x78>)
 800062c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000630:	6453      	str	r3, [r2, #68]	; 0x44
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_ADC_MspInit+0x78>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_ADC_MspInit+0x78>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_ADC_MspInit+0x78>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_ADC_MspInit+0x78>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8000656:	23f8      	movs	r3, #248	; 0xf8
 8000658:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065a:	2303      	movs	r3, #3
 800065c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <HAL_ADC_MspInit+0x7c>)
 800066a:	f001 fbcb 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40012000 	.word	0x40012000
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000

08000684 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_CAN1_Init+0x64>)
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MX_CAN1_Init+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_CAN1_Init+0x64>)
 8000690:	2210      	movs	r2, #16
 8000692:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_CAN1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_CAN1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_CAN1_Init+0x64>)
 80006d4:	f001 f9b4 	bl	8001a40 <HAL_CAN_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 fafd 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000ac 	.word	0x200000ac
 80006ec:	40006400 	.word	0x40006400

080006f0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_CAN3_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <MX_CAN3_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_CAN3_Init+0x64>)
 80006fc:	2206      	movs	r2, #6
 80006fe:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_CAN3_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_CAN3_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_CAN3_Init+0x64>)
 800070e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000712:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_CAN3_Init+0x64>)
 8000716:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800071a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_CAN3_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_CAN3_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_CAN3_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_CAN3_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_CAN3_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_CAN3_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_CAN3_Init+0x64>)
 8000742:	f001 f97d 	bl	8001a40 <HAL_CAN_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 fac6 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000084 	.word	0x20000084
 8000758:	40003400 	.word	0x40003400

0800075c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08e      	sub	sp, #56	; 0x38
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a43      	ldr	r2, [pc, #268]	; (8000888 <HAL_CAN_MspInit+0x12c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d131      	bne.n	80007e2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800077e:	4b43      	ldr	r3, [pc, #268]	; (800088c <HAL_CAN_MspInit+0x130>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	4a41      	ldr	r2, [pc, #260]	; (800088c <HAL_CAN_MspInit+0x130>)
 8000786:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000788:	4b40      	ldr	r3, [pc, #256]	; (800088c <HAL_CAN_MspInit+0x130>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d10b      	bne.n	80007a8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000790:	4b3f      	ldr	r3, [pc, #252]	; (8000890 <HAL_CAN_MspInit+0x134>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a3e      	ldr	r2, [pc, #248]	; (8000890 <HAL_CAN_MspInit+0x134>)
 8000796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b3c      	ldr	r3, [pc, #240]	; (8000890 <HAL_CAN_MspInit+0x134>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007a4:	623b      	str	r3, [r7, #32]
 80007a6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a8:	4b39      	ldr	r3, [pc, #228]	; (8000890 <HAL_CAN_MspInit+0x134>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a38      	ldr	r2, [pc, #224]	; (8000890 <HAL_CAN_MspInit+0x134>)
 80007ae:	f043 0308 	orr.w	r3, r3, #8
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <HAL_CAN_MspInit+0x134>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	61fb      	str	r3, [r7, #28]
 80007be:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007c0:	2303      	movs	r3, #3
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007d0:	2309      	movs	r3, #9
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	482e      	ldr	r0, [pc, #184]	; (8000894 <HAL_CAN_MspInit+0x138>)
 80007dc:	f001 fb12 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80007e0:	e04e      	b.n	8000880 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <HAL_CAN_MspInit+0x13c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d149      	bne.n	8000880 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <HAL_CAN_MspInit+0x134>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a27      	ldr	r2, [pc, #156]	; (8000890 <HAL_CAN_MspInit+0x134>)
 80007f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <HAL_CAN_MspInit+0x134>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_CAN_MspInit+0x134>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <HAL_CAN_MspInit+0x134>)
 800080a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <HAL_CAN_MspInit+0x134>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <HAL_CAN_MspInit+0x130>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a1a      	ldr	r2, [pc, #104]	; (800088c <HAL_CAN_MspInit+0x130>)
 8000824:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_CAN_MspInit+0x130>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d10b      	bne.n	8000846 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_CAN_MspInit+0x134>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a17      	ldr	r2, [pc, #92]	; (8000890 <HAL_CAN_MspInit+0x134>)
 8000834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_CAN_MspInit+0x134>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_CAN_MspInit+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a11      	ldr	r2, [pc, #68]	; (8000890 <HAL_CAN_MspInit+0x134>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_CAN_MspInit+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800085e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8000870:	230b      	movs	r3, #11
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	4808      	ldr	r0, [pc, #32]	; (800089c <HAL_CAN_MspInit+0x140>)
 800087c:	f001 fac2 	bl	8001e04 <HAL_GPIO_Init>
}
 8000880:	bf00      	nop
 8000882:	3738      	adds	r7, #56	; 0x38
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40006400 	.word	0x40006400
 800088c:	20000028 	.word	0x20000028
 8000890:	40023800 	.word	0x40023800
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40003400 	.word	0x40003400
 800089c:	40020000 	.word	0x40020000

080008a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	4ba9      	ldr	r3, [pc, #676]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4aa8      	ldr	r2, [pc, #672]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4ba6      	ldr	r3, [pc, #664]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	623b      	str	r3, [r7, #32]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4ba3      	ldr	r3, [pc, #652]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4aa2      	ldr	r2, [pc, #648]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4ba0      	ldr	r3, [pc, #640]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	61fb      	str	r3, [r7, #28]
 80008e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e6:	4b9d      	ldr	r3, [pc, #628]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a9c      	ldr	r2, [pc, #624]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b9a      	ldr	r3, [pc, #616]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	4b97      	ldr	r3, [pc, #604]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a96      	ldr	r2, [pc, #600]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b94      	ldr	r3, [pc, #592]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b91      	ldr	r3, [pc, #580]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a90      	ldr	r2, [pc, #576]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b8e      	ldr	r3, [pc, #568]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b8b      	ldr	r3, [pc, #556]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a8a      	ldr	r2, [pc, #552]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b88      	ldr	r3, [pc, #544]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	4b85      	ldr	r3, [pc, #532]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a84      	ldr	r2, [pc, #528]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b82      	ldr	r3, [pc, #520]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095e:	4b7f      	ldr	r3, [pc, #508]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a7e      	ldr	r2, [pc, #504]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 8000964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b7c      	ldr	r3, [pc, #496]	; (8000b5c <MX_GPIO_Init+0x2bc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8000976:	2200      	movs	r2, #0
 8000978:	f248 0187 	movw	r1, #32903	; 0x8087
 800097c:	4878      	ldr	r0, [pc, #480]	; (8000b60 <MX_GPIO_Init+0x2c0>)
 800097e:	f001 fbed 	bl	800215c <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin|PRECHARGE_IN_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f24a 0102 	movw	r1, #40962	; 0xa002
 8000988:	4876      	ldr	r0, [pc, #472]	; (8000b64 <MX_GPIO_Init+0x2c4>)
 800098a:	f001 fbe7 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f240 6102 	movw	r1, #1538	; 0x602
 8000994:	4874      	ldr	r0, [pc, #464]	; (8000b68 <MX_GPIO_Init+0x2c8>)
 8000996:	f001 fbe1 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f244 0184 	movw	r1, #16516	; 0x4084
 80009a0:	4872      	ldr	r0, [pc, #456]	; (8000b6c <MX_GPIO_Init+0x2cc>)
 80009a2:	f001 fbdb 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80009a6:	2200      	movs	r2, #0
 80009a8:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 80009ac:	4870      	ldr	r0, [pc, #448]	; (8000b70 <MX_GPIO_Init+0x2d0>)
 80009ae:	f001 fbd5 	bl	800215c <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2118      	movs	r1, #24
 80009b6:	486f      	ldr	r0, [pc, #444]	; (8000b74 <MX_GPIO_Init+0x2d4>)
 80009b8:	f001 fbd0 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80009bc:	f248 0387 	movw	r3, #32903	; 0x8087
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4862      	ldr	r0, [pc, #392]	; (8000b60 <MX_GPIO_Init+0x2c0>)
 80009d6:	f001 fa15 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 80009da:	f44f 739c 	mov.w	r3, #312	; 0x138
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	485c      	ldr	r0, [pc, #368]	; (8000b60 <MX_GPIO_Init+0x2c0>)
 80009f0:	f001 fa08 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fa:	4b5f      	ldr	r3, [pc, #380]	; (8000b78 <MX_GPIO_Init+0x2d8>)
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	485c      	ldr	r0, [pc, #368]	; (8000b7c <MX_GPIO_Init+0x2dc>)
 8000a0a:	f001 f9fb 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin|PRECHARGE_IN_Pin;
 8000a0e:	f24a 0302 	movw	r3, #40962	; 0xa002
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	484f      	ldr	r0, [pc, #316]	; (8000b64 <MX_GPIO_Init+0x2c4>)
 8000a28:	f001 f9ec 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OVC_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4849      	ldr	r0, [pc, #292]	; (8000b64 <MX_GPIO_Init+0x2c4>)
 8000a40:	f001 f9e0 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8000a44:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4842      	ldr	r0, [pc, #264]	; (8000b64 <MX_GPIO_Init+0x2c4>)
 8000a5a:	f001 f9d3 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8000a5e:	f240 6302 	movw	r3, #1538	; 0x602
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	483c      	ldr	r0, [pc, #240]	; (8000b68 <MX_GPIO_Init+0x2c8>)
 8000a78:	f001 f9c4 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8000a7c:	f244 0384 	movw	r3, #16516	; 0x4084
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4835      	ldr	r0, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x2cc>)
 8000a96:	f001 f9b5 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8000a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	4619      	mov	r1, r3
 8000aae:	4831      	ldr	r0, [pc, #196]	; (8000b74 <MX_GPIO_Init+0x2d4>)
 8000ab0:	f001 f9a8 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8000ab4:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	4828      	ldr	r0, [pc, #160]	; (8000b70 <MX_GPIO_Init+0x2d0>)
 8000ace:	f001 f999 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SD_SW_Pin|SD_D0_Pin|SD_D1_Pin|SD_D2_Pin
 8000ad2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4825      	ldr	r0, [pc, #148]	; (8000b7c <MX_GPIO_Init+0x2dc>)
 8000ae8:	f001 f98c 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin;
 8000aec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4819      	ldr	r0, [pc, #100]	; (8000b68 <MX_GPIO_Init+0x2c8>)
 8000b02:	f001 f97f 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8000b06:	2304      	movs	r3, #4
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4816      	ldr	r0, [pc, #88]	; (8000b74 <MX_GPIO_Init+0x2d4>)
 8000b1a:	f001 f973 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8000b1e:	2318      	movs	r3, #24
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <MX_GPIO_Init+0x2d4>)
 8000b36:	f001 f965 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b40:	2303      	movs	r3, #3
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <MX_GPIO_Init+0x2cc>)
 8000b50:	f001 f958 	bl	8001e04 <HAL_GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3738      	adds	r7, #56	; 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40021400 	.word	0x40021400
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	40020800 	.word	0x40020800

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f000 fc8b 	bl	800149e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f816 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f7ff fe88 	bl	80008a0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b90:	f7ff fd78 	bl	8000684 <MX_CAN1_Init>
  MX_SPI4_Init();
 8000b94:	f000 f8e8 	bl	8000d68 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8000b98:	f000 fbe4 	bl	8001364 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b9c:	f7ff fce0 	bl	8000560 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ba0:	f000 fa24 	bl	8000fec <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ba4:	f000 fac6 	bl	8001134 <MX_TIM4_Init>
  MX_SPI1_Init();
 8000ba8:	f000 f8a0 	bl	8000cec <MX_SPI1_Init>
  MX_CAN3_Init();
 8000bac:	f7ff fda0 	bl	80006f0 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

  // DCDC-Wandler Selbsterhaltung
  power_on();
 8000bb0:	f7ff fcbe 	bl	8000530 <power_on>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <main+0x34>
	...

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	; 0xe0
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bc2:	2234      	movs	r2, #52	; 0x34
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f004 fa60 	bl	800508c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	2290      	movs	r2, #144	; 0x90
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 fa51 	bl	800508c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <SystemClock_Config+0x11c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a39      	ldr	r2, [pc, #228]	; (8000cd4 <SystemClock_Config+0x11c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <SystemClock_Config+0x11c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c02:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <SystemClock_Config+0x120>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a34      	ldr	r2, [pc, #208]	; (8000cd8 <SystemClock_Config+0x120>)
 8000c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <SystemClock_Config+0x120>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c36:	2319      	movs	r3, #25
 8000c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000c3c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fae8 	bl	8002230 <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c66:	f000 f839 	bl	8000cdc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c6a:	f001 fa91 	bl	8002190 <HAL_PWREx_EnableOverDrive>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c74:	f000 f832 	bl	8000cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c78:	230f      	movs	r3, #15
 8000c7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c9e:	2107      	movs	r1, #7
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fd73 	bl	800278c <HAL_RCC_ClockConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000cac:	f000 f816 	bl	8000cdc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 ff3b 	bl	8002b38 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000cc8:	f000 f808 	bl	8000cdc <Error_Handler>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	37e0      	adds	r7, #224	; 0xe0
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40007000 	.word	0x40007000

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_SPI1_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_SPI1_Init+0x74>)
 8000d4c:	f002 fb1c 	bl	8003388 <HAL_SPI_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f7ff ffc1 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000138 	.word	0x20000138
 8000d64:	40013000 	.word	0x40013000

08000d68 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <MX_SPI4_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d78:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000d82:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d86:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000d96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d9a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000db6:	2207      	movs	r2, #7
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_SPI4_Init+0x74>)
 8000dc8:	f002 fade 	bl	8003388 <HAL_SPI_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f7ff ff83 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000d4 	.word	0x200000d4
 8000de0:	40013400 	.word	0x40013400

08000de4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a3d      	ldr	r2, [pc, #244]	; (8000ef8 <HAL_SPI_MspInit+0x114>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d145      	bne.n	8000e92 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a3c      	ldr	r2, [pc, #240]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	4b37      	ldr	r3, [pc, #220]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a36      	ldr	r2, [pc, #216]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b34      	ldr	r3, [pc, #208]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a30      	ldr	r2, [pc, #192]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4825      	ldr	r0, [pc, #148]	; (8000f00 <HAL_SPI_MspInit+0x11c>)
 8000e6a:	f000 ffcb 	bl	8001e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8000e6e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e80:	2305      	movs	r3, #5
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481e      	ldr	r0, [pc, #120]	; (8000f04 <HAL_SPI_MspInit+0x120>)
 8000e8c:	f000 ffba 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000e90:	e02d      	b.n	8000eee <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <HAL_SPI_MspInit+0x124>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d128      	bne.n	8000eee <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	4a16      	ldr	r2, [pc, #88]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000ea2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a10      	ldr	r2, [pc, #64]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_SPI_MspInit+0x118>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8000ecc:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4808      	ldr	r0, [pc, #32]	; (8000f0c <HAL_SPI_MspInit+0x128>)
 8000eea:	f000 ff8b 	bl	8001e04 <HAL_GPIO_Init>
}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	; 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40021800 	.word	0x40021800
 8000f08:	40013400 	.word	0x40013400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	210f      	movs	r1, #15
 8000f4a:	f06f 0001 	mvn.w	r0, #1
 8000f4e:	f000 ff30 	bl	8001db2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <SystemInit+0x28>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <SystemInit+0x28>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SystemInit+0x28>)
 8000fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fda:	609a      	str	r2, [r3, #8]
#endif
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b090      	sub	sp, #64	; 0x40
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001028:	4b40      	ldr	r3, [pc, #256]	; (800112c <MX_TIM1_Init+0x140>)
 800102a:	4a41      	ldr	r2, [pc, #260]	; (8001130 <MX_TIM1_Init+0x144>)
 800102c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800102e:	4b3f      	ldr	r3, [pc, #252]	; (800112c <MX_TIM1_Init+0x140>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b3d      	ldr	r3, [pc, #244]	; (800112c <MX_TIM1_Init+0x140>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800103a:	4b3c      	ldr	r3, [pc, #240]	; (800112c <MX_TIM1_Init+0x140>)
 800103c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001040:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b3a      	ldr	r3, [pc, #232]	; (800112c <MX_TIM1_Init+0x140>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <MX_TIM1_Init+0x140>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <MX_TIM1_Init+0x140>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001054:	4835      	ldr	r0, [pc, #212]	; (800112c <MX_TIM1_Init+0x140>)
 8001056:	f002 fa42 	bl	80034de <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001060:	f7ff fe3c 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800106a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106e:	4619      	mov	r1, r3
 8001070:	482e      	ldr	r0, [pc, #184]	; (800112c <MX_TIM1_Init+0x140>)
 8001072:	f002 fce7 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800107c:	f7ff fe2e 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001080:	482a      	ldr	r0, [pc, #168]	; (800112c <MX_TIM1_Init+0x140>)
 8001082:	f002 fada 	bl	800363a <HAL_TIM_IC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800108c:	f7ff fe26 	bl	8000cdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001090:	2304      	movs	r3, #4
 8001092:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001094:	2350      	movs	r3, #80	; 0x50
 8001096:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4820      	ldr	r0, [pc, #128]	; (800112c <MX_TIM1_Init+0x140>)
 80010ac:	f002 fd90 	bl	8003bd0 <HAL_TIM_SlaveConfigSynchro>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80010b6:	f7ff fe11 	bl	8000cdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010be:	2301      	movs	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	4816      	ldr	r0, [pc, #88]	; (800112c <MX_TIM1_Init+0x140>)
 80010d4:	f002 fb12 	bl	80036fc <HAL_TIM_IC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80010de:	f7ff fdfd 	bl	8000cdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010e2:	2302      	movs	r3, #2
 80010e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2204      	movs	r2, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <MX_TIM1_Init+0x140>)
 80010f4:	f002 fb02 	bl	80036fc <HAL_TIM_IC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010fe:	f7ff fded 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_TIM1_Init+0x140>)
 8001114:	f003 faf0 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800111e:	f7ff fddd 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3740      	adds	r7, #64	; 0x40
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001e8 	.word	0x200001e8
 8001130:	40010000 	.word	0x40010000

08001134 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]
 8001156:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001158:	4b32      	ldr	r3, [pc, #200]	; (8001224 <MX_TIM4_Init+0xf0>)
 800115a:	4a33      	ldr	r2, [pc, #204]	; (8001228 <MX_TIM4_Init+0xf4>)
 800115c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <MX_TIM4_Init+0xf0>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <MX_TIM4_Init+0xf0>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <MX_TIM4_Init+0xf0>)
 800116c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001170:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <MX_TIM4_Init+0xf0>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_TIM4_Init+0xf0>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800117e:	4829      	ldr	r0, [pc, #164]	; (8001224 <MX_TIM4_Init+0xf0>)
 8001180:	f002 fa04 	bl	800358c <HAL_TIM_PWM_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800118a:	f7ff fda7 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4821      	ldr	r0, [pc, #132]	; (8001224 <MX_TIM4_Init+0xf0>)
 800119e:	f003 faab 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80011a8:	f7ff fd98 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ac:	2360      	movs	r3, #96	; 0x60
 80011ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_TIM4_Init+0xf0>)
 80011c4:	f002 fb2e 	bl	8003824 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80011ce:	f7ff fd85 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	2204      	movs	r2, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4812      	ldr	r0, [pc, #72]	; (8001224 <MX_TIM4_Init+0xf0>)
 80011da:	f002 fb23 	bl	8003824 <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80011e4:	f7ff fd7a 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	2208      	movs	r2, #8
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM4_Init+0xf0>)
 80011f0:	f002 fb18 	bl	8003824 <HAL_TIM_PWM_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80011fa:	f7ff fd6f 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	220c      	movs	r2, #12
 8001202:	4619      	mov	r1, r3
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <MX_TIM4_Init+0xf0>)
 8001206:	f002 fb0d 	bl	8003824 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001210:	f7ff fd64 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_TIM4_Init+0xf0>)
 8001216:	f000 f86d 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000019c 	.word	0x2000019c
 8001228:	40000800 	.word	0x40000800

0800122c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_TIM_Base_MspInit+0x7c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d128      	bne.n	80012a0 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_TIM_Base_MspInit+0x80>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <HAL_TIM_Base_MspInit+0x80>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_TIM_Base_MspInit+0x80>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_TIM_Base_MspInit+0x80>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_TIM_Base_MspInit+0x80>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_TIM_Base_MspInit+0x80>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 800127e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001290:	2301      	movs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_TIM_Base_MspInit+0x84>)
 800129c:	f000 fdb2 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010000 	.word	0x40010000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_TIM_PWM_MspInit+0x38>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d10b      	bne.n	80012de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40000800 	.word	0x40000800
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a11      	ldr	r2, [pc, #68]	; (8001358 <HAL_TIM_MspPostInit+0x64>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d11c      	bne.n	8001350 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_TIM_MspPostInit+0x68>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_TIM_MspPostInit+0x68>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_TIM_MspPostInit+0x68>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 800132e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001332:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4619      	mov	r1, r3
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <HAL_TIM_MspPostInit+0x6c>)
 800134c:	f000 fd5a 	bl	8001e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40000800 	.word	0x40000800
 800135c:	40023800 	.word	0x40023800
 8001360:	40020c00 	.word	0x40020c00

08001364 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_USART2_UART_Init+0x58>)
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <MX_USART2_UART_Init+0x5c>)
 800136c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_USART2_UART_Init+0x58>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_USART2_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART2_UART_Init+0x58>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART2_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART2_UART_Init+0x58>)
 80013a8:	f003 fa34 	bl	8004814 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013b2:	f7ff fc93 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000234 	.word	0x20000234
 80013c0:	40004400 	.word	0x40004400

080013c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_UART_MspInit+0x7c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d127      	bne.n	8001436 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_UART_MspInit+0x80>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_UART_MspInit+0x80>)
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_UART_MspInit+0x80>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_UART_MspInit+0x80>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_UART_MspInit+0x80>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_UART_MspInit+0x80>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001416:	2360      	movs	r3, #96	; 0x60
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001426:	2307      	movs	r3, #7
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_UART_MspInit+0x84>)
 8001432:	f000 fce7 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40004400 	.word	0x40004400
 8001444:	40023800 	.word	0x40023800
 8001448:	40020c00 	.word	0x40020c00

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001484 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001452:	e003      	b.n	800145c <LoopCopyDataInit>

08001454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800145a:	3104      	adds	r1, #4

0800145c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001464:	d3f6      	bcc.n	8001454 <CopyDataInit>
  ldr  r2, =_sbss
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001468:	e002      	b.n	8001470 <LoopFillZerobss>

0800146a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800146a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800146c:	f842 3b04 	str.w	r3, [r2], #4

08001470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001474:	d3f9      	bcc.n	800146a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001476:	f7ff fda3 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147a:	f003 fde3 	bl	8005044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff fb7f 	bl	8000b80 <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001488:	080050dc 	.word	0x080050dc
  ldr  r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001490:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001494:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001498:	200002bc 	.word	0x200002bc

0800149c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC_IRQHandler>

0800149e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f000 fc7a 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f805 	bl	80014b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014ae:	f7ff fd2f 	bl	8000f10 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fc87 	bl	8001dea <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 fc5d 	bl	8001db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200002b8 	.word	0x200002b8

08001530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e031      	b.n	80015aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff f858 	bl	8000604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_ADC_Init+0x84>)
 8001574:	4013      	ands	r3, r2
 8001576:	f043 0202 	orr.w	r2, r3, #2
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f964 	bl	800184c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f023 0303 	bic.w	r3, r3, #3
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
 800159a:	e001      	b.n	80015a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	ffffeefd 	.word	0xffffeefd

080015b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1c>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e12a      	b.n	800182a <HAL_ADC_ConfigChannel+0x272>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d93a      	bls.n	800165a <HAL_ADC_ConfigChannel+0xa2>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015ec:	d035      	beq.n	800165a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68d9      	ldr	r1, [r3, #12]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	3b1e      	subs	r3, #30
 8001604:	2207      	movs	r2, #7
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a87      	ldr	r2, [pc, #540]	; (8001838 <HAL_ADC_ConfigChannel+0x280>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d10a      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68d9      	ldr	r1, [r3, #12]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	061a      	lsls	r2, r3, #24
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001632:	e035      	b.n	80016a0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68d9      	ldr	r1, [r3, #12]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	4603      	mov	r3, r0
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4403      	add	r3, r0
 800164c:	3b1e      	subs	r3, #30
 800164e:	409a      	lsls	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001658:	e022      	b.n	80016a0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6919      	ldr	r1, [r3, #16]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	2207      	movs	r2, #7
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43da      	mvns	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	400a      	ands	r2, r1
 800167c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6919      	ldr	r1, [r3, #16]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	4603      	mov	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4403      	add	r3, r0
 8001696:	409a      	lsls	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d824      	bhi.n	80016f2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b05      	subs	r3, #5
 80016ba:	221f      	movs	r2, #31
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43da      	mvns	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	400a      	ands	r2, r1
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	3b05      	subs	r3, #5
 80016e4:	fa00 f203 	lsl.w	r2, r0, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
 80016f0:	e04c      	b.n	800178c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d824      	bhi.n	8001744 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b23      	subs	r3, #35	; 0x23
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	400a      	ands	r2, r1
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b23      	subs	r3, #35	; 0x23
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	631a      	str	r2, [r3, #48]	; 0x30
 8001742:	e023      	b.n	800178c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b41      	subs	r3, #65	; 0x41
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43da      	mvns	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	400a      	ands	r2, r1
 8001764:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b41      	subs	r3, #65	; 0x41
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2a      	ldr	r2, [pc, #168]	; (800183c <HAL_ADC_ConfigChannel+0x284>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10a      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x1f4>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800179e:	d105      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_ADC_ConfigChannel+0x288>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a26      	ldr	r2, [pc, #152]	; (8001840 <HAL_ADC_ConfigChannel+0x288>)
 80017a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80017aa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a22      	ldr	r2, [pc, #136]	; (800183c <HAL_ADC_ConfigChannel+0x284>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d109      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x212>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b12      	cmp	r3, #18
 80017bc:	d105      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_ADC_ConfigChannel+0x288>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_ADC_ConfigChannel+0x288>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_ADC_ConfigChannel+0x284>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d125      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x268>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_ADC_ConfigChannel+0x280>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d003      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x22e>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b11      	cmp	r3, #17
 80017e4:	d11c      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_ADC_ConfigChannel+0x288>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <HAL_ADC_ConfigChannel+0x288>)
 80017ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_ADC_ConfigChannel+0x280>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d111      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_ADC_ConfigChannel+0x28c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_ADC_ConfigChannel+0x290>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9a      	lsrs	r2, r3, #18
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001812:	e002      	b.n	800181a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3b01      	subs	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f9      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	10000012 	.word	0x10000012
 800183c:	40012000 	.word	0x40012000
 8001840:	40012300 	.word	0x40012300
 8001844:	20000000 	.word	0x20000000
 8001848:	431bde83 	.word	0x431bde83

0800184c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001854:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <ADC_Init+0x1ec>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a77      	ldr	r2, [pc, #476]	; (8001a38 <ADC_Init+0x1ec>)
 800185a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800185e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001860:	4b75      	ldr	r3, [pc, #468]	; (8001a38 <ADC_Init+0x1ec>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4973      	ldr	r1, [pc, #460]	; (8001a38 <ADC_Init+0x1ec>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800187c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	021a      	lsls	r2, r3, #8
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6899      	ldr	r1, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	4a58      	ldr	r2, [pc, #352]	; (8001a3c <ADC_Init+0x1f0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d022      	beq.n	8001926 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6899      	ldr	r1, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001910:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6899      	ldr	r1, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	e00f      	b.n	8001946 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001944:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0202 	bic.w	r2, r2, #2
 8001954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6899      	ldr	r1, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	005a      	lsls	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01b      	beq.n	80019ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001982:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001992:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6859      	ldr	r1, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	3b01      	subs	r3, #1
 80019a0:	035a      	lsls	r2, r3, #13
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	e007      	b.n	80019bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	051a      	lsls	r2, r3, #20
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6899      	ldr	r1, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019fe:	025a      	lsls	r2, r3, #9
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6899      	ldr	r1, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	029a      	lsls	r2, r3, #10
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	609a      	str	r2, [r3, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40012300 	.word	0x40012300
 8001a3c:	0f000001 	.word	0x0f000001

08001a40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0ed      	b.n	8001c2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fe7c 	bl	800075c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0202 	bic.w	r2, r2, #2
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a74:	f7ff fd50 	bl	8001518 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a7a:	e012      	b.n	8001aa2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a7c:	f7ff fd4c 	bl	8001518 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b0a      	cmp	r3, #10
 8001a88:	d90b      	bls.n	8001aa2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2205      	movs	r2, #5
 8001a9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0c5      	b.n	8001c2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e5      	bne.n	8001a7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac0:	f7ff fd2a 	bl	8001518 <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ac6:	e012      	b.n	8001aee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ac8:	f7ff fd26 	bl	8001518 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b0a      	cmp	r3, #10
 8001ad4:	d90b      	bls.n	8001aee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e09f      	b.n	8001c2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0e5      	beq.n	8001ac8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e1b      	ldrb	r3, [r3, #24]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e007      	b.n	8001b26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7e5b      	ldrb	r3, [r3, #25]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e007      	b.n	8001b50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e9b      	ldrb	r3, [r3, #26]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0220 	orr.w	r2, r2, #32
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0220 	bic.w	r2, r2, #32
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7edb      	ldrb	r3, [r3, #27]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0210 	bic.w	r2, r2, #16
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e007      	b.n	8001ba4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0210 	orr.w	r2, r2, #16
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7f1b      	ldrb	r3, [r3, #28]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d108      	bne.n	8001bbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0208 	orr.w	r2, r2, #8
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0208 	bic.w	r2, r2, #8
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7f5b      	ldrb	r3, [r3, #29]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d108      	bne.n	8001be8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0204 	orr.w	r2, r2, #4
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e007      	b.n	8001bf8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0204 	bic.w	r2, r2, #4
 8001bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <__NVIC_SetPriorityGrouping+0x40>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x40>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	05fa0000 	.word	0x05fa0000

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	; (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f7ff ff8e 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff47 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff5c 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff8e 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5d 	bl	8001c9c <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffb0 	bl	8001d58 <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e175      	b.n	8002110 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 8164 	bne.w	800210a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d00b      	beq.n	8001e62 <HAL_GPIO_Init+0x5e>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e56:	2b11      	cmp	r3, #17
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b12      	cmp	r3, #18
 8001e60:	d130      	bne.n	8001ec4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0201 	and.w	r2, r3, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x100>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d123      	bne.n	8001f4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	08da      	lsrs	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3208      	adds	r2, #8
 8001f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80be 	beq.w	800210a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	4b66      	ldr	r3, [pc, #408]	; (8002128 <HAL_GPIO_Init+0x324>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a65      	ldr	r2, [pc, #404]	; (8002128 <HAL_GPIO_Init+0x324>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_GPIO_Init+0x324>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fa6:	4a61      	ldr	r2, [pc, #388]	; (800212c <HAL_GPIO_Init+0x328>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_GPIO_Init+0x32c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d037      	beq.n	8002042 <HAL_GPIO_Init+0x23e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a57      	ldr	r2, [pc, #348]	; (8002134 <HAL_GPIO_Init+0x330>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d031      	beq.n	800203e <HAL_GPIO_Init+0x23a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a56      	ldr	r2, [pc, #344]	; (8002138 <HAL_GPIO_Init+0x334>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d02b      	beq.n	800203a <HAL_GPIO_Init+0x236>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a55      	ldr	r2, [pc, #340]	; (800213c <HAL_GPIO_Init+0x338>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x232>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a54      	ldr	r2, [pc, #336]	; (8002140 <HAL_GPIO_Init+0x33c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x22e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a53      	ldr	r2, [pc, #332]	; (8002144 <HAL_GPIO_Init+0x340>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x22a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_GPIO_Init+0x344>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x226>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a51      	ldr	r2, [pc, #324]	; (800214c <HAL_GPIO_Init+0x348>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x222>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a50      	ldr	r2, [pc, #320]	; (8002150 <HAL_GPIO_Init+0x34c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x21e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4f      	ldr	r2, [pc, #316]	; (8002154 <HAL_GPIO_Init+0x350>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x21a>
 800201a:	2309      	movs	r3, #9
 800201c:	e012      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800201e:	230a      	movs	r3, #10
 8002020:	e010      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002022:	2308      	movs	r3, #8
 8002024:	e00e      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002026:	2307      	movs	r3, #7
 8002028:	e00c      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800202a:	2306      	movs	r3, #6
 800202c:	e00a      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800202e:	2305      	movs	r3, #5
 8002030:	e008      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002032:	2304      	movs	r3, #4
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002036:	2303      	movs	r3, #3
 8002038:	e004      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800203a:	2302      	movs	r3, #2
 800203c:	e002      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002042:	2300      	movs	r3, #0
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f002 0203 	and.w	r2, r2, #3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4093      	lsls	r3, r2
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002054:	4935      	ldr	r1, [pc, #212]	; (800212c <HAL_GPIO_Init+0x328>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002062:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <HAL_GPIO_Init+0x354>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002086:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_GPIO_Init+0x354>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_GPIO_Init+0x354>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <HAL_GPIO_Init+0x354>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_GPIO_Init+0x354>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_GPIO_Init+0x354>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_GPIO_Init+0x354>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_GPIO_Init+0x354>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3301      	adds	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	f67f ae86 	bls.w	8001e24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40013800 	.word	0x40013800
 8002130:	40020000 	.word	0x40020000
 8002134:	40020400 	.word	0x40020400
 8002138:	40020800 	.word	0x40020800
 800213c:	40020c00 	.word	0x40020c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40021400 	.word	0x40021400
 8002148:	40021800 	.word	0x40021800
 800214c:	40021c00 	.word	0x40021c00
 8002150:	40022000 	.word	0x40022000
 8002154:	40022400 	.word	0x40022400
 8002158:	40013c00 	.word	0x40013c00

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_PWREx_EnableOverDrive+0x98>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a22      	ldr	r2, [pc, #136]	; (8002228 <HAL_PWREx_EnableOverDrive+0x98>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_PWREx_EnableOverDrive+0x98>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021be:	f7ff f9ab 	bl	8001518 <HAL_GetTick>
 80021c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021c4:	e009      	b.n	80021da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021c6:	f7ff f9a7 	bl	8001518 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021d4:	d901      	bls.n	80021da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e022      	b.n	8002220 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e6:	d1ee      	bne.n	80021c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f4:	f7ff f990 	bl	8001518 <HAL_GetTick>
 80021f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021fa:	e009      	b.n	8002210 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021fc:	f7ff f98c 	bl	8001518 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800220a:	d901      	bls.n	8002210 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e007      	b.n	8002220 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800221c:	d1ee      	bne.n	80021fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000

08002230 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e29b      	b.n	800277e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8087 	beq.w	8002362 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002254:	4b96      	ldr	r3, [pc, #600]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b04      	cmp	r3, #4
 800225e:	d00c      	beq.n	800227a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002260:	4b93      	ldr	r3, [pc, #588]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d112      	bne.n	8002292 <HAL_RCC_OscConfig+0x62>
 800226c:	4b90      	ldr	r3, [pc, #576]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002278:	d10b      	bne.n	8002292 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	4b8d      	ldr	r3, [pc, #564]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d06c      	beq.n	8002360 <HAL_RCC_OscConfig+0x130>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d168      	bne.n	8002360 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e275      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x7a>
 800229c:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a83      	ldr	r2, [pc, #524]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e02e      	b.n	8002308 <HAL_RCC_OscConfig+0xd8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x9c>
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7e      	ldr	r2, [pc, #504]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b7c      	ldr	r3, [pc, #496]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7b      	ldr	r2, [pc, #492]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xd8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xc0>
 80022d6:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a75      	ldr	r2, [pc, #468]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b73      	ldr	r3, [pc, #460]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a72      	ldr	r2, [pc, #456]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xd8>
 80022f0:	4b6f      	ldr	r3, [pc, #444]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6e      	ldr	r2, [pc, #440]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b6c      	ldr	r3, [pc, #432]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6b      	ldr	r2, [pc, #428]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7ff f902 	bl	8001518 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff f8fe 	bl	8001518 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e229      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xe8>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7ff f8ee 	bl	8001518 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff f8ea 	bl	8001518 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e215      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b57      	ldr	r3, [pc, #348]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x110>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d069      	beq.n	8002442 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800236e:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237a:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x190>
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x17a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1e9      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	493d      	ldr	r1, [pc, #244]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e040      	b.n	8002442 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d023      	beq.n	8002410 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a38      	ldr	r2, [pc, #224]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff f8a0 	bl	8001518 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7ff f89c 	bl	8001518 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1c7      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4929      	ldr	r1, [pc, #164]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
 800240e:	e018      	b.n	8002442 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a26      	ldr	r2, [pc, #152]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7ff f87c 	bl	8001518 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002424:	f7ff f878 	bl	8001518 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1a3      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d038      	beq.n	80024c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d019      	beq.n	800248a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245a:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7ff f859 	bl	8001518 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246a:	f7ff f855 	bl	8001518 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e180      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 800247e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x23a>
 8002488:	e01a      	b.n	80024c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_RCC_OscConfig+0x280>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7ff f83f 	bl	8001518 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249e:	f7ff f83b 	bl	8001518 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d903      	bls.n	80024b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e166      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
 80024b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	4b92      	ldr	r3, [pc, #584]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a4 	beq.w	8002616 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ce:	4b8c      	ldr	r3, [pc, #560]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10d      	bne.n	80024f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	4b89      	ldr	r3, [pc, #548]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	4a88      	ldr	r2, [pc, #544]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	4b86      	ldr	r3, [pc, #536]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f2:	2301      	movs	r3, #1
 80024f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f6:	4b83      	ldr	r3, [pc, #524]	; (8002704 <HAL_RCC_OscConfig+0x4d4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d118      	bne.n	8002534 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002502:	4b80      	ldr	r3, [pc, #512]	; (8002704 <HAL_RCC_OscConfig+0x4d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7f      	ldr	r2, [pc, #508]	; (8002704 <HAL_RCC_OscConfig+0x4d4>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250e:	f7ff f803 	bl	8001518 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002516:	f7fe ffff 	bl	8001518 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b64      	cmp	r3, #100	; 0x64
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e12a      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002528:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCC_OscConfig+0x4d4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x31a>
 800253c:	4b70      	ldr	r3, [pc, #448]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	4a6f      	ldr	r2, [pc, #444]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6713      	str	r3, [r2, #112]	; 0x70
 8002548:	e02d      	b.n	80025a6 <HAL_RCC_OscConfig+0x376>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x33c>
 8002552:	4b6b      	ldr	r3, [pc, #428]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	4a6a      	ldr	r2, [pc, #424]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	6713      	str	r3, [r2, #112]	; 0x70
 800255e:	4b68      	ldr	r3, [pc, #416]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002562:	4a67      	ldr	r2, [pc, #412]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	6713      	str	r3, [r2, #112]	; 0x70
 800256a:	e01c      	b.n	80025a6 <HAL_RCC_OscConfig+0x376>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d10c      	bne.n	800258e <HAL_RCC_OscConfig+0x35e>
 8002574:	4b62      	ldr	r3, [pc, #392]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	4a61      	ldr	r2, [pc, #388]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	f043 0304 	orr.w	r3, r3, #4
 800257e:	6713      	str	r3, [r2, #112]	; 0x70
 8002580:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a5e      	ldr	r2, [pc, #376]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	; 0x70
 800258c:	e00b      	b.n	80025a6 <HAL_RCC_OscConfig+0x376>
 800258e:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a5b      	ldr	r2, [pc, #364]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	4b59      	ldr	r3, [pc, #356]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d015      	beq.n	80025da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7fe ffb3 	bl	8001518 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe ffaf 	bl	8001518 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0d8      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ee      	beq.n	80025b6 <HAL_RCC_OscConfig+0x386>
 80025d8:	e014      	b.n	8002604 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7fe ff9d 	bl	8001518 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe ff99 	bl	8001518 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0c2      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f8:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1ee      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a3c      	ldr	r2, [pc, #240]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80ae 	beq.w	800277c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002620:	4b37      	ldr	r3, [pc, #220]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d06d      	beq.n	8002708 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d14b      	bne.n	80026cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002634:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a31      	ldr	r2, [pc, #196]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 800263a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800263e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe ff6a 	bl	8001518 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe ff66 	bl	8001518 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e091      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265a:	4b29      	ldr	r3, [pc, #164]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	019b      	lsls	r3, r3, #6
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	085b      	lsrs	r3, r3, #1
 800267e:	3b01      	subs	r3, #1
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	071b      	lsls	r3, r3, #28
 8002692:	491b      	ldr	r1, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe ff38 	bl	8001518 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe ff34 	bl	8001518 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e05f      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x47c>
 80026ca:	e057      	b.n	800277c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80026d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe ff1e 	bl	8001518 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe ff1a 	bl	8001518 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e045      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f2:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_RCC_OscConfig+0x4d0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4b0>
 80026fe:	e03d      	b.n	800277c <HAL_RCC_OscConfig+0x54c>
 8002700:	40023800 	.word	0x40023800
 8002704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002708:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <HAL_RCC_OscConfig+0x558>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d030      	beq.n	8002778 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d129      	bne.n	8002778 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d122      	bne.n	8002778 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800273e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002740:	4293      	cmp	r3, r2
 8002742:	d119      	bne.n	8002778 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	3b01      	subs	r3, #1
 8002752:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d10f      	bne.n	8002778 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0d0      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d910      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b67      	ldr	r3, [pc, #412]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 020f 	bic.w	r2, r3, #15
 80027ba:	4965      	ldr	r1, [pc, #404]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0b8      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ec:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a58      	ldr	r2, [pc, #352]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 80027f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a52      	ldr	r2, [pc, #328]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800280e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b50      	ldr	r3, [pc, #320]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	494d      	ldr	r1, [pc, #308]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d040      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d115      	bne.n	800286e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e07f      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e073      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e06b      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b39      	ldr	r3, [pc, #228]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4936      	ldr	r1, [pc, #216]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7fe fe4a 	bl	8001518 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fe fe46 	bl	8001518 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e053      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d210      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 020f 	bic.w	r2, r3, #15
 80028c6:	4922      	ldr	r1, [pc, #136]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e032      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4916      	ldr	r1, [pc, #88]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	490e      	ldr	r1, [pc, #56]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800291e:	f000 f821 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8002922:	4602      	mov	r2, r0
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	490a      	ldr	r1, [pc, #40]	; (8002958 <HAL_RCC_ClockConfig+0x1cc>)
 8002930:	5ccb      	ldrb	r3, [r1, r3]
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1d0>)
 8002938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_ClockConfig+0x1d4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fdba 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023c00 	.word	0x40023c00
 8002954:	40023800 	.word	0x40023800
 8002958:	080050b4 	.word	0x080050b4
 800295c:	20000000 	.word	0x20000000
 8002960:	20000004 	.word	0x20000004

08002964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002964:	b5b0      	push	{r4, r5, r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800296a:	2100      	movs	r1, #0
 800296c:	6079      	str	r1, [r7, #4]
 800296e:	2100      	movs	r1, #0
 8002970:	60f9      	str	r1, [r7, #12]
 8002972:	2100      	movs	r1, #0
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002976:	2100      	movs	r1, #0
 8002978:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800297a:	4952      	ldr	r1, [pc, #328]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 800297c:	6889      	ldr	r1, [r1, #8]
 800297e:	f001 010c 	and.w	r1, r1, #12
 8002982:	2908      	cmp	r1, #8
 8002984:	d00d      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002986:	2908      	cmp	r1, #8
 8002988:	f200 8094 	bhi.w	8002ab4 <HAL_RCC_GetSysClockFreq+0x150>
 800298c:	2900      	cmp	r1, #0
 800298e:	d002      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x32>
 8002990:	2904      	cmp	r1, #4
 8002992:	d003      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x38>
 8002994:	e08e      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002996:	4b4c      	ldr	r3, [pc, #304]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002998:	60bb      	str	r3, [r7, #8]
      break;
 800299a:	e08e      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800299c:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <HAL_RCC_GetSysClockFreq+0x168>)
 800299e:	60bb      	str	r3, [r7, #8]
      break;
 80029a0:	e08b      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a2:	4948      	ldr	r1, [pc, #288]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029a4:	6849      	ldr	r1, [r1, #4]
 80029a6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80029aa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029ac:	4945      	ldr	r1, [pc, #276]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ae:	6849      	ldr	r1, [r1, #4]
 80029b0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80029b4:	2900      	cmp	r1, #0
 80029b6:	d024      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b8:	4942      	ldr	r1, [pc, #264]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ba:	6849      	ldr	r1, [r1, #4]
 80029bc:	0989      	lsrs	r1, r1, #6
 80029be:	4608      	mov	r0, r1
 80029c0:	f04f 0100 	mov.w	r1, #0
 80029c4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80029c8:	f04f 0500 	mov.w	r5, #0
 80029cc:	ea00 0204 	and.w	r2, r0, r4
 80029d0:	ea01 0305 	and.w	r3, r1, r5
 80029d4:	493d      	ldr	r1, [pc, #244]	; (8002acc <HAL_RCC_GetSysClockFreq+0x168>)
 80029d6:	fb01 f003 	mul.w	r0, r1, r3
 80029da:	2100      	movs	r1, #0
 80029dc:	fb01 f102 	mul.w	r1, r1, r2
 80029e0:	1844      	adds	r4, r0, r1
 80029e2:	493a      	ldr	r1, [pc, #232]	; (8002acc <HAL_RCC_GetSysClockFreq+0x168>)
 80029e4:	fba2 0101 	umull	r0, r1, r2, r1
 80029e8:	1863      	adds	r3, r4, r1
 80029ea:	4619      	mov	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	f7fd fc20 	bl	8000238 <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e04a      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a02:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a12:	f04f 0100 	mov.w	r1, #0
 8002a16:	ea02 0400 	and.w	r4, r2, r0
 8002a1a:	ea03 0501 	and.w	r5, r3, r1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	014b      	lsls	r3, r1, #5
 8002a2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a30:	0142      	lsls	r2, r0, #5
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	1b00      	subs	r0, r0, r4
 8002a38:	eb61 0105 	sbc.w	r1, r1, r5
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	018b      	lsls	r3, r1, #6
 8002a46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a4a:	0182      	lsls	r2, r0, #6
 8002a4c:	1a12      	subs	r2, r2, r0
 8002a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a52:	f04f 0000 	mov.w	r0, #0
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	00d9      	lsls	r1, r3, #3
 8002a5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a60:	00d0      	lsls	r0, r2, #3
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	1912      	adds	r2, r2, r4
 8002a68:	eb45 0303 	adc.w	r3, r5, r3
 8002a6c:	f04f 0000 	mov.w	r0, #0
 8002a70:	f04f 0100 	mov.w	r1, #0
 8002a74:	0299      	lsls	r1, r3, #10
 8002a76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a7a:	0290      	lsls	r0, r2, #10
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	f7fd fbd4 	bl	8000238 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4613      	mov	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	60bb      	str	r3, [r7, #8]
      break;
 8002ab2:	e002      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ab6:	60bb      	str	r3, [r7, #8]
      break;
 8002ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aba:	68bb      	ldr	r3, [r7, #8]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	00f42400 	.word	0x00f42400
 8002acc:	017d7840 	.word	0x017d7840

08002ad0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000000 	.word	0x20000000

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aec:	f7ff fff0 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0a9b      	lsrs	r3, r3, #10
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	080050c4 	.word	0x080050c4

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b14:	f7ff ffdc 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0b5b      	lsrs	r3, r3, #13
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4903      	ldr	r1, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	080050c4 	.word	0x080050c4

08002b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b60:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a68      	ldr	r2, [pc, #416]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b6a:	6093      	str	r3, [r2, #8]
 8002b6c:	4b66      	ldr	r3, [pc, #408]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	4964      	ldr	r1, [pc, #400]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d017      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b92:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	4959      	ldr	r1, [pc, #356]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d017      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	494a      	ldr	r1, [pc, #296]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 808b 	beq.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a39      	ldr	r2, [pc, #228]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
 8002c28:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fe fc6a 	bl	8001518 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7fe fc66 	bl	8001518 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e38f      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c66:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d035      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d02e      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c84:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cac:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d114      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fc2e 	bl	8001518 <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fc2a 	bl	8001518 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e351      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ee      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cee:	d111      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cfe:	400b      	ands	r3, r1
 8002d00:	4901      	ldr	r1, [pc, #4]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
 8002d06:	e00b      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	0ffffcff 	.word	0x0ffffcff
 8002d14:	4bb3      	ldr	r3, [pc, #716]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4ab2      	ldr	r2, [pc, #712]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d1e:	6093      	str	r3, [r2, #8]
 8002d20:	4bb0      	ldr	r3, [pc, #704]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	49ad      	ldr	r1, [pc, #692]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d3e:	4ba9      	ldr	r3, [pc, #676]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d44:	4aa7      	ldr	r2, [pc, #668]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d4e:	4ba5      	ldr	r3, [pc, #660]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	49a2      	ldr	r1, [pc, #648]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d6c:	4b9d      	ldr	r3, [pc, #628]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d7a:	499a      	ldr	r1, [pc, #616]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d8e:	4b95      	ldr	r3, [pc, #596]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d9c:	4991      	ldr	r1, [pc, #580]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002db0:	4b8c      	ldr	r3, [pc, #560]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	4989      	ldr	r1, [pc, #548]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dd2:	4b84      	ldr	r3, [pc, #528]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4980      	ldr	r1, [pc, #512]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002df4:	4b7b      	ldr	r3, [pc, #492]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4978      	ldr	r1, [pc, #480]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e16:	4b73      	ldr	r3, [pc, #460]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	f023 020c 	bic.w	r2, r3, #12
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e24:	496f      	ldr	r1, [pc, #444]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e38:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	4967      	ldr	r1, [pc, #412]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e5a:	4b62      	ldr	r3, [pc, #392]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e68:	495e      	ldr	r1, [pc, #376]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	4956      	ldr	r1, [pc, #344]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e9e:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	494d      	ldr	r1, [pc, #308]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	4945      	ldr	r1, [pc, #276]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ee2:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef0:	493c      	ldr	r1, [pc, #240]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f04:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f12:	4934      	ldr	r1, [pc, #208]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d011      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f26:	4b2f      	ldr	r3, [pc, #188]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f34:	492b      	ldr	r1, [pc, #172]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f44:	d101      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	491b      	ldr	r1, [pc, #108]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f98:	4912      	ldr	r1, [pc, #72]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002fac:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbc:	4909      	ldr	r1, [pc, #36]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00f      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	4986      	ldr	r1, [pc, #536]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ffc:	4b81      	ldr	r3, [pc, #516]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003002:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800300c:	497d      	ldr	r1, [pc, #500]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d006      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80d6 	beq.w	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003028:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a75      	ldr	r2, [pc, #468]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003034:	f7fe fa70 	bl	8001518 <HAL_GetTick>
 8003038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800303c:	f7fe fa6c 	bl	8001518 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e195      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800304e:	4b6d      	ldr	r3, [pc, #436]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d021      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306a:	2b00      	cmp	r3, #0
 800306c:	d11d      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800306e:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800307c:	4b61      	ldr	r3, [pc, #388]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003082:	0e1b      	lsrs	r3, r3, #24
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	019a      	lsls	r2, r3, #6
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	431a      	orrs	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	071b      	lsls	r3, r3, #28
 80030a2:	4958      	ldr	r1, [pc, #352]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02e      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d4:	d129      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030d6:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030e4:	4b47      	ldr	r3, [pc, #284]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ea:	0f1b      	lsrs	r3, r3, #28
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	019a      	lsls	r2, r3, #6
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	041b      	lsls	r3, r3, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	061b      	lsls	r3, r3, #24
 8003104:	431a      	orrs	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	071b      	lsls	r3, r3, #28
 800310a:	493e      	ldr	r1, [pc, #248]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003112:	4b3c      	ldr	r3, [pc, #240]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003118:	f023 021f 	bic.w	r2, r3, #31
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	3b01      	subs	r3, #1
 8003122:	4938      	ldr	r1, [pc, #224]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01d      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313c:	0e1b      	lsrs	r3, r3, #24
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003144:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800314a:	0f1b      	lsrs	r3, r3, #28
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	019a      	lsls	r2, r3, #6
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	041b      	lsls	r3, r3, #16
 800315e:	431a      	orrs	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	061b      	lsls	r3, r3, #24
 8003164:	431a      	orrs	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	071b      	lsls	r3, r3, #28
 800316a:	4926      	ldr	r1, [pc, #152]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d011      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	019a      	lsls	r2, r3, #6
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	071b      	lsls	r3, r3, #28
 800319a:	491a      	ldr	r1, [pc, #104]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ae:	f7fe f9b3 	bl	8001518 <HAL_GetTick>
 80031b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031b6:	f7fe f9af 	bl	8001518 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b64      	cmp	r3, #100	; 0x64
 80031c2:	d901      	bls.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0d8      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	f040 80ce 	bne.w	8003378 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a08      	ldr	r2, [pc, #32]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e8:	f7fe f996 	bl	8001518 <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031ee:	e00b      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031f0:	f7fe f992 	bl	8001518 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d904      	bls.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0bb      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003208:	4b5e      	ldr	r3, [pc, #376]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003214:	d0ec      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02e      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d12a      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800323e:	4b51      	ldr	r3, [pc, #324]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800324c:	4b4d      	ldr	r3, [pc, #308]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	0f1b      	lsrs	r3, r3, #28
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	019a      	lsls	r2, r3, #6
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	061b      	lsls	r3, r3, #24
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	071b      	lsls	r3, r3, #28
 8003272:	4944      	ldr	r1, [pc, #272]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800327a:	4b42      	ldr	r3, [pc, #264]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003280:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	493d      	ldr	r1, [pc, #244]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d022      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a8:	d11d      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032aa:	4b36      	ldr	r3, [pc, #216]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	0e1b      	lsrs	r3, r3, #24
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	0f1b      	lsrs	r3, r3, #28
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	019a      	lsls	r2, r3, #6
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	431a      	orrs	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	061b      	lsls	r3, r3, #24
 80032d8:	431a      	orrs	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	071b      	lsls	r3, r3, #28
 80032de:	4929      	ldr	r1, [pc, #164]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	0e1b      	lsrs	r3, r3, #24
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003300:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	019a      	lsls	r2, r3, #6
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	431a      	orrs	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	4917      	ldr	r1, [pc, #92]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	4911      	ldr	r1, [pc, #68]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003350:	f7fe f8e2 	bl	8001518 <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003358:	f7fe f8de 	bl	8001518 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e007      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003376:	d1ef      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800

08003388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e09d      	b.n	80034d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d108      	bne.n	80033b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033aa:	d009      	beq.n	80033c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
 80033b2:	e005      	b.n	80033c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fd02 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003400:	d902      	bls.n	8003408 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e002      	b.n	800340e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800340c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003416:	d007      	beq.n	8003428 <HAL_SPI_Init+0xa0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003420:	d002      	beq.n	8003428 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	ea42 0103 	orr.w	r1, r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	0c1b      	lsrs	r3, r3, #16
 8003484:	f003 0204 	and.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034a4:	ea42 0103 	orr.w	r1, r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e049      	b.n	8003584 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd fe91 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f000 fb99 	bl	8003c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e049      	b.n	8003632 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fe7e 	bl	80012b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fb42 	bl	8003c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e049      	b.n	80036e0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f841 	bl	80036e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f000 faeb 	bl	8003c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003712:	2302      	movs	r3, #2
 8003714:	e082      	b.n	800381c <HAL_TIM_IC_ConfigChannel+0x120>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f000 fe1c 	bl	8004370 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 020c 	bic.w	r2, r2, #12
 8003746:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6999      	ldr	r1, [r3, #24]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	619a      	str	r2, [r3, #24]
 800375a:	e05a      	b.n	8003812 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d11c      	bne.n	800379c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6819      	ldr	r1, [r3, #0]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f000 fea0 	bl	80044b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003784:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6999      	ldr	r1, [r3, #24]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	021a      	lsls	r2, r3, #8
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	619a      	str	r2, [r3, #24]
 800379a:	e03a      	b.n	8003812 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d11b      	bne.n	80037da <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f000 feed 	bl	8004590 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 020c 	bic.w	r2, r2, #12
 80037c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69d9      	ldr	r1, [r3, #28]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	61da      	str	r2, [r3, #28]
 80037d8:	e01b      	b.n	8003812 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6819      	ldr	r1, [r3, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f000 ff0d 	bl	8004608 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69d9      	ldr	r1, [r3, #28]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	021a      	lsls	r2, r3, #8
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800383a:	2302      	movs	r3, #2
 800383c:	e0fd      	b.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x216>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b14      	cmp	r3, #20
 800384a:	f200 80f0 	bhi.w	8003a2e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800384e:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	080038a9 	.word	0x080038a9
 8003858:	08003a2f 	.word	0x08003a2f
 800385c:	08003a2f 	.word	0x08003a2f
 8003860:	08003a2f 	.word	0x08003a2f
 8003864:	080038e9 	.word	0x080038e9
 8003868:	08003a2f 	.word	0x08003a2f
 800386c:	08003a2f 	.word	0x08003a2f
 8003870:	08003a2f 	.word	0x08003a2f
 8003874:	0800392b 	.word	0x0800392b
 8003878:	08003a2f 	.word	0x08003a2f
 800387c:	08003a2f 	.word	0x08003a2f
 8003880:	08003a2f 	.word	0x08003a2f
 8003884:	0800396b 	.word	0x0800396b
 8003888:	08003a2f 	.word	0x08003a2f
 800388c:	08003a2f 	.word	0x08003a2f
 8003890:	08003a2f 	.word	0x08003a2f
 8003894:	080039ad 	.word	0x080039ad
 8003898:	08003a2f 	.word	0x08003a2f
 800389c:	08003a2f 	.word	0x08003a2f
 80038a0:	08003a2f 	.word	0x08003a2f
 80038a4:	080039ed 	.word	0x080039ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fa70 	bl	8003d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	619a      	str	r2, [r3, #24]
      break;
 80038e6:	e0a3      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fac2 	bl	8003e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6999      	ldr	r1, [r3, #24]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	021a      	lsls	r2, r3, #8
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	619a      	str	r2, [r3, #24]
      break;
 8003928:	e082      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fb19 	bl	8003f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0208 	orr.w	r2, r2, #8
 8003944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0204 	bic.w	r2, r2, #4
 8003954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69d9      	ldr	r1, [r3, #28]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	61da      	str	r2, [r3, #28]
      break;
 8003968:	e062      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fb6f 	bl	8004054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69d9      	ldr	r1, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	61da      	str	r2, [r3, #28]
      break;
 80039aa:	e041      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fba6 	bl	8004104 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0208 	orr.w	r2, r2, #8
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0204 	bic.w	r2, r2, #4
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039ea:	e021      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fbd8 	bl	80041a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a2c:	e000      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003a2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop

08003a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIM_ConfigClockSource+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e0b3      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x180>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4b55      	ldr	r3, [pc, #340]	; (8003bcc <HAL_TIM_ConfigClockSource+0x188>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a94:	d03e      	beq.n	8003b14 <HAL_TIM_ConfigClockSource+0xd0>
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	f200 8087 	bhi.w	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa2:	f000 8085 	beq.w	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d87f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003aac:	2b70      	cmp	r3, #112	; 0x70
 8003aae:	d01a      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0xa2>
 8003ab0:	2b70      	cmp	r3, #112	; 0x70
 8003ab2:	d87b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003ab4:	2b60      	cmp	r3, #96	; 0x60
 8003ab6:	d050      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x116>
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d877      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003abc:	2b50      	cmp	r3, #80	; 0x50
 8003abe:	d03c      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0xf6>
 8003ac0:	2b50      	cmp	r3, #80	; 0x50
 8003ac2:	d873      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d058      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x136>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d86f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d064      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x156>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d86b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d060      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x156>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d867      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05c      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x156>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d05a      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ae4:	e062      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f000 fddf 	bl	80046b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	609a      	str	r2, [r3, #8]
      break;
 8003b12:	e04e      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6899      	ldr	r1, [r3, #8]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f000 fdc8 	bl	80046b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b36:	609a      	str	r2, [r3, #8]
      break;
 8003b38:	e03b      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f000 fc86 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2150      	movs	r1, #80	; 0x50
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fd95 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8003b58:	e02b      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f000 fce2 	bl	8004530 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2160      	movs	r1, #96	; 0x60
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fd85 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8003b78:	e01b      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 fc66 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2140      	movs	r1, #64	; 0x40
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fd75 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8003b98:	e00b      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f000 fd6c 	bl	8004682 <TIM_ITRx_SetConfig>
        break;
 8003baa:	e002      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	fffeff88 	.word	0xfffeff88

08003bd0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e031      	b.n	8003c4c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003bf8:	6839      	ldr	r1, [r7, #0]
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fb28 	bl	8004250 <TIM_SlaveTimer_SetConfig>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e018      	b.n	8003c4c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c28:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c38:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <TIM_Base_SetConfig+0x114>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c72:	d00f      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a3d      	ldr	r2, [pc, #244]	; (8003d6c <TIM_Base_SetConfig+0x118>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a3c      	ldr	r2, [pc, #240]	; (8003d70 <TIM_Base_SetConfig+0x11c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d007      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3b      	ldr	r2, [pc, #236]	; (8003d74 <TIM_Base_SetConfig+0x120>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <TIM_Base_SetConfig+0x124>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d108      	bne.n	8003ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2f      	ldr	r2, [pc, #188]	; (8003d68 <TIM_Base_SetConfig+0x114>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d02b      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb4:	d027      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2c      	ldr	r2, [pc, #176]	; (8003d6c <TIM_Base_SetConfig+0x118>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d023      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	; (8003d70 <TIM_Base_SetConfig+0x11c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01f      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2a      	ldr	r2, [pc, #168]	; (8003d74 <TIM_Base_SetConfig+0x120>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01b      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <TIM_Base_SetConfig+0x124>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d017      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a28      	ldr	r2, [pc, #160]	; (8003d7c <TIM_Base_SetConfig+0x128>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <TIM_Base_SetConfig+0x12c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00f      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <TIM_Base_SetConfig+0x130>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00b      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a25      	ldr	r2, [pc, #148]	; (8003d88 <TIM_Base_SetConfig+0x134>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d007      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a24      	ldr	r2, [pc, #144]	; (8003d8c <TIM_Base_SetConfig+0x138>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d003      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a23      	ldr	r2, [pc, #140]	; (8003d90 <TIM_Base_SetConfig+0x13c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	; (8003d68 <TIM_Base_SetConfig+0x114>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_Base_SetConfig+0xf8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a0c      	ldr	r2, [pc, #48]	; (8003d78 <TIM_Base_SetConfig+0x124>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d103      	bne.n	8003d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	615a      	str	r2, [r3, #20]
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40010400 	.word	0x40010400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40014400 	.word	0x40014400
 8003d84:	40014800 	.word	0x40014800
 8003d88:	40001800 	.word	0x40001800
 8003d8c:	40001c00 	.word	0x40001c00
 8003d90:	40002000 	.word	0x40002000

08003d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f023 0201 	bic.w	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <TIM_OC1_SetConfig+0xd8>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f023 0302 	bic.w	r3, r3, #2
 8003ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <TIM_OC1_SetConfig+0xdc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_OC1_SetConfig+0x64>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a20      	ldr	r2, [pc, #128]	; (8003e74 <TIM_OC1_SetConfig+0xe0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10c      	bne.n	8003e12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0308 	bic.w	r3, r3, #8
 8003dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <TIM_OC1_SetConfig+0xdc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_OC1_SetConfig+0x8e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <TIM_OC1_SetConfig+0xe0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d111      	bne.n	8003e46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	621a      	str	r2, [r3, #32]
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	fffeff8f 	.word	0xfffeff8f
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40010400 	.word	0x40010400

08003e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0210 	bic.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <TIM_OC2_SetConfig+0xe4>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a23      	ldr	r2, [pc, #140]	; (8003f60 <TIM_OC2_SetConfig+0xe8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC2_SetConfig+0x68>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a22      	ldr	r2, [pc, #136]	; (8003f64 <TIM_OC2_SetConfig+0xec>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10d      	bne.n	8003efc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <TIM_OC2_SetConfig+0xe8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_OC2_SetConfig+0x94>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <TIM_OC2_SetConfig+0xec>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d113      	bne.n	8003f34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	feff8fff 	.word	0xfeff8fff
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40010400 	.word	0x40010400

08003f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <TIM_OC3_SetConfig+0xe0>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a22      	ldr	r2, [pc, #136]	; (800404c <TIM_OC3_SetConfig+0xe4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d003      	beq.n	8003fce <TIM_OC3_SetConfig+0x66>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a21      	ldr	r2, [pc, #132]	; (8004050 <TIM_OC3_SetConfig+0xe8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10d      	bne.n	8003fea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a17      	ldr	r2, [pc, #92]	; (800404c <TIM_OC3_SetConfig+0xe4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_OC3_SetConfig+0x92>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <TIM_OC3_SetConfig+0xe8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d113      	bne.n	8004022 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	fffeff8f 	.word	0xfffeff8f
 800404c:	40010000 	.word	0x40010000
 8004050:	40010400 	.word	0x40010400

08004054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <TIM_OC4_SetConfig+0xa4>)
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800409e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	031b      	lsls	r3, r3, #12
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a13      	ldr	r2, [pc, #76]	; (80040fc <TIM_OC4_SetConfig+0xa8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC4_SetConfig+0x68>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a12      	ldr	r2, [pc, #72]	; (8004100 <TIM_OC4_SetConfig+0xac>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d109      	bne.n	80040d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	feff8fff 	.word	0xfeff8fff
 80040fc:	40010000 	.word	0x40010000
 8004100:	40010400 	.word	0x40010400

08004104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4b1b      	ldr	r3, [pc, #108]	; (800419c <TIM_OC5_SetConfig+0x98>)
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004144:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <TIM_OC5_SetConfig+0x9c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_OC5_SetConfig+0x5e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <TIM_OC5_SetConfig+0xa0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d109      	bne.n	8004176 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004168:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	621a      	str	r2, [r3, #32]
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	fffeff8f 	.word	0xfffeff8f
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40010400 	.word	0x40010400

080041a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <TIM_OC6_SetConfig+0x9c>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	051b      	lsls	r3, r3, #20
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <TIM_OC6_SetConfig+0xa0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_OC6_SetConfig+0x60>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a12      	ldr	r2, [pc, #72]	; (800424c <TIM_OC6_SetConfig+0xa4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d109      	bne.n	800421c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	029b      	lsls	r3, r3, #10
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	feff8fff 	.word	0xfeff8fff
 8004248:	40010000 	.word	0x40010000
 800424c:	40010400 	.word	0x40010400

08004250 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4b3d      	ldr	r3, [pc, #244]	; (800436c <TIM_SlaveTimer_SetConfig+0x11c>)
 8004278:	4013      	ands	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b70      	cmp	r3, #112	; 0x70
 8004294:	d01a      	beq.n	80042cc <TIM_SlaveTimer_SetConfig+0x7c>
 8004296:	2b70      	cmp	r3, #112	; 0x70
 8004298:	d860      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x10c>
 800429a:	2b60      	cmp	r3, #96	; 0x60
 800429c:	d054      	beq.n	8004348 <TIM_SlaveTimer_SetConfig+0xf8>
 800429e:	2b60      	cmp	r3, #96	; 0x60
 80042a0:	d85c      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x10c>
 80042a2:	2b50      	cmp	r3, #80	; 0x50
 80042a4:	d046      	beq.n	8004334 <TIM_SlaveTimer_SetConfig+0xe4>
 80042a6:	2b50      	cmp	r3, #80	; 0x50
 80042a8:	d858      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x10c>
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d019      	beq.n	80042e2 <TIM_SlaveTimer_SetConfig+0x92>
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d854      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x10c>
 80042b2:	2b30      	cmp	r3, #48	; 0x30
 80042b4:	d054      	beq.n	8004360 <TIM_SlaveTimer_SetConfig+0x110>
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d850      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x10c>
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d050      	beq.n	8004360 <TIM_SlaveTimer_SetConfig+0x110>
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d84c      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x10c>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04c      	beq.n	8004360 <TIM_SlaveTimer_SetConfig+0x110>
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d04a      	beq.n	8004360 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80042ca:	e047      	b.n	800435c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68d9      	ldr	r1, [r3, #12]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f000 f9ec 	bl	80046b8 <TIM_ETR_SetConfig>
      break;
 80042e0:	e03f      	b.n	8004362 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d101      	bne.n	80042ee <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e03a      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004314:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	621a      	str	r2, [r3, #32]
      break;
 8004332:	e016      	b.n	8004362 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	461a      	mov	r2, r3
 8004342:	f000 f889 	bl	8004458 <TIM_TI1_ConfigInputStage>
      break;
 8004346:	e00c      	b.n	8004362 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	461a      	mov	r2, r3
 8004356:	f000 f8eb 	bl	8004530 <TIM_TI2_ConfigInputStage>
      break;
 800435a:	e002      	b.n	8004362 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800435c:	bf00      	nop
 800435e:	e000      	b.n	8004362 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004360:	bf00      	nop
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	fffefff8 	.word	0xfffefff8

08004370 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <TIM_TI1_SetConfig+0xcc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01b      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d017      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a25      	ldr	r2, [pc, #148]	; (8004440 <TIM_TI1_SetConfig+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d013      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a24      	ldr	r2, [pc, #144]	; (8004444 <TIM_TI1_SetConfig+0xd4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00f      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4a23      	ldr	r2, [pc, #140]	; (8004448 <TIM_TI1_SetConfig+0xd8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00b      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a22      	ldr	r2, [pc, #136]	; (800444c <TIM_TI1_SetConfig+0xdc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4a21      	ldr	r2, [pc, #132]	; (8004450 <TIM_TI1_SetConfig+0xe0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_TI1_SetConfig+0x66>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a20      	ldr	r2, [pc, #128]	; (8004454 <TIM_TI1_SetConfig+0xe4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <TIM_TI1_SetConfig+0x6a>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <TIM_TI1_SetConfig+0x6c>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e003      	b.n	80043fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	b2db      	uxtb	r3, r3
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f023 030a 	bic.w	r3, r3, #10
 8004414:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f003 030a 	and.w	r3, r3, #10
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010000 	.word	0x40010000
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40000c00 	.word	0x40000c00
 800444c:	40010400 	.word	0x40010400
 8004450:	40014000 	.word	0x40014000
 8004454:	40001800 	.word	0x40001800

08004458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 030a 	bic.w	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f023 0210 	bic.w	r2, r3, #16
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f023 0210 	bic.w	r2, r3, #16
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800455a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800456c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	621a      	str	r2, [r3, #32]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f023 0303 	bic.w	r3, r3, #3
 80045bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80045e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004634:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004646:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	031b      	lsls	r3, r3, #12
 800464c:	b29b      	uxth	r3, r3
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800465a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	031b      	lsls	r3, r3, #12
 8004660:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	f043 0307 	orr.w	r3, r3, #7
 80046a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	021a      	lsls	r2, r3, #8
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	431a      	orrs	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4313      	orrs	r3, r2
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e06d      	b.n	80047ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a30      	ldr	r2, [pc, #192]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d108      	bne.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800474a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a20      	ldr	r2, [pc, #128]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d022      	beq.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004782:	d01d      	beq.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d018      	beq.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1a      	ldr	r2, [pc, #104]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a15      	ldr	r2, [pc, #84]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a16      	ldr	r2, [pc, #88]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10c      	bne.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40010400 	.word	0x40010400
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40014000 	.word	0x40014000
 8004810:	40001800 	.word	0x40001800

08004814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e040      	b.n	80048a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc fdc4 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	; 0x24
 8004840:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f82c 	bl	80048b0 <UART_SetConfig>
 8004858:	4603      	mov	r3, r0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e022      	b.n	80048a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa82 	bl	8004d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800487e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800488e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fb09 	bl	8004eb8 <UART_CheckIdleState>
 80048a6:	4603      	mov	r3, r0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4ba7      	ldr	r3, [pc, #668]	; (8004b78 <UART_SetConfig+0x2c8>)
 80048dc:	4013      	ands	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	6979      	ldr	r1, [r7, #20]
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a95      	ldr	r2, [pc, #596]	; (8004b7c <UART_SetConfig+0x2cc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d120      	bne.n	800496e <UART_SetConfig+0xbe>
 800492c:	4b94      	ldr	r3, [pc, #592]	; (8004b80 <UART_SetConfig+0x2d0>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b03      	cmp	r3, #3
 8004938:	d816      	bhi.n	8004968 <UART_SetConfig+0xb8>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <UART_SetConfig+0x90>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004951 	.word	0x08004951
 8004944:	0800495d 	.word	0x0800495d
 8004948:	08004957 	.word	0x08004957
 800494c:	08004963 	.word	0x08004963
 8004950:	2301      	movs	r3, #1
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e14f      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004956:	2302      	movs	r3, #2
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e14c      	b.n	8004bf6 <UART_SetConfig+0x346>
 800495c:	2304      	movs	r3, #4
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e149      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004962:	2308      	movs	r3, #8
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	e146      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004968:	2310      	movs	r3, #16
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	e143      	b.n	8004bf6 <UART_SetConfig+0x346>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a84      	ldr	r2, [pc, #528]	; (8004b84 <UART_SetConfig+0x2d4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d132      	bne.n	80049de <UART_SetConfig+0x12e>
 8004978:	4b81      	ldr	r3, [pc, #516]	; (8004b80 <UART_SetConfig+0x2d0>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b0c      	cmp	r3, #12
 8004984:	d828      	bhi.n	80049d8 <UART_SetConfig+0x128>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <UART_SetConfig+0xdc>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049d9 	.word	0x080049d9
 8004994:	080049d9 	.word	0x080049d9
 8004998:	080049d9 	.word	0x080049d9
 800499c:	080049cd 	.word	0x080049cd
 80049a0:	080049d9 	.word	0x080049d9
 80049a4:	080049d9 	.word	0x080049d9
 80049a8:	080049d9 	.word	0x080049d9
 80049ac:	080049c7 	.word	0x080049c7
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049d9 	.word	0x080049d9
 80049bc:	080049d3 	.word	0x080049d3
 80049c0:	2300      	movs	r3, #0
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e117      	b.n	8004bf6 <UART_SetConfig+0x346>
 80049c6:	2302      	movs	r3, #2
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e114      	b.n	8004bf6 <UART_SetConfig+0x346>
 80049cc:	2304      	movs	r3, #4
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e111      	b.n	8004bf6 <UART_SetConfig+0x346>
 80049d2:	2308      	movs	r3, #8
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e10e      	b.n	8004bf6 <UART_SetConfig+0x346>
 80049d8:	2310      	movs	r3, #16
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e10b      	b.n	8004bf6 <UART_SetConfig+0x346>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a69      	ldr	r2, [pc, #420]	; (8004b88 <UART_SetConfig+0x2d8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d120      	bne.n	8004a2a <UART_SetConfig+0x17a>
 80049e8:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <UART_SetConfig+0x2d0>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049f2:	2b30      	cmp	r3, #48	; 0x30
 80049f4:	d013      	beq.n	8004a1e <UART_SetConfig+0x16e>
 80049f6:	2b30      	cmp	r3, #48	; 0x30
 80049f8:	d814      	bhi.n	8004a24 <UART_SetConfig+0x174>
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d009      	beq.n	8004a12 <UART_SetConfig+0x162>
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d810      	bhi.n	8004a24 <UART_SetConfig+0x174>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <UART_SetConfig+0x15c>
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d006      	beq.n	8004a18 <UART_SetConfig+0x168>
 8004a0a:	e00b      	b.n	8004a24 <UART_SetConfig+0x174>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e0f1      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a12:	2302      	movs	r3, #2
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e0ee      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e0eb      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e0e8      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a24:	2310      	movs	r3, #16
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e0e5      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a57      	ldr	r2, [pc, #348]	; (8004b8c <UART_SetConfig+0x2dc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d120      	bne.n	8004a76 <UART_SetConfig+0x1c6>
 8004a34:	4b52      	ldr	r3, [pc, #328]	; (8004b80 <UART_SetConfig+0x2d0>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a40:	d013      	beq.n	8004a6a <UART_SetConfig+0x1ba>
 8004a42:	2bc0      	cmp	r3, #192	; 0xc0
 8004a44:	d814      	bhi.n	8004a70 <UART_SetConfig+0x1c0>
 8004a46:	2b80      	cmp	r3, #128	; 0x80
 8004a48:	d009      	beq.n	8004a5e <UART_SetConfig+0x1ae>
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d810      	bhi.n	8004a70 <UART_SetConfig+0x1c0>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <UART_SetConfig+0x1a8>
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d006      	beq.n	8004a64 <UART_SetConfig+0x1b4>
 8004a56:	e00b      	b.n	8004a70 <UART_SetConfig+0x1c0>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e0cb      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e0c8      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a64:	2304      	movs	r3, #4
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e0c5      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e0c2      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a70:	2310      	movs	r3, #16
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e0bf      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a45      	ldr	r2, [pc, #276]	; (8004b90 <UART_SetConfig+0x2e0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d125      	bne.n	8004acc <UART_SetConfig+0x21c>
 8004a80:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <UART_SetConfig+0x2d0>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a8e:	d017      	beq.n	8004ac0 <UART_SetConfig+0x210>
 8004a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a94:	d817      	bhi.n	8004ac6 <UART_SetConfig+0x216>
 8004a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9a:	d00b      	beq.n	8004ab4 <UART_SetConfig+0x204>
 8004a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa0:	d811      	bhi.n	8004ac6 <UART_SetConfig+0x216>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <UART_SetConfig+0x1fe>
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aaa:	d006      	beq.n	8004aba <UART_SetConfig+0x20a>
 8004aac:	e00b      	b.n	8004ac6 <UART_SetConfig+0x216>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e0a0      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e09d      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004aba:	2304      	movs	r3, #4
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	e09a      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e097      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e094      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a30      	ldr	r2, [pc, #192]	; (8004b94 <UART_SetConfig+0x2e4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d125      	bne.n	8004b22 <UART_SetConfig+0x272>
 8004ad6:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <UART_SetConfig+0x2d0>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae4:	d017      	beq.n	8004b16 <UART_SetConfig+0x266>
 8004ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aea:	d817      	bhi.n	8004b1c <UART_SetConfig+0x26c>
 8004aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af0:	d00b      	beq.n	8004b0a <UART_SetConfig+0x25a>
 8004af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af6:	d811      	bhi.n	8004b1c <UART_SetConfig+0x26c>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <UART_SetConfig+0x254>
 8004afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b00:	d006      	beq.n	8004b10 <UART_SetConfig+0x260>
 8004b02:	e00b      	b.n	8004b1c <UART_SetConfig+0x26c>
 8004b04:	2301      	movs	r3, #1
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e075      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e072      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b10:	2304      	movs	r3, #4
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e06f      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b16:	2308      	movs	r3, #8
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e06c      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e069      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <UART_SetConfig+0x2e8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d137      	bne.n	8004b9c <UART_SetConfig+0x2ec>
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <UART_SetConfig+0x2d0>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b3a:	d017      	beq.n	8004b6c <UART_SetConfig+0x2bc>
 8004b3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b40:	d817      	bhi.n	8004b72 <UART_SetConfig+0x2c2>
 8004b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b46:	d00b      	beq.n	8004b60 <UART_SetConfig+0x2b0>
 8004b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4c:	d811      	bhi.n	8004b72 <UART_SetConfig+0x2c2>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <UART_SetConfig+0x2aa>
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d006      	beq.n	8004b66 <UART_SetConfig+0x2b6>
 8004b58:	e00b      	b.n	8004b72 <UART_SetConfig+0x2c2>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e04a      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b60:	2302      	movs	r3, #2
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e047      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b66:	2304      	movs	r3, #4
 8004b68:	77fb      	strb	r3, [r7, #31]
 8004b6a:	e044      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	77fb      	strb	r3, [r7, #31]
 8004b70:	e041      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b72:	2310      	movs	r3, #16
 8004b74:	77fb      	strb	r3, [r7, #31]
 8004b76:	e03e      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004b78:	efff69f3 	.word	0xefff69f3
 8004b7c:	40011000 	.word	0x40011000
 8004b80:	40023800 	.word	0x40023800
 8004b84:	40004400 	.word	0x40004400
 8004b88:	40004800 	.word	0x40004800
 8004b8c:	40004c00 	.word	0x40004c00
 8004b90:	40005000 	.word	0x40005000
 8004b94:	40011400 	.word	0x40011400
 8004b98:	40007800 	.word	0x40007800
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a71      	ldr	r2, [pc, #452]	; (8004d68 <UART_SetConfig+0x4b8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d125      	bne.n	8004bf2 <UART_SetConfig+0x342>
 8004ba6:	4b71      	ldr	r3, [pc, #452]	; (8004d6c <UART_SetConfig+0x4bc>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bb4:	d017      	beq.n	8004be6 <UART_SetConfig+0x336>
 8004bb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bba:	d817      	bhi.n	8004bec <UART_SetConfig+0x33c>
 8004bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc0:	d00b      	beq.n	8004bda <UART_SetConfig+0x32a>
 8004bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc6:	d811      	bhi.n	8004bec <UART_SetConfig+0x33c>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <UART_SetConfig+0x324>
 8004bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bd0:	d006      	beq.n	8004be0 <UART_SetConfig+0x330>
 8004bd2:	e00b      	b.n	8004bec <UART_SetConfig+0x33c>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e00d      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e00a      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004be0:	2304      	movs	r3, #4
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e007      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004be6:	2308      	movs	r3, #8
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e004      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004bec:	2310      	movs	r3, #16
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e001      	b.n	8004bf6 <UART_SetConfig+0x346>
 8004bf2:	2310      	movs	r3, #16
 8004bf4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfe:	d15b      	bne.n	8004cb8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004c00:	7ffb      	ldrb	r3, [r7, #31]
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d827      	bhi.n	8004c56 <UART_SetConfig+0x3a6>
 8004c06:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <UART_SetConfig+0x35c>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c57 	.word	0x08004c57
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c57 	.word	0x08004c57
 8004c2c:	08004c4f 	.word	0x08004c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7fd ff5a 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8004c34:	61b8      	str	r0, [r7, #24]
        break;
 8004c36:	e013      	b.n	8004c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c38:	f7fd ff6a 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8004c3c:	61b8      	str	r0, [r7, #24]
        break;
 8004c3e:	e00f      	b.n	8004c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c40:	4b4b      	ldr	r3, [pc, #300]	; (8004d70 <UART_SetConfig+0x4c0>)
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e00c      	b.n	8004c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c46:	f7fd fe8d 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8004c4a:	61b8      	str	r0, [r7, #24]
        break;
 8004c4c:	e008      	b.n	8004c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c52:	61bb      	str	r3, [r7, #24]
        break;
 8004c54:	e004      	b.n	8004c60 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d074      	beq.n	8004d50 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	005a      	lsls	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	441a      	add	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b0f      	cmp	r3, #15
 8004c82:	d916      	bls.n	8004cb2 <UART_SetConfig+0x402>
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8a:	d212      	bcs.n	8004cb2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f023 030f 	bic.w	r3, r3, #15
 8004c94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	89fb      	ldrh	r3, [r7, #14]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	89fa      	ldrh	r2, [r7, #14]
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	e04e      	b.n	8004d50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	77bb      	strb	r3, [r7, #30]
 8004cb6:	e04b      	b.n	8004d50 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb8:	7ffb      	ldrb	r3, [r7, #31]
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d827      	bhi.n	8004d0e <UART_SetConfig+0x45e>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x414>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf9 	.word	0x08004cf9
 8004cd0:	08004d0f 	.word	0x08004d0f
 8004cd4:	08004cff 	.word	0x08004cff
 8004cd8:	08004d0f 	.word	0x08004d0f
 8004cdc:	08004d0f 	.word	0x08004d0f
 8004ce0:	08004d0f 	.word	0x08004d0f
 8004ce4:	08004d07 	.word	0x08004d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7fd fefe 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8004cec:	61b8      	str	r0, [r7, #24]
        break;
 8004cee:	e013      	b.n	8004d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf0:	f7fd ff0e 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8004cf4:	61b8      	str	r0, [r7, #24]
        break;
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <UART_SetConfig+0x4c0>)
 8004cfa:	61bb      	str	r3, [r7, #24]
        break;
 8004cfc:	e00c      	b.n	8004d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfe:	f7fd fe31 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8004d02:	61b8      	str	r0, [r7, #24]
        break;
 8004d04:	e008      	b.n	8004d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0a:	61bb      	str	r3, [r7, #24]
        break;
 8004d0c:	e004      	b.n	8004d18 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	77bb      	strb	r3, [r7, #30]
        break;
 8004d16:	bf00      	nop
    }

    if (pclk != 0U)
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d018      	beq.n	8004d50 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	085a      	lsrs	r2, r3, #1
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	441a      	add	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	d908      	bls.n	8004d4c <UART_SetConfig+0x49c>
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d40:	d204      	bcs.n	8004d4c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e001      	b.n	8004d50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40007c00 	.word	0x40007c00
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400

08004d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01a      	beq.n	8004e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e72:	d10a      	bne.n	8004e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec8:	f7fc fb26 	bl	8001518 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d10e      	bne.n	8004efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f82d 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e023      	b.n	8004f42 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d10e      	bne.n	8004f26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f817 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e00d      	b.n	8004f42 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4613      	mov	r3, r2
 8004f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5a:	e05e      	b.n	800501a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d05a      	beq.n	800501a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f64:	f7fc fad8 	bl	8001518 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d302      	bcc.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d11b      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e043      	b.n	800503a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02c      	beq.n	800501a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d124      	bne.n	800501a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fe8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e00f      	b.n	800503a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4013      	ands	r3, r2
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	429a      	cmp	r2, r3
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	429a      	cmp	r2, r3
 8005036:	d091      	beq.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <__libc_init_array>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4d0d      	ldr	r5, [pc, #52]	; (800507c <__libc_init_array+0x38>)
 8005048:	4c0d      	ldr	r4, [pc, #52]	; (8005080 <__libc_init_array+0x3c>)
 800504a:	1b64      	subs	r4, r4, r5
 800504c:	10a4      	asrs	r4, r4, #2
 800504e:	2600      	movs	r6, #0
 8005050:	42a6      	cmp	r6, r4
 8005052:	d109      	bne.n	8005068 <__libc_init_array+0x24>
 8005054:	4d0b      	ldr	r5, [pc, #44]	; (8005084 <__libc_init_array+0x40>)
 8005056:	4c0c      	ldr	r4, [pc, #48]	; (8005088 <__libc_init_array+0x44>)
 8005058:	f000 f820 	bl	800509c <_init>
 800505c:	1b64      	subs	r4, r4, r5
 800505e:	10a4      	asrs	r4, r4, #2
 8005060:	2600      	movs	r6, #0
 8005062:	42a6      	cmp	r6, r4
 8005064:	d105      	bne.n	8005072 <__libc_init_array+0x2e>
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	f855 3b04 	ldr.w	r3, [r5], #4
 800506c:	4798      	blx	r3
 800506e:	3601      	adds	r6, #1
 8005070:	e7ee      	b.n	8005050 <__libc_init_array+0xc>
 8005072:	f855 3b04 	ldr.w	r3, [r5], #4
 8005076:	4798      	blx	r3
 8005078:	3601      	adds	r6, #1
 800507a:	e7f2      	b.n	8005062 <__libc_init_array+0x1e>
 800507c:	080050d4 	.word	0x080050d4
 8005080:	080050d4 	.word	0x080050d4
 8005084:	080050d4 	.word	0x080050d4
 8005088:	080050d8 	.word	0x080050d8

0800508c <memset>:
 800508c:	4402      	add	r2, r0
 800508e:	4603      	mov	r3, r0
 8005090:	4293      	cmp	r3, r2
 8005092:	d100      	bne.n	8005096 <memset+0xa>
 8005094:	4770      	bx	lr
 8005096:	f803 1b01 	strb.w	r1, [r3], #1
 800509a:	e7f9      	b.n	8005090 <memset+0x4>

0800509c <_init>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	bf00      	nop
 80050a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a2:	bc08      	pop	{r3}
 80050a4:	469e      	mov	lr, r3
 80050a6:	4770      	bx	lr

080050a8 <_fini>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	bf00      	nop
 80050ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ae:	bc08      	pop	{r3}
 80050b0:	469e      	mov	lr, r3
 80050b2:	4770      	bx	lr
