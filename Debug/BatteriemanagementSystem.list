
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c54  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08006e4c  08006e4c  00016e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007454  08007454  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007454  08007454  00017454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800745c  0800745c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800745c  0800745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  08007470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08007470  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cef  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a1  00000000  00000000  00036d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003b618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c222  00000000  00000000  0003c7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae2d  00000000  00000000  000689ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108729  00000000  00000000  00083817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018bf40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f0c  00000000  00000000  0018bf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006e34 	.word	0x08006e34

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006e34 	.word	0x08006e34

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <uartTransmit+0x24>)
 8000562:	f005 ff4f 	bl	8006404 <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000234 	.word	0x20000234

08000574 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f006 fc52 	bl	8006e30 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartTransmitNumber+0x3c>)
 80005a4:	f005 ff2e 	bl	8006404 <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000234 	.word	0x20000234

080005b4 <ltc1380_write>:
//----------------------------------------------------------------------

// Kanal auswaehlen
//----------------------------------------------------------------------
void ltc1380_write(uint8_t Address, uint8_t Channel)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	ITM_SendNumber(Channel);
	ITM_SendChar('\n');
#endif

	// Definiere Array fuer Channel auswaehlen
	uint8_t off[6] = {0x69, 0x08, 0x00, 0x89, 0x7F, 0xF9};					// Daten-Bytes fuer LTC6811 mit Daten fuer LTC1380
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <ltc1380_write+0x64>)
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ce:	6018      	str	r0, [r3, #0]
 80005d0:	3304      	adds	r3, #4
 80005d2:	8019      	strh	r1, [r3, #0]
	
	// Addresse und Channel waehlen
	off[1] |= ((Address & 0x0F) << 4);										// Address in Array uebertragen
 80005d4:	7a7b      	ldrb	r3, [r7, #9]
 80005d6:	b25a      	sxtb	r2, r3
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	4313      	orrs	r3, r2
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	727b      	strb	r3, [r7, #9]
	off[3] |= ((Channel & 0x0F) << 4);										// Channel in Array uebertragen
 80005e6:	7afb      	ldrb	r3, [r7, #11]
 80005e8:	b25a      	sxtb	r2, r3
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	
	// LTC6811 beschreiben und ueber I2C uebertragen
	ltc6811_write(WRCOMM, &off[0]);												// Daten in LTC6811 schreiben
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4619      	mov	r1, r3
 80005fe:	f240 7021 	movw	r0, #1825	; 0x721
 8000602:	f000 f887 	bl	8000714 <ltc6811_write>
	ltc6811(STCOMM);														// Daten von LTC6811 an LTC1380 senden
 8000606:	f240 7023 	movw	r0, #1827	; 0x723
 800060a:	f000 f82f 	bl	800066c <ltc6811>
		ITM_SendChar(' ');
		ITM_SendNumber(off[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	08006e4c 	.word	0x08006e4c

0800061c <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Chip wird geweckt.\n");
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000622:	2300      	movs	r3, #0
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e014      	b.n	8000652 <wakeup_ltc6811+0x36>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062e:	480d      	ldr	r0, [pc, #52]	; (8000664 <wakeup_ltc6811+0x48>)
 8000630:	f002 fdaa 	bl	8003188 <HAL_GPIO_WritePin>

		// Dummy Paket senden
		HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	2201      	movs	r2, #1
 8000638:	21aa      	movs	r1, #170	; 0xaa
 800063a:	480b      	ldr	r0, [pc, #44]	; (8000668 <wakeup_ltc6811+0x4c>)
 800063c:	f003 ff75 	bl	800452a <HAL_SPI_Transmit>

		//HAL_Delay(2);														// isoSPI braucht Zeit bis ready

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000646:	4807      	ldr	r0, [pc, #28]	; (8000664 <wakeup_ltc6811+0x48>)
 8000648:	f002 fd9e 	bl	8003188 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	3301      	adds	r3, #1
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0e7      	beq.n	8000628 <wakeup_ltc6811+0xc>
	}
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000
 8000668:	20000138 	.word	0x20000138

0800066c <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f947 	bl	800090c <peccommand>
 800067e:	4603      	mov	r3, r0
 8000680:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000682:	f7ff ffcb 	bl	800061c <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 800069c:	89bb      	ldrh	r3, [r7, #12]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 80006a6:	89bb      	ldrh	r3, [r7, #12]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f023 0301 	bic.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <ltc6811+0xa0>)
 80006ba:	f002 fd65 	bl	8003188 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80006be:	f107 0108 	add.w	r1, r7, #8
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	2204      	movs	r2, #4
 80006c6:	4812      	ldr	r0, [pc, #72]	; (8000710 <ltc6811+0xa4>)
 80006c8:	f003 ff2f 	bl	800452a <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	f240 7223 	movw	r2, #1827	; 0x723
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d10f      	bne.n	80006f6 <ltc6811+0x8a>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e009      	b.n	80006f0 <ltc6811+0x84>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	2201      	movs	r2, #1
 80006e2:	21aa      	movs	r1, #170	; 0xaa
 80006e4:	480a      	ldr	r0, [pc, #40]	; (8000710 <ltc6811+0xa4>)
 80006e6:	f003 ff20 	bl	800452a <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	3301      	adds	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b08      	cmp	r3, #8
 80006f4:	d9f2      	bls.n	80006dc <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <ltc6811+0xa0>)
 80006fe:	f002 fd43 	bl	8003188 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000
 8000710:	20000138 	.word	0x20000138

08000714 <ltc6811_write>:


// Broadcast Write Command
//----------------------------------------------------------------------
void ltc6811_write(uint16_t command, uint8_t* data)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, fuer Data Funktion nur bei einem Device gegeben
	uint16_t pec_c, pec_d;													// pec_c = Zwischenspeicher 16-Bit Command, pec_d = Zwischenspeicher 16-Bit Data
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	uint8_t tmp_data[8*LTC6811_DEVICES];									// Zwischenspeicher Daten + Pec CRC
	pec_c = peccommand(command);											// Pec Command berechnen
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f8f2 	bl	800090c <peccommand>
 8000728:	4603      	mov	r3, r0
 800072a:	83bb      	strh	r3, [r7, #28]

	// Command in cmd abspeichern
	cmd[0] = ((command  >> 8) & 0x07);
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	b29b      	uxth	r3, r3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f003 0307 	and.w	r3, r3, #7
 8000738:	b2db      	uxtb	r3, r3
 800073a:	753b      	strb	r3, [r7, #20]
	cmd[1] = (command & 0xFF);
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	757b      	strb	r3, [r7, #21]
	cmd[2] = ((pec_c >> 8) & 0xFF);
 8000742:	8bbb      	ldrh	r3, [r7, #28]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	b29b      	uxth	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (pec_c & 0xFE);
 800074c:	8bbb      	ldrh	r3, [r7, #28]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f023 0301 	bic.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	75fb      	strb	r3, [r7, #23]

	// Daten in tmp_data abspeichern zum Senden
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8000758:	2300      	movs	r3, #0
 800075a:	77fb      	strb	r3, [r7, #31]
 800075c:	e035      	b.n	80007ca <ltc6811_write+0xb6>
	{
		// Schleife um Daten fuer einen IC abzuspeichern
		for (uint8_t i = 0; i < 6; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	77bb      	strb	r3, [r7, #30]
 8000762:	e016      	b.n	8000792 <ltc6811_write+0x7e>
		{
			tmp_data[j*8+i] = data[j*6+i];
 8000764:	7ffa      	ldrb	r2, [r7, #31]
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	461a      	mov	r2, r3
 8000770:	7fbb      	ldrb	r3, [r7, #30]
 8000772:	4413      	add	r3, r2
 8000774:	461a      	mov	r2, r3
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	441a      	add	r2, r3
 800077a:	7ffb      	ldrb	r3, [r7, #31]
 800077c:	00d9      	lsls	r1, r3, #3
 800077e:	7fbb      	ldrb	r3, [r7, #30]
 8000780:	440b      	add	r3, r1
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	3320      	adds	r3, #32
 8000786:	443b      	add	r3, r7
 8000788:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i = 0; i < 6; i++)
 800078c:	7fbb      	ldrb	r3, [r7, #30]
 800078e:	3301      	adds	r3, #1
 8000790:	77bb      	strb	r3, [r7, #30]
 8000792:	7fbb      	ldrb	r3, [r7, #30]
 8000794:	2b05      	cmp	r3, #5
 8000796:	d9e5      	bls.n	8000764 <ltc6811_write+0x50>
		}

		// Pec berechnen pro IC einmal
		pec_d = peclookup(6, &tmp_data[j*8]);								// Pec Daten berechnen
 8000798:	7ffb      	ldrb	r3, [r7, #31]
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	f107 020c 	add.w	r2, r7, #12
 80007a0:	4413      	add	r3, r2
 80007a2:	4619      	mov	r1, r3
 80007a4:	2006      	movs	r0, #6
 80007a6:	f000 f8cd 	bl	8000944 <peclookup>
 80007aa:	4603      	mov	r3, r0
 80007ac:	837b      	strh	r3, [r7, #26]

		// Pec abspeichern fuer einen IC
		tmp_data[6] = ((pec_d >> 8) & 0xFF);
 80007ae:	8b7b      	ldrh	r3, [r7, #26]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	74bb      	strb	r3, [r7, #18]
		tmp_data[7] = (pec_d & 0xFE);
 80007b8:	8b7b      	ldrh	r3, [r7, #26]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	f023 0301 	bic.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	74fb      	strb	r3, [r7, #19]
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 80007c4:	7ffb      	ldrb	r3, [r7, #31]
 80007c6:	3301      	adds	r3, #1
 80007c8:	77fb      	strb	r3, [r7, #31]
 80007ca:	7ffb      	ldrb	r3, [r7, #31]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0c6      	beq.n	800075e <ltc6811_write+0x4a>
	}
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80007d0:	f7ff ff24 	bl	800061c <wakeup_ltc6811>

	// ISOCS einschalten
	ISOCS_ENABLE();
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <ltc6811_write+0xfc>)
 80007dc:	f002 fcd4 	bl	8003188 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80007e0:	f107 0114 	add.w	r1, r7, #20
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	2204      	movs	r2, #4
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <ltc6811_write+0x100>)
 80007ea:	f003 fe9e 	bl	800452a <HAL_SPI_Transmit>
	
	// Data senden
//	for (uint8_t i = 0; i < 6; i++)
//	{
		// Sende Daten fuer einen IC
		HAL_SPI_Transmit(&hspi4, tmp_data, 8, 100);
 80007ee:	f107 010c 	add.w	r1, r7, #12
 80007f2:	2364      	movs	r3, #100	; 0x64
 80007f4:	2208      	movs	r2, #8
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <ltc6811_write+0x100>)
 80007f8:	f003 fe97 	bl	800452a <HAL_SPI_Transmit>
//	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <ltc6811_write+0xfc>)
 8000804:	f002 fcc0 	bl	8003188 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	20000138 	.word	0x20000138

08000818 <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint16_t tmp;															// Zwischenspeicher fuer Pruefung CRC
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f870 	bl	800090c <peccommand>
 800082c:	4603      	mov	r3, r0
 800082e:	82bb      	strh	r3, [r7, #20]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000830:	f7ff fef4 	bl	800061c <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	0a1b      	lsrs	r3, r3, #8
 8000838:	b29b      	uxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	b2db      	uxtb	r3, r3
 8000842:	733b      	strb	r3, [r7, #12]
	cmd[1] = (command & 0xFF);
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	737b      	strb	r3, [r7, #13]
	cmd[2] = ((pec >> 8) & 0xFF);
 800084a:	8abb      	ldrh	r3, [r7, #20]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (pec & 0xFE);
 8000854:	8abb      	ldrh	r3, [r7, #20]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f023 0301 	bic.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73fb      	strb	r3, [r7, #15]

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000866:	4827      	ldr	r0, [pc, #156]	; (8000904 <ltc6811_read+0xec>)
 8000868:	f002 fc8e 	bl	8003188 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 800086c:	f107 010c 	add.w	r1, r7, #12
 8000870:	2364      	movs	r3, #100	; 0x64
 8000872:	2204      	movs	r2, #4
 8000874:	4824      	ldr	r0, [pc, #144]	; (8000908 <ltc6811_read+0xf0>)
 8000876:	f003 fe58 	bl	800452a <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800087a:	2300      	movs	r3, #0
 800087c:	75fb      	strb	r3, [r7, #23]
 800087e:	e00c      	b.n	800089a <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	461a      	mov	r2, r3
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	1899      	adds	r1, r3, r2
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	2208      	movs	r2, #8
 800088e:	481e      	ldr	r0, [pc, #120]	; (8000908 <ltc6811_read+0xf0>)
 8000890:	f003 ffb9 	bl	8004806 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	3301      	adds	r3, #1
 8000898:	75fb      	strb	r3, [r7, #23]
 800089a:	7dfb      	ldrb	r3, [r7, #23]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0ef      	beq.n	8000880 <ltc6811_read+0x68>
	}

	// Pec zuruecksetzen
	pec = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	82bb      	strh	r3, [r7, #20]

	// Pec pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	75bb      	strb	r3, [r7, #22]
 80008a8:	e01d      	b.n	80008e6 <ltc6811_read+0xce>
	{
		tmp = ((data[i + 6] << 8) + data[i + 7]);
 80008aa:	7dbb      	ldrb	r3, [r7, #22]
 80008ac:	3306      	adds	r3, #6
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	7dbb      	ldrb	r3, [r7, #22]
 80008bc:	3307      	adds	r3, #7
 80008be:	6839      	ldr	r1, [r7, #0]
 80008c0:	440b      	add	r3, r1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	4413      	add	r3, r2
 80008c8:	827b      	strh	r3, [r7, #18]
		pec = peclookup(6, &data[i*8]);
 80008ca:	7dbb      	ldrb	r3, [r7, #22]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	461a      	mov	r2, r3
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	2006      	movs	r0, #6
 80008d8:	f000 f834 	bl	8000944 <peclookup>
 80008dc:	4603      	mov	r3, r0
 80008de:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008e0:	7dbb      	ldrb	r3, [r7, #22]
 80008e2:	3301      	adds	r3, #1
 80008e4:	75bb      	strb	r3, [r7, #22]
 80008e6:	7dbb      	ldrb	r3, [r7, #22]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0de      	beq.n	80008aa <ltc6811_read+0x92>
			uartTransmit("\n", 1);*/
		}
	}

	// ISOCS ausschalten
	ISOCS_DISABLE();
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <ltc6811_read+0xec>)
 80008f4:	f002 fc48 	bl	8003188 <HAL_GPIO_WritePin>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	20000138 	.word	0x20000138

0800090c <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	0a1b      	lsrs	r3, r3, #8
 8000920:	b29b      	uxth	r3, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	b2db      	uxtb	r3, r3
 800092a:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	2002      	movs	r0, #2
 8000934:	f000 f806 	bl	8000944 <peclookup>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 8000950:	2310      	movs	r3, #16
 8000952:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 8000954:	2300      	movs	r3, #0
 8000956:	737b      	strb	r3, [r7, #13]
 8000958:	e019      	b.n	800098e <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	09db      	lsrs	r3, r3, #7
 800095e:	b29a      	uxth	r2, r3
 8000960:	7b7b      	ldrb	r3, [r7, #13]
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	440b      	add	r3, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	4053      	eors	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	b21a      	sxth	r2, r3
 8000978:	897b      	ldrh	r3, [r7, #10]
 800097a:	490b      	ldr	r1, [pc, #44]	; (80009a8 <peclookup+0x64>)
 800097c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000980:	b21b      	sxth	r3, r3
 8000982:	4053      	eors	r3, r2
 8000984:	b21b      	sxth	r3, r3
 8000986:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 8000988:	7b7b      	ldrb	r3, [r7, #13]
 800098a:	3301      	adds	r3, #1
 800098c:	737b      	strb	r3, [r7, #13]
 800098e:	7b7a      	ldrb	r2, [r7, #13]
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	429a      	cmp	r2, r3
 8000994:	d3e1      	bcc.n	800095a <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	b29b      	uxth	r3, r3
}
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	08007214 	.word	0x08007214

080009ac <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80009b2:	2115      	movs	r1, #21
 80009b4:	483b      	ldr	r0, [pc, #236]	; (8000aa4 <collectHardwareInfo+0xf8>)
 80009b6:	f7ff fdc9 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80009ba:	f001 fd79 	bl	80024b0 <HAL_GetDEVID>
 80009be:	4603      	mov	r3, r0
 80009c0:	210a      	movs	r1, #10
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fdd6 	bl	8000574 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80009c8:	2117      	movs	r1, #23
 80009ca:	4837      	ldr	r0, [pc, #220]	; (8000aa8 <collectHardwareInfo+0xfc>)
 80009cc:	f7ff fdbe 	bl	800054c <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80009d0:	f001 fd62 	bl	8002498 <HAL_GetREVID>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f242 0201 	movw	r2, #8193	; 0x2001
 80009da:	4293      	cmp	r3, r2
 80009dc:	d016      	beq.n	8000a0c <collectHardwareInfo+0x60>
 80009de:	f242 0201 	movw	r2, #8193	; 0x2001
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d817      	bhi.n	8000a16 <collectHardwareInfo+0x6a>
 80009e6:	f241 0201 	movw	r2, #4097	; 0x1001
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d004      	beq.n	80009f8 <collectHardwareInfo+0x4c>
 80009ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d005      	beq.n	8000a02 <collectHardwareInfo+0x56>
 80009f6:	e00e      	b.n	8000a16 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80009f8:	2101      	movs	r1, #1
 80009fa:	482c      	ldr	r0, [pc, #176]	; (8000aac <collectHardwareInfo+0x100>)
 80009fc:	f7ff fda6 	bl	800054c <uartTransmit>
			break;
 8000a00:	e011      	b.n	8000a26 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000a02:	2101      	movs	r1, #1
 8000a04:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <collectHardwareInfo+0x104>)
 8000a06:	f7ff fda1 	bl	800054c <uartTransmit>
			break;
 8000a0a:	e00c      	b.n	8000a26 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4829      	ldr	r0, [pc, #164]	; (8000ab4 <collectHardwareInfo+0x108>)
 8000a10:	f7ff fd9c 	bl	800054c <uartTransmit>
			break;
 8000a14:	e007      	b.n	8000a26 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000a16:	f001 fd3f 	bl	8002498 <HAL_GetREVID>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	210a      	movs	r1, #10
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fda8 	bl	8000574 <uartTransmitNumber>
			break;
 8000a24:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000a26:	2115      	movs	r1, #21
 8000a28:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <collectHardwareInfo+0x10c>)
 8000a2a:	f7ff fd8f 	bl	800054c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000a2e:	f002 ffaf 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8000a32:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a21      	ldr	r2, [pc, #132]	; (8000abc <collectHardwareInfo+0x110>)
 8000a38:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3c:	0c9b      	lsrs	r3, r3, #18
 8000a3e:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000a40:	210a      	movs	r1, #10
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fd96 	bl	8000574 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000a48:	2104      	movs	r1, #4
 8000a4a:	481d      	ldr	r0, [pc, #116]	; (8000ac0 <collectHardwareInfo+0x114>)
 8000a4c:	f7ff fd7e 	bl	800054c <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000a50:	2111      	movs	r1, #17
 8000a52:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <collectHardwareInfo+0x118>)
 8000a54:	f7ff fd7a 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000a58:	f001 fd38 	bl	80024cc <HAL_GetUIDw0>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2110      	movs	r1, #16
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fd87 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000a66:	2101      	movs	r1, #1
 8000a68:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <collectHardwareInfo+0x11c>)
 8000a6a:	f7ff fd6f 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000a6e:	f001 fd39 	bl	80024e4 <HAL_GetUIDw1>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2110      	movs	r1, #16
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fd7c 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <collectHardwareInfo+0x11c>)
 8000a80:	f7ff fd64 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000a84:	f001 fd3a 	bl	80024fc <HAL_GetUIDw2>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd71 	bl	8000574 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000a92:	2101      	movs	r1, #1
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <collectHardwareInfo+0x120>)
 8000a96:	f7ff fd59 	bl	800054c <uartTransmit>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	08006e5c 	.word	0x08006e5c
 8000aa8:	08006e74 	.word	0x08006e74
 8000aac:	08006e8c 	.word	0x08006e8c
 8000ab0:	08006e90 	.word	0x08006e90
 8000ab4:	08006e94 	.word	0x08006e94
 8000ab8:	08006e98 	.word	0x08006e98
 8000abc:	431bde83 	.word	0x431bde83
 8000ac0:	08006eb0 	.word	0x08006eb0
 8000ac4:	08006eb8 	.word	0x08006eb8
 8000ac8:	08006ecc 	.word	0x08006ecc
 8000acc:	08006ed0 	.word	0x08006ed0

08000ad0 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000ad4:	2114      	movs	r1, #20
 8000ad6:	4824      	ldr	r0, [pc, #144]	; (8000b68 <collectMiddlewareInfo+0x98>)
 8000ad8:	f7ff fd38 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000adc:	210a      	movs	r1, #10
 8000ade:	2005      	movs	r0, #5
 8000ae0:	f7ff fd48 	bl	8000574 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4821      	ldr	r0, [pc, #132]	; (8000b6c <collectMiddlewareInfo+0x9c>)
 8000ae8:	f7ff fd30 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000aec:	210a      	movs	r1, #10
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fd40 	bl	8000574 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000af4:	2112      	movs	r1, #18
 8000af6:	481e      	ldr	r0, [pc, #120]	; (8000b70 <collectMiddlewareInfo+0xa0>)
 8000af8:	f7ff fd28 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000afc:	f001 fcc2 	bl	8002484 <HAL_GetHalVersion>
 8000b00:	4603      	mov	r3, r0
 8000b02:	0e1b      	lsrs	r3, r3, #24
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	210a      	movs	r1, #10
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fd33 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <collectMiddlewareInfo+0x9c>)
 8000b12:	f7ff fd1b 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000b16:	f001 fcb5 	bl	8002484 <HAL_GetHalVersion>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	210a      	movs	r1, #10
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd26 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <collectMiddlewareInfo+0x9c>)
 8000b2c:	f7ff fd0e 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000b30:	f001 fca8 	bl	8002484 <HAL_GetHalVersion>
 8000b34:	4603      	mov	r3, r0
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	210a      	movs	r1, #10
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fd19 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000b42:	2101      	movs	r1, #1
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <collectMiddlewareInfo+0x9c>)
 8000b46:	f7ff fd01 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000b4a:	f001 fc9b 	bl	8002484 <HAL_GetHalVersion>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	210a      	movs	r1, #10
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fd0d 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <collectMiddlewareInfo+0xa4>)
 8000b5e:	f7ff fcf5 	bl	800054c <uartTransmit>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	08006ed4 	.word	0x08006ed4
 8000b6c:	08006ee8 	.word	0x08006ee8
 8000b70:	08006eec 	.word	0x08006eec
 8000b74:	08006ed0 	.word	0x08006ed0

08000b78 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000b7c:	2111      	movs	r1, #17
 8000b7e:	4826      	ldr	r0, [pc, #152]	; (8000c18 <collectSoftwareInfo+0xa0>)
 8000b80:	f7ff fce4 	bl	800054c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000b84:	2108      	movs	r1, #8
 8000b86:	4825      	ldr	r0, [pc, #148]	; (8000c1c <collectSoftwareInfo+0xa4>)
 8000b88:	f7ff fce0 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000b8c:	2111      	movs	r1, #17
 8000b8e:	4824      	ldr	r0, [pc, #144]	; (8000c20 <collectSoftwareInfo+0xa8>)
 8000b90:	f7ff fcdc 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000b94:	2101      	movs	r1, #1
 8000b96:	4823      	ldr	r0, [pc, #140]	; (8000c24 <collectSoftwareInfo+0xac>)
 8000b98:	f7ff fcd8 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	4822      	ldr	r0, [pc, #136]	; (8000c28 <collectSoftwareInfo+0xb0>)
 8000ba0:	f7ff fcd4 	bl	800054c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000ba4:	2129      	movs	r1, #41	; 0x29
 8000ba6:	4821      	ldr	r0, [pc, #132]	; (8000c2c <collectSoftwareInfo+0xb4>)
 8000ba8:	f7ff fcd0 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000bac:	2101      	movs	r1, #1
 8000bae:	4820      	ldr	r0, [pc, #128]	; (8000c30 <collectSoftwareInfo+0xb8>)
 8000bb0:	f7ff fccc 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000bb4:	2116      	movs	r1, #22
 8000bb6:	481f      	ldr	r0, [pc, #124]	; (8000c34 <collectSoftwareInfo+0xbc>)
 8000bb8:	f7ff fcc8 	bl	800054c <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000bbc:	2105      	movs	r1, #5
 8000bbe:	481e      	ldr	r0, [pc, #120]	; (8000c38 <collectSoftwareInfo+0xc0>)
 8000bc0:	f7ff fcc4 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000bc4:	2115      	movs	r1, #21
 8000bc6:	481d      	ldr	r0, [pc, #116]	; (8000c3c <collectSoftwareInfo+0xc4>)
 8000bc8:	f7ff fcc0 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8000bcc:	2108      	movs	r1, #8
 8000bce:	481c      	ldr	r0, [pc, #112]	; (8000c40 <collectSoftwareInfo+0xc8>)
 8000bd0:	f7ff fcbc 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8000bd4:	2116      	movs	r1, #22
 8000bd6:	481b      	ldr	r0, [pc, #108]	; (8000c44 <collectSoftwareInfo+0xcc>)
 8000bd8:	f7ff fcb8 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8000bdc:	2111      	movs	r1, #17
 8000bde:	481a      	ldr	r0, [pc, #104]	; (8000c48 <collectSoftwareInfo+0xd0>)
 8000be0:	f7ff fcb4 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000be4:	2101      	movs	r1, #1
 8000be6:	4812      	ldr	r0, [pc, #72]	; (8000c30 <collectSoftwareInfo+0xb8>)
 8000be8:	f7ff fcb0 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000bec:	2111      	movs	r1, #17
 8000bee:	4817      	ldr	r0, [pc, #92]	; (8000c4c <collectSoftwareInfo+0xd4>)
 8000bf0:	f7ff fcac 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000bf4:	210b      	movs	r1, #11
 8000bf6:	4816      	ldr	r0, [pc, #88]	; (8000c50 <collectSoftwareInfo+0xd8>)
 8000bf8:	f7ff fca8 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000bfc:	2111      	movs	r1, #17
 8000bfe:	4815      	ldr	r0, [pc, #84]	; (8000c54 <collectSoftwareInfo+0xdc>)
 8000c00:	f7ff fca4 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000c04:	2109      	movs	r1, #9
 8000c06:	4814      	ldr	r0, [pc, #80]	; (8000c58 <collectSoftwareInfo+0xe0>)
 8000c08:	f7ff fca0 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <collectSoftwareInfo+0xb8>)
 8000c10:	f7ff fc9c 	bl	800054c <uartTransmit>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	08006f00 	.word	0x08006f00
 8000c1c:	08006f14 	.word	0x08006f14
 8000c20:	08006f1c 	.word	0x08006f1c
 8000c24:	08006f30 	.word	0x08006f30
 8000c28:	08006f34 	.word	0x08006f34
 8000c2c:	08006f44 	.word	0x08006f44
 8000c30:	08006ed0 	.word	0x08006ed0
 8000c34:	08006f70 	.word	0x08006f70
 8000c38:	08006f88 	.word	0x08006f88
 8000c3c:	08006f90 	.word	0x08006f90
 8000c40:	08006fa8 	.word	0x08006fa8
 8000c44:	08006fb0 	.word	0x08006fb0
 8000c48:	08006fc8 	.word	0x08006fc8
 8000c4c:	08006fdc 	.word	0x08006fdc
 8000c50:	08006ff0 	.word	0x08006ff0
 8000c54:	08006ffc 	.word	0x08006ffc
 8000c58:	08007010 	.word	0x08007010

08000c5c <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000c60:	2115      	movs	r1, #21
 8000c62:	4814      	ldr	r0, [pc, #80]	; (8000cb4 <collectGitcounts+0x58>)
 8000c64:	f7ff fc72 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000c68:	2103      	movs	r1, #3
 8000c6a:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <collectGitcounts+0x5c>)
 8000c6c:	f7ff fc6e 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000c70:	2117      	movs	r1, #23
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <collectGitcounts+0x60>)
 8000c74:	f7ff fc6a 	bl	800054c <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000c78:	2103      	movs	r1, #3
 8000c7a:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <collectGitcounts+0x64>)
 8000c7c:	f7ff fc66 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000c80:	211c      	movs	r1, #28
 8000c82:	4810      	ldr	r0, [pc, #64]	; (8000cc4 <collectGitcounts+0x68>)
 8000c84:	f7ff fc62 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000c88:	2101      	movs	r1, #1
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <collectGitcounts+0x6c>)
 8000c8c:	f7ff fc5e 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000c90:	2116      	movs	r1, #22
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <collectGitcounts+0x70>)
 8000c94:	f7ff fc5a 	bl	800054c <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000c98:	2102      	movs	r1, #2
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <collectGitcounts+0x74>)
 8000c9c:	f7ff fc56 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000ca0:	2115      	movs	r1, #21
 8000ca2:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <collectGitcounts+0x78>)
 8000ca4:	f7ff fc52 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000ca8:	2102      	movs	r1, #2
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <collectGitcounts+0x7c>)
 8000cac:	f7ff fc4e 	bl	800054c <uartTransmit>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	0800701c 	.word	0x0800701c
 8000cb8:	08007034 	.word	0x08007034
 8000cbc:	08007038 	.word	0x08007038
 8000cc0:	08007050 	.word	0x08007050
 8000cc4:	08007054 	.word	0x08007054
 8000cc8:	08006f30 	.word	0x08006f30
 8000ccc:	08006f70 	.word	0x08006f70
 8000cd0:	08007070 	.word	0x08007070
 8000cd4:	08006f90 	.word	0x08006f90
 8000cd8:	08007074 	.word	0x08007074

08000cdc <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000ce0:	2111      	movs	r1, #17
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <collectSystemInfo+0x40>)
 8000ce4:	f7ff fc32 	bl	800054c <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000ce8:	f7ff fe60 	bl	80009ac <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000cec:	2111      	movs	r1, #17
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <collectSystemInfo+0x44>)
 8000cf0:	f7ff fc2c 	bl	800054c <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000cf4:	f7ff ff40 	bl	8000b78 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000cf8:	2113      	movs	r1, #19
 8000cfa:	480a      	ldr	r0, [pc, #40]	; (8000d24 <collectSystemInfo+0x48>)
 8000cfc:	f7ff fc26 	bl	800054c <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000d00:	f7ff fee6 	bl	8000ad0 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000d04:	2113      	movs	r1, #19
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <collectSystemInfo+0x4c>)
 8000d08:	f7ff fc20 	bl	800054c <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000d0c:	f7ff ffa6 	bl	8000c5c <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000d10:	2103      	movs	r1, #3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <collectSystemInfo+0x50>)
 8000d14:	f7ff fc1a 	bl	800054c <uartTransmit>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	08007078 	.word	0x08007078
 8000d20:	0800708c 	.word	0x0800708c
 8000d24:	080070a0 	.word	0x080070a0
 8000d28:	080070b4 	.word	0x080070b4
 8000d2c:	080070c8 	.word	0x080070c8

08000d30 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000d36:	2300      	movs	r3, #0
 8000d38:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <readResetSource+0xa0>)
 8000d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <readResetSource+0xa0>)
 8000d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <readResetSource+0xa0>)
 8000d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da02      	bge.n	8000d6c <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <readResetSource+0xa0>)
 8000d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <readResetSource+0xa0>)
 8000d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	3310      	adds	r3, #16
 8000d8e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <readResetSource+0xa0>)
 8000d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	3320      	adds	r3, #32
 8000da0:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <readResetSource+0xa0>)
 8000da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	3340      	adds	r3, #64	; 0x40
 8000db2:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <readResetSource+0xa0>)
 8000db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db8:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <readResetSource+0xa0>)
 8000dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dbe:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000dde:	2106      	movs	r1, #6
 8000de0:	482a      	ldr	r0, [pc, #168]	; (8000e8c <printResetSource+0xb8>)
 8000de2:	f7ff fbb3 	bl	800054c <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d104      	bne.n	8000df6 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000dec:	210f      	movs	r1, #15
 8000dee:	4828      	ldr	r0, [pc, #160]	; (8000e90 <printResetSource+0xbc>)
 8000df0:	f7ff fbac 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000df4:	e046      	b.n	8000e84 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000e00:	2118      	movs	r1, #24
 8000e02:	4824      	ldr	r0, [pc, #144]	; (8000e94 <printResetSource+0xc0>)
 8000e04:	f7ff fba2 	bl	800054c <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000e12:	2116      	movs	r1, #22
 8000e14:	4820      	ldr	r0, [pc, #128]	; (8000e98 <printResetSource+0xc4>)
 8000e16:	f7ff fb99 	bl	800054c <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000e24:	210a      	movs	r1, #10
 8000e26:	481d      	ldr	r0, [pc, #116]	; (8000e9c <printResetSource+0xc8>)
 8000e28:	f7ff fb90 	bl	800054c <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000e36:	2110      	movs	r1, #16
 8000e38:	4819      	ldr	r0, [pc, #100]	; (8000ea0 <printResetSource+0xcc>)
 8000e3a:	f7ff fb87 	bl	800054c <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000e48:	210f      	movs	r1, #15
 8000e4a:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <printResetSource+0xd0>)
 8000e4c:	f7ff fb7e 	bl	800054c <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <printResetSource+0xd4>)
 8000e5e:	f7ff fb75 	bl	800054c <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000e6c:	210a      	movs	r1, #10
 8000e6e:	480f      	ldr	r0, [pc, #60]	; (8000eac <printResetSource+0xd8>)
 8000e70:	f7ff fb6c 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da03      	bge.n	8000e84 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000e7c:	2105      	movs	r1, #5
 8000e7e:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <printResetSource+0xdc>)
 8000e80:	f7ff fb64 	bl	800054c <uartTransmit>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	080070cc 	.word	0x080070cc
 8000e90:	080070d4 	.word	0x080070d4
 8000e94:	080070e4 	.word	0x080070e4
 8000e98:	08007100 	.word	0x08007100
 8000e9c:	08007118 	.word	0x08007118
 8000ea0:	08007124 	.word	0x08007124
 8000ea4:	08007138 	.word	0x08007138
 8000ea8:	08007148 	.word	0x08007148
 8000eac:	08007158 	.word	0x08007158
 8000eb0:	08007164 	.word	0x08007164

08000eb4 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	4850      	ldr	r0, [pc, #320]	; (8001000 <readall_inputs+0x14c>)
 8000ebe:	f002 f94b 	bl	8003158 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	b2d9      	uxtb	r1, r3
 8000eca:	4a4e      	ldr	r2, [pc, #312]	; (8001004 <readall_inputs+0x150>)
 8000ecc:	7813      	ldrb	r3, [r2, #0]
 8000ece:	f361 0300 	bfi	r3, r1, #0, #1
 8000ed2:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed8:	484b      	ldr	r0, [pc, #300]	; (8001008 <readall_inputs+0x154>)
 8000eda:	f002 f93d 	bl	8003158 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	b2d9      	uxtb	r1, r3
 8000ee6:	4a47      	ldr	r2, [pc, #284]	; (8001004 <readall_inputs+0x150>)
 8000ee8:	7813      	ldrb	r3, [r2, #0]
 8000eea:	f361 0341 	bfi	r3, r1, #1, #1
 8000eee:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef4:	4845      	ldr	r0, [pc, #276]	; (800100c <readall_inputs+0x158>)
 8000ef6:	f002 f92f 	bl	8003158 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2d9      	uxtb	r1, r3
 8000f02:	4a40      	ldr	r2, [pc, #256]	; (8001004 <readall_inputs+0x150>)
 8000f04:	7813      	ldrb	r3, [r2, #0]
 8000f06:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f0a:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f10:	483e      	ldr	r0, [pc, #248]	; (800100c <readall_inputs+0x158>)
 8000f12:	f002 f921 	bl	8003158 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	4a39      	ldr	r2, [pc, #228]	; (8001004 <readall_inputs+0x150>)
 8000f20:	7813      	ldrb	r3, [r2, #0]
 8000f22:	f361 1304 	bfi	r3, r1, #4, #1
 8000f26:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4838      	ldr	r0, [pc, #224]	; (800100c <readall_inputs+0x158>)
 8000f2c:	f002 f914 	bl	8003158 <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	b2d9      	uxtb	r1, r3
 8000f38:	4a32      	ldr	r2, [pc, #200]	; (8001004 <readall_inputs+0x150>)
 8000f3a:	7813      	ldrb	r3, [r2, #0]
 8000f3c:	f361 1345 	bfi	r3, r1, #5, #1
 8000f40:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000f42:	2104      	movs	r1, #4
 8000f44:	4831      	ldr	r0, [pc, #196]	; (800100c <readall_inputs+0x158>)
 8000f46:	f002 f907 	bl	8003158 <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	b2d9      	uxtb	r1, r3
 8000f52:	4a2c      	ldr	r2, [pc, #176]	; (8001004 <readall_inputs+0x150>)
 8000f54:	7813      	ldrb	r3, [r2, #0]
 8000f56:	f361 1386 	bfi	r3, r1, #6, #1
 8000f5a:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f60:	4827      	ldr	r0, [pc, #156]	; (8001000 <readall_inputs+0x14c>)
 8000f62:	f002 f8f9 	bl	8003158 <HAL_GPIO_ReadPin>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	b2d9      	uxtb	r1, r3
 8000f6e:	4a28      	ldr	r2, [pc, #160]	; (8001010 <readall_inputs+0x15c>)
 8000f70:	7813      	ldrb	r3, [r2, #0]
 8000f72:	f361 0300 	bfi	r3, r1, #0, #1
 8000f76:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4821      	ldr	r0, [pc, #132]	; (8001000 <readall_inputs+0x14c>)
 8000f7c:	f002 f8ec 	bl	8003158 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	b2d9      	uxtb	r1, r3
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <readall_inputs+0x15c>)
 8000f8a:	7813      	ldrb	r3, [r2, #0]
 8000f8c:	f361 0341 	bfi	r3, r1, #1, #1
 8000f90:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000f92:	2120      	movs	r1, #32
 8000f94:	481a      	ldr	r0, [pc, #104]	; (8001000 <readall_inputs+0x14c>)
 8000f96:	f002 f8df 	bl	8003158 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	b2d9      	uxtb	r1, r3
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <readall_inputs+0x15c>)
 8000fa4:	7813      	ldrb	r3, [r2, #0]
 8000fa6:	f361 0382 	bfi	r3, r1, #2, #1
 8000faa:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000fac:	2110      	movs	r1, #16
 8000fae:	4814      	ldr	r0, [pc, #80]	; (8001000 <readall_inputs+0x14c>)
 8000fb0:	f002 f8d2 	bl	8003158 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	b2d9      	uxtb	r1, r3
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <readall_inputs+0x15c>)
 8000fbe:	7813      	ldrb	r3, [r2, #0]
 8000fc0:	f361 03c3 	bfi	r3, r1, #3, #1
 8000fc4:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fca:	4812      	ldr	r0, [pc, #72]	; (8001014 <readall_inputs+0x160>)
 8000fcc:	f002 f8c4 	bl	8003158 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2d9      	uxtb	r1, r3
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <readall_inputs+0x15c>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	f361 1304 	bfi	r3, r1, #4, #1
 8000fe0:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <readall_inputs+0x160>)
 8000fe6:	f002 f8b7 	bl	8003158 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b2d9      	uxtb	r1, r3
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <readall_inputs+0x164>)
 8000ff4:	7813      	ldrb	r3, [r2, #0]
 8000ff6:	f361 0300 	bfi	r3, r1, #0, #1
 8000ffa:	7013      	strb	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	20000028 	.word	0x20000028
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40020000 	.word	0x40020000
 8001010:	2000002c 	.word	0x2000002c
 8001014:	40021400 	.word	0x40021400
 8001018:	20000030 	.word	0x20000030

0800101c <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	481b      	ldr	r0, [pc, #108]	; (8001094 <testPCB_Leds+0x78>)
 8001026:	f002 f8af 	bl	8003188 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800102a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102e:	f001 fa05 	bl	800243c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	4817      	ldr	r0, [pc, #92]	; (8001094 <testPCB_Leds+0x78>)
 8001038:	f002 f8a6 	bl	8003188 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800103c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001040:	f001 f9fc 	bl	800243c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2104      	movs	r1, #4
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <testPCB_Leds+0x78>)
 800104a:	f002 f89d 	bl	8003188 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001052:	f001 f9f3 	bl	800243c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2104      	movs	r1, #4
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <testPCB_Leds+0x78>)
 800105c:	f002 f894 	bl	8003188 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001064:	f001 f9ea 	bl	800243c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106e:	4809      	ldr	r0, [pc, #36]	; (8001094 <testPCB_Leds+0x78>)
 8001070:	f002 f88a 	bl	8003188 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001078:	f001 f9e0 	bl	800243c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <testPCB_Leds+0x78>)
 8001084:	f002 f880 	bl	8003188 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800108c:	f001 f9d6 	bl	800243c <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020400 	.word	0x40020400

08001098 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <MX_ADC1_Init+0x9c>)
 80010ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_ADC1_Init+0x98>)
 80010b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_ADC1_Init+0x98>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_ADC1_Init+0xa0>)
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_ADC1_Init+0x98>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_ADC1_Init+0x98>)
 80010fa:	f001 fa0b 	bl	8002514 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001104:	f000 fd40 	bl	8001b88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001108:	2304      	movs	r3, #4
 800110a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110c:	2301      	movs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0x98>)
 800111a:	f001 fa3f 	bl	800259c <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001124:	f000 fd30 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000038 	.word	0x20000038
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_ADC_MspInit+0x74>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d123      	bne.n	80011a6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_ADC_MspInit+0x78>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_ADC_MspInit+0x78>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_ADC_MspInit+0x78>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_ADC_MspInit+0x78>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_ADC_MspInit+0x78>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_ADC_MspInit+0x78>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 800118e:	23f8      	movs	r3, #248	; 0xf8
 8001190:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_ADC_MspInit+0x7c>)
 80011a2:	f001 fe2d 	bl	8002e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40012000 	.word	0x40012000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000

080011bc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_CAN1_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <MX_CAN1_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_CAN1_Init+0x64>)
 80011c8:	2210      	movs	r2, #16
 80011ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_CAN1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_CAN1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_CAN1_Init+0x64>)
 80011da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_CAN1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_CAN1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_CAN1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_CAN1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_CAN1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_CAN1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_CAN1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_CAN1_Init+0x64>)
 800120c:	f001 fc16 	bl	8002a3c <HAL_CAN_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001216:	f000 fcb7 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000080 	.word	0x20000080
 8001224:	40006400 	.word	0x40006400

08001228 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_CAN3_Init+0x64>)
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <MX_CAN3_Init+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_CAN3_Init+0x64>)
 8001234:	2206      	movs	r2, #6
 8001236:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_CAN3_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_CAN3_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_CAN3_Init+0x64>)
 8001246:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800124a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_CAN3_Init+0x64>)
 800124e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001252:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <MX_CAN3_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_CAN3_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_CAN3_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_CAN3_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_CAN3_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_CAN3_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_CAN3_Init+0x64>)
 800127a:	f001 fbdf 	bl	8002a3c <HAL_CAN_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001284:	f000 fc80 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200000a8 	.word	0x200000a8
 8001290:	40003400 	.word	0x40003400

08001294 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	; 0x38
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a43      	ldr	r2, [pc, #268]	; (80013c0 <HAL_CAN_MspInit+0x12c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d131      	bne.n	800131a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012b6:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <HAL_CAN_MspInit+0x130>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a41      	ldr	r2, [pc, #260]	; (80013c4 <HAL_CAN_MspInit+0x130>)
 80012be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012c0:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <HAL_CAN_MspInit+0x130>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d10b      	bne.n	80012e0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012c8:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a3e      	ldr	r2, [pc, #248]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e0:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f8:	2303      	movs	r3, #3
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001308:	2309      	movs	r3, #9
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	482e      	ldr	r0, [pc, #184]	; (80013cc <HAL_CAN_MspInit+0x138>)
 8001314:	f001 fd74 	bl	8002e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001318:	e04e      	b.n	80013b8 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <HAL_CAN_MspInit+0x13c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d149      	bne.n	80013b8 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 800132a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 8001342:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_CAN_MspInit+0x130>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <HAL_CAN_MspInit+0x130>)
 800135c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_CAN_MspInit+0x130>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10b      	bne.n	800137e <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 800136c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_CAN_MspInit+0x134>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001396:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80013a8:	230b      	movs	r3, #11
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <HAL_CAN_MspInit+0x140>)
 80013b4:	f001 fd24 	bl	8002e00 <HAL_GPIO_Init>
}
 80013b8:	bf00      	nop
 80013ba:	3738      	adds	r7, #56	; 0x38
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40006400 	.word	0x40006400
 80013c4:	200000d0 	.word	0x200000d0
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40003400 	.word	0x40003400
 80013d4:	40020000 	.word	0x40020000

080013d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4bb7      	ldr	r3, [pc, #732]	; (80016cc <MX_GPIO_Init+0x2f4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4ab6      	ldr	r2, [pc, #728]	; (80016cc <MX_GPIO_Init+0x2f4>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4bb4      	ldr	r3, [pc, #720]	; (80016cc <MX_GPIO_Init+0x2f4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4bb1      	ldr	r3, [pc, #708]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4ab0      	ldr	r2, [pc, #704]	; (80016cc <MX_GPIO_Init+0x2f4>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4bae      	ldr	r3, [pc, #696]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141e:	4bab      	ldr	r3, [pc, #684]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4aaa      	ldr	r2, [pc, #680]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4ba8      	ldr	r3, [pc, #672]	; (80016cc <MX_GPIO_Init+0x2f4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	4ba5      	ldr	r3, [pc, #660]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4aa4      	ldr	r2, [pc, #656]	; (80016cc <MX_GPIO_Init+0x2f4>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4ba2      	ldr	r3, [pc, #648]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b9f      	ldr	r3, [pc, #636]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a9e      	ldr	r2, [pc, #632]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b9c      	ldr	r3, [pc, #624]	; (80016cc <MX_GPIO_Init+0x2f4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b99      	ldr	r3, [pc, #612]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a98      	ldr	r2, [pc, #608]	; (80016cc <MX_GPIO_Init+0x2f4>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b96      	ldr	r3, [pc, #600]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147e:	4b93      	ldr	r3, [pc, #588]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a92      	ldr	r2, [pc, #584]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b90      	ldr	r3, [pc, #576]	; (80016cc <MX_GPIO_Init+0x2f4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	4b8d      	ldr	r3, [pc, #564]	; (80016cc <MX_GPIO_Init+0x2f4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a8c      	ldr	r2, [pc, #560]	; (80016cc <MX_GPIO_Init+0x2f4>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b8a      	ldr	r3, [pc, #552]	; (80016cc <MX_GPIO_Init+0x2f4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80014ae:	2200      	movs	r2, #0
 80014b0:	f248 0187 	movw	r1, #32903	; 0x8087
 80014b4:	4886      	ldr	r0, [pc, #536]	; (80016d0 <MX_GPIO_Init+0x2f8>)
 80014b6:	f001 fe67 	bl	8003188 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c0:	4884      	ldr	r0, [pc, #528]	; (80016d4 <MX_GPIO_Init+0x2fc>)
 80014c2:	f001 fe61 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f242 0102 	movw	r1, #8194	; 0x2002
 80014cc:	4882      	ldr	r0, [pc, #520]	; (80016d8 <MX_GPIO_Init+0x300>)
 80014ce:	f001 fe5b 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f240 6102 	movw	r1, #1538	; 0x602
 80014d8:	4880      	ldr	r0, [pc, #512]	; (80016dc <MX_GPIO_Init+0x304>)
 80014da:	f001 fe55 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f244 0184 	movw	r1, #16516	; 0x4084
 80014e4:	487e      	ldr	r0, [pc, #504]	; (80016e0 <MX_GPIO_Init+0x308>)
 80014e6:	f001 fe4f 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f0:	4877      	ldr	r0, [pc, #476]	; (80016d0 <MX_GPIO_Init+0x2f8>)
 80014f2:	f001 fe49 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80014f6:	2200      	movs	r2, #0
 80014f8:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 80014fc:	4879      	ldr	r0, [pc, #484]	; (80016e4 <MX_GPIO_Init+0x30c>)
 80014fe:	f001 fe43 	bl	8003188 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2118      	movs	r1, #24
 8001506:	4878      	ldr	r0, [pc, #480]	; (80016e8 <MX_GPIO_Init+0x310>)
 8001508:	f001 fe3e 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 800150c:	f648 0387 	movw	r3, #34951	; 0x8887
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	486a      	ldr	r0, [pc, #424]	; (80016d0 <MX_GPIO_Init+0x2f8>)
 8001526:	f001 fc6b 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 800152a:	f44f 739c 	mov.w	r3, #312	; 0x138
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	4864      	ldr	r0, [pc, #400]	; (80016d0 <MX_GPIO_Init+0x2f8>)
 8001540:	f001 fc5e 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001544:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154a:	2303      	movs	r3, #3
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	485d      	ldr	r0, [pc, #372]	; (80016d0 <MX_GPIO_Init+0x2f8>)
 800155a:	f001 fc51 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	4619      	mov	r1, r3
 8001576:	4857      	ldr	r0, [pc, #348]	; (80016d4 <MX_GPIO_Init+0x2fc>)
 8001578:	f001 fc42 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800157c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001582:	2303      	movs	r3, #3
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4850      	ldr	r0, [pc, #320]	; (80016d4 <MX_GPIO_Init+0x2fc>)
 8001592:	f001 fc35 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001596:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159c:	2303      	movs	r3, #3
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	484b      	ldr	r0, [pc, #300]	; (80016d8 <MX_GPIO_Init+0x300>)
 80015ac:	f001 fc28 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80015b0:	f242 0302 	movw	r3, #8194	; 0x2002
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4843      	ldr	r0, [pc, #268]	; (80016d8 <MX_GPIO_Init+0x300>)
 80015ca:	f001 fc19 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 80015ce:	f248 0304 	movw	r3, #32772	; 0x8004
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	483d      	ldr	r0, [pc, #244]	; (80016d8 <MX_GPIO_Init+0x300>)
 80015e4:	f001 fc0c 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80015e8:	f641 0305 	movw	r3, #6149	; 0x1805
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	4837      	ldr	r0, [pc, #220]	; (80016dc <MX_GPIO_Init+0x304>)
 80015fe:	f001 fbff 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001602:	f240 6302 	movw	r3, #1538	; 0x602
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4830      	ldr	r0, [pc, #192]	; (80016dc <MX_GPIO_Init+0x304>)
 800161c:	f001 fbf0 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001620:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001626:	2303      	movs	r3, #3
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	482a      	ldr	r0, [pc, #168]	; (80016e0 <MX_GPIO_Init+0x308>)
 8001636:	f001 fbe3 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800163a:	f244 0384 	movw	r3, #16516	; 0x4084
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_GPIO_Init+0x308>)
 8001654:	f001 fbd4 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8001658:	f240 1343 	movw	r3, #323	; 0x143
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165e:	2303      	movs	r3, #3
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	481d      	ldr	r0, [pc, #116]	; (80016e4 <MX_GPIO_Init+0x30c>)
 800166e:	f001 fbc7 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001672:	f240 7304 	movw	r3, #1796	; 0x704
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001678:	2303      	movs	r3, #3
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <MX_GPIO_Init+0x310>)
 8001688:	f001 fbba 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 800168c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_GPIO_Init+0x310>)
 80016a2:	f001 fbad 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80016a6:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016bc:	4619      	mov	r1, r3
 80016be:	4809      	ldr	r0, [pc, #36]	; (80016e4 <MX_GPIO_Init+0x30c>)
 80016c0:	f001 fb9e 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80016c4:	2318      	movs	r3, #24
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	e010      	b.n	80016ec <MX_GPIO_Init+0x314>
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40021400 	.word	0x40021400
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40021800 	.word	0x40021800
 80016e8:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <MX_GPIO_Init+0x334>)
 8001700:	f001 fb7e 	bl	8002e00 <HAL_GPIO_Init>

}
 8001704:	bf00      	nop
 8001706:	3738      	adds	r7, #56	; 0x38
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40020c00 	.word	0x40020c00

08001710 <calculateMovingAverage>:
static uint16_t getDifference(uint16_t a, uint16_t b);						// Differenzberechnung

// Gleitenden Mittelwert berechnen, sehr Speicher arm
//----------------------------------------------------------------------
static uint16_t calculateMovingAverage(uint16_t oldValue, uint16_t newValue, uint16_t n)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	460b      	mov	r3, r1
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 8001722:	88ba      	ldrh	r2, [r7, #4]
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	1ad2      	subs	r2, r2, r3
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	fb92 f3f3 	sdiv	r3, r2, r3
 800172e:	b29a      	uxth	r2, r3
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4413      	add	r3, r2
 8001734:	b29b      	uxth	r3, r3
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b096      	sub	sp, #88	; 0x58
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174a:	f000 fe1a 	bl	8002382 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t data[36] = {0}, temp, CFG[6] = {0};
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
 8001752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001756:	2220      	movs	r2, #32
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f005 fb1e 	bl	8006d9c <memset>
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	2300      	movs	r3, #0
 8001766:	843b      	strh	r3, [r7, #32]
  uint32_t tmp;
  uint16_t spannungen[12] = {0}, temperatur[2] = {0}, tmp_mean;
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	615a      	str	r2, [r3, #20]
 8001778:	2300      	movs	r3, #0
 800177a:	603b      	str	r3, [r7, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 f994 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f7ff fe2a 	bl	80013d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001784:	f7ff fd1a 	bl	80011bc <MX_CAN1_Init>
  MX_SPI4_Init();
 8001788:	f000 fa6a 	bl	8001c60 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 800178c:	f000 fd42 	bl	8002214 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001790:	f7ff fc82 	bl	8001098 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001794:	f000 fba0 	bl	8001ed8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001798:	f000 fc24 	bl	8001fe4 <MX_TIM4_Init>
  MX_SPI1_Init();
 800179c:	f000 fa22 	bl	8001be4 <MX_SPI1_Init>
  MX_CAN3_Init();
 80017a0:	f7ff fd42 	bl	8001228 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80017a4:	f7ff fac4 	bl	8000d30 <readResetSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fb12 	bl	8000dd4 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80017b0:	213a      	movs	r1, #58	; 0x3a
 80017b2:	48b5      	ldr	r0, [pc, #724]	; (8001a88 <main+0x344>)
 80017b4:	f7fe feca 	bl	800054c <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 80017b8:	f7ff fa90 	bl	8000cdc <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 80017bc:	f7ff fc2e 	bl	800101c <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 80017c0:	f7ff fb78 	bl	8000eb4 <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ca:	48b0      	ldr	r0, [pc, #704]	; (8001a8c <main+0x348>)
 80017cc:	f001 fcdc 	bl	8003188 <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 80017d0:	2014      	movs	r0, #20
 80017d2:	f000 fe33 	bl	800243c <HAL_Delay>

    uartTransmit("\n", 1);
 80017d6:	2101      	movs	r1, #1
 80017d8:	48ad      	ldr	r0, [pc, #692]	; (8001a90 <main+0x34c>)
 80017da:	f7fe feb7 	bl	800054c <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 80017de:	2122      	movs	r1, #34	; 0x22
 80017e0:	48ac      	ldr	r0, [pc, #688]	; (8001a94 <main+0x350>)
 80017e2:	f7fe feb3 	bl	800054c <uartTransmit>
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
	}*/

    // LTC6811 initialisieren
	CFG[0] = 0xF8;
 80017e6:	23f8      	movs	r3, #248	; 0xf8
 80017e8:	773b      	strb	r3, [r7, #28]
	CFG[1] = 0xCF;
 80017ea:	23cf      	movs	r3, #207	; 0xcf
 80017ec:	777b      	strb	r3, [r7, #29]
	CFG[2] = 0x17;
 80017ee:	2317      	movs	r3, #23
 80017f0:	77bb      	strb	r3, [r7, #30]
	CFG[3] = 0xA4;
 80017f2:	23a4      	movs	r3, #164	; 0xa4
 80017f4:	77fb      	strb	r3, [r7, #31]
	CFG[4] = 0x00;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f887 3020 	strb.w	r3, [r7, #32]
	CFG[5] = 0x00;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ltc6811_write(WRCFG, &CFG[0]);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	2001      	movs	r0, #1
 800180a:	f7fe ff83 	bl	8000714 <ltc6811_write>
		uartTransmitNumber(data[10+i], 10);
	}
	uartTransmit(";", 1);*/

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 800180e:	f240 7011 	movw	r0, #1809	; 0x711
 8001812:	f7fe ff2b 	bl	800066c <ltc6811>
	ltc6811(CLRSTAT);
 8001816:	f240 7013 	movw	r0, #1811	; 0x713
 800181a:	f7fe ff27 	bl	800066c <ltc6811>
	ltc6811(CLRAUX);
 800181e:	f240 7012 	movw	r0, #1810	; 0x712
 8001822:	f7fe ff23 	bl	800066c <ltc6811>

	// Erster ADC Vorgang ist ungueltig
	ltc6811(ADCVAX | MD73 | CELLALL);									// Initial Command Zellen auslesen
 8001826:	f240 506f 	movw	r0, #1391	; 0x56f
 800182a:	f7fe ff1f 	bl	800066c <ltc6811>

	tmp_mean = 65535;
 800182e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001832:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 8001836:	f44f 7058 	mov.w	r0, #864	; 0x360
 800183a:	f7fe ff17 	bl	800066c <ltc6811>
		HAL_Delay(300);
 800183e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001842:	f000 fdfb 	bl	800243c <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 8001846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184a:	4619      	mov	r1, r3
 800184c:	2004      	movs	r0, #4
 800184e:	f7fe ffe3 	bl	8000818 <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	3306      	adds	r3, #6
 8001858:	4619      	mov	r1, r3
 800185a:	2006      	movs	r0, #6
 800185c:	f7fe ffdc 	bl	8000818 <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 8001860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001864:	330c      	adds	r3, #12
 8001866:	4619      	mov	r1, r3
 8001868:	2008      	movs	r0, #8
 800186a:	f7fe ffd5 	bl	8000818 <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	3312      	adds	r3, #18
 8001874:	4619      	mov	r1, r3
 8001876:	200a      	movs	r0, #10
 8001878:	f7fe ffce 	bl	8000818 <ltc6811_read>

		uartTransmit("Spannungen\n", 11);
 800187c:	210b      	movs	r1, #11
 800187e:	4886      	ldr	r0, [pc, #536]	; (8001a98 <main+0x354>)
 8001880:	f7fe fe64 	bl	800054c <uartTransmit>

		for (uint8_t i = 0; i < 12; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800188a:	e020      	b.n	80018ce <main+0x18a>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 800188c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	3301      	adds	r3, #1
 8001894:	3358      	adds	r3, #88	; 0x58
 8001896:	443b      	add	r3, r7
 8001898:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21a      	sxth	r2, r3
 80018a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	3358      	adds	r3, #88	; 0x58
 80018a8:	443b      	add	r3, r7
 80018aa:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018b8:	b292      	uxth	r2, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	3358      	adds	r3, #88	; 0x58
 80018be:	443b      	add	r3, r7
 80018c0:	f823 2c54 	strh.w	r2, [r3, #-84]
		for (uint8_t i = 0; i < 12; i++)
 80018c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018c8:	3301      	adds	r3, #1
 80018ca:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80018ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018d2:	2b0b      	cmp	r3, #11
 80018d4:	d9da      	bls.n	800188c <main+0x148>
		}

		for (uint8_t i = 0; i < 12; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80018dc:	e013      	b.n	8001906 <main+0x1c2>
		{
			uartTransmitNumber(spannungen[i], 10);
 80018de:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	3358      	adds	r3, #88	; 0x58
 80018e6:	443b      	add	r3, r7
 80018e8:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80018ec:	210a      	movs	r1, #10
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe40 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 80018f4:	2101      	movs	r1, #1
 80018f6:	4869      	ldr	r0, [pc, #420]	; (8001a9c <main+0x358>)
 80018f8:	f7fe fe28 	bl	800054c <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 80018fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001900:	3301      	adds	r3, #1
 8001902:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001906:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800190a:	2b0b      	cmp	r3, #11
 800190c:	d9e7      	bls.n	80018de <main+0x19a>
		}

		tmp = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	653b      	str	r3, [r7, #80]	; 0x50
		for (uint8_t i = 0; i < 12; i++)
 8001912:	2300      	movs	r3, #0
 8001914:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001918:	e00f      	b.n	800193a <main+0x1f6>
		{
			tmp += spannungen[i];
 800191a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	3358      	adds	r3, #88	; 0x58
 8001922:	443b      	add	r3, r7
 8001924:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001928:	461a      	mov	r2, r3
 800192a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800192c:	4413      	add	r3, r2
 800192e:	653b      	str	r3, [r7, #80]	; 0x50
		for (uint8_t i = 0; i < 12; i++)
 8001930:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001934:	3301      	adds	r3, #1
 8001936:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800193a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800193e:	2b0b      	cmp	r3, #11
 8001940:	d9eb      	bls.n	800191a <main+0x1d6>
		}
		tmp /= 12;
 8001942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001944:	4a56      	ldr	r2, [pc, #344]	; (8001aa0 <main+0x35c>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	08db      	lsrs	r3, r3, #3
 800194c:	653b      	str	r3, [r7, #80]	; 0x50
		uartTransmitNumber(tmp, 10);
 800194e:	210a      	movs	r1, #10
 8001950:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001952:	f7fe fe0f 	bl	8000574 <uartTransmitNumber>
		uartTransmit(";", 1);
 8001956:	2101      	movs	r1, #1
 8001958:	4850      	ldr	r0, [pc, #320]	; (8001a9c <main+0x358>)
 800195a:	f7fe fdf7 	bl	800054c <uartTransmit>

		tmp_mean = calculateMovingAverage(tmp_mean, tmp, 10);
 800195e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001960:	b299      	uxth	r1, r3
 8001962:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001966:	220a      	movs	r2, #10
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fed1 	bl	8001710 <calculateMovingAverage>
 800196e:	4603      	mov	r3, r0
 8001970:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uartTransmitNumber(tmp_mean, 10);
 8001974:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001978:	210a      	movs	r1, #10
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fdfa 	bl	8000574 <uartTransmitNumber>

		uartTransmit("\n", 1);
 8001980:	2101      	movs	r1, #1
 8001982:	4843      	ldr	r0, [pc, #268]	; (8001a90 <main+0x34c>)
 8001984:	f7fe fde2 	bl	800054c <uartTransmit>

		uartTransmit("Temperaturen\n", 13);
 8001988:	210d      	movs	r1, #13
 800198a:	4846      	ldr	r0, [pc, #280]	; (8001aa4 <main+0x360>)
 800198c:	f7fe fdde 	bl	800054c <uartTransmit>

		for (uint8_t j = 0; j < 8; j++)
 8001990:	2300      	movs	r3, #0
 8001992:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8001996:	e069      	b.n	8001a6c <main+0x328>
		{
			ltc1380_write(LTC1380_MUX0, j);									// Multiplexer 0 einstellen
 8001998:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800199c:	4619      	mov	r1, r3
 800199e:	2090      	movs	r0, #144	; 0x90
 80019a0:	f7fe fe08 	bl	80005b4 <ltc1380_write>
			ltc1380_write(LTC1380_MUX2, j);									// Multiplexer 1 einstellen
 80019a4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80019a8:	4619      	mov	r1, r3
 80019aa:	2094      	movs	r0, #148	; 0x94
 80019ac:	f7fe fe02 	bl	80005b4 <ltc1380_write>
			HAL_Delay(100);
 80019b0:	2064      	movs	r0, #100	; 0x64
 80019b2:	f000 fd43 	bl	800243c <HAL_Delay>
			ltc6811(ADAX | MD262 | GPIOALL);								// Initial Command Zellen auslesen
 80019b6:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 80019ba:	f7fe fe57 	bl	800066c <ltc6811>
			HAL_Delay(300);
 80019be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019c2:	f000 fd3b 	bl	800243c <HAL_Delay>
			ltc6811_read(RDAUXA, &data[0]);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	200c      	movs	r0, #12
 80019ce:	f7fe ff23 	bl	8000818 <ltc6811_read>

			for (uint8_t i = 0; i < 3; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80019d8:	e020      	b.n	8001a1c <main+0x2d8>
			{
				temperatur[i] = ((data[i*2+1]<<8) | data[i*2]);
 80019da:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	3301      	adds	r3, #1
 80019e2:	3358      	adds	r3, #88	; 0x58
 80019e4:	443b      	add	r3, r7
 80019e6:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	3358      	adds	r3, #88	; 0x58
 80019f6:	443b      	add	r3, r7
 80019f8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a06:	b292      	uxth	r2, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	3358      	adds	r3, #88	; 0x58
 8001a0c:	443b      	add	r3, r7
 8001a0e:	f823 2c58 	strh.w	r2, [r3, #-88]
			for (uint8_t i = 0; i < 3; i++)
 8001a12:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a16:	3301      	adds	r3, #1
 8001a18:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001a1c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d9da      	bls.n	80019da <main+0x296>
			}
			uartTransmitNumber(temperatur[0], 10);
 8001a24:	883b      	ldrh	r3, [r7, #0]
 8001a26:	210a      	movs	r1, #10
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fda3 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001a2e:	2101      	movs	r1, #1
 8001a30:	481a      	ldr	r0, [pc, #104]	; (8001a9c <main+0x358>)
 8001a32:	f7fe fd8b 	bl	800054c <uartTransmit>
			uartTransmitNumber(temperatur[1], 10);
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	210a      	movs	r1, #10
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd9a 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001a40:	2101      	movs	r1, #1
 8001a42:	4816      	ldr	r0, [pc, #88]	; (8001a9c <main+0x358>)
 8001a44:	f7fe fd82 	bl	800054c <uartTransmit>

			if (j == 7)
 8001a48:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001a4c:	2b07      	cmp	r3, #7
 8001a4e:	d108      	bne.n	8001a62 <main+0x31e>
			{
				uartTransmitNumber(temperatur[2], 10);
 8001a50:	88bb      	ldrh	r3, [r7, #4]
 8001a52:	210a      	movs	r1, #10
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd8d 	bl	8000574 <uartTransmitNumber>
				uartTransmit(";", 1);
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	480f      	ldr	r0, [pc, #60]	; (8001a9c <main+0x358>)
 8001a5e:	f7fe fd75 	bl	800054c <uartTransmit>
		for (uint8_t j = 0; j < 8; j++)
 8001a62:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001a66:	3301      	adds	r3, #1
 8001a68:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8001a6c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	d991      	bls.n	8001998 <main+0x254>
			}
		}

		uartTransmit("\n", 1);
 8001a74:	2101      	movs	r1, #1
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <main+0x34c>)
 8001a78:	f7fe fd68 	bl	800054c <uartTransmit>

		temp++;
 8001a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a80:	3301      	adds	r3, #1
 8001a82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		ltc6811(ADCVC | MD73 | CELLALL);
 8001a86:	e6d6      	b.n	8001836 <main+0xf2>
 8001a88:	0800716c 	.word	0x0800716c
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	080071a8 	.word	0x080071a8
 8001a94:	080071ac 	.word	0x080071ac
 8001a98:	080071d0 	.word	0x080071d0
 8001a9c:	080071dc 	.word	0x080071dc
 8001aa0:	aaaaaaab 	.word	0xaaaaaaab
 8001aa4:	080071e0 	.word	0x080071e0

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b094      	sub	sp, #80	; 0x50
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	2234      	movs	r2, #52	; 0x34
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f005 f970 	bl	8006d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <SystemClock_Config+0xd8>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <SystemClock_Config+0xd8>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <SystemClock_Config+0xd8>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <SystemClock_Config+0xdc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <SystemClock_Config+0xdc>)
 8001aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <SystemClock_Config+0xdc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b10:	2319      	movs	r3, #25
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001b14:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001b18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 fb96 	bl	800325c <HAL_RCC_OscConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001b36:	f000 f827 	bl	8001b88 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b3a:	f001 fb3f 	bl	80031bc <HAL_PWREx_EnableOverDrive>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001b44:	f000 f820 	bl	8001b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	230f      	movs	r3, #15
 8001b4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	2107      	movs	r1, #7
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 fe26 	bl	80037b8 <HAL_RCC_ClockConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001b72:	f000 f809 	bl	8001b88 <Error_Handler>
  }
}
 8001b76:	bf00      	nop
 8001b78:	3750      	adds	r7, #80	; 0x50
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000

08001b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8c:	b672      	cpsid	i
}
 8001b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8001b90:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <Error_Handler+0x50>)
 8001b92:	7813      	ldrb	r3, [r2, #0]
 8001b94:	f043 0320 	orr.w	r3, r3, #32
 8001b98:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <Error_Handler+0x50>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001baa:	480c      	ldr	r0, [pc, #48]	; (8001bdc <Error_Handler+0x54>)
 8001bac:	f001 faec 	bl	8003188 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001bb0:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <Error_Handler+0x50>)
 8001bb2:	7813      	ldrb	r3, [r2, #0]
 8001bb4:	f36f 1386 	bfc	r3, #6, #1
 8001bb8:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <Error_Handler+0x50>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <Error_Handler+0x54>)
 8001bca:	f001 fadd 	bl	8003188 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8001bce:	2122      	movs	r1, #34	; 0x22
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <Error_Handler+0x58>)
 8001bd2:	f7fe fcbb 	bl	800054c <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <Error_Handler+0x4e>
 8001bd8:	20000034 	.word	0x20000034
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	080071f0 	.word	0x080071f0

08001be4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <MX_SPI1_Init+0x78>)
 8001bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001bf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001bfe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c32:	2207      	movs	r2, #7
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c3e:	2208      	movs	r2, #8
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_SPI1_Init+0x74>)
 8001c44:	f002 fbc6 	bl	80043d4 <HAL_SPI_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c4e:	f7ff ff9b 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200000d4 	.word	0x200000d4
 8001c5c:	40013000 	.word	0x40013000

08001c60 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <MX_SPI4_Init+0x78>)
 8001c68:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c70:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001c7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c7e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001c82:	2202      	movs	r2, #2
 8001c84:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c92:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001c96:	2230      	movs	r2, #48	; 0x30
 8001c98:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001cae:	2207      	movs	r2, #7
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_SPI4_Init+0x74>)
 8001cc0:	f002 fb88 	bl	80043d4 <HAL_SPI_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001cca:	f7ff ff5d 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000138 	.word	0x20000138
 8001cd8:	40013400 	.word	0x40013400

08001cdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a3d      	ldr	r2, [pc, #244]	; (8001df0 <HAL_SPI_MspInit+0x114>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d145      	bne.n	8001d8a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a3c      	ldr	r2, [pc, #240]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a36      	ldr	r2, [pc, #216]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d2e:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d56:	2305      	movs	r3, #5
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4825      	ldr	r0, [pc, #148]	; (8001df8 <HAL_SPI_MspInit+0x11c>)
 8001d62:	f001 f84d 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001d66:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d78:	2305      	movs	r3, #5
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <HAL_SPI_MspInit+0x120>)
 8001d84:	f001 f83c 	bl	8002e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001d88:	e02d      	b.n	8001de6 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_SPI_MspInit+0x124>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d128      	bne.n	8001de6 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	4a16      	ldr	r2, [pc, #88]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001dc4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <HAL_SPI_MspInit+0x128>)
 8001de2:	f001 f80d 	bl	8002e00 <HAL_GPIO_Init>
}
 8001de6:	bf00      	nop
 8001de8:	3730      	adds	r7, #48	; 0x30
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40013000 	.word	0x40013000
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40013400 	.word	0x40013400
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_MspInit+0x44>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <HAL_MspInit+0x44>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_MspInit+0x44>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_MspInit+0x44>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <HAL_MspInit+0x44>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_MspInit+0x44>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea4:	f000 faaa 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <SystemInit+0x28>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <SystemInit+0x28>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SystemInit+0x28>)
 8001ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	463b      	mov	r3, r7
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f06:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f08:	4a35      	ldr	r2, [pc, #212]	; (8001fe0 <MX_TIM1_Init+0x108>)
 8001f0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f0c:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f32:	482a      	ldr	r0, [pc, #168]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f34:	f003 fa05 	bl	8005342 <HAL_TIM_IC_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001f3e:	f7ff fe23 	bl	8001b88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001f42:	2304      	movs	r3, #4
 8001f44:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001f46:	2350      	movs	r3, #80	; 0x50
 8001f48:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	481f      	ldr	r0, [pc, #124]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f5e:	f003 fbf7 	bl	8005750 <HAL_TIM_SlaveConfigSynchro>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001f68:	f7ff fe0e 	bl	8001b88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	4619      	mov	r1, r3
 8001f84:	4815      	ldr	r0, [pc, #84]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001f86:	f003 fa33 	bl	80053f0 <HAL_TIM_IC_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001f90:	f7ff fdfa 	bl	8001b88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f94:	2302      	movs	r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001fa6:	f003 fa23 	bl	80053f0 <HAL_TIM_IC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001fb0:	f7ff fdea 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_TIM1_Init+0x104>)
 8001fc6:	f004 f941 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001fd0:	f7ff fdda 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3730      	adds	r7, #48	; 0x30
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	2000019c 	.word	0x2000019c
 8001fe0:	40010000 	.word	0x40010000

08001fe4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
 8002004:	615a      	str	r2, [r3, #20]
 8002006:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002008:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <MX_TIM4_Init+0xf0>)
 800200a:	4a33      	ldr	r2, [pc, #204]	; (80020d8 <MX_TIM4_Init+0xf4>)
 800200c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800200e:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <MX_TIM4_Init+0xf0>)
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <MX_TIM4_Init+0xf0>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <MX_TIM4_Init+0xf0>)
 800201c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002020:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <MX_TIM4_Init+0xf0>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <MX_TIM4_Init+0xf0>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800202e:	4829      	ldr	r0, [pc, #164]	; (80020d4 <MX_TIM4_Init+0xf0>)
 8002030:	f003 f930 	bl	8005294 <HAL_TIM_PWM_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800203a:	f7ff fda5 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	4821      	ldr	r0, [pc, #132]	; (80020d4 <MX_TIM4_Init+0xf0>)
 800204e:	f004 f8fd 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002058:	f7ff fd96 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205c:	2360      	movs	r3, #96	; 0x60
 800205e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	4619      	mov	r1, r3
 8002072:	4818      	ldr	r0, [pc, #96]	; (80020d4 <MX_TIM4_Init+0xf0>)
 8002074:	f003 fa58 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800207e:	f7ff fd83 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002082:	463b      	mov	r3, r7
 8002084:	2204      	movs	r2, #4
 8002086:	4619      	mov	r1, r3
 8002088:	4812      	ldr	r0, [pc, #72]	; (80020d4 <MX_TIM4_Init+0xf0>)
 800208a:	f003 fa4d 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002094:	f7ff fd78 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002098:	463b      	mov	r3, r7
 800209a:	2208      	movs	r2, #8
 800209c:	4619      	mov	r1, r3
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <MX_TIM4_Init+0xf0>)
 80020a0:	f003 fa42 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80020aa:	f7ff fd6d 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020ae:	463b      	mov	r3, r7
 80020b0:	220c      	movs	r2, #12
 80020b2:	4619      	mov	r1, r3
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <MX_TIM4_Init+0xf0>)
 80020b6:	f003 fa37 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80020c0:	f7ff fd62 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <MX_TIM4_Init+0xf0>)
 80020c6:	f000 f86d 	bl	80021a4 <HAL_TIM_MspPostInit>

}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	; 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200001e8 	.word	0x200001e8
 80020d8:	40000800 	.word	0x40000800

080020dc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_TIM_IC_MspInit+0x7c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d128      	bne.n	8002150 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_TIM_IC_MspInit+0x80>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_TIM_IC_MspInit+0x80>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_TIM_IC_MspInit+0x80>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_TIM_IC_MspInit+0x80>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_TIM_IC_MspInit+0x80>)
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_TIM_IC_MspInit+0x80>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 800212e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002140:	2301      	movs	r3, #1
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <HAL_TIM_IC_MspInit+0x84>)
 800214c:	f000 fe58 	bl	8002e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40010000 	.word	0x40010000
 800215c:	40023800 	.word	0x40023800
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_TIM_PWM_MspInit+0x38>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10b      	bne.n	800218e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40000800 	.word	0x40000800
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a11      	ldr	r2, [pc, #68]	; (8002208 <HAL_TIM_MspPostInit+0x64>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d11c      	bne.n	8002200 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_TIM_MspPostInit+0x68>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <HAL_TIM_MspPostInit+0x68>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_TIM_MspPostInit+0x68>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80021de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80021e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_TIM_MspPostInit+0x6c>)
 80021fc:	f000 fe00 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40000800 	.word	0x40000800
 800220c:	40023800 	.word	0x40023800
 8002210:	40020c00 	.word	0x40020c00

08002214 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <MX_USART2_UART_Init+0x58>)
 800221a:	4a15      	ldr	r2, [pc, #84]	; (8002270 <MX_USART2_UART_Init+0x5c>)
 800221c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002220:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_USART2_UART_Init+0x58>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_USART2_UART_Init+0x58>)
 800223a:	220c      	movs	r2, #12
 800223c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <MX_USART2_UART_Init+0x58>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_USART2_UART_Init+0x58>)
 8002258:	f004 f886 	bl	8006368 <HAL_UART_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002262:	f7ff fc91 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000234 	.word	0x20000234
 8002270:	40004400 	.word	0x40004400

08002274 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0ae      	sub	sp, #184	; 0xb8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2290      	movs	r2, #144	; 0x90
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f004 fd81 	bl	8006d9c <memset>
  if(uartHandle->Instance==USART2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_UART_MspInit+0xb0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d13a      	bne.n	800231a <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 fc67 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022bc:	f7ff fc64 	bl	8001b88 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_UART_MspInit+0xb4>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <HAL_UART_MspInit+0xb4>)
 80022c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ca:	6413      	str	r3, [r2, #64]	; 0x40
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_UART_MspInit+0xb4>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_UART_MspInit+0xb4>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_UART_MspInit+0xb4>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6313      	str	r3, [r2, #48]	; 0x30
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_UART_MspInit+0xb4>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022f0:	2360      	movs	r3, #96	; 0x60
 80022f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002308:	2307      	movs	r3, #7
 800230a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <HAL_UART_MspInit+0xb8>)
 8002316:	f000 fd73 	bl	8002e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800231a:	bf00      	nop
 800231c:	37b8      	adds	r7, #184	; 0xb8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40004400 	.word	0x40004400
 8002328:	40023800 	.word	0x40023800
 800232c:	40020c00 	.word	0x40020c00

08002330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002368 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002336:	e003      	b.n	8002340 <LoopCopyDataInit>

08002338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800233a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800233c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800233e:	3104      	adds	r1, #4

08002340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002348:	d3f6      	bcc.n	8002338 <CopyDataInit>
  ldr  r2, =_sbss
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800234c:	e002      	b.n	8002354 <LoopFillZerobss>

0800234e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800234e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002350:	f842 3b04 	str.w	r3, [r2], #4

08002354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002358:	d3f9      	bcc.n	800234e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800235a:	f7ff fda7 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235e:	f004 fcf9 	bl	8006d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002362:	f7ff f9ef 	bl	8001744 <main>
  bx  lr    
 8002366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002368:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800236c:	08007464 	.word	0x08007464
  ldr  r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002374:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002378:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800237c:	200002bc 	.word	0x200002bc

08002380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC_IRQHandler>

08002382 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002386:	2003      	movs	r0, #3
 8002388:	f000 fd06 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238c:	2000      	movs	r0, #0
 800238e:	f000 f805 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002392:	f7ff fd39 	bl	8001e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x54>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x58>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fd13 	bl	8002de6 <HAL_SYSTICK_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00e      	b.n	80023e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d80a      	bhi.n	80023e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f000 fce9 	bl	8002dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_InitTick+0x5c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000008 	.word	0x20000008
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x20>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x24>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_IncTick+0x24>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000008 	.word	0x20000008
 8002420:	200002b8 	.word	0x200002b8

08002424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return uwTick;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_GetTick+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200002b8 	.word	0x200002b8

0800243c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff ffee 	bl	8002424 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d005      	beq.n	8002462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_Delay+0x44>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002462:	bf00      	nop
 8002464:	f7ff ffde 	bl	8002424 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d8f7      	bhi.n	8002464 <HAL_Delay+0x28>
  {
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000008 	.word	0x20000008

08002484 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8002488:	4b02      	ldr	r3, [pc, #8]	; (8002494 <HAL_GetHalVersion+0x10>)
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	01020a00 	.word	0x01020a00

08002498 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_GetREVID+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0c1b      	lsrs	r3, r3, #16
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e0042000 	.word	0xe0042000

080024b0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <HAL_GetDEVID+0x18>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e0042000 	.word	0xe0042000

080024cc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_GetUIDw0+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	1ff0f420 	.word	0x1ff0f420

080024e4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <HAL_GetUIDw1+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	1ff0f424 	.word	0x1ff0f424

080024fc <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetUIDw2+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	1ff0f428 	.word	0x1ff0f428

08002514 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e031      	b.n	800258e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fe02 	bl	800113c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_ADC_Init+0x84>)
 8002558:	4013      	ands	r3, r2
 800255a:	f043 0202 	orr.w	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f970 	bl	8002848 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
 800257e:	e001      	b.n	8002584 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	ffffeefd 	.word	0xffffeefd

0800259c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x1c>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e136      	b.n	8002826 <HAL_ADC_ConfigChannel+0x28a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b09      	cmp	r3, #9
 80025c6:	d93a      	bls.n	800263e <HAL_ADC_ConfigChannel+0xa2>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025d0:	d035      	beq.n	800263e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68d9      	ldr	r1, [r3, #12]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	3b1e      	subs	r3, #30
 80025e8:	2207      	movs	r2, #7
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	400a      	ands	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a8d      	ldr	r2, [pc, #564]	; (8002834 <HAL_ADC_ConfigChannel+0x298>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10a      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	061a      	lsls	r2, r3, #24
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002616:	e035      	b.n	8002684 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68d9      	ldr	r1, [r3, #12]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	4603      	mov	r3, r0
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4403      	add	r3, r0
 8002630:	3b1e      	subs	r3, #30
 8002632:	409a      	lsls	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800263c:	e022      	b.n	8002684 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6919      	ldr	r1, [r3, #16]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	2207      	movs	r2, #7
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43da      	mvns	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	400a      	ands	r2, r1
 8002660:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6919      	ldr	r1, [r3, #16]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	4618      	mov	r0, r3
 8002674:	4603      	mov	r3, r0
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4403      	add	r3, r0
 800267a:	409a      	lsls	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b06      	cmp	r3, #6
 800268a:	d824      	bhi.n	80026d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	3b05      	subs	r3, #5
 800269e:	221f      	movs	r2, #31
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b05      	subs	r3, #5
 80026c8:	fa00 f203 	lsl.w	r2, r0, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	635a      	str	r2, [r3, #52]	; 0x34
 80026d4:	e04c      	b.n	8002770 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d824      	bhi.n	8002728 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	3b23      	subs	r3, #35	; 0x23
 80026f0:	221f      	movs	r2, #31
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	400a      	ands	r2, r1
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	4618      	mov	r0, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	3b23      	subs	r3, #35	; 0x23
 800271a:	fa00 f203 	lsl.w	r2, r0, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
 8002726:	e023      	b.n	8002770 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	3b41      	subs	r3, #65	; 0x41
 800273a:	221f      	movs	r2, #31
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43da      	mvns	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	400a      	ands	r2, r1
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	3b41      	subs	r3, #65	; 0x41
 8002764:	fa00 f203 	lsl.w	r2, r0, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a30      	ldr	r2, [pc, #192]	; (8002838 <HAL_ADC_ConfigChannel+0x29c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1f4>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002782:	d105      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a2c      	ldr	r2, [pc, #176]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 800278a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800278e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a28      	ldr	r2, [pc, #160]	; (8002838 <HAL_ADC_ConfigChannel+0x29c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10f      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x21e>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d10b      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4a25      	ldr	r2, [pc, #148]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 80027a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027ac:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a22      	ldr	r2, [pc, #136]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 80027b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027b8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1e      	ldr	r2, [pc, #120]	; (8002838 <HAL_ADC_ConfigChannel+0x29c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d12b      	bne.n	800281c <HAL_ADC_ConfigChannel+0x280>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1a      	ldr	r2, [pc, #104]	; (8002834 <HAL_ADC_ConfigChannel+0x298>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0x23a>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b11      	cmp	r3, #17
 80027d4:	d122      	bne.n	800281c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4a18      	ldr	r2, [pc, #96]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 80027dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027e0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <HAL_ADC_ConfigChannel+0x2a0>)
 80027e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_ADC_ConfigChannel+0x298>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d111      	bne.n	800281c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_ADC_ConfigChannel+0x2a4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a11      	ldr	r2, [pc, #68]	; (8002844 <HAL_ADC_ConfigChannel+0x2a8>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0c9a      	lsrs	r2, r3, #18
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800280e:	e002      	b.n	8002816 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3b01      	subs	r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f9      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	10000012 	.word	0x10000012
 8002838:	40012000 	.word	0x40012000
 800283c:	40012300 	.word	0x40012300
 8002840:	20000000 	.word	0x20000000
 8002844:	431bde83 	.word	0x431bde83

08002848 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002850:	4b78      	ldr	r3, [pc, #480]	; (8002a34 <ADC_Init+0x1ec>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a77      	ldr	r2, [pc, #476]	; (8002a34 <ADC_Init+0x1ec>)
 8002856:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800285a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800285c:	4b75      	ldr	r3, [pc, #468]	; (8002a34 <ADC_Init+0x1ec>)
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4973      	ldr	r1, [pc, #460]	; (8002a34 <ADC_Init+0x1ec>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	021a      	lsls	r2, r3, #8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800289c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6899      	ldr	r1, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <ADC_Init+0x1f0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d022      	beq.n	8002922 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800290c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6899      	ldr	r1, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e00f      	b.n	8002942 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002940:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0202 	bic.w	r2, r2, #2
 8002950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	005a      	lsls	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01b      	beq.n	80029a8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800298e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	3b01      	subs	r3, #1
 800299c:	035a      	lsls	r2, r3, #13
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	e007      	b.n	80029b8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	051a      	lsls	r2, r3, #20
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029fa:	025a      	lsls	r2, r3, #9
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	029a      	lsls	r2, r3, #10
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40012300 	.word	0x40012300
 8002a38:	0f000001 	.word	0x0f000001

08002a3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0ed      	b.n	8002c2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fc1a 	bl	8001294 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a70:	f7ff fcd8 	bl	8002424 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a76:	e012      	b.n	8002a9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a78:	f7ff fcd4 	bl	8002424 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b0a      	cmp	r3, #10
 8002a84:	d90b      	bls.n	8002a9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2205      	movs	r2, #5
 8002a96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0c5      	b.n	8002c2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0e5      	beq.n	8002a78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0202 	bic.w	r2, r2, #2
 8002aba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002abc:	f7ff fcb2 	bl	8002424 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ac2:	e012      	b.n	8002aea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ac4:	f7ff fcae 	bl	8002424 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b0a      	cmp	r3, #10
 8002ad0:	d90b      	bls.n	8002aea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2205      	movs	r2, #5
 8002ae2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e09f      	b.n	8002c2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e5      	bne.n	8002ac4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7e1b      	ldrb	r3, [r3, #24]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d108      	bne.n	8002b12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e007      	b.n	8002b22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7e5b      	ldrb	r3, [r3, #25]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d108      	bne.n	8002b3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e007      	b.n	8002b4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7e9b      	ldrb	r3, [r3, #26]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d108      	bne.n	8002b66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0220 	orr.w	r2, r2, #32
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e007      	b.n	8002b76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0220 	bic.w	r2, r2, #32
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7edb      	ldrb	r3, [r3, #27]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0210 	bic.w	r2, r2, #16
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e007      	b.n	8002ba0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0210 	orr.w	r2, r2, #16
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7f1b      	ldrb	r3, [r3, #28]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d108      	bne.n	8002bba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0208 	orr.w	r2, r2, #8
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e007      	b.n	8002bca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0208 	bic.w	r2, r2, #8
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7f5b      	ldrb	r3, [r3, #29]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d108      	bne.n	8002be4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0204 	orr.w	r2, r2, #4
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	e007      	b.n	8002bf4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0204 	bic.w	r2, r2, #4
 8002bf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	ea42 0103 	orr.w	r1, r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	1e5a      	subs	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <__NVIC_SetPriorityGrouping+0x40>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c62:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <__NVIC_SetPriorityGrouping+0x40>)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	60d3      	str	r3, [r2, #12]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00
 8002c78:	05fa0000 	.word	0x05fa0000

08002c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db0a      	blt.n	8002cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <__NVIC_SetPriority+0x4c>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc0:	e00a      	b.n	8002cd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4908      	ldr	r1, [pc, #32]	; (8002ce8 <__NVIC_SetPriority+0x50>)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	761a      	strb	r2, [r3, #24]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e100 	.word	0xe000e100
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf28      	it	cs
 8002d0a:	2304      	movcs	r3, #4
 8002d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d902      	bls.n	8002d1c <NVIC_EncodePriority+0x30>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b03      	subs	r3, #3
 8002d1a:	e000      	b.n	8002d1e <NVIC_EncodePriority+0x32>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	4313      	orrs	r3, r2
         );
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d64:	d301      	bcc.n	8002d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <SysTick_Config+0x40>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d72:	210f      	movs	r1, #15
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f7ff ff8e 	bl	8002c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <SysTick_Config+0x40>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <SysTick_Config+0x40>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff47 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff5c 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff8e 	bl	8002cec <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5d 	bl	8002c98 <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffb0 	bl	8002d54 <SysTick_Config>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	e175      	b.n	800310c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e20:	2201      	movs	r2, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	f040 8164 	bne.w	8003106 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d005      	beq.n	8002e56 <HAL_GPIO_Init+0x56>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d130      	bne.n	8002eb8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	2203      	movs	r2, #3
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 0201 	and.w	r2, r3, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d017      	beq.n	8002ef4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d123      	bne.n	8002f48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	08da      	lsrs	r2, r3, #3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3208      	adds	r2, #8
 8002f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	220f      	movs	r2, #15
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	08da      	lsrs	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3208      	adds	r2, #8
 8002f42:	69b9      	ldr	r1, [r7, #24]
 8002f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80be 	beq.w	8003106 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8a:	4b66      	ldr	r3, [pc, #408]	; (8003124 <HAL_GPIO_Init+0x324>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_GPIO_Init+0x324>)
 8002f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_GPIO_Init+0x324>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fa2:	4a61      	ldr	r2, [pc, #388]	; (8003128 <HAL_GPIO_Init+0x328>)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_GPIO_Init+0x32c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d037      	beq.n	800303e <HAL_GPIO_Init+0x23e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a57      	ldr	r2, [pc, #348]	; (8003130 <HAL_GPIO_Init+0x330>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_GPIO_Init+0x23a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a56      	ldr	r2, [pc, #344]	; (8003134 <HAL_GPIO_Init+0x334>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02b      	beq.n	8003036 <HAL_GPIO_Init+0x236>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a55      	ldr	r2, [pc, #340]	; (8003138 <HAL_GPIO_Init+0x338>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d025      	beq.n	8003032 <HAL_GPIO_Init+0x232>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a54      	ldr	r2, [pc, #336]	; (800313c <HAL_GPIO_Init+0x33c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01f      	beq.n	800302e <HAL_GPIO_Init+0x22e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a53      	ldr	r2, [pc, #332]	; (8003140 <HAL_GPIO_Init+0x340>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d019      	beq.n	800302a <HAL_GPIO_Init+0x22a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_GPIO_Init+0x344>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_GPIO_Init+0x226>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a51      	ldr	r2, [pc, #324]	; (8003148 <HAL_GPIO_Init+0x348>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00d      	beq.n	8003022 <HAL_GPIO_Init+0x222>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a50      	ldr	r2, [pc, #320]	; (800314c <HAL_GPIO_Init+0x34c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <HAL_GPIO_Init+0x21e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4f      	ldr	r2, [pc, #316]	; (8003150 <HAL_GPIO_Init+0x350>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_GPIO_Init+0x21a>
 8003016:	2309      	movs	r3, #9
 8003018:	e012      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800301a:	230a      	movs	r3, #10
 800301c:	e010      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800301e:	2308      	movs	r3, #8
 8003020:	e00e      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003022:	2307      	movs	r3, #7
 8003024:	e00c      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003026:	2306      	movs	r3, #6
 8003028:	e00a      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800302a:	2305      	movs	r3, #5
 800302c:	e008      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800302e:	2304      	movs	r3, #4
 8003030:	e006      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003032:	2303      	movs	r3, #3
 8003034:	e004      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003036:	2302      	movs	r3, #2
 8003038:	e002      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800303e:	2300      	movs	r3, #0
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	f002 0203 	and.w	r2, r2, #3
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	4093      	lsls	r3, r2
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003050:	4935      	ldr	r1, [pc, #212]	; (8003128 <HAL_GPIO_Init+0x328>)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <HAL_GPIO_Init+0x354>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003082:	4a34      	ldr	r2, [pc, #208]	; (8003154 <HAL_GPIO_Init+0x354>)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003088:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_GPIO_Init+0x354>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030ac:	4a29      	ldr	r2, [pc, #164]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003100:	4a14      	ldr	r2, [pc, #80]	; (8003154 <HAL_GPIO_Init+0x354>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b0f      	cmp	r3, #15
 8003110:	f67f ae86 	bls.w	8002e20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3724      	adds	r7, #36	; 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	40013800 	.word	0x40013800
 800312c:	40020000 	.word	0x40020000
 8003130:	40020400 	.word	0x40020400
 8003134:	40020800 	.word	0x40020800
 8003138:	40020c00 	.word	0x40020c00
 800313c:	40021000 	.word	0x40021000
 8003140:	40021400 	.word	0x40021400
 8003144:	40021800 	.word	0x40021800
 8003148:	40021c00 	.word	0x40021c00
 800314c:	40022000 	.word	0x40022000
 8003150:	40022400 	.word	0x40022400
 8003154:	40013c00 	.word	0x40013c00

08003158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e001      	b.n	800317a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
 8003194:	4613      	mov	r3, r2
 8003196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003198:	787b      	ldrb	r3, [r7, #1]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031a4:	e003      	b.n	80031ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	041a      	lsls	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	619a      	str	r2, [r3, #24]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_PWREx_EnableOverDrive+0x98>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a22      	ldr	r2, [pc, #136]	; (8003254 <HAL_PWREx_EnableOverDrive+0x98>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_PWREx_EnableOverDrive+0x98>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ea:	f7ff f91b 	bl	8002424 <HAL_GetTick>
 80031ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031f0:	e009      	b.n	8003206 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031f2:	f7ff f917 	bl	8002424 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003200:	d901      	bls.n	8003206 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e022      	b.n	800324c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003212:	d1ee      	bne.n	80031f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003214:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 800321a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003220:	f7ff f900 	bl	8002424 <HAL_GetTick>
 8003224:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003226:	e009      	b.n	800323c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003228:	f7ff f8fc 	bl	8002424 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003236:	d901      	bls.n	800323c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e007      	b.n	800324c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003248:	d1ee      	bne.n	8003228 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800
 8003258:	40007000 	.word	0x40007000

0800325c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e29b      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8087 	beq.w	800338e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003280:	4b96      	ldr	r3, [pc, #600]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b04      	cmp	r3, #4
 800328a:	d00c      	beq.n	80032a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328c:	4b93      	ldr	r3, [pc, #588]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d112      	bne.n	80032be <HAL_RCC_OscConfig+0x62>
 8003298:	4b90      	ldr	r3, [pc, #576]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a4:	d10b      	bne.n	80032be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a6:	4b8d      	ldr	r3, [pc, #564]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d06c      	beq.n	800338c <HAL_RCC_OscConfig+0x130>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d168      	bne.n	800338c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e275      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x7a>
 80032c8:	4b84      	ldr	r3, [pc, #528]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a83      	ldr	r2, [pc, #524]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	e02e      	b.n	8003334 <HAL_RCC_OscConfig+0xd8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x9c>
 80032de:	4b7f      	ldr	r3, [pc, #508]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7e      	ldr	r2, [pc, #504]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b7c      	ldr	r3, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7b      	ldr	r2, [pc, #492]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xd8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0xc0>
 8003302:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a75      	ldr	r2, [pc, #468]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a72      	ldr	r2, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xd8>
 800331c:	4b6f      	ldr	r3, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6e      	ldr	r2, [pc, #440]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b6c      	ldr	r3, [pc, #432]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6b      	ldr	r2, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7ff f872 	bl	8002424 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7ff f86e 	bl	8002424 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e229      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xe8>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7ff f85e 	bl	8002424 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7ff f85a 	bl	8002424 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e215      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x110>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d069      	beq.n	800346e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800339a:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a6:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d11c      	bne.n	80033ec <HAL_RCC_OscConfig+0x190>
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d116      	bne.n	80033ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e1e9      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b41      	ldr	r3, [pc, #260]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	493d      	ldr	r1, [pc, #244]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	e040      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d023      	beq.n	800343c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a38      	ldr	r2, [pc, #224]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7ff f810 	bl	8002424 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003408:	f7ff f80c 	bl	8002424 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1c7      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341a:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4929      	ldr	r1, [pc, #164]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
 800343a:	e018      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343c:	4b27      	ldr	r3, [pc, #156]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a26      	ldr	r2, [pc, #152]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe ffec 	bl	8002424 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7fe ffe8 	bl	8002424 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1a3      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d038      	beq.n	80034ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d019      	beq.n	80034b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003486:	4a15      	ldr	r2, [pc, #84]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fe ffc9 	bl	8002424 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003496:	f7fe ffc5 	bl	8002424 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e180      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80034aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x23a>
 80034b4:	e01a      	b.n	80034ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80034b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ba:	4a08      	ldr	r2, [pc, #32]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fe ffaf 	bl	8002424 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fe ffab 	bl	8002424 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d903      	bls.n	80034e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e166      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
 80034dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	4b92      	ldr	r3, [pc, #584]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a4 	beq.w	8003642 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b8c      	ldr	r3, [pc, #560]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	4b89      	ldr	r3, [pc, #548]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a88      	ldr	r2, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b86      	ldr	r3, [pc, #536]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003522:	4b83      	ldr	r3, [pc, #524]	; (8003730 <HAL_RCC_OscConfig+0x4d4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800352e:	4b80      	ldr	r3, [pc, #512]	; (8003730 <HAL_RCC_OscConfig+0x4d4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7f      	ldr	r2, [pc, #508]	; (8003730 <HAL_RCC_OscConfig+0x4d4>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fe ff73 	bl	8002424 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fe ff6f 	bl	8002424 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b64      	cmp	r3, #100	; 0x64
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e12a      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003554:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCC_OscConfig+0x4d4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x31a>
 8003568:	4b70      	ldr	r3, [pc, #448]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a6f      	ldr	r2, [pc, #444]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
 8003574:	e02d      	b.n	80035d2 <HAL_RCC_OscConfig+0x376>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x33c>
 800357e:	4b6b      	ldr	r3, [pc, #428]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a6a      	ldr	r2, [pc, #424]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	4b68      	ldr	r3, [pc, #416]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a67      	ldr	r2, [pc, #412]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
 8003596:	e01c      	b.n	80035d2 <HAL_RCC_OscConfig+0x376>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b05      	cmp	r3, #5
 800359e:	d10c      	bne.n	80035ba <HAL_RCC_OscConfig+0x35e>
 80035a0:	4b62      	ldr	r3, [pc, #392]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a61      	ldr	r2, [pc, #388]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a5e      	ldr	r2, [pc, #376]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	e00b      	b.n	80035d2 <HAL_RCC_OscConfig+0x376>
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a5b      	ldr	r2, [pc, #364]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d015      	beq.n	8003606 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fe ff23 	bl	8002424 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7fe ff1f 	bl	8002424 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0d8      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	4b4c      	ldr	r3, [pc, #304]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ee      	beq.n	80035e2 <HAL_RCC_OscConfig+0x386>
 8003604:	e014      	b.n	8003630 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7fe ff0d 	bl	8002424 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fe ff09 	bl	8002424 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0c2      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	4b41      	ldr	r3, [pc, #260]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ee      	bne.n	800360e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d105      	bne.n	8003642 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003636:	4b3d      	ldr	r3, [pc, #244]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a3c      	ldr	r2, [pc, #240]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800363c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80ae 	beq.w	80037a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364c:	4b37      	ldr	r3, [pc, #220]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b08      	cmp	r3, #8
 8003656:	d06d      	beq.n	8003734 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d14b      	bne.n	80036f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b32      	ldr	r3, [pc, #200]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a31      	ldr	r2, [pc, #196]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe feda 	bl	8002424 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fed6 	bl	8002424 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e091      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	4b29      	ldr	r3, [pc, #164]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	071b      	lsls	r3, r3, #28
 80036be:	491b      	ldr	r1, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fea8 	bl	8002424 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fe fea4 	bl	8002424 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e05f      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x47c>
 80036f6:	e057      	b.n	80037a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0b      	ldr	r2, [pc, #44]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fe fe8e 	bl	8002424 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370c:	f7fe fe8a 	bl	8002424 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e045      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x4b0>
 800372a:	e03d      	b.n	80037a8 <HAL_RCC_OscConfig+0x54c>
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <HAL_RCC_OscConfig+0x558>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d030      	beq.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d129      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d122      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800376a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800376c:	4293      	cmp	r3, r2
 800376e:	d119      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	3b01      	subs	r3, #1
 800377e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d10f      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800

080037b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0d0      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b6a      	ldr	r3, [pc, #424]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d910      	bls.n	8003800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b67      	ldr	r3, [pc, #412]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 020f 	bic.w	r2, r3, #15
 80037e6:	4965      	ldr	r1, [pc, #404]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b63      	ldr	r3, [pc, #396]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0b8      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003818:	4b59      	ldr	r3, [pc, #356]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a58      	ldr	r2, [pc, #352]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003830:	4b53      	ldr	r3, [pc, #332]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800383a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b50      	ldr	r3, [pc, #320]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	494d      	ldr	r1, [pc, #308]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d040      	beq.n	80038dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b47      	ldr	r3, [pc, #284]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d115      	bne.n	800389a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e07f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e073      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06b      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4936      	ldr	r1, [pc, #216]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7fe fdba 	bl	8002424 <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7fe fdb6 	bl	8002424 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e053      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d210      	bcs.n	800390c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	4922      	ldr	r1, [pc, #136]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e032      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4916      	ldr	r1, [pc, #88]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	490e      	ldr	r1, [pc, #56]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394a:	f000 f821 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800394e:	4602      	mov	r2, r0
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	490a      	ldr	r1, [pc, #40]	; (8003984 <HAL_RCC_ClockConfig+0x1cc>)
 800395c:	5ccb      	ldrb	r3, [r1, r3]
 800395e:	fa22 f303 	lsr.w	r3, r2, r3
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x1d0>)
 8003964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1d4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fd16 	bl	800239c <HAL_InitTick>

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023c00 	.word	0x40023c00
 8003980:	40023800 	.word	0x40023800
 8003984:	08007414 	.word	0x08007414
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003994:	b090      	sub	sp, #64	; 0x40
 8003996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
 800399c:	2300      	movs	r3, #0
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a0:	2300      	movs	r3, #0
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a8:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d00d      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x40>
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	f200 80a1 	bhi.w	8003afc <HAL_RCC_GetSysClockFreq+0x16c>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x34>
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x3a>
 80039c2:	e09b      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c4:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x184>)
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039c8:	e09b      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ca:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80039cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039ce:	e098      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d0:	4b4f      	ldr	r3, [pc, #316]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039da:	4b4d      	ldr	r3, [pc, #308]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d028      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e6:	4b4a      	ldr	r3, [pc, #296]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	099b      	lsrs	r3, r3, #6
 80039ec:	2200      	movs	r2, #0
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	627a      	str	r2, [r7, #36]	; 0x24
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039f8:	2100      	movs	r1, #0
 80039fa:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80039fc:	fb03 f201 	mul.w	r2, r3, r1
 8003a00:	2300      	movs	r3, #0
 8003a02:	fb00 f303 	mul.w	r3, r0, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	4a43      	ldr	r2, [pc, #268]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a10:	460a      	mov	r2, r1
 8003a12:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a16:	4413      	add	r3, r2
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	61fa      	str	r2, [r7, #28]
 8003a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a2a:	f7fc fc0d 	bl	8000248 <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4613      	mov	r3, r2
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a36:	e053      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	2200      	movs	r2, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	617a      	str	r2, [r7, #20]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a4a:	f04f 0b00 	mov.w	fp, #0
 8003a4e:	4652      	mov	r2, sl
 8003a50:	465b      	mov	r3, fp
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	0159      	lsls	r1, r3, #5
 8003a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a60:	0150      	lsls	r0, r2, #5
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	ebb2 080a 	subs.w	r8, r2, sl
 8003a6a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a82:	ebb2 0408 	subs.w	r4, r2, r8
 8003a86:	eb63 0509 	sbc.w	r5, r3, r9
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	00eb      	lsls	r3, r5, #3
 8003a94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a98:	00e2      	lsls	r2, r4, #3
 8003a9a:	4614      	mov	r4, r2
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	eb14 030a 	adds.w	r3, r4, sl
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	eb45 030b 	adc.w	r3, r5, fp
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	028b      	lsls	r3, r1, #10
 8003aba:	4621      	mov	r1, r4
 8003abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	028a      	lsls	r2, r1, #10
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	2200      	movs	r2, #0
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	60fa      	str	r2, [r7, #12]
 8003ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ad4:	f7fc fbb8 	bl	8000248 <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003afa:	e002      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003afe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3740      	adds	r7, #64	; 0x40
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
 8003b14:	00f42400 	.word	0x00f42400
 8003b18:	017d7840 	.word	0x017d7840

08003b1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000000 	.word	0x20000000

08003b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b38:	f7ff fff0 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	0a9b      	lsrs	r3, r3, #10
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4903      	ldr	r1, [pc, #12]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	08007424 	.word	0x08007424

08003b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b60:	f7ff ffdc 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	0b5b      	lsrs	r3, r3, #13
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4903      	ldr	r1, [pc, #12]	; (8003b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	08007424 	.word	0x08007424

08003b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d012      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bac:	4b69      	ldr	r3, [pc, #420]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a68      	ldr	r2, [pc, #416]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bb6:	6093      	str	r3, [r2, #8]
 8003bb8:	4b66      	ldr	r3, [pc, #408]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc0:	4964      	ldr	r1, [pc, #400]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d017      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bde:	4b5d      	ldr	r3, [pc, #372]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	4959      	ldr	r1, [pc, #356]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d017      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c1a:	4b4e      	ldr	r3, [pc, #312]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	494a      	ldr	r1, [pc, #296]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c38:	d101      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 808b 	beq.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c68:	4b3a      	ldr	r3, [pc, #232]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	4a39      	ldr	r2, [pc, #228]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6413      	str	r3, [r2, #64]	; 0x40
 8003c74:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c80:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8c:	f7fe fbca 	bl	8002424 <HAL_GetTick>
 8003c90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c94:	f7fe fbc6 	bl	8002424 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e38f      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cb2:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d035      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d02e      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cd0:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	4a1a      	ldr	r2, [pc, #104]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cf8:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d114      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe fb8e 	bl	8002424 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fe fb8a 	bl	8002424 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e351      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ee      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d3a:	d111      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d4a:	400b      	ands	r3, r1
 8003d4c:	4901      	ldr	r1, [pc, #4]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
 8003d52:	e00b      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	0ffffcff 	.word	0x0ffffcff
 8003d60:	4bac      	ldr	r3, [pc, #688]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4aab      	ldr	r2, [pc, #684]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d6a:	6093      	str	r3, [r2, #8]
 8003d6c:	4ba9      	ldr	r3, [pc, #676]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	49a6      	ldr	r1, [pc, #664]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d010      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d8a:	4ba2      	ldr	r3, [pc, #648]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d90:	4aa0      	ldr	r2, [pc, #640]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d9a:	4b9e      	ldr	r3, [pc, #632]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	499b      	ldr	r1, [pc, #620]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db8:	4b96      	ldr	r3, [pc, #600]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc6:	4993      	ldr	r1, [pc, #588]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dda:	4b8e      	ldr	r3, [pc, #568]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de8:	498a      	ldr	r1, [pc, #552]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dfc:	4b85      	ldr	r3, [pc, #532]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0a:	4982      	ldr	r1, [pc, #520]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e1e:	4b7d      	ldr	r3, [pc, #500]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	4979      	ldr	r1, [pc, #484]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e40:	4b74      	ldr	r3, [pc, #464]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f023 0203 	bic.w	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	4971      	ldr	r1, [pc, #452]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e62:	4b6c      	ldr	r3, [pc, #432]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f023 020c 	bic.w	r2, r3, #12
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e70:	4968      	ldr	r1, [pc, #416]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e84:	4b63      	ldr	r3, [pc, #396]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	4960      	ldr	r1, [pc, #384]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ea6:	4b5b      	ldr	r3, [pc, #364]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb4:	4957      	ldr	r1, [pc, #348]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ec8:	4b52      	ldr	r3, [pc, #328]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	494f      	ldr	r1, [pc, #316]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003eea:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	4946      	ldr	r1, [pc, #280]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f0c:	4b41      	ldr	r3, [pc, #260]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	493e      	ldr	r1, [pc, #248]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f2e:	4b39      	ldr	r3, [pc, #228]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3c:	4935      	ldr	r1, [pc, #212]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f50:	4b30      	ldr	r3, [pc, #192]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5e:	492d      	ldr	r1, [pc, #180]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d011      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f72:	4b28      	ldr	r3, [pc, #160]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f80:	4924      	ldr	r1, [pc, #144]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f90:	d101      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f92:	2301      	movs	r3, #1
 8003f94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc0:	4914      	ldr	r1, [pc, #80]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe4:	490b      	ldr	r1, [pc, #44]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00f      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004008:	4902      	ldr	r1, [pc, #8]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004010:	e002      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004024:	4b8a      	ldr	r3, [pc, #552]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800402a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	4986      	ldr	r1, [pc, #536]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00b      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004048:	4b81      	ldr	r3, [pc, #516]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004058:	497d      	ldr	r1, [pc, #500]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d006      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80d6 	beq.w	8004220 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004074:	4b76      	ldr	r3, [pc, #472]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a75      	ldr	r2, [pc, #468]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800407a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800407e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004080:	f7fe f9d0 	bl	8002424 <HAL_GetTick>
 8004084:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004088:	f7fe f9cc 	bl	8002424 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e195      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800409a:	4b6d      	ldr	r3, [pc, #436]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d021      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d11d      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040ba:	4b65      	ldr	r3, [pc, #404]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040c8:	4b61      	ldr	r3, [pc, #388]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ce:	0e1b      	lsrs	r3, r3, #24
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	019a      	lsls	r2, r3, #6
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	061b      	lsls	r3, r3, #24
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	071b      	lsls	r3, r3, #28
 80040ee:	4958      	ldr	r1, [pc, #352]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004120:	d129      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004122:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004130:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004136:	0f1b      	lsrs	r3, r3, #28
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	019a      	lsls	r2, r3, #6
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	071b      	lsls	r3, r3, #28
 8004156:	493e      	ldr	r1, [pc, #248]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800415e:	4b3c      	ldr	r3, [pc, #240]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004164:	f023 021f 	bic.w	r2, r3, #31
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	3b01      	subs	r3, #1
 800416e:	4938      	ldr	r1, [pc, #224]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d01d      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004182:	4b33      	ldr	r3, [pc, #204]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004188:	0e1b      	lsrs	r3, r3, #24
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004190:	4b2f      	ldr	r3, [pc, #188]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004196:	0f1b      	lsrs	r3, r3, #28
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	019a      	lsls	r2, r3, #6
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	061b      	lsls	r3, r3, #24
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	071b      	lsls	r3, r3, #28
 80041b6:	4926      	ldr	r1, [pc, #152]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d011      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	019a      	lsls	r2, r3, #6
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	491a      	ldr	r1, [pc, #104]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041ee:	4b18      	ldr	r3, [pc, #96]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a17      	ldr	r2, [pc, #92]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fa:	f7fe f913 	bl	8002424 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004202:	f7fe f90f 	bl	8002424 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b64      	cmp	r3, #100	; 0x64
 800420e:	d901      	bls.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0d8      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b01      	cmp	r3, #1
 8004224:	f040 80ce 	bne.w	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004234:	f7fe f8f6 	bl	8002424 <HAL_GetTick>
 8004238:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800423a:	e00b      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800423c:	f7fe f8f2 	bl	8002424 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	; 0x64
 8004248:	d904      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0bb      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004254:	4b5e      	ldr	r3, [pc, #376]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800425c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004260:	d0ec      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800427e:	2b00      	cmp	r3, #0
 8004280:	d02e      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d12a      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800428a:	4b51      	ldr	r3, [pc, #324]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004298:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	0f1b      	lsrs	r3, r3, #28
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	019a      	lsls	r2, r3, #6
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	061b      	lsls	r3, r3, #24
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	4944      	ldr	r1, [pc, #272]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042c6:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	493d      	ldr	r1, [pc, #244]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d022      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f4:	d11d      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	0e1b      	lsrs	r3, r3, #24
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004304:	4b32      	ldr	r3, [pc, #200]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	0f1b      	lsrs	r3, r3, #28
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	019a      	lsls	r2, r3, #6
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	431a      	orrs	r2, r3
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	431a      	orrs	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	071b      	lsls	r3, r3, #28
 800432a:	4929      	ldr	r1, [pc, #164]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d028      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	0e1b      	lsrs	r3, r3, #24
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800434c:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	0c1b      	lsrs	r3, r3, #16
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	019a      	lsls	r2, r3, #6
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	431a      	orrs	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	071b      	lsls	r3, r3, #28
 8004372:	4917      	ldr	r1, [pc, #92]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800437c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004380:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	4911      	ldr	r1, [pc, #68]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004390:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800439c:	f7fe f842 	bl	8002424 <HAL_GetTick>
 80043a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043a4:	f7fe f83e 	bl	8002424 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e007      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c2:	d1ef      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800

080043d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e09d      	b.n	8004522 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f6:	d009      	beq.n	800440c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	61da      	str	r2, [r3, #28]
 80043fe:	e005      	b.n	800440c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd fc58 	bl	8001cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800444c:	d902      	bls.n	8004454 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e002      	b.n	800445a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004458:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004462:	d007      	beq.n	8004474 <HAL_SPI_Init+0xa0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800446c:	d002      	beq.n	8004474 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	ea42 0103 	orr.w	r1, r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	0c1b      	lsrs	r3, r3, #16
 80044d0:	f003 0204 	and.w	r2, r3, #4
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044f0:	ea42 0103 	orr.w	r1, r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b088      	sub	sp, #32
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_SPI_Transmit+0x22>
 8004548:	2302      	movs	r3, #2
 800454a:	e158      	b.n	80047fe <HAL_SPI_Transmit+0x2d4>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004554:	f7fd ff66 	bl	8002424 <HAL_GetTick>
 8004558:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d002      	beq.n	8004570 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800456a:	2302      	movs	r3, #2
 800456c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800456e:	e13d      	b.n	80047ec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_SPI_Transmit+0x52>
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004580:	e134      	b.n	80047ec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2203      	movs	r2, #3
 8004586:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	88fa      	ldrh	r2, [r7, #6]
 800459a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045cc:	d10f      	bne.n	80045ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d007      	beq.n	800460c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800460a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004614:	d94b      	bls.n	80046ae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_SPI_Transmit+0xfa>
 800461e:	8afb      	ldrh	r3, [r7, #22]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d13e      	bne.n	80046a2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	1c9a      	adds	r2, r3, #2
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004648:	e02b      	b.n	80046a2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d112      	bne.n	800467e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	1c9a      	adds	r2, r3, #2
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800467c:	e011      	b.n	80046a2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467e:	f7fd fed1 	bl	8002424 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d803      	bhi.n	8004696 <HAL_SPI_Transmit+0x16c>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d102      	bne.n	800469c <HAL_SPI_Transmit+0x172>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046a0:	e0a4      	b.n	80047ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1ce      	bne.n	800464a <HAL_SPI_Transmit+0x120>
 80046ac:	e07c      	b.n	80047a8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_SPI_Transmit+0x192>
 80046b6:	8afb      	ldrh	r3, [r7, #22]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d170      	bne.n	800479e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d912      	bls.n	80046ec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	881a      	ldrh	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	1c9a      	adds	r2, r3, #2
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b02      	subs	r3, #2
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ea:	e058      	b.n	800479e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	7812      	ldrb	r2, [r2, #0]
 80046f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004712:	e044      	b.n	800479e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b02      	cmp	r3, #2
 8004720:	d12b      	bne.n	800477a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d912      	bls.n	8004752 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b02      	subs	r3, #2
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004750:	e025      	b.n	800479e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004778:	e011      	b.n	800479e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800477a:	f7fd fe53 	bl	8002424 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d803      	bhi.n	8004792 <HAL_SPI_Transmit+0x268>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d102      	bne.n	8004798 <HAL_SPI_Transmit+0x26e>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800479c:	e026      	b.n	80047ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1b5      	bne.n	8004714 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fd07 	bl	80051c0 <SPI_EndRxTxTransaction>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c6:	2300      	movs	r3, #0
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e000      	b.n	80047ec <HAL_SPI_Transmit+0x2c2>
  }

error:
 80047ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b088      	sub	sp, #32
 800480a:	af02      	add	r7, sp, #8
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	603b      	str	r3, [r7, #0]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004822:	d112      	bne.n	800484a <HAL_SPI_Receive+0x44>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10e      	bne.n	800484a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2204      	movs	r2, #4
 8004830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004834:	88fa      	ldrh	r2, [r7, #6]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f910 	bl	8004a66 <HAL_SPI_TransmitReceive>
 8004846:	4603      	mov	r3, r0
 8004848:	e109      	b.n	8004a5e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_SPI_Receive+0x52>
 8004854:	2302      	movs	r3, #2
 8004856:	e102      	b.n	8004a5e <HAL_SPI_Receive+0x258>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004860:	f7fd fde0 	bl	8002424 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	d002      	beq.n	8004878 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004872:	2302      	movs	r3, #2
 8004874:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004876:	e0e9      	b.n	8004a4c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_SPI_Receive+0x7e>
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004888:	e0e0      	b.n	8004a4c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2204      	movs	r2, #4
 800488e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048d4:	d908      	bls.n	80048e8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	e007      	b.n	80048f8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048f6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004900:	d10f      	bne.n	8004922 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004910:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004920:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d007      	beq.n	8004940 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800493e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004948:	d867      	bhi.n	8004a1a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800494a:	e030      	b.n	80049ae <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b01      	cmp	r3, #1
 8004958:	d117      	bne.n	800498a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f103 020c 	add.w	r2, r3, #12
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	7812      	ldrb	r2, [r2, #0]
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004988:	e011      	b.n	80049ae <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800498a:	f7fd fd4b 	bl	8002424 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d803      	bhi.n	80049a2 <HAL_SPI_Receive+0x19c>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d102      	bne.n	80049a8 <HAL_SPI_Receive+0x1a2>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049ac:	e04e      	b.n	8004a4c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1c8      	bne.n	800494c <HAL_SPI_Receive+0x146>
 80049ba:	e034      	b.n	8004a26 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d115      	bne.n	80049f6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	b292      	uxth	r2, r2
 80049d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	1c9a      	adds	r2, r3, #2
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80049f4:	e011      	b.n	8004a1a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f6:	f7fd fd15 	bl	8002424 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d803      	bhi.n	8004a0e <HAL_SPI_Receive+0x208>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d102      	bne.n	8004a14 <HAL_SPI_Receive+0x20e>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a18:	e018      	b.n	8004a4c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1ca      	bne.n	80049bc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fb4c 	bl	80050c8 <SPI_EndRxTransaction>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	75fb      	strb	r3, [r7, #23]
 8004a48:	e000      	b.n	8004a4c <HAL_SPI_Receive+0x246>
  }

error :
 8004a4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b08a      	sub	sp, #40	; 0x28
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a74:	2301      	movs	r3, #1
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_SPI_TransmitReceive+0x26>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e1fb      	b.n	8004e84 <HAL_SPI_TransmitReceive+0x41e>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a94:	f7fd fcc6 	bl	8002424 <HAL_GetTick>
 8004a98:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aa0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004aa8:	887b      	ldrh	r3, [r7, #2]
 8004aaa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004aac:	887b      	ldrh	r3, [r7, #2]
 8004aae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ab0:	7efb      	ldrb	r3, [r7, #27]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_SPI_TransmitReceive+0x6e>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004abc:	d106      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x66>
 8004ac6:	7efb      	ldrb	r3, [r7, #27]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d003      	beq.n	8004ad4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ad2:	e1cd      	b.n	8004e70 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x80>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x80>
 8004ae0:	887b      	ldrh	r3, [r7, #2]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004aec:	e1c0      	b.n	8004e70 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d003      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2205      	movs	r2, #5
 8004afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	887a      	ldrh	r2, [r7, #2]
 8004b12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	887a      	ldrh	r2, [r7, #2]
 8004b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	887a      	ldrh	r2, [r7, #2]
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	887a      	ldrh	r2, [r7, #2]
 8004b2e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b44:	d802      	bhi.n	8004b4c <HAL_SPI_TransmitReceive+0xe6>
 8004b46:	8a3b      	ldrh	r3, [r7, #16]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d908      	bls.n	8004b5e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	e007      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b6c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d007      	beq.n	8004b8c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b94:	d97c      	bls.n	8004c90 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_TransmitReceive+0x13e>
 8004b9e:	8a7b      	ldrh	r3, [r7, #18]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d169      	bne.n	8004c78 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	881a      	ldrh	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	1c9a      	adds	r2, r3, #2
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bc8:	e056      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d11b      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x1aa>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d016      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0x1aa>
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d113      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	881a      	ldrh	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	1c9a      	adds	r2, r3, #2
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d11c      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x1f2>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d016      	beq.n	8004c58 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	b292      	uxth	r2, r2
 8004c36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	1c9a      	adds	r2, r3, #2
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c54:	2301      	movs	r3, #1
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c58:	f7fd fbe4 	bl	8002424 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d807      	bhi.n	8004c78 <HAL_SPI_TransmitReceive+0x212>
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d003      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c76:	e0fb      	b.n	8004e70 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1a3      	bne.n	8004bca <HAL_SPI_TransmitReceive+0x164>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d19d      	bne.n	8004bca <HAL_SPI_TransmitReceive+0x164>
 8004c8e:	e0df      	b.n	8004e50 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x23a>
 8004c98:	8a7b      	ldrh	r3, [r7, #18]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	f040 80cb 	bne.w	8004e36 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d912      	bls.n	8004cd0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	1c9a      	adds	r2, r3, #2
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b02      	subs	r3, #2
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cce:	e0b2      	b.n	8004e36 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	7812      	ldrb	r2, [r2, #0]
 8004cdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf6:	e09e      	b.n	8004e36 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d134      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x30a>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d02f      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x30a>
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d12c      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d912      	bls.n	8004d46 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	881a      	ldrh	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b02      	subs	r3, #2
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d44:	e012      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	7812      	ldrb	r2, [r2, #0]
 8004d52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d148      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x3aa>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d042      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d923      	bls.n	8004dde <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	b292      	uxth	r2, r2
 8004da2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b02      	subs	r3, #2
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d81f      	bhi.n	8004e0c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dda:	605a      	str	r2, [r3, #4]
 8004ddc:	e016      	b.n	8004e0c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f103 020c 	add.w	r2, r3, #12
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	7812      	ldrb	r2, [r2, #0]
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e10:	f7fd fb08 	bl	8002424 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d803      	bhi.n	8004e28 <HAL_SPI_TransmitReceive+0x3c2>
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d102      	bne.n	8004e2e <HAL_SPI_TransmitReceive+0x3c8>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e34:	e01c      	b.n	8004e70 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f47f af5b 	bne.w	8004cf8 <HAL_SPI_TransmitReceive+0x292>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f47f af54 	bne.w	8004cf8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f9b3 	bl	80051c0 <SPI_EndRxTxTransaction>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	661a      	str	r2, [r3, #96]	; 0x60
 8004e6c:	e000      	b.n	8004e70 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004e6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3728      	adds	r7, #40	; 0x28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e9c:	f7fd fac2 	bl	8002424 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eac:	f7fd faba 	bl	8002424 <HAL_GetTick>
 8004eb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	015b      	lsls	r3, r3, #5
 8004eb8:	0d1b      	lsrs	r3, r3, #20
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	fb02 f303 	mul.w	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ec2:	e054      	b.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eca:	d050      	beq.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ecc:	f7fd faaa 	bl	8002424 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d902      	bls.n	8004ee2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d13d      	bne.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efa:	d111      	bne.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f04:	d004      	beq.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0e:	d107      	bne.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d10f      	bne.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e017      	b.n	8004f8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	bf0c      	ite	eq
 8004f7e:	2301      	moveq	r3, #1
 8004f80:	2300      	movne	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d19b      	bne.n	8004ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000000 	.word	0x20000000

08004f9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fae:	f7fd fa39 	bl	8002424 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	4413      	add	r3, r2
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fbe:	f7fd fa31 	bl	8002424 <HAL_GetTick>
 8004fc2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fcc:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	00da      	lsls	r2, r3, #3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	0d1b      	lsrs	r3, r3, #20
 8004fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fe4:	e060      	b.n	80050a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fec:	d107      	bne.n	8004ffe <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d050      	beq.n	80050a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005006:	f7fd fa0d 	bl	8002424 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005012:	429a      	cmp	r2, r3
 8005014:	d902      	bls.n	800501c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	d13d      	bne.n	8005098 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800502a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005034:	d111      	bne.n	800505a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800503e:	d004      	beq.n	800504a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005048:	d107      	bne.n	800505a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005058:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005062:	d10f      	bne.n	8005084 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005082:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e010      	b.n	80050ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d196      	bne.n	8004fe6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3728      	adds	r7, #40	; 0x28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000000 	.word	0x20000000

080050c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050dc:	d111      	bne.n	8005102 <SPI_EndRxTransaction+0x3a>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e6:	d004      	beq.n	80050f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f0:	d107      	bne.n	8005102 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005100:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510a:	d112      	bne.n	8005132 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff feb8 	bl	8004e8c <SPI_WaitFlagStateUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d021      	beq.n	8005166 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005126:	f043 0220 	orr.w	r2, r3, #32
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e03d      	b.n	80051ae <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005132:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <SPI_EndRxTransaction+0xf0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a21      	ldr	r2, [pc, #132]	; (80051bc <SPI_EndRxTransaction+0xf4>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	0d5b      	lsrs	r3, r3, #21
 800513e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3b01      	subs	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b80      	cmp	r3, #128	; 0x80
 8005160:	d0f2      	beq.n	8005148 <SPI_EndRxTransaction+0x80>
 8005162:	e000      	b.n	8005166 <SPI_EndRxTransaction+0x9e>
        break;
 8005164:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516e:	d11d      	bne.n	80051ac <SPI_EndRxTransaction+0xe4>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005178:	d004      	beq.n	8005184 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	d113      	bne.n	80051ac <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff ff03 	bl	8004f9c <SPI_WaitFifoStateUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e000      	b.n	80051ae <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000000 	.word	0x20000000
 80051bc:	165e9f81 	.word	0x165e9f81

080051c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff fedf 	bl	8004f9c <SPI_WaitFifoStateUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e8:	f043 0220 	orr.w	r2, r3, #32
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e046      	b.n	8005282 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051f4:	4b25      	ldr	r3, [pc, #148]	; (800528c <SPI_EndRxTxTransaction+0xcc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a25      	ldr	r2, [pc, #148]	; (8005290 <SPI_EndRxTxTransaction+0xd0>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	0d5b      	lsrs	r3, r3, #21
 8005200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005204:	fb02 f303 	mul.w	r3, r2, r3
 8005208:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005212:	d112      	bne.n	800523a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2200      	movs	r2, #0
 800521c:	2180      	movs	r1, #128	; 0x80
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff fe34 	bl	8004e8c <SPI_WaitFlagStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e023      	b.n	8005282 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	3b01      	subs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b80      	cmp	r3, #128	; 0x80
 8005252:	d0f2      	beq.n	800523a <SPI_EndRxTxTransaction+0x7a>
 8005254:	e000      	b.n	8005258 <SPI_EndRxTxTransaction+0x98>
        break;
 8005256:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff fe99 	bl	8004f9c <SPI_WaitFifoStateUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e000      	b.n	8005282 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000000 	.word	0x20000000
 8005290:	165e9f81 	.word	0x165e9f81

08005294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e049      	b.n	800533a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fc ff52 	bl	8002164 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f000 fa7e 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e049      	b.n	80053e8 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fc feb7 	bl	80020dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 fa27 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_TIM_IC_ConfigChannel+0x1e>
 800540a:	2302      	movs	r3, #2
 800540c:	e088      	b.n	8005520 <HAL_TIM_IC_ConfigChannel+0x130>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f000 fd64 	bl	8005ef8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 020c 	bic.w	r2, r2, #12
 800543e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6999      	ldr	r1, [r3, #24]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	619a      	str	r2, [r3, #24]
 8005452:	e060      	b.n	8005516 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d11c      	bne.n	8005494 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6819      	ldr	r1, [r3, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f000 fde8 	bl	800603e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800547c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6999      	ldr	r1, [r3, #24]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
 8005492:	e040      	b.n	8005516 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b08      	cmp	r3, #8
 8005498:	d11b      	bne.n	80054d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f000 fe35 	bl	8006118 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 020c 	bic.w	r2, r2, #12
 80054bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69d9      	ldr	r1, [r3, #28]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
 80054d0:	e021      	b.n	8005516 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d11c      	bne.n	8005512 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6819      	ldr	r1, [r3, #0]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f000 fe52 	bl	8006190 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69d9      	ldr	r1, [r3, #28]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	61da      	str	r2, [r3, #28]
 8005510:	e001      	b.n	8005516 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800551e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005542:	2302      	movs	r3, #2
 8005544:	e0ff      	b.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b14      	cmp	r3, #20
 8005552:	f200 80f0 	bhi.w	8005736 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	080055b1 	.word	0x080055b1
 8005560:	08005737 	.word	0x08005737
 8005564:	08005737 	.word	0x08005737
 8005568:	08005737 	.word	0x08005737
 800556c:	080055f1 	.word	0x080055f1
 8005570:	08005737 	.word	0x08005737
 8005574:	08005737 	.word	0x08005737
 8005578:	08005737 	.word	0x08005737
 800557c:	08005633 	.word	0x08005633
 8005580:	08005737 	.word	0x08005737
 8005584:	08005737 	.word	0x08005737
 8005588:	08005737 	.word	0x08005737
 800558c:	08005673 	.word	0x08005673
 8005590:	08005737 	.word	0x08005737
 8005594:	08005737 	.word	0x08005737
 8005598:	08005737 	.word	0x08005737
 800559c:	080056b5 	.word	0x080056b5
 80055a0:	08005737 	.word	0x08005737
 80055a4:	08005737 	.word	0x08005737
 80055a8:	08005737 	.word	0x08005737
 80055ac:	080056f5 	.word	0x080056f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f9ac 	bl	8005914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0208 	orr.w	r2, r2, #8
 80055ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0204 	bic.w	r2, r2, #4
 80055da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6999      	ldr	r1, [r3, #24]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	619a      	str	r2, [r3, #24]
      break;
 80055ee:	e0a5      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f9fe 	bl	80059f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	619a      	str	r2, [r3, #24]
      break;
 8005630:	e084      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fa55 	bl	8005ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0208 	orr.w	r2, r2, #8
 800564c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0204 	bic.w	r2, r2, #4
 800565c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69d9      	ldr	r1, [r3, #28]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	61da      	str	r2, [r3, #28]
      break;
 8005670:	e064      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 faab 	bl	8005bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	021a      	lsls	r2, r3, #8
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	61da      	str	r2, [r3, #28]
      break;
 80056b2:	e043      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fae2 	bl	8005c84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0208 	orr.w	r2, r2, #8
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0204 	bic.w	r2, r2, #4
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056f2:	e023      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fb14 	bl	8005d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800570e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005734:	e002      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	75fb      	strb	r3, [r7, #23]
      break;
 800573a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop

08005750 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005764:	2302      	movs	r3, #2
 8005766:	e031      	b.n	80057cc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fb28 	bl	8005dd0 <TIM_SlaveTimer_SetConfig>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e018      	b.n	80057cc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057b8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a40      	ldr	r2, [pc, #256]	; (80058e8 <TIM_Base_SetConfig+0x114>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f2:	d00f      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3d      	ldr	r2, [pc, #244]	; (80058ec <TIM_Base_SetConfig+0x118>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3c      	ldr	r2, [pc, #240]	; (80058f0 <TIM_Base_SetConfig+0x11c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3b      	ldr	r2, [pc, #236]	; (80058f4 <TIM_Base_SetConfig+0x120>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3a      	ldr	r2, [pc, #232]	; (80058f8 <TIM_Base_SetConfig+0x124>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d108      	bne.n	8005826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <TIM_Base_SetConfig+0x114>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d02b      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005834:	d027      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2c      	ldr	r2, [pc, #176]	; (80058ec <TIM_Base_SetConfig+0x118>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d023      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2b      	ldr	r2, [pc, #172]	; (80058f0 <TIM_Base_SetConfig+0x11c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d01f      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <TIM_Base_SetConfig+0x120>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01b      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <TIM_Base_SetConfig+0x124>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d017      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a28      	ldr	r2, [pc, #160]	; (80058fc <TIM_Base_SetConfig+0x128>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a27      	ldr	r2, [pc, #156]	; (8005900 <TIM_Base_SetConfig+0x12c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00f      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a26      	ldr	r2, [pc, #152]	; (8005904 <TIM_Base_SetConfig+0x130>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00b      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a25      	ldr	r2, [pc, #148]	; (8005908 <TIM_Base_SetConfig+0x134>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d007      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a24      	ldr	r2, [pc, #144]	; (800590c <TIM_Base_SetConfig+0x138>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a23      	ldr	r2, [pc, #140]	; (8005910 <TIM_Base_SetConfig+0x13c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d108      	bne.n	8005898 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <TIM_Base_SetConfig+0x114>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0xf8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <TIM_Base_SetConfig+0x124>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d103      	bne.n	80058d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	615a      	str	r2, [r3, #20]
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800
 8005908:	40001800 	.word	0x40001800
 800590c:	40001c00 	.word	0x40001c00
 8005910:	40002000 	.word	0x40002000

08005914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0201 	bic.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <TIM_OC1_SetConfig+0xd8>)
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f023 0302 	bic.w	r3, r3, #2
 800595c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a21      	ldr	r2, [pc, #132]	; (80059f0 <TIM_OC1_SetConfig+0xdc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC1_SetConfig+0x64>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <TIM_OC1_SetConfig+0xe0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10c      	bne.n	8005992 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0308 	bic.w	r3, r3, #8
 800597e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f023 0304 	bic.w	r3, r3, #4
 8005990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <TIM_OC1_SetConfig+0xdc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC1_SetConfig+0x8e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <TIM_OC1_SetConfig+0xe0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d111      	bne.n	80059c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	fffeff8f 	.word	0xfffeff8f
 80059f0:	40010000 	.word	0x40010000
 80059f4:	40010400 	.word	0x40010400

080059f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f023 0210 	bic.w	r2, r3, #16
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4b2e      	ldr	r3, [pc, #184]	; (8005adc <TIM_OC2_SetConfig+0xe4>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f023 0320 	bic.w	r3, r3, #32
 8005a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a23      	ldr	r2, [pc, #140]	; (8005ae0 <TIM_OC2_SetConfig+0xe8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC2_SetConfig+0x68>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a22      	ldr	r2, [pc, #136]	; (8005ae4 <TIM_OC2_SetConfig+0xec>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10d      	bne.n	8005a7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <TIM_OC2_SetConfig+0xe8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d003      	beq.n	8005a8c <TIM_OC2_SetConfig+0x94>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <TIM_OC2_SetConfig+0xec>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d113      	bne.n	8005ab4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	feff8fff 	.word	0xfeff8fff
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40010400 	.word	0x40010400

08005ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4b2d      	ldr	r3, [pc, #180]	; (8005bc8 <TIM_OC3_SetConfig+0xe0>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0303 	bic.w	r3, r3, #3
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a22      	ldr	r2, [pc, #136]	; (8005bcc <TIM_OC3_SetConfig+0xe4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_OC3_SetConfig+0x66>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <TIM_OC3_SetConfig+0xe8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d10d      	bne.n	8005b6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <TIM_OC3_SetConfig+0xe4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_OC3_SetConfig+0x92>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a16      	ldr	r2, [pc, #88]	; (8005bd0 <TIM_OC3_SetConfig+0xe8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d113      	bne.n	8005ba2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	fffeff8f 	.word	0xfffeff8f
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <TIM_OC4_SetConfig+0xa4>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	031b      	lsls	r3, r3, #12
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <TIM_OC4_SetConfig+0xa8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC4_SetConfig+0x68>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <TIM_OC4_SetConfig+0xac>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d109      	bne.n	8005c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	019b      	lsls	r3, r3, #6
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	feff8fff 	.word	0xfeff8fff
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <TIM_OC5_SetConfig+0x98>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a12      	ldr	r2, [pc, #72]	; (8005d20 <TIM_OC5_SetConfig+0x9c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC5_SetConfig+0x5e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a11      	ldr	r2, [pc, #68]	; (8005d24 <TIM_OC5_SetConfig+0xa0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d109      	bne.n	8005cf6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	621a      	str	r2, [r3, #32]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	fffeff8f 	.word	0xfffeff8f
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40010400 	.word	0x40010400

08005d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <TIM_OC6_SetConfig+0x9c>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	051b      	lsls	r3, r3, #20
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <TIM_OC6_SetConfig+0xa0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC6_SetConfig+0x60>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a12      	ldr	r2, [pc, #72]	; (8005dcc <TIM_OC6_SetConfig+0xa4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d109      	bne.n	8005d9c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	feff8fff 	.word	0xfeff8fff
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010400 	.word	0x40010400

08005dd0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dec:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4b3e      	ldr	r3, [pc, #248]	; (8005ef4 <TIM_SlaveTimer_SetConfig+0x124>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b70      	cmp	r3, #112	; 0x70
 8005e18:	d01a      	beq.n	8005e50 <TIM_SlaveTimer_SetConfig+0x80>
 8005e1a:	2b70      	cmp	r3, #112	; 0x70
 8005e1c:	d860      	bhi.n	8005ee0 <TIM_SlaveTimer_SetConfig+0x110>
 8005e1e:	2b60      	cmp	r3, #96	; 0x60
 8005e20:	d054      	beq.n	8005ecc <TIM_SlaveTimer_SetConfig+0xfc>
 8005e22:	2b60      	cmp	r3, #96	; 0x60
 8005e24:	d85c      	bhi.n	8005ee0 <TIM_SlaveTimer_SetConfig+0x110>
 8005e26:	2b50      	cmp	r3, #80	; 0x50
 8005e28:	d046      	beq.n	8005eb8 <TIM_SlaveTimer_SetConfig+0xe8>
 8005e2a:	2b50      	cmp	r3, #80	; 0x50
 8005e2c:	d858      	bhi.n	8005ee0 <TIM_SlaveTimer_SetConfig+0x110>
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d019      	beq.n	8005e66 <TIM_SlaveTimer_SetConfig+0x96>
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d854      	bhi.n	8005ee0 <TIM_SlaveTimer_SetConfig+0x110>
 8005e36:	2b30      	cmp	r3, #48	; 0x30
 8005e38:	d055      	beq.n	8005ee6 <TIM_SlaveTimer_SetConfig+0x116>
 8005e3a:	2b30      	cmp	r3, #48	; 0x30
 8005e3c:	d850      	bhi.n	8005ee0 <TIM_SlaveTimer_SetConfig+0x110>
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d051      	beq.n	8005ee6 <TIM_SlaveTimer_SetConfig+0x116>
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d84c      	bhi.n	8005ee0 <TIM_SlaveTimer_SetConfig+0x110>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d04d      	beq.n	8005ee6 <TIM_SlaveTimer_SetConfig+0x116>
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d04b      	beq.n	8005ee6 <TIM_SlaveTimer_SetConfig+0x116>
 8005e4e:	e047      	b.n	8005ee0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68d9      	ldr	r1, [r3, #12]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f000 f9d3 	bl	800620a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005e64:	e040      	b.n	8005ee8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d101      	bne.n	8005e72 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e03b      	b.n	8005eea <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6a1a      	ldr	r2, [r3, #32]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e98:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	621a      	str	r2, [r3, #32]
      break;
 8005eb6:	e017      	b.n	8005ee8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6899      	ldr	r1, [r3, #8]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f000 f88b 	bl	8005fe0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005eca:	e00d      	b.n	8005ee8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	6899      	ldr	r1, [r3, #8]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f000 f8ed 	bl	80060b8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005ede:	e003      	b.n	8005ee8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee4:	e000      	b.n	8005ee8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005ee6:	bf00      	nop
  }

  return status;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	fffefff8 	.word	0xfffefff8

08005ef8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f023 0201 	bic.w	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a28      	ldr	r2, [pc, #160]	; (8005fc4 <TIM_TI1_SetConfig+0xcc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01b      	beq.n	8005f5e <TIM_TI1_SetConfig+0x66>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2c:	d017      	beq.n	8005f5e <TIM_TI1_SetConfig+0x66>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a25      	ldr	r2, [pc, #148]	; (8005fc8 <TIM_TI1_SetConfig+0xd0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <TIM_TI1_SetConfig+0x66>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a24      	ldr	r2, [pc, #144]	; (8005fcc <TIM_TI1_SetConfig+0xd4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00f      	beq.n	8005f5e <TIM_TI1_SetConfig+0x66>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a23      	ldr	r2, [pc, #140]	; (8005fd0 <TIM_TI1_SetConfig+0xd8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <TIM_TI1_SetConfig+0x66>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a22      	ldr	r2, [pc, #136]	; (8005fd4 <TIM_TI1_SetConfig+0xdc>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d007      	beq.n	8005f5e <TIM_TI1_SetConfig+0x66>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <TIM_TI1_SetConfig+0xe0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_TI1_SetConfig+0x66>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <TIM_TI1_SetConfig+0xe4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <TIM_TI1_SetConfig+0x6a>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <TIM_TI1_SetConfig+0x6c>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e003      	b.n	8005f82 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f023 030a 	bic.w	r3, r3, #10
 8005f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f003 030a 	and.w	r3, r3, #10
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40010000 	.word	0x40010000
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40000800 	.word	0x40000800
 8005fd0:	40000c00 	.word	0x40000c00
 8005fd4:	40010400 	.word	0x40010400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40001800 	.word	0x40001800

08005fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f023 0201 	bic.w	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800600a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 030a 	bic.w	r3, r3, #10
 800601c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800603e:	b480      	push	{r7}
 8006040:	b087      	sub	sp, #28
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	f023 0210 	bic.w	r2, r3, #16
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800607c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	031b      	lsls	r3, r3, #12
 8006082:	b29b      	uxth	r3, r3
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006090:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	621a      	str	r2, [r3, #32]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f023 0210 	bic.w	r2, r3, #16
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	031b      	lsls	r3, r3, #12
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	621a      	str	r2, [r3, #32]
}
 800610c:	bf00      	nop
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 0303 	bic.w	r3, r3, #3
 8006144:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	b2db      	uxtb	r3, r3
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006168:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	031b      	lsls	r3, r3, #12
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	031b      	lsls	r3, r3, #12
 80061e8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800620a:	b480      	push	{r7}
 800620c:	b087      	sub	sp, #28
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006224:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	021a      	lsls	r2, r3, #8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	431a      	orrs	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4313      	orrs	r3, r2
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	609a      	str	r2, [r3, #8]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e06d      	b.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a30      	ldr	r2, [pc, #192]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d108      	bne.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800629e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a20      	ldr	r2, [pc, #128]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d022      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d6:	d01d      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d018      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1c      	ldr	r2, [pc, #112]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1a      	ldr	r2, [pc, #104]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00e      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a15      	ldr	r2, [pc, #84]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d009      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a16      	ldr	r2, [pc, #88]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a15      	ldr	r2, [pc, #84]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10c      	bne.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800631a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40014000 	.word	0x40014000
 8006364:	40001800 	.word	0x40001800

08006368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e040      	b.n	80063fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fb ff72 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2224      	movs	r2, #36	; 0x24
 8006394:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0201 	bic.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8c0 	bl	800652c <UART_SetConfig>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e022      	b.n	80063fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fb18 	bl	80069f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fb9f 	bl	8006b38 <UART_CheckIdleState>
 80063fa:	4603      	mov	r3, r0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08a      	sub	sp, #40	; 0x28
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006418:	2b20      	cmp	r3, #32
 800641a:	f040 8081 	bne.w	8006520 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_UART_Transmit+0x26>
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e079      	b.n	8006522 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UART_Transmit+0x38>
 8006438:	2302      	movs	r3, #2
 800643a:	e072      	b.n	8006522 <HAL_UART_Transmit+0x11e>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2221      	movs	r2, #33	; 0x21
 8006450:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006452:	f7fb ffe7 	bl	8002424 <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006470:	d108      	bne.n	8006484 <HAL_UART_Transmit+0x80>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e003      	b.n	800648c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006488:	2300      	movs	r3, #0
 800648a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006494:	e02c      	b.n	80064f0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2200      	movs	r2, #0
 800649e:	2180      	movs	r1, #128	; 0x80
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fb92 	bl	8006bca <UART_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e038      	b.n	8006522 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	3302      	adds	r3, #2
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	e007      	b.n	80064de <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	3301      	adds	r3, #1
 80064dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1cc      	bne.n	8006496 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	2140      	movs	r1, #64	; 0x40
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fb5f 	bl	8006bca <UART_WaitOnFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e005      	b.n	8006522 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	e000      	b.n	8006522 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
  }
}
 8006522:	4618      	mov	r0, r3
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4ba6      	ldr	r3, [pc, #664]	; (80067f0 <UART_SetConfig+0x2c4>)
 8006558:	4013      	ands	r3, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	6979      	ldr	r1, [r7, #20]
 8006560:	430b      	orrs	r3, r1
 8006562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	430a      	orrs	r2, r1
 800659c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a94      	ldr	r2, [pc, #592]	; (80067f4 <UART_SetConfig+0x2c8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d120      	bne.n	80065ea <UART_SetConfig+0xbe>
 80065a8:	4b93      	ldr	r3, [pc, #588]	; (80067f8 <UART_SetConfig+0x2cc>)
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d816      	bhi.n	80065e4 <UART_SetConfig+0xb8>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <UART_SetConfig+0x90>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	080065d9 	.word	0x080065d9
 80065c4:	080065d3 	.word	0x080065d3
 80065c8:	080065df 	.word	0x080065df
 80065cc:	2301      	movs	r3, #1
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e150      	b.n	8006874 <UART_SetConfig+0x348>
 80065d2:	2302      	movs	r3, #2
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e14d      	b.n	8006874 <UART_SetConfig+0x348>
 80065d8:	2304      	movs	r3, #4
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e14a      	b.n	8006874 <UART_SetConfig+0x348>
 80065de:	2308      	movs	r3, #8
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e147      	b.n	8006874 <UART_SetConfig+0x348>
 80065e4:	2310      	movs	r3, #16
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e144      	b.n	8006874 <UART_SetConfig+0x348>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a83      	ldr	r2, [pc, #524]	; (80067fc <UART_SetConfig+0x2d0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d132      	bne.n	800665a <UART_SetConfig+0x12e>
 80065f4:	4b80      	ldr	r3, [pc, #512]	; (80067f8 <UART_SetConfig+0x2cc>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	f003 030c 	and.w	r3, r3, #12
 80065fe:	2b0c      	cmp	r3, #12
 8006600:	d828      	bhi.n	8006654 <UART_SetConfig+0x128>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0xdc>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	0800663d 	.word	0x0800663d
 800660c:	08006655 	.word	0x08006655
 8006610:	08006655 	.word	0x08006655
 8006614:	08006655 	.word	0x08006655
 8006618:	08006649 	.word	0x08006649
 800661c:	08006655 	.word	0x08006655
 8006620:	08006655 	.word	0x08006655
 8006624:	08006655 	.word	0x08006655
 8006628:	08006643 	.word	0x08006643
 800662c:	08006655 	.word	0x08006655
 8006630:	08006655 	.word	0x08006655
 8006634:	08006655 	.word	0x08006655
 8006638:	0800664f 	.word	0x0800664f
 800663c:	2300      	movs	r3, #0
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e118      	b.n	8006874 <UART_SetConfig+0x348>
 8006642:	2302      	movs	r3, #2
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e115      	b.n	8006874 <UART_SetConfig+0x348>
 8006648:	2304      	movs	r3, #4
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e112      	b.n	8006874 <UART_SetConfig+0x348>
 800664e:	2308      	movs	r3, #8
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e10f      	b.n	8006874 <UART_SetConfig+0x348>
 8006654:	2310      	movs	r3, #16
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e10c      	b.n	8006874 <UART_SetConfig+0x348>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a68      	ldr	r2, [pc, #416]	; (8006800 <UART_SetConfig+0x2d4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d120      	bne.n	80066a6 <UART_SetConfig+0x17a>
 8006664:	4b64      	ldr	r3, [pc, #400]	; (80067f8 <UART_SetConfig+0x2cc>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800666e:	2b30      	cmp	r3, #48	; 0x30
 8006670:	d013      	beq.n	800669a <UART_SetConfig+0x16e>
 8006672:	2b30      	cmp	r3, #48	; 0x30
 8006674:	d814      	bhi.n	80066a0 <UART_SetConfig+0x174>
 8006676:	2b20      	cmp	r3, #32
 8006678:	d009      	beq.n	800668e <UART_SetConfig+0x162>
 800667a:	2b20      	cmp	r3, #32
 800667c:	d810      	bhi.n	80066a0 <UART_SetConfig+0x174>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <UART_SetConfig+0x15c>
 8006682:	2b10      	cmp	r3, #16
 8006684:	d006      	beq.n	8006694 <UART_SetConfig+0x168>
 8006686:	e00b      	b.n	80066a0 <UART_SetConfig+0x174>
 8006688:	2300      	movs	r3, #0
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e0f2      	b.n	8006874 <UART_SetConfig+0x348>
 800668e:	2302      	movs	r3, #2
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e0ef      	b.n	8006874 <UART_SetConfig+0x348>
 8006694:	2304      	movs	r3, #4
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e0ec      	b.n	8006874 <UART_SetConfig+0x348>
 800669a:	2308      	movs	r3, #8
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e0e9      	b.n	8006874 <UART_SetConfig+0x348>
 80066a0:	2310      	movs	r3, #16
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e0e6      	b.n	8006874 <UART_SetConfig+0x348>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a56      	ldr	r2, [pc, #344]	; (8006804 <UART_SetConfig+0x2d8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d120      	bne.n	80066f2 <UART_SetConfig+0x1c6>
 80066b0:	4b51      	ldr	r3, [pc, #324]	; (80067f8 <UART_SetConfig+0x2cc>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066ba:	2bc0      	cmp	r3, #192	; 0xc0
 80066bc:	d013      	beq.n	80066e6 <UART_SetConfig+0x1ba>
 80066be:	2bc0      	cmp	r3, #192	; 0xc0
 80066c0:	d814      	bhi.n	80066ec <UART_SetConfig+0x1c0>
 80066c2:	2b80      	cmp	r3, #128	; 0x80
 80066c4:	d009      	beq.n	80066da <UART_SetConfig+0x1ae>
 80066c6:	2b80      	cmp	r3, #128	; 0x80
 80066c8:	d810      	bhi.n	80066ec <UART_SetConfig+0x1c0>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <UART_SetConfig+0x1a8>
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d006      	beq.n	80066e0 <UART_SetConfig+0x1b4>
 80066d2:	e00b      	b.n	80066ec <UART_SetConfig+0x1c0>
 80066d4:	2300      	movs	r3, #0
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e0cc      	b.n	8006874 <UART_SetConfig+0x348>
 80066da:	2302      	movs	r3, #2
 80066dc:	77fb      	strb	r3, [r7, #31]
 80066de:	e0c9      	b.n	8006874 <UART_SetConfig+0x348>
 80066e0:	2304      	movs	r3, #4
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e0c6      	b.n	8006874 <UART_SetConfig+0x348>
 80066e6:	2308      	movs	r3, #8
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e0c3      	b.n	8006874 <UART_SetConfig+0x348>
 80066ec:	2310      	movs	r3, #16
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e0c0      	b.n	8006874 <UART_SetConfig+0x348>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a44      	ldr	r2, [pc, #272]	; (8006808 <UART_SetConfig+0x2dc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d125      	bne.n	8006748 <UART_SetConfig+0x21c>
 80066fc:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <UART_SetConfig+0x2cc>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800670a:	d017      	beq.n	800673c <UART_SetConfig+0x210>
 800670c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006710:	d817      	bhi.n	8006742 <UART_SetConfig+0x216>
 8006712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006716:	d00b      	beq.n	8006730 <UART_SetConfig+0x204>
 8006718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671c:	d811      	bhi.n	8006742 <UART_SetConfig+0x216>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <UART_SetConfig+0x1fe>
 8006722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006726:	d006      	beq.n	8006736 <UART_SetConfig+0x20a>
 8006728:	e00b      	b.n	8006742 <UART_SetConfig+0x216>
 800672a:	2300      	movs	r3, #0
 800672c:	77fb      	strb	r3, [r7, #31]
 800672e:	e0a1      	b.n	8006874 <UART_SetConfig+0x348>
 8006730:	2302      	movs	r3, #2
 8006732:	77fb      	strb	r3, [r7, #31]
 8006734:	e09e      	b.n	8006874 <UART_SetConfig+0x348>
 8006736:	2304      	movs	r3, #4
 8006738:	77fb      	strb	r3, [r7, #31]
 800673a:	e09b      	b.n	8006874 <UART_SetConfig+0x348>
 800673c:	2308      	movs	r3, #8
 800673e:	77fb      	strb	r3, [r7, #31]
 8006740:	e098      	b.n	8006874 <UART_SetConfig+0x348>
 8006742:	2310      	movs	r3, #16
 8006744:	77fb      	strb	r3, [r7, #31]
 8006746:	e095      	b.n	8006874 <UART_SetConfig+0x348>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a2f      	ldr	r2, [pc, #188]	; (800680c <UART_SetConfig+0x2e0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d125      	bne.n	800679e <UART_SetConfig+0x272>
 8006752:	4b29      	ldr	r3, [pc, #164]	; (80067f8 <UART_SetConfig+0x2cc>)
 8006754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800675c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006760:	d017      	beq.n	8006792 <UART_SetConfig+0x266>
 8006762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006766:	d817      	bhi.n	8006798 <UART_SetConfig+0x26c>
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676c:	d00b      	beq.n	8006786 <UART_SetConfig+0x25a>
 800676e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006772:	d811      	bhi.n	8006798 <UART_SetConfig+0x26c>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <UART_SetConfig+0x254>
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677c:	d006      	beq.n	800678c <UART_SetConfig+0x260>
 800677e:	e00b      	b.n	8006798 <UART_SetConfig+0x26c>
 8006780:	2301      	movs	r3, #1
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e076      	b.n	8006874 <UART_SetConfig+0x348>
 8006786:	2302      	movs	r3, #2
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e073      	b.n	8006874 <UART_SetConfig+0x348>
 800678c:	2304      	movs	r3, #4
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e070      	b.n	8006874 <UART_SetConfig+0x348>
 8006792:	2308      	movs	r3, #8
 8006794:	77fb      	strb	r3, [r7, #31]
 8006796:	e06d      	b.n	8006874 <UART_SetConfig+0x348>
 8006798:	2310      	movs	r3, #16
 800679a:	77fb      	strb	r3, [r7, #31]
 800679c:	e06a      	b.n	8006874 <UART_SetConfig+0x348>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <UART_SetConfig+0x2e4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d138      	bne.n	800681a <UART_SetConfig+0x2ee>
 80067a8:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <UART_SetConfig+0x2cc>)
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067b6:	d017      	beq.n	80067e8 <UART_SetConfig+0x2bc>
 80067b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067bc:	d82a      	bhi.n	8006814 <UART_SetConfig+0x2e8>
 80067be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c2:	d00b      	beq.n	80067dc <UART_SetConfig+0x2b0>
 80067c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c8:	d824      	bhi.n	8006814 <UART_SetConfig+0x2e8>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <UART_SetConfig+0x2aa>
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	d006      	beq.n	80067e2 <UART_SetConfig+0x2b6>
 80067d4:	e01e      	b.n	8006814 <UART_SetConfig+0x2e8>
 80067d6:	2300      	movs	r3, #0
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e04b      	b.n	8006874 <UART_SetConfig+0x348>
 80067dc:	2302      	movs	r3, #2
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e048      	b.n	8006874 <UART_SetConfig+0x348>
 80067e2:	2304      	movs	r3, #4
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e045      	b.n	8006874 <UART_SetConfig+0x348>
 80067e8:	2308      	movs	r3, #8
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e042      	b.n	8006874 <UART_SetConfig+0x348>
 80067ee:	bf00      	nop
 80067f0:	efff69f3 	.word	0xefff69f3
 80067f4:	40011000 	.word	0x40011000
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40004400 	.word	0x40004400
 8006800:	40004800 	.word	0x40004800
 8006804:	40004c00 	.word	0x40004c00
 8006808:	40005000 	.word	0x40005000
 800680c:	40011400 	.word	0x40011400
 8006810:	40007800 	.word	0x40007800
 8006814:	2310      	movs	r3, #16
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e02c      	b.n	8006874 <UART_SetConfig+0x348>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a72      	ldr	r2, [pc, #456]	; (80069e8 <UART_SetConfig+0x4bc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d125      	bne.n	8006870 <UART_SetConfig+0x344>
 8006824:	4b71      	ldr	r3, [pc, #452]	; (80069ec <UART_SetConfig+0x4c0>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800682e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006832:	d017      	beq.n	8006864 <UART_SetConfig+0x338>
 8006834:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006838:	d817      	bhi.n	800686a <UART_SetConfig+0x33e>
 800683a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683e:	d00b      	beq.n	8006858 <UART_SetConfig+0x32c>
 8006840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006844:	d811      	bhi.n	800686a <UART_SetConfig+0x33e>
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <UART_SetConfig+0x326>
 800684a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800684e:	d006      	beq.n	800685e <UART_SetConfig+0x332>
 8006850:	e00b      	b.n	800686a <UART_SetConfig+0x33e>
 8006852:	2300      	movs	r3, #0
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e00d      	b.n	8006874 <UART_SetConfig+0x348>
 8006858:	2302      	movs	r3, #2
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e00a      	b.n	8006874 <UART_SetConfig+0x348>
 800685e:	2304      	movs	r3, #4
 8006860:	77fb      	strb	r3, [r7, #31]
 8006862:	e007      	b.n	8006874 <UART_SetConfig+0x348>
 8006864:	2308      	movs	r3, #8
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e004      	b.n	8006874 <UART_SetConfig+0x348>
 800686a:	2310      	movs	r3, #16
 800686c:	77fb      	strb	r3, [r7, #31]
 800686e:	e001      	b.n	8006874 <UART_SetConfig+0x348>
 8006870:	2310      	movs	r3, #16
 8006872:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687c:	d15b      	bne.n	8006936 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800687e:	7ffb      	ldrb	r3, [r7, #31]
 8006880:	2b08      	cmp	r3, #8
 8006882:	d828      	bhi.n	80068d6 <UART_SetConfig+0x3aa>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <UART_SetConfig+0x360>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	080068b1 	.word	0x080068b1
 8006890:	080068b9 	.word	0x080068b9
 8006894:	080068c1 	.word	0x080068c1
 8006898:	080068d7 	.word	0x080068d7
 800689c:	080068c7 	.word	0x080068c7
 80068a0:	080068d7 	.word	0x080068d7
 80068a4:	080068d7 	.word	0x080068d7
 80068a8:	080068d7 	.word	0x080068d7
 80068ac:	080068cf 	.word	0x080068cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b0:	f7fd f940 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 80068b4:	61b8      	str	r0, [r7, #24]
        break;
 80068b6:	e013      	b.n	80068e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068b8:	f7fd f950 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 80068bc:	61b8      	str	r0, [r7, #24]
        break;
 80068be:	e00f      	b.n	80068e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c0:	4b4b      	ldr	r3, [pc, #300]	; (80069f0 <UART_SetConfig+0x4c4>)
 80068c2:	61bb      	str	r3, [r7, #24]
        break;
 80068c4:	e00c      	b.n	80068e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068c6:	f7fd f863 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80068ca:	61b8      	str	r0, [r7, #24]
        break;
 80068cc:	e008      	b.n	80068e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d2:	61bb      	str	r3, [r7, #24]
        break;
 80068d4:	e004      	b.n	80068e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	77bb      	strb	r3, [r7, #30]
        break;
 80068de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d074      	beq.n	80069d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	005a      	lsls	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	085b      	lsrs	r3, r3, #1
 80068f0:	441a      	add	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b0f      	cmp	r3, #15
 8006900:	d916      	bls.n	8006930 <UART_SetConfig+0x404>
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006908:	d212      	bcs.n	8006930 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	b29b      	uxth	r3, r3
 800690e:	f023 030f 	bic.w	r3, r3, #15
 8006912:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	b29b      	uxth	r3, r3
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	b29a      	uxth	r2, r3
 8006920:	89fb      	ldrh	r3, [r7, #14]
 8006922:	4313      	orrs	r3, r2
 8006924:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	89fa      	ldrh	r2, [r7, #14]
 800692c:	60da      	str	r2, [r3, #12]
 800692e:	e04f      	b.n	80069d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	77bb      	strb	r3, [r7, #30]
 8006934:	e04c      	b.n	80069d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006936:	7ffb      	ldrb	r3, [r7, #31]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d828      	bhi.n	800698e <UART_SetConfig+0x462>
 800693c:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <UART_SetConfig+0x418>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	08006969 	.word	0x08006969
 8006948:	08006971 	.word	0x08006971
 800694c:	08006979 	.word	0x08006979
 8006950:	0800698f 	.word	0x0800698f
 8006954:	0800697f 	.word	0x0800697f
 8006958:	0800698f 	.word	0x0800698f
 800695c:	0800698f 	.word	0x0800698f
 8006960:	0800698f 	.word	0x0800698f
 8006964:	08006987 	.word	0x08006987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006968:	f7fd f8e4 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 800696c:	61b8      	str	r0, [r7, #24]
        break;
 800696e:	e013      	b.n	8006998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006970:	f7fd f8f4 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 8006974:	61b8      	str	r0, [r7, #24]
        break;
 8006976:	e00f      	b.n	8006998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006978:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <UART_SetConfig+0x4c4>)
 800697a:	61bb      	str	r3, [r7, #24]
        break;
 800697c:	e00c      	b.n	8006998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800697e:	f7fd f807 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8006982:	61b8      	str	r0, [r7, #24]
        break;
 8006984:	e008      	b.n	8006998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800698a:	61bb      	str	r3, [r7, #24]
        break;
 800698c:	e004      	b.n	8006998 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	77bb      	strb	r3, [r7, #30]
        break;
 8006996:	bf00      	nop
    }

    if (pclk != 0U)
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d018      	beq.n	80069d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	085a      	lsrs	r2, r3, #1
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	441a      	add	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b0f      	cmp	r3, #15
 80069b6:	d909      	bls.n	80069cc <UART_SetConfig+0x4a0>
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069be:	d205      	bcs.n	80069cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60da      	str	r2, [r3, #12]
 80069ca:	e001      	b.n	80069d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40007c00 	.word	0x40007c00
 80069ec:	40023800 	.word	0x40023800
 80069f0:	00f42400 	.word	0x00f42400

080069f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00a      	beq.n	8006aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01a      	beq.n	8006b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006af2:	d10a      	bne.n	8006b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b48:	f7fb fc6c 	bl	8002424 <HAL_GetTick>
 8006b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d10e      	bne.n	8006b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f82d 	bl	8006bca <UART_WaitOnFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e023      	b.n	8006bc2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d10e      	bne.n	8006ba6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f817 	bl	8006bca <UART_WaitOnFlagUntilTimeout>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e00d      	b.n	8006bc2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b09c      	sub	sp, #112	; 0x70
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bda:	e0a5      	b.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	f000 80a1 	beq.w	8006d28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be6:	f7fb fc1d 	bl	8002424 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d302      	bcc.n	8006bfc <UART_WaitOnFlagUntilTimeout+0x32>
 8006bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d13e      	bne.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c10:	667b      	str	r3, [r7, #100]	; 0x64
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e6      	bne.n	8006bfc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3308      	adds	r3, #8
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	663b      	str	r3, [r7, #96]	; 0x60
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e5      	bne.n	8006c2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e067      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d04f      	beq.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c96:	d147      	bne.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ca0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e6      	bne.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cf4:	623a      	str	r2, [r7, #32]
 8006cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	69f9      	ldr	r1, [r7, #28]
 8006cfa:	6a3a      	ldr	r2, [r7, #32]
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e5      	bne.n	8006cd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e010      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4013      	ands	r3, r2
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	461a      	mov	r2, r3
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	f43f af4a 	beq.w	8006bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3770      	adds	r7, #112	; 0x70
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <__libc_init_array>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	4d0d      	ldr	r5, [pc, #52]	; (8006d8c <__libc_init_array+0x38>)
 8006d58:	4c0d      	ldr	r4, [pc, #52]	; (8006d90 <__libc_init_array+0x3c>)
 8006d5a:	1b64      	subs	r4, r4, r5
 8006d5c:	10a4      	asrs	r4, r4, #2
 8006d5e:	2600      	movs	r6, #0
 8006d60:	42a6      	cmp	r6, r4
 8006d62:	d109      	bne.n	8006d78 <__libc_init_array+0x24>
 8006d64:	4d0b      	ldr	r5, [pc, #44]	; (8006d94 <__libc_init_array+0x40>)
 8006d66:	4c0c      	ldr	r4, [pc, #48]	; (8006d98 <__libc_init_array+0x44>)
 8006d68:	f000 f864 	bl	8006e34 <_init>
 8006d6c:	1b64      	subs	r4, r4, r5
 8006d6e:	10a4      	asrs	r4, r4, #2
 8006d70:	2600      	movs	r6, #0
 8006d72:	42a6      	cmp	r6, r4
 8006d74:	d105      	bne.n	8006d82 <__libc_init_array+0x2e>
 8006d76:	bd70      	pop	{r4, r5, r6, pc}
 8006d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7c:	4798      	blx	r3
 8006d7e:	3601      	adds	r6, #1
 8006d80:	e7ee      	b.n	8006d60 <__libc_init_array+0xc>
 8006d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d86:	4798      	blx	r3
 8006d88:	3601      	adds	r6, #1
 8006d8a:	e7f2      	b.n	8006d72 <__libc_init_array+0x1e>
 8006d8c:	0800745c 	.word	0x0800745c
 8006d90:	0800745c 	.word	0x0800745c
 8006d94:	0800745c 	.word	0x0800745c
 8006d98:	08007460 	.word	0x08007460

08006d9c <memset>:
 8006d9c:	4402      	add	r2, r0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d100      	bne.n	8006da6 <memset+0xa>
 8006da4:	4770      	bx	lr
 8006da6:	f803 1b01 	strb.w	r1, [r3], #1
 8006daa:	e7f9      	b.n	8006da0 <memset+0x4>

08006dac <__utoa>:
 8006dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dae:	4c1f      	ldr	r4, [pc, #124]	; (8006e2c <__utoa+0x80>)
 8006db0:	b08b      	sub	sp, #44	; 0x2c
 8006db2:	4605      	mov	r5, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	466e      	mov	r6, sp
 8006db8:	f104 0c20 	add.w	ip, r4, #32
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	6861      	ldr	r1, [r4, #4]
 8006dc0:	4637      	mov	r7, r6
 8006dc2:	c703      	stmia	r7!, {r0, r1}
 8006dc4:	3408      	adds	r4, #8
 8006dc6:	4564      	cmp	r4, ip
 8006dc8:	463e      	mov	r6, r7
 8006dca:	d1f7      	bne.n	8006dbc <__utoa+0x10>
 8006dcc:	7921      	ldrb	r1, [r4, #4]
 8006dce:	7139      	strb	r1, [r7, #4]
 8006dd0:	1e91      	subs	r1, r2, #2
 8006dd2:	6820      	ldr	r0, [r4, #0]
 8006dd4:	6038      	str	r0, [r7, #0]
 8006dd6:	2922      	cmp	r1, #34	; 0x22
 8006dd8:	f04f 0100 	mov.w	r1, #0
 8006ddc:	d904      	bls.n	8006de8 <__utoa+0x3c>
 8006dde:	7019      	strb	r1, [r3, #0]
 8006de0:	460b      	mov	r3, r1
 8006de2:	4618      	mov	r0, r3
 8006de4:	b00b      	add	sp, #44	; 0x2c
 8006de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de8:	1e58      	subs	r0, r3, #1
 8006dea:	4684      	mov	ip, r0
 8006dec:	fbb5 f7f2 	udiv	r7, r5, r2
 8006df0:	fb02 5617 	mls	r6, r2, r7, r5
 8006df4:	3628      	adds	r6, #40	; 0x28
 8006df6:	446e      	add	r6, sp
 8006df8:	460c      	mov	r4, r1
 8006dfa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006dfe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006e02:	462e      	mov	r6, r5
 8006e04:	42b2      	cmp	r2, r6
 8006e06:	f101 0101 	add.w	r1, r1, #1
 8006e0a:	463d      	mov	r5, r7
 8006e0c:	d9ee      	bls.n	8006dec <__utoa+0x40>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	545a      	strb	r2, [r3, r1]
 8006e12:	1919      	adds	r1, r3, r4
 8006e14:	1aa5      	subs	r5, r4, r2
 8006e16:	42aa      	cmp	r2, r5
 8006e18:	dae3      	bge.n	8006de2 <__utoa+0x36>
 8006e1a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006e1e:	780e      	ldrb	r6, [r1, #0]
 8006e20:	7006      	strb	r6, [r0, #0]
 8006e22:	3201      	adds	r2, #1
 8006e24:	f801 5901 	strb.w	r5, [r1], #-1
 8006e28:	e7f4      	b.n	8006e14 <__utoa+0x68>
 8006e2a:	bf00      	nop
 8006e2c:	0800742c 	.word	0x0800742c

08006e30 <utoa>:
 8006e30:	f7ff bfbc 	b.w	8006dac <__utoa>

08006e34 <_init>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	bf00      	nop
 8006e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3a:	bc08      	pop	{r3}
 8006e3c:	469e      	mov	lr, r3
 8006e3e:	4770      	bx	lr

08006e40 <_fini>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	bf00      	nop
 8006e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e46:	bc08      	pop	{r3}
 8006e48:	469e      	mov	lr, r3
 8006e4a:	4770      	bx	lr
