
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bac  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b4  080073b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073bc  080073bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080073c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000000c  080073d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080073d0  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b79a  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a48  00000000  00000000  0003b7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  000405b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca2d  00000000  00000000  00041798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba9b  00000000  00000000  0006e1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108bd2  00000000  00000000  00089c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00192832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  00192888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006d8c 	.word	0x08006d8c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006d8c 	.word	0x08006d8c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f005 ff03 	bl	8006360 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000240 	.word	0x20000240

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 fc04 	bl	8006d88 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f005 fee2 	bl	8006360 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000240 	.word	0x20000240

080005a8 <ltc1380_write>:
//----------------------------------------------------------------------

// Kanal auswaehlen
//----------------------------------------------------------------------
void ltc1380_write(uint8_t Address, uint8_t Channel)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	460a      	mov	r2, r1
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	4613      	mov	r3, r2
 80005b6:	71bb      	strb	r3, [r7, #6]
	ITM_SendNumber(Channel);
	ITM_SendChar('\n');
#endif

	// Definiere Array fuer Channel auswaehlen
	uint8_t off[6] = {0x69, 0x08, 0x00, 0x89, 0x7F, 0xF9};					// Daten-Bytes fuer LTC6811 mit Daten fuer LTC1380
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <ltc1380_write+0x64>)
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c2:	6018      	str	r0, [r3, #0]
 80005c4:	3304      	adds	r3, #4
 80005c6:	8019      	strh	r1, [r3, #0]
	
	// Addresse und Channel waehlen
	off[1] |= ((Address & 0x0F) << 4);										// Address in Array uebertragen
 80005c8:	7a7b      	ldrb	r3, [r7, #9]
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	727b      	strb	r3, [r7, #9]
	off[3] |= ((Channel & 0x0F) << 4);										// Channel in Array uebertragen
 80005da:	7afb      	ldrb	r3, [r7, #11]
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	72fb      	strb	r3, [r7, #11]
	
	// LTC6811 beschreiben und ueber I2C uebertragen
	ltc6811_write(WRCOMM, &off[0]);												// Daten in LTC6811 schreiben
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4619      	mov	r1, r3
 80005f2:	f240 7021 	movw	r0, #1825	; 0x721
 80005f6:	f000 f887 	bl	8000708 <ltc6811_write>
	ltc6811(STCOMM);														// Daten von LTC6811 an LTC1380 senden
 80005fa:	f240 7023 	movw	r0, #1827	; 0x723
 80005fe:	f000 f82f 	bl	8000660 <ltc6811>
		ITM_SendChar(' ');
		ITM_SendNumber(off[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	08006da4 	.word	0x08006da4

08000610 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Chip wird geweckt.\n");
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	e014      	b.n	8000646 <wakeup_ltc6811+0x36>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <wakeup_ltc6811+0x48>)
 8000624:	f002 fd6e 	bl	8003104 <HAL_GPIO_WritePin>

		// Dummy Paket senden
		HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	2201      	movs	r2, #1
 800062c:	21aa      	movs	r1, #170	; 0xaa
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <wakeup_ltc6811+0x4c>)
 8000630:	f003 ff29 	bl	8004486 <HAL_SPI_Transmit>

		//HAL_Delay(2);														// isoSPI braucht Zeit bis ready

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <wakeup_ltc6811+0x48>)
 800063c:	f002 fd62 	bl	8003104 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	3301      	adds	r3, #1
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0e7      	beq.n	800061c <wakeup_ltc6811+0xc>
	}
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	200000e0 	.word	0x200000e0

08000660 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f909 	bl	8000884 <peccommand>
 8000672:	4603      	mov	r3, r0
 8000674:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000676:	f7ff ffcb 	bl	8000610 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	b29b      	uxth	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	b2db      	uxtb	r3, r3
 8000688:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000690:	89bb      	ldrh	r3, [r7, #12]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 800069a:	89bb      	ldrh	r3, [r7, #12]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f023 0301 	bic.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <ltc6811+0xa0>)
 80006ae:	f002 fd29 	bl	8003104 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80006b2:	f107 0108 	add.w	r1, r7, #8
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	2204      	movs	r2, #4
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <ltc6811+0xa4>)
 80006bc:	f003 fee3 	bl	8004486 <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	f240 7223 	movw	r2, #1827	; 0x723
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d10f      	bne.n	80006ea <ltc6811+0x8a>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e009      	b.n	80006e4 <ltc6811+0x84>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	2201      	movs	r2, #1
 80006d6:	21aa      	movs	r1, #170	; 0xaa
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <ltc6811+0xa4>)
 80006da:	f003 fed4 	bl	8004486 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3301      	adds	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2b08      	cmp	r3, #8
 80006e8:	d9f2      	bls.n	80006d0 <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <ltc6811+0xa0>)
 80006f2:	f002 fd07 	bl	8003104 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	200000e0 	.word	0x200000e0

08000708 <ltc6811_write>:


// Broadcast Write Command
//----------------------------------------------------------------------
void ltc6811_write(uint16_t command, uint8_t* data)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, fuer Data Funktion nur bei einem Device gegeben
	uint16_t pec_c, pec_d;													// pec_c = Zwischenspeicher 16-Bit Command, pec_d = Zwischenspeicher 16-Bit Data
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	uint8_t tmp[8];															// Zwischenspeicher Daten + Pec CRC
	pec_c = peccommand(command);											// Pec Command berechnen
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f8b4 	bl	8000884 <peccommand>
 800071c:	4603      	mov	r3, r0
 800071e:	83bb      	strh	r3, [r7, #28]
	pec_d = peclookup(6, data);												// Pec Daten berechnen
 8000720:	6839      	ldr	r1, [r7, #0]
 8000722:	2006      	movs	r0, #6
 8000724:	f000 f8ca 	bl	80008bc <peclookup>
 8000728:	4603      	mov	r3, r0
 800072a:	837b      	strh	r3, [r7, #26]


	for (uint8_t i = 0; i < 6; i++)
 800072c:	2300      	movs	r3, #0
 800072e:	77fb      	strb	r3, [r7, #31]
 8000730:	e00c      	b.n	800074c <ltc6811_write+0x44>
	{
		tmp[i] = data[i];
 8000732:	7ffb      	ldrb	r3, [r7, #31]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	441a      	add	r2, r3
 8000738:	7ffb      	ldrb	r3, [r7, #31]
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	f107 0120 	add.w	r1, r7, #32
 8000740:	440b      	add	r3, r1
 8000742:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (uint8_t i = 0; i < 6; i++)
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	3301      	adds	r3, #1
 800074a:	77fb      	strb	r3, [r7, #31]
 800074c:	7ffb      	ldrb	r3, [r7, #31]
 800074e:	2b05      	cmp	r3, #5
 8000750:	d9ef      	bls.n	8000732 <ltc6811_write+0x2a>
	}
	tmp[6] = ((pec_d >> 8) & 0xFF);
 8000752:	8b7b      	ldrh	r3, [r7, #26]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	74bb      	strb	r3, [r7, #18]
	tmp[7] = (pec_d & 0xFE);
 800075c:	8b7b      	ldrh	r3, [r7, #26]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f023 0301 	bic.w	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	74fb      	strb	r3, [r7, #19]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000768:	f7ff ff52 	bl	8000610 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command  >> 8) & 0x07);
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	b29b      	uxth	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 0307 	and.w	r3, r3, #7
 8000778:	b2db      	uxtb	r3, r3
 800077a:	753b      	strb	r3, [r7, #20]
	cmd[1] = (command & 0xFF);
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	757b      	strb	r3, [r7, #21]
	cmd[2] = ((pec_c >> 8) & 0xFF);
 8000782:	8bbb      	ldrh	r3, [r7, #28]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	b2db      	uxtb	r3, r3
 800078a:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (pec_c & 0xFE);
 800078c:	8bbb      	ldrh	r3, [r7, #28]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	75fb      	strb	r3, [r7, #23]

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <ltc6811_write+0xcc>)
 80007a0:	f002 fcb0 	bl	8003104 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80007a4:	f107 0114 	add.w	r1, r7, #20
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	2204      	movs	r2, #4
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <ltc6811_write+0xd0>)
 80007ae:	f003 fe6a 	bl	8004486 <HAL_SPI_Transmit>
	
	// Data senden
//	for (uint8_t i = 0; i < 6; i++)
//	{
		// Sende Daten fuer einen IC
		HAL_SPI_Transmit(&hspi4, tmp, 8, 100);
 80007b2:	f107 010c 	add.w	r1, r7, #12
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2208      	movs	r2, #8
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <ltc6811_write+0xd0>)
 80007bc:	f003 fe63 	bl	8004486 <HAL_SPI_Transmit>
//	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <ltc6811_write+0xcc>)
 80007c8:	f002 fc9c 	bl	8003104 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	200000e0 	.word	0x200000e0

080007dc <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	6039      	str	r1, [r7, #0]
 80007e6:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f84a 	bl	8000884 <peccommand>
 80007f0:	4603      	mov	r3, r0
 80007f2:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80007f4:	f7ff ff0c 	bl	8000610 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	0a1b      	lsrs	r3, r3, #8
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	b2db      	uxtb	r3, r3
 8000806:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000818:	89bb      	ldrh	r3, [r7, #12]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f023 0301 	bic.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082a:	4814      	ldr	r0, [pc, #80]	; (800087c <ltc6811_read+0xa0>)
 800082c:	f002 fc6a 	bl	8003104 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000830:	f107 0108 	add.w	r1, r7, #8
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	2204      	movs	r2, #4
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <ltc6811_read+0xa4>)
 800083a:	f003 fe24 	bl	8004486 <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	73fb      	strb	r3, [r7, #15]
 8000842:	e00c      	b.n	800085e <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	461a      	mov	r2, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	1899      	adds	r1, r3, r2
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2208      	movs	r2, #8
 8000852:	480b      	ldr	r0, [pc, #44]	; (8000880 <ltc6811_read+0xa4>)
 8000854:	f003 ff85 	bl	8004762 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	3301      	adds	r3, #1
 800085c:	73fb      	strb	r3, [r7, #15]
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0ef      	beq.n	8000844 <ltc6811_read+0x68>
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <ltc6811_read+0xa0>)
 800086c:	f002 fc4a 	bl	8003104 <HAL_GPIO_WritePin>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000
 8000880:	200000e0 	.word	0x200000e0

08000884 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	b29b      	uxth	r3, r3
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	2002      	movs	r0, #2
 80008ac:	f000 f806 	bl	80008bc <peclookup>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 80008c8:	2310      	movs	r3, #16
 80008ca:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	737b      	strb	r3, [r7, #13]
 80008d0:	e019      	b.n	8000906 <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 80008d2:	89fb      	ldrh	r3, [r7, #14]
 80008d4:	09db      	lsrs	r3, r3, #7
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	7b7b      	ldrb	r3, [r7, #13]
 80008da:	6839      	ldr	r1, [r7, #0]
 80008dc:	440b      	add	r3, r1
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	4053      	eors	r3, r2
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 80008ea:	89fb      	ldrh	r3, [r7, #14]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	897b      	ldrh	r3, [r7, #10]
 80008f2:	490b      	ldr	r1, [pc, #44]	; (8000920 <peclookup+0x64>)
 80008f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	4053      	eors	r3, r2
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 8000900:	7b7b      	ldrb	r3, [r7, #13]
 8000902:	3301      	adds	r3, #1
 8000904:	737b      	strb	r3, [r7, #13]
 8000906:	7b7a      	ldrb	r2, [r7, #13]
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	429a      	cmp	r2, r3
 800090c:	d3e1      	bcc.n	80008d2 <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	b29b      	uxth	r3, r3
}
 8000914:	4618      	mov	r0, r3
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	08007174 	.word	0x08007174

08000924 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800092a:	2115      	movs	r1, #21
 800092c:	483b      	ldr	r0, [pc, #236]	; (8000a1c <collectHardwareInfo+0xf8>)
 800092e:	f7ff fe07 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000932:	f001 fd7b 	bl	800242c <HAL_GetDEVID>
 8000936:	4603      	mov	r3, r0
 8000938:	210a      	movs	r1, #10
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe14 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000940:	2117      	movs	r1, #23
 8000942:	4837      	ldr	r0, [pc, #220]	; (8000a20 <collectHardwareInfo+0xfc>)
 8000944:	f7ff fdfc 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000948:	f001 fd64 	bl	8002414 <HAL_GetREVID>
 800094c:	4603      	mov	r3, r0
 800094e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000952:	4293      	cmp	r3, r2
 8000954:	d016      	beq.n	8000984 <collectHardwareInfo+0x60>
 8000956:	f242 0201 	movw	r2, #8193	; 0x2001
 800095a:	4293      	cmp	r3, r2
 800095c:	d817      	bhi.n	800098e <collectHardwareInfo+0x6a>
 800095e:	f241 0201 	movw	r2, #4097	; 0x1001
 8000962:	4293      	cmp	r3, r2
 8000964:	d004      	beq.n	8000970 <collectHardwareInfo+0x4c>
 8000966:	f241 0203 	movw	r2, #4099	; 0x1003
 800096a:	4293      	cmp	r3, r2
 800096c:	d005      	beq.n	800097a <collectHardwareInfo+0x56>
 800096e:	e00e      	b.n	800098e <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000970:	2101      	movs	r1, #1
 8000972:	482c      	ldr	r0, [pc, #176]	; (8000a24 <collectHardwareInfo+0x100>)
 8000974:	f7ff fde4 	bl	8000540 <uartTransmit>
			break;
 8000978:	e011      	b.n	800099e <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800097a:	2101      	movs	r1, #1
 800097c:	482a      	ldr	r0, [pc, #168]	; (8000a28 <collectHardwareInfo+0x104>)
 800097e:	f7ff fddf 	bl	8000540 <uartTransmit>
			break;
 8000982:	e00c      	b.n	800099e <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000984:	2101      	movs	r1, #1
 8000986:	4829      	ldr	r0, [pc, #164]	; (8000a2c <collectHardwareInfo+0x108>)
 8000988:	f7ff fdda 	bl	8000540 <uartTransmit>
			break;
 800098c:	e007      	b.n	800099e <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800098e:	f001 fd41 	bl	8002414 <HAL_GetREVID>
 8000992:	4603      	mov	r3, r0
 8000994:	210a      	movs	r1, #10
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fde6 	bl	8000568 <uartTransmitNumber>
			break;
 800099c:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 800099e:	2115      	movs	r1, #21
 80009a0:	4823      	ldr	r0, [pc, #140]	; (8000a30 <collectHardwareInfo+0x10c>)
 80009a2:	f7ff fdcd 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80009a6:	f002 ffb1 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80009aa:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <collectHardwareInfo+0x110>)
 80009b0:	fba2 2303 	umull	r2, r3, r2, r3
 80009b4:	0c9b      	lsrs	r3, r3, #18
 80009b6:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80009b8:	210a      	movs	r1, #10
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fdd4 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80009c0:	2104      	movs	r1, #4
 80009c2:	481d      	ldr	r0, [pc, #116]	; (8000a38 <collectHardwareInfo+0x114>)
 80009c4:	f7ff fdbc 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80009c8:	2111      	movs	r1, #17
 80009ca:	481c      	ldr	r0, [pc, #112]	; (8000a3c <collectHardwareInfo+0x118>)
 80009cc:	f7ff fdb8 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80009d0:	f001 fd3a 	bl	8002448 <HAL_GetUIDw0>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2110      	movs	r1, #16
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fdc5 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80009de:	2101      	movs	r1, #1
 80009e0:	4817      	ldr	r0, [pc, #92]	; (8000a40 <collectHardwareInfo+0x11c>)
 80009e2:	f7ff fdad 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80009e6:	f001 fd3b 	bl	8002460 <HAL_GetUIDw1>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2110      	movs	r1, #16
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fdba 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80009f4:	2101      	movs	r1, #1
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <collectHardwareInfo+0x11c>)
 80009f8:	f7ff fda2 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 80009fc:	f001 fd3c 	bl	8002478 <HAL_GetUIDw2>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2110      	movs	r1, #16
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fdaf 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <collectHardwareInfo+0x120>)
 8000a0e:	f7ff fd97 	bl	8000540 <uartTransmit>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	08006db4 	.word	0x08006db4
 8000a20:	08006dcc 	.word	0x08006dcc
 8000a24:	08006de4 	.word	0x08006de4
 8000a28:	08006de8 	.word	0x08006de8
 8000a2c:	08006dec 	.word	0x08006dec
 8000a30:	08006df0 	.word	0x08006df0
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	08006e08 	.word	0x08006e08
 8000a3c:	08006e10 	.word	0x08006e10
 8000a40:	08006e24 	.word	0x08006e24
 8000a44:	08006e28 	.word	0x08006e28

08000a48 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a4c:	2114      	movs	r1, #20
 8000a4e:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <collectMiddlewareInfo+0x98>)
 8000a50:	f7ff fd76 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a54:	210a      	movs	r1, #10
 8000a56:	2005      	movs	r0, #5
 8000a58:	f7ff fd86 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <collectMiddlewareInfo+0x9c>)
 8000a60:	f7ff fd6e 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a64:	210a      	movs	r1, #10
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff fd7e 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a6c:	2112      	movs	r1, #18
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <collectMiddlewareInfo+0xa0>)
 8000a70:	f7ff fd66 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a74:	f001 fcc4 	bl	8002400 <HAL_GetHalVersion>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	0e1b      	lsrs	r3, r3, #24
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	210a      	movs	r1, #10
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fd71 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a86:	2101      	movs	r1, #1
 8000a88:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <collectMiddlewareInfo+0x9c>)
 8000a8a:	f7ff fd59 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000a8e:	f001 fcb7 	bl	8002400 <HAL_GetHalVersion>
 8000a92:	4603      	mov	r3, r0
 8000a94:	0c1b      	lsrs	r3, r3, #16
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	210a      	movs	r1, #10
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fd64 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <collectMiddlewareInfo+0x9c>)
 8000aa4:	f7ff fd4c 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000aa8:	f001 fcaa 	bl	8002400 <HAL_GetHalVersion>
 8000aac:	4603      	mov	r3, r0
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	210a      	movs	r1, #10
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fd57 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000aba:	2101      	movs	r1, #1
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <collectMiddlewareInfo+0x9c>)
 8000abe:	f7ff fd3f 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000ac2:	f001 fc9d 	bl	8002400 <HAL_GetHalVersion>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	210a      	movs	r1, #10
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fd4b 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <collectMiddlewareInfo+0xa4>)
 8000ad6:	f7ff fd33 	bl	8000540 <uartTransmit>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	08006e2c 	.word	0x08006e2c
 8000ae4:	08006e40 	.word	0x08006e40
 8000ae8:	08006e44 	.word	0x08006e44
 8000aec:	08006e28 	.word	0x08006e28

08000af0 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000af4:	2111      	movs	r1, #17
 8000af6:	4826      	ldr	r0, [pc, #152]	; (8000b90 <collectSoftwareInfo+0xa0>)
 8000af8:	f7ff fd22 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000afc:	2108      	movs	r1, #8
 8000afe:	4825      	ldr	r0, [pc, #148]	; (8000b94 <collectSoftwareInfo+0xa4>)
 8000b00:	f7ff fd1e 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000b04:	2111      	movs	r1, #17
 8000b06:	4824      	ldr	r0, [pc, #144]	; (8000b98 <collectSoftwareInfo+0xa8>)
 8000b08:	f7ff fd1a 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4823      	ldr	r0, [pc, #140]	; (8000b9c <collectSoftwareInfo+0xac>)
 8000b10:	f7ff fd16 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000b14:	210f      	movs	r1, #15
 8000b16:	4822      	ldr	r0, [pc, #136]	; (8000ba0 <collectSoftwareInfo+0xb0>)
 8000b18:	f7ff fd12 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000b1c:	2129      	movs	r1, #41	; 0x29
 8000b1e:	4821      	ldr	r0, [pc, #132]	; (8000ba4 <collectSoftwareInfo+0xb4>)
 8000b20:	f7ff fd0e 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000b24:	2101      	movs	r1, #1
 8000b26:	4820      	ldr	r0, [pc, #128]	; (8000ba8 <collectSoftwareInfo+0xb8>)
 8000b28:	f7ff fd0a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b2c:	2116      	movs	r1, #22
 8000b2e:	481f      	ldr	r0, [pc, #124]	; (8000bac <collectSoftwareInfo+0xbc>)
 8000b30:	f7ff fd06 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000b34:	2105      	movs	r1, #5
 8000b36:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <collectSoftwareInfo+0xc0>)
 8000b38:	f7ff fd02 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b3c:	2115      	movs	r1, #21
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <collectSoftwareInfo+0xc4>)
 8000b40:	f7ff fcfe 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8000b44:	2108      	movs	r1, #8
 8000b46:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <collectSoftwareInfo+0xc8>)
 8000b48:	f7ff fcfa 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8000b4c:	2116      	movs	r1, #22
 8000b4e:	481b      	ldr	r0, [pc, #108]	; (8000bbc <collectSoftwareInfo+0xcc>)
 8000b50:	f7ff fcf6 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8000b54:	2111      	movs	r1, #17
 8000b56:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <collectSoftwareInfo+0xd0>)
 8000b58:	f7ff fcf2 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <collectSoftwareInfo+0xb8>)
 8000b60:	f7ff fcee 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000b64:	2111      	movs	r1, #17
 8000b66:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <collectSoftwareInfo+0xd4>)
 8000b68:	f7ff fcea 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000b6c:	210b      	movs	r1, #11
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <collectSoftwareInfo+0xd8>)
 8000b70:	f7ff fce6 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000b74:	2111      	movs	r1, #17
 8000b76:	4815      	ldr	r0, [pc, #84]	; (8000bcc <collectSoftwareInfo+0xdc>)
 8000b78:	f7ff fce2 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000b7c:	2109      	movs	r1, #9
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <collectSoftwareInfo+0xe0>)
 8000b80:	f7ff fcde 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000b84:	2101      	movs	r1, #1
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <collectSoftwareInfo+0xb8>)
 8000b88:	f7ff fcda 	bl	8000540 <uartTransmit>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	08006e58 	.word	0x08006e58
 8000b94:	08006e6c 	.word	0x08006e6c
 8000b98:	08006e74 	.word	0x08006e74
 8000b9c:	08006e88 	.word	0x08006e88
 8000ba0:	08006e90 	.word	0x08006e90
 8000ba4:	08006ea0 	.word	0x08006ea0
 8000ba8:	08006e28 	.word	0x08006e28
 8000bac:	08006ecc 	.word	0x08006ecc
 8000bb0:	08006ee4 	.word	0x08006ee4
 8000bb4:	08006eec 	.word	0x08006eec
 8000bb8:	08006f04 	.word	0x08006f04
 8000bbc:	08006f0c 	.word	0x08006f0c
 8000bc0:	08006f24 	.word	0x08006f24
 8000bc4:	08006f38 	.word	0x08006f38
 8000bc8:	08006f4c 	.word	0x08006f4c
 8000bcc:	08006f58 	.word	0x08006f58
 8000bd0:	08006f6c 	.word	0x08006f6c

08000bd4 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000bd8:	2115      	movs	r1, #21
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <collectGitcounts+0x58>)
 8000bdc:	f7ff fcb0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000be0:	2103      	movs	r1, #3
 8000be2:	4813      	ldr	r0, [pc, #76]	; (8000c30 <collectGitcounts+0x5c>)
 8000be4:	f7ff fcac 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000be8:	2117      	movs	r1, #23
 8000bea:	4812      	ldr	r0, [pc, #72]	; (8000c34 <collectGitcounts+0x60>)
 8000bec:	f7ff fca8 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	4811      	ldr	r0, [pc, #68]	; (8000c38 <collectGitcounts+0x64>)
 8000bf4:	f7ff fca4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000bf8:	211c      	movs	r1, #28
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <collectGitcounts+0x68>)
 8000bfc:	f7ff fca0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000c00:	2103      	movs	r1, #3
 8000c02:	480f      	ldr	r0, [pc, #60]	; (8000c40 <collectGitcounts+0x6c>)
 8000c04:	f7ff fc9c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000c08:	2116      	movs	r1, #22
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <collectGitcounts+0x70>)
 8000c0c:	f7ff fc98 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000c10:	2102      	movs	r1, #2
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <collectGitcounts+0x74>)
 8000c14:	f7ff fc94 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000c18:	2115      	movs	r1, #21
 8000c1a:	480c      	ldr	r0, [pc, #48]	; (8000c4c <collectGitcounts+0x78>)
 8000c1c:	f7ff fc90 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000c20:	2102      	movs	r1, #2
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <collectGitcounts+0x7c>)
 8000c24:	f7ff fc8c 	bl	8000540 <uartTransmit>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	08006f78 	.word	0x08006f78
 8000c30:	08006f90 	.word	0x08006f90
 8000c34:	08006f94 	.word	0x08006f94
 8000c38:	08006fac 	.word	0x08006fac
 8000c3c:	08006fb0 	.word	0x08006fb0
 8000c40:	08006fcc 	.word	0x08006fcc
 8000c44:	08006ecc 	.word	0x08006ecc
 8000c48:	08006fd0 	.word	0x08006fd0
 8000c4c:	08006eec 	.word	0x08006eec
 8000c50:	08006fd4 	.word	0x08006fd4

08000c54 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000c58:	2111      	movs	r1, #17
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <collectSystemInfo+0x40>)
 8000c5c:	f7ff fc70 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000c60:	f7ff fe60 	bl	8000924 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000c64:	2111      	movs	r1, #17
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <collectSystemInfo+0x44>)
 8000c68:	f7ff fc6a 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000c6c:	f7ff ff40 	bl	8000af0 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000c70:	2113      	movs	r1, #19
 8000c72:	480a      	ldr	r0, [pc, #40]	; (8000c9c <collectSystemInfo+0x48>)
 8000c74:	f7ff fc64 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000c78:	f7ff fee6 	bl	8000a48 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000c7c:	2113      	movs	r1, #19
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <collectSystemInfo+0x4c>)
 8000c80:	f7ff fc5e 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000c84:	f7ff ffa6 	bl	8000bd4 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000c88:	2103      	movs	r1, #3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <collectSystemInfo+0x50>)
 8000c8c:	f7ff fc58 	bl	8000540 <uartTransmit>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	08006fd8 	.word	0x08006fd8
 8000c98:	08006fec 	.word	0x08006fec
 8000c9c:	08007000 	.word	0x08007000
 8000ca0:	08007014 	.word	0x08007014
 8000ca4:	08007028 	.word	0x08007028

08000ca8 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <readResetSource+0xa0>)
 8000cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <readResetSource+0xa0>)
 8000cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <readResetSource+0xa0>)
 8000cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	da02      	bge.n	8000ce4 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <readResetSource+0xa0>)
 8000ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <readResetSource+0xa0>)
 8000cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	3310      	adds	r3, #16
 8000d06:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <readResetSource+0xa0>)
 8000d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	3320      	adds	r3, #32
 8000d18:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <readResetSource+0xa0>)
 8000d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	3340      	adds	r3, #64	; 0x40
 8000d2a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <readResetSource+0xa0>)
 8000d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <readResetSource+0xa0>)
 8000d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d36:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000d38:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000d56:	2106      	movs	r1, #6
 8000d58:	482a      	ldr	r0, [pc, #168]	; (8000e04 <printResetSource+0xb8>)
 8000d5a:	f7ff fbf1 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d104      	bne.n	8000d6e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000d64:	210f      	movs	r1, #15
 8000d66:	4828      	ldr	r0, [pc, #160]	; (8000e08 <printResetSource+0xbc>)
 8000d68:	f7ff fbea 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000d6c:	e046      	b.n	8000dfc <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000d78:	2118      	movs	r1, #24
 8000d7a:	4824      	ldr	r0, [pc, #144]	; (8000e0c <printResetSource+0xc0>)
 8000d7c:	f7ff fbe0 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000d8a:	2116      	movs	r1, #22
 8000d8c:	4820      	ldr	r0, [pc, #128]	; (8000e10 <printResetSource+0xc4>)
 8000d8e:	f7ff fbd7 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000d9c:	210a      	movs	r1, #10
 8000d9e:	481d      	ldr	r0, [pc, #116]	; (8000e14 <printResetSource+0xc8>)
 8000da0:	f7ff fbce 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000dae:	2110      	movs	r1, #16
 8000db0:	4819      	ldr	r0, [pc, #100]	; (8000e18 <printResetSource+0xcc>)
 8000db2:	f7ff fbc5 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	4816      	ldr	r0, [pc, #88]	; (8000e1c <printResetSource+0xd0>)
 8000dc4:	f7ff fbbc 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 0320 	and.w	r3, r3, #32
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <printResetSource+0xd4>)
 8000dd6:	f7ff fbb3 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000de4:	210a      	movs	r1, #10
 8000de6:	480f      	ldr	r0, [pc, #60]	; (8000e24 <printResetSource+0xd8>)
 8000de8:	f7ff fbaa 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	da03      	bge.n	8000dfc <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000df4:	2105      	movs	r1, #5
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <printResetSource+0xdc>)
 8000df8:	f7ff fba2 	bl	8000540 <uartTransmit>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	0800702c 	.word	0x0800702c
 8000e08:	08007034 	.word	0x08007034
 8000e0c:	08007044 	.word	0x08007044
 8000e10:	08007060 	.word	0x08007060
 8000e14:	08007078 	.word	0x08007078
 8000e18:	08007084 	.word	0x08007084
 8000e1c:	08007098 	.word	0x08007098
 8000e20:	080070a8 	.word	0x080070a8
 8000e24:	080070b8 	.word	0x080070b8
 8000e28:	080070c4 	.word	0x080070c4

08000e2c <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e34:	4850      	ldr	r0, [pc, #320]	; (8000f78 <readall_inputs+0x14c>)
 8000e36:	f002 f94d 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2d9      	uxtb	r1, r3
 8000e42:	4a4e      	ldr	r2, [pc, #312]	; (8000f7c <readall_inputs+0x150>)
 8000e44:	7813      	ldrb	r3, [r2, #0]
 8000e46:	f361 0300 	bfi	r3, r1, #0, #1
 8000e4a:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000e4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e50:	484b      	ldr	r0, [pc, #300]	; (8000f80 <readall_inputs+0x154>)
 8000e52:	f002 f93f 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	b2d9      	uxtb	r1, r3
 8000e5e:	4a47      	ldr	r2, [pc, #284]	; (8000f7c <readall_inputs+0x150>)
 8000e60:	7813      	ldrb	r3, [r2, #0]
 8000e62:	f361 0341 	bfi	r3, r1, #1, #1
 8000e66:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6c:	4845      	ldr	r0, [pc, #276]	; (8000f84 <readall_inputs+0x158>)
 8000e6e:	f002 f931 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	b2d9      	uxtb	r1, r3
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <readall_inputs+0x150>)
 8000e7c:	7813      	ldrb	r3, [r2, #0]
 8000e7e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e82:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e88:	483e      	ldr	r0, [pc, #248]	; (8000f84 <readall_inputs+0x158>)
 8000e8a:	f002 f923 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	b2d9      	uxtb	r1, r3
 8000e96:	4a39      	ldr	r2, [pc, #228]	; (8000f7c <readall_inputs+0x150>)
 8000e98:	7813      	ldrb	r3, [r2, #0]
 8000e9a:	f361 1304 	bfi	r3, r1, #4, #1
 8000e9e:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4838      	ldr	r0, [pc, #224]	; (8000f84 <readall_inputs+0x158>)
 8000ea4:	f002 f916 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	b2d9      	uxtb	r1, r3
 8000eb0:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <readall_inputs+0x150>)
 8000eb2:	7813      	ldrb	r3, [r2, #0]
 8000eb4:	f361 1345 	bfi	r3, r1, #5, #1
 8000eb8:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000eba:	2104      	movs	r1, #4
 8000ebc:	4831      	ldr	r0, [pc, #196]	; (8000f84 <readall_inputs+0x158>)
 8000ebe:	f002 f909 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	b2d9      	uxtb	r1, r3
 8000eca:	4a2c      	ldr	r2, [pc, #176]	; (8000f7c <readall_inputs+0x150>)
 8000ecc:	7813      	ldrb	r3, [r2, #0]
 8000ece:	f361 1386 	bfi	r3, r1, #6, #1
 8000ed2:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	4827      	ldr	r0, [pc, #156]	; (8000f78 <readall_inputs+0x14c>)
 8000eda:	f002 f8fb 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	b2d9      	uxtb	r1, r3
 8000ee6:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <readall_inputs+0x15c>)
 8000ee8:	7813      	ldrb	r3, [r2, #0]
 8000eea:	f361 0300 	bfi	r3, r1, #0, #1
 8000eee:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	4821      	ldr	r0, [pc, #132]	; (8000f78 <readall_inputs+0x14c>)
 8000ef4:	f002 f8ee 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	b2d9      	uxtb	r1, r3
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <readall_inputs+0x15c>)
 8000f02:	7813      	ldrb	r3, [r2, #0]
 8000f04:	f361 0341 	bfi	r3, r1, #1, #1
 8000f08:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	481a      	ldr	r0, [pc, #104]	; (8000f78 <readall_inputs+0x14c>)
 8000f0e:	f002 f8e1 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	b2d9      	uxtb	r1, r3
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <readall_inputs+0x15c>)
 8000f1c:	7813      	ldrb	r3, [r2, #0]
 8000f1e:	f361 0382 	bfi	r3, r1, #2, #1
 8000f22:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000f24:	2110      	movs	r1, #16
 8000f26:	4814      	ldr	r0, [pc, #80]	; (8000f78 <readall_inputs+0x14c>)
 8000f28:	f002 f8d4 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	b2d9      	uxtb	r1, r3
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <readall_inputs+0x15c>)
 8000f36:	7813      	ldrb	r3, [r2, #0]
 8000f38:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f3c:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <readall_inputs+0x160>)
 8000f44:	f002 f8c6 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	b2d9      	uxtb	r1, r3
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <readall_inputs+0x15c>)
 8000f52:	7813      	ldrb	r3, [r2, #0]
 8000f54:	f361 1304 	bfi	r3, r1, #4, #1
 8000f58:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <readall_inputs+0x160>)
 8000f5e:	f002 f8b9 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	b2d9      	uxtb	r1, r3
 8000f6a:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <readall_inputs+0x164>)
 8000f6c:	7813      	ldrb	r3, [r2, #0]
 8000f6e:	f361 0300 	bfi	r3, r1, #0, #1
 8000f72:	7013      	strb	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	2000003c 	.word	0x2000003c
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	40020000 	.word	0x40020000
 8000f88:	20000044 	.word	0x20000044
 8000f8c:	40021400 	.word	0x40021400
 8000f90:	20000040 	.word	0x20000040

08000f94 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	481b      	ldr	r0, [pc, #108]	; (800100c <testPCB_Leds+0x78>)
 8000f9e:	f002 f8b1 	bl	8003104 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa6:	f001 fa07 	bl	80023b8 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4817      	ldr	r0, [pc, #92]	; (800100c <testPCB_Leds+0x78>)
 8000fb0:	f002 f8a8 	bl	8003104 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb8:	f001 f9fe 	bl	80023b8 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	4812      	ldr	r0, [pc, #72]	; (800100c <testPCB_Leds+0x78>)
 8000fc2:	f002 f89f 	bl	8003104 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fca:	f001 f9f5 	bl	80023b8 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <testPCB_Leds+0x78>)
 8000fd4:	f002 f896 	bl	8003104 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000fd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fdc:	f001 f9ec 	bl	80023b8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe6:	4809      	ldr	r0, [pc, #36]	; (800100c <testPCB_Leds+0x78>)
 8000fe8:	f002 f88c 	bl	8003104 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff0:	f001 f9e2 	bl	80023b8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <testPCB_Leds+0x78>)
 8000ffc:	f002 f882 	bl	8003104 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001004:	f001 f9d8 	bl	80023b8 <HAL_Delay>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020400 	.word	0x40020400

08001010 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <MX_ADC1_Init+0x9c>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_ADC1_Init+0x98>)
 800102a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800102e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <MX_ADC1_Init+0xa0>)
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_ADC1_Init+0x98>)
 800105e:	2201      	movs	r2, #1
 8001060:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_ADC1_Init+0x98>)
 800106c:	2201      	movs	r2, #1
 800106e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001072:	f001 fa0d 	bl	8002490 <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800107c:	f000 fd42 	bl	8001b04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001080:	2304      	movs	r3, #4
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001084:	2301      	movs	r3, #1
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_ADC1_Init+0x98>)
 8001092:	f001 fa41 	bl	8002518 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800109c:	f000 fd32 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000048 	.word	0x20000048
 80010ac:	40012000 	.word	0x40012000
 80010b0:	0f000001 	.word	0x0f000001

080010b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a15      	ldr	r2, [pc, #84]	; (8001128 <HAL_ADC_MspInit+0x74>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d123      	bne.n	800111e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_ADC_MspInit+0x78>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a14      	ldr	r2, [pc, #80]	; (800112c <HAL_ADC_MspInit+0x78>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_ADC_MspInit+0x78>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_ADC_MspInit+0x78>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_ADC_MspInit+0x78>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_ADC_MspInit+0x78>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001106:	23f8      	movs	r3, #248	; 0xf8
 8001108:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_ADC_MspInit+0x7c>)
 800111a:	f001 fe2f 	bl	8002d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012000 	.word	0x40012000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_CAN1_Init+0x64>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <MX_CAN1_Init+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_CAN1_Init+0x64>)
 8001140:	2210      	movs	r2, #16
 8001142:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_CAN1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_CAN1_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_CAN1_Init+0x64>)
 8001152:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001156:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_CAN1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_CAN1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_CAN1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_CAN1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_CAN1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_CAN1_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_CAN1_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_CAN1_Init+0x64>)
 8001184:	f001 fc18 	bl	80029b8 <HAL_CAN_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800118e:	f000 fcb9 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000b8 	.word	0x200000b8
 800119c:	40006400 	.word	0x40006400

080011a0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_CAN3_Init+0x64>)
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <MX_CAN3_Init+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_CAN3_Init+0x64>)
 80011ac:	2206      	movs	r2, #6
 80011ae:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_CAN3_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_CAN3_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_CAN3_Init+0x64>)
 80011be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011c2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_CAN3_Init+0x64>)
 80011c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011ca:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <MX_CAN3_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_CAN3_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <MX_CAN3_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_CAN3_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <MX_CAN3_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_CAN3_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_CAN3_Init+0x64>)
 80011f2:	f001 fbe1 	bl	80029b8 <HAL_CAN_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80011fc:	f000 fc82 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000090 	.word	0x20000090
 8001208:	40003400 	.word	0x40003400

0800120c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a43      	ldr	r2, [pc, #268]	; (8001338 <HAL_CAN_MspInit+0x12c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d131      	bne.n	8001292 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_CAN_MspInit+0x130>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a41      	ldr	r2, [pc, #260]	; (800133c <HAL_CAN_MspInit+0x130>)
 8001236:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001238:	4b40      	ldr	r3, [pc, #256]	; (800133c <HAL_CAN_MspInit+0x130>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10b      	bne.n	8001258 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001240:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_CAN_MspInit+0x134>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a3e      	ldr	r2, [pc, #248]	; (8001340 <HAL_CAN_MspInit+0x134>)
 8001246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <HAL_CAN_MspInit+0x134>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001254:	623b      	str	r3, [r7, #32]
 8001256:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <HAL_CAN_MspInit+0x134>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a38      	ldr	r2, [pc, #224]	; (8001340 <HAL_CAN_MspInit+0x134>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_CAN_MspInit+0x134>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001270:	2303      	movs	r3, #3
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001280:	2309      	movs	r3, #9
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	482e      	ldr	r0, [pc, #184]	; (8001344 <HAL_CAN_MspInit+0x138>)
 800128c:	f001 fd76 	bl	8002d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001290:	e04e      	b.n	8001330 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <HAL_CAN_MspInit+0x13c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d149      	bne.n	8001330 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_CAN_MspInit+0x134>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_CAN_MspInit+0x130>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	4a1a      	ldr	r2, [pc, #104]	; (800133c <HAL_CAN_MspInit+0x130>)
 80012d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_CAN_MspInit+0x130>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10b      	bne.n	80012f6 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_CAN_MspInit+0x134>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_CAN_MspInit+0x134>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800130e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001320:	230b      	movs	r3, #11
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	4808      	ldr	r0, [pc, #32]	; (800134c <HAL_CAN_MspInit+0x140>)
 800132c:	f001 fd26 	bl	8002d7c <HAL_GPIO_Init>
}
 8001330:	bf00      	nop
 8001332:	3738      	adds	r7, #56	; 0x38
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40006400 	.word	0x40006400
 800133c:	20000028 	.word	0x20000028
 8001340:	40023800 	.word	0x40023800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40003400 	.word	0x40003400
 800134c:	40020000 	.word	0x40020000

08001350 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	4bb7      	ldr	r3, [pc, #732]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4ab6      	ldr	r2, [pc, #728]	; (8001644 <MX_GPIO_Init+0x2f4>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4bb4      	ldr	r3, [pc, #720]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4bb1      	ldr	r3, [pc, #708]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4ab0      	ldr	r2, [pc, #704]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4bae      	ldr	r3, [pc, #696]	; (8001644 <MX_GPIO_Init+0x2f4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001396:	4bab      	ldr	r3, [pc, #684]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4aaa      	ldr	r2, [pc, #680]	; (8001644 <MX_GPIO_Init+0x2f4>)
 800139c:	f043 0320 	orr.w	r3, r3, #32
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4ba8      	ldr	r3, [pc, #672]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	4ba5      	ldr	r3, [pc, #660]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4aa4      	ldr	r2, [pc, #656]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4ba2      	ldr	r3, [pc, #648]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b9f      	ldr	r3, [pc, #636]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a9e      	ldr	r2, [pc, #632]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b9c      	ldr	r3, [pc, #624]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b99      	ldr	r3, [pc, #612]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a98      	ldr	r2, [pc, #608]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b96      	ldr	r3, [pc, #600]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f6:	4b93      	ldr	r3, [pc, #588]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a92      	ldr	r2, [pc, #584]	; (8001644 <MX_GPIO_Init+0x2f4>)
 80013fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b90      	ldr	r3, [pc, #576]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	4b8d      	ldr	r3, [pc, #564]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a8c      	ldr	r2, [pc, #560]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b8a      	ldr	r3, [pc, #552]	; (8001644 <MX_GPIO_Init+0x2f4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001426:	2200      	movs	r2, #0
 8001428:	f248 0187 	movw	r1, #32903	; 0x8087
 800142c:	4886      	ldr	r0, [pc, #536]	; (8001648 <MX_GPIO_Init+0x2f8>)
 800142e:	f001 fe69 	bl	8003104 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001438:	4884      	ldr	r0, [pc, #528]	; (800164c <MX_GPIO_Init+0x2fc>)
 800143a:	f001 fe63 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f242 0102 	movw	r1, #8194	; 0x2002
 8001444:	4882      	ldr	r0, [pc, #520]	; (8001650 <MX_GPIO_Init+0x300>)
 8001446:	f001 fe5d 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f240 6102 	movw	r1, #1538	; 0x602
 8001450:	4880      	ldr	r0, [pc, #512]	; (8001654 <MX_GPIO_Init+0x304>)
 8001452:	f001 fe57 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f244 0184 	movw	r1, #16516	; 0x4084
 800145c:	487e      	ldr	r0, [pc, #504]	; (8001658 <MX_GPIO_Init+0x308>)
 800145e:	f001 fe51 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001468:	4877      	ldr	r0, [pc, #476]	; (8001648 <MX_GPIO_Init+0x2f8>)
 800146a:	f001 fe4b 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800146e:	2200      	movs	r2, #0
 8001470:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001474:	4879      	ldr	r0, [pc, #484]	; (800165c <MX_GPIO_Init+0x30c>)
 8001476:	f001 fe45 	bl	8003104 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2118      	movs	r1, #24
 800147e:	4878      	ldr	r0, [pc, #480]	; (8001660 <MX_GPIO_Init+0x310>)
 8001480:	f001 fe40 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001484:	f648 0387 	movw	r3, #34951	; 0x8887
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	486a      	ldr	r0, [pc, #424]	; (8001648 <MX_GPIO_Init+0x2f8>)
 800149e:	f001 fc6d 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 80014a2:	f44f 739c 	mov.w	r3, #312	; 0x138
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	4864      	ldr	r0, [pc, #400]	; (8001648 <MX_GPIO_Init+0x2f8>)
 80014b8:	f001 fc60 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80014bc:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	485d      	ldr	r0, [pc, #372]	; (8001648 <MX_GPIO_Init+0x2f8>)
 80014d2:	f001 fc53 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4857      	ldr	r0, [pc, #348]	; (800164c <MX_GPIO_Init+0x2fc>)
 80014f0:	f001 fc44 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80014f4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fa:	2303      	movs	r3, #3
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	4619      	mov	r1, r3
 8001508:	4850      	ldr	r0, [pc, #320]	; (800164c <MX_GPIO_Init+0x2fc>)
 800150a:	f001 fc37 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800150e:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	4619      	mov	r1, r3
 8001522:	484b      	ldr	r0, [pc, #300]	; (8001650 <MX_GPIO_Init+0x300>)
 8001524:	f001 fc2a 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001528:	f242 0302 	movw	r3, #8194	; 0x2002
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4843      	ldr	r0, [pc, #268]	; (8001650 <MX_GPIO_Init+0x300>)
 8001542:	f001 fc1b 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001546:	f248 0304 	movw	r3, #32772	; 0x8004
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	483d      	ldr	r0, [pc, #244]	; (8001650 <MX_GPIO_Init+0x300>)
 800155c:	f001 fc0e 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001560:	f641 0305 	movw	r3, #6149	; 0x1805
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4837      	ldr	r0, [pc, #220]	; (8001654 <MX_GPIO_Init+0x304>)
 8001576:	f001 fc01 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 800157a:	f240 6302 	movw	r3, #1538	; 0x602
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	4830      	ldr	r0, [pc, #192]	; (8001654 <MX_GPIO_Init+0x304>)
 8001594:	f001 fbf2 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001598:	f64b 7373 	movw	r3, #49011	; 0xbf73
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159e:	2303      	movs	r3, #3
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	482a      	ldr	r0, [pc, #168]	; (8001658 <MX_GPIO_Init+0x308>)
 80015ae:	f001 fbe5 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80015b2:	f244 0384 	movw	r3, #16516	; 0x4084
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4823      	ldr	r0, [pc, #140]	; (8001658 <MX_GPIO_Init+0x308>)
 80015cc:	f001 fbd6 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 80015d0:	f240 1343 	movw	r3, #323	; 0x143
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d6:	2303      	movs	r3, #3
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	481d      	ldr	r0, [pc, #116]	; (800165c <MX_GPIO_Init+0x30c>)
 80015e6:	f001 fbc9 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 80015ea:	f240 7304 	movw	r3, #1796	; 0x704
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f0:	2303      	movs	r3, #3
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4818      	ldr	r0, [pc, #96]	; (8001660 <MX_GPIO_Init+0x310>)
 8001600:	f001 fbbc 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <MX_GPIO_Init+0x310>)
 800161a:	f001 fbaf 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800161e:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	4809      	ldr	r0, [pc, #36]	; (800165c <MX_GPIO_Init+0x30c>)
 8001638:	f001 fba0 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 800163c:	2318      	movs	r3, #24
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
 8001640:	e010      	b.n	8001664 <MX_GPIO_Init+0x314>
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40021000 	.word	0x40021000
 800164c:	40020800 	.word	0x40020800
 8001650:	40021400 	.word	0x40021400
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	40021800 	.word	0x40021800
 8001660:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4803      	ldr	r0, [pc, #12]	; (8001684 <MX_GPIO_Init+0x334>)
 8001678:	f001 fb80 	bl	8002d7c <HAL_GPIO_Init>

}
 800167c:	bf00      	nop
 800167e:	3738      	adds	r7, #56	; 0x38
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40020c00 	.word	0x40020c00

08001688 <calculateMovingAverage>:
static uint16_t getDifference(uint16_t a, uint16_t b);						// Differenzberechnung

// Gleitenden Mittelwert berechnen, sehr Speicher arm
//----------------------------------------------------------------------
static uint16_t calculateMovingAverage(uint16_t oldValue, uint16_t newValue, uint16_t n)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
 8001692:	460b      	mov	r3, r1
 8001694:	80bb      	strh	r3, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 800169a:	88ba      	ldrh	r2, [r7, #4]
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	1ad2      	subs	r2, r2, r3
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4413      	add	r3, r2
 80016ac:	b29b      	uxth	r3, r3
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c2:	f000 fe1c 	bl	80022fe <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t data[36] = {0}, temp;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2220      	movs	r2, #32
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f005 fb0e 	bl	8006cf4 <memset>
  uint32_t tmp;
  uint16_t spannungen[12] = {0}, temperatur[2] = {0}, tmp_mean;
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
 80016e6:	615a      	str	r2, [r3, #20]
 80016e8:	2300      	movs	r3, #0
 80016ea:	603b      	str	r3, [r7, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ec:	f000 f99a 	bl	8001a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f0:	f7ff fe2e 	bl	8001350 <MX_GPIO_Init>
  MX_CAN1_Init();
 80016f4:	f7ff fd1e 	bl	8001134 <MX_CAN1_Init>
  MX_SPI4_Init();
 80016f8:	f000 fa70 	bl	8001bdc <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80016fc:	f000 fd48 	bl	8002190 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001700:	f7ff fc86 	bl	8001010 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001704:	f000 fba6 	bl	8001e54 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001708:	f000 fc2a 	bl	8001f60 <MX_TIM4_Init>
  MX_SPI1_Init();
 800170c:	f000 fa28 	bl	8001b60 <MX_SPI1_Init>
  MX_CAN3_Init();
 8001710:	f7ff fd46 	bl	80011a0 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001714:	f7ff fac8 	bl	8000ca8 <readResetSource>
 8001718:	4603      	mov	r3, r0
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fb16 	bl	8000d4c <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001720:	213a      	movs	r1, #58	; 0x3a
 8001722:	48b8      	ldr	r0, [pc, #736]	; (8001a04 <main+0x348>)
 8001724:	f7fe ff0c 	bl	8000540 <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 8001728:	f7ff fa94 	bl	8000c54 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 800172c:	f7ff fc32 	bl	8000f94 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001730:	f7ff fb7c 	bl	8000e2c <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173a:	48b3      	ldr	r0, [pc, #716]	; (8001a08 <main+0x34c>)
 800173c:	f001 fce2 	bl	8003104 <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 8001740:	2014      	movs	r0, #20
 8001742:	f000 fe39 	bl	80023b8 <HAL_Delay>

    uartTransmit("\n", 1);
 8001746:	2101      	movs	r1, #1
 8001748:	48b0      	ldr	r0, [pc, #704]	; (8001a0c <main+0x350>)
 800174a:	f7fe fef9 	bl	8000540 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 800174e:	2122      	movs	r1, #34	; 0x22
 8001750:	48af      	ldr	r0, [pc, #700]	; (8001a10 <main+0x354>)
 8001752:	f7fe fef5 	bl	8000540 <uartTransmit>
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
	}*/

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 8001756:	f240 7011 	movw	r0, #1809	; 0x711
 800175a:	f7fe ff81 	bl	8000660 <ltc6811>
	ltc6811(CLRSTAT);
 800175e:	f240 7013 	movw	r0, #1811	; 0x713
 8001762:	f7fe ff7d 	bl	8000660 <ltc6811>
	ltc6811(CLRAUX);
 8001766:	f240 7012 	movw	r0, #1810	; 0x712
 800176a:	f7fe ff79 	bl	8000660 <ltc6811>
	{
		uartTransmitNumber(data[10+i], 10);
	}
	uartTransmit(";", 1);*/

	ltc1380_write(LTC1380_MUX0, TEMPERATUR0);							// Multiplexer 0 einstellen
 800176e:	2100      	movs	r1, #0
 8001770:	2090      	movs	r0, #144	; 0x90
 8001772:	f7fe ff19 	bl	80005a8 <ltc1380_write>
	ltc1380_write(LTC1380_MUX2, TEMPERATUR0);							// Multiplexer 1 einstellen
 8001776:	2100      	movs	r1, #0
 8001778:	2094      	movs	r0, #148	; 0x94
 800177a:	f7fe ff15 	bl	80005a8 <ltc1380_write>
	ltc6811(ADCVAX | MD73 | CELLALL);									// Initial Command Zellen auslesen
 800177e:	f240 506f 	movw	r0, #1391	; 0x56f
 8001782:	f7fe ff6d 	bl	8000660 <ltc6811>

	tmp_mean = 65535;
 8001786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 800178e:	f44f 7058 	mov.w	r0, #864	; 0x360
 8001792:	f7fe ff65 	bl	8000660 <ltc6811>
		HAL_Delay(300);
 8001796:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800179a:	f000 fe0d 	bl	80023b8 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	2004      	movs	r0, #4
 80017a6:	f7ff f819 	bl	80007dc <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	3306      	adds	r3, #6
 80017b0:	4619      	mov	r1, r3
 80017b2:	2006      	movs	r0, #6
 80017b4:	f7ff f812 	bl	80007dc <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	330c      	adds	r3, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	2008      	movs	r0, #8
 80017c2:	f7ff f80b 	bl	80007dc <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	3312      	adds	r3, #18
 80017cc:	4619      	mov	r1, r3
 80017ce:	200a      	movs	r0, #10
 80017d0:	f7ff f804 	bl	80007dc <ltc6811_read>

		uartTransmit("Spannungen\n", 11);
 80017d4:	210b      	movs	r1, #11
 80017d6:	488f      	ldr	r0, [pc, #572]	; (8001a14 <main+0x358>)
 80017d8:	f7fe feb2 	bl	8000540 <uartTransmit>

		for (uint8_t i = 0; i < 12; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80017e2:	e023      	b.n	800182c <main+0x170>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 80017e4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	3301      	adds	r3, #1
 80017ec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80017f0:	4413      	add	r3, r2
 80017f2:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001804:	440b      	add	r3, r1
 8001806:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21a      	sxth	r2, r3
 8001810:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001814:	b292      	uxth	r2, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800181c:	440b      	add	r3, r1
 800181e:	f823 2c4c 	strh.w	r2, [r3, #-76]
		for (uint8_t i = 0; i < 12; i++)
 8001822:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001826:	3301      	adds	r3, #1
 8001828:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800182c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001830:	2b0b      	cmp	r3, #11
 8001832:	d9d7      	bls.n	80017e4 <main+0x128>
		}

		for (uint8_t i = 0; i < 12; i++)
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800183a:	e014      	b.n	8001866 <main+0x1aa>
		{
			uartTransmitNumber(spannungen[i], 10);
 800183c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001846:	4413      	add	r3, r2
 8001848:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800184c:	210a      	movs	r1, #10
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe8a 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001854:	2101      	movs	r1, #1
 8001856:	4870      	ldr	r0, [pc, #448]	; (8001a18 <main+0x35c>)
 8001858:	f7fe fe72 	bl	8000540 <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 800185c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001860:	3301      	adds	r3, #1
 8001862:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001866:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800186a:	2b0b      	cmp	r3, #11
 800186c:	d9e6      	bls.n	800183c <main+0x180>
		}

		tmp = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	64bb      	str	r3, [r7, #72]	; 0x48
		for (uint8_t i = 0; i < 12; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001878:	e010      	b.n	800189c <main+0x1e0>
		{
			tmp += spannungen[i];
 800187a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001884:	4413      	add	r3, r2
 8001886:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800188a:	461a      	mov	r2, r3
 800188c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800188e:	4413      	add	r3, r2
 8001890:	64bb      	str	r3, [r7, #72]	; 0x48
		for (uint8_t i = 0; i < 12; i++)
 8001892:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001896:	3301      	adds	r3, #1
 8001898:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800189c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018a0:	2b0b      	cmp	r3, #11
 80018a2:	d9ea      	bls.n	800187a <main+0x1be>
		}
		tmp /= 12;
 80018a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018a6:	4a5d      	ldr	r2, [pc, #372]	; (8001a1c <main+0x360>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
		uartTransmitNumber(tmp, 10);
 80018b0:	210a      	movs	r1, #10
 80018b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80018b4:	f7fe fe58 	bl	8000568 <uartTransmitNumber>
		uartTransmit(";", 1);
 80018b8:	2101      	movs	r1, #1
 80018ba:	4857      	ldr	r0, [pc, #348]	; (8001a18 <main+0x35c>)
 80018bc:	f7fe fe40 	bl	8000540 <uartTransmit>

		tmp_mean = calculateMovingAverage(tmp_mean, tmp, 10);
 80018c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018c2:	b299      	uxth	r1, r3
 80018c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80018c8:	220a      	movs	r2, #10
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fedc 	bl	8001688 <calculateMovingAverage>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uartTransmitNumber(tmp_mean, 10);
 80018d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80018da:	210a      	movs	r1, #10
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe43 	bl	8000568 <uartTransmitNumber>

		uartTransmit("\n", 1);
 80018e2:	2101      	movs	r1, #1
 80018e4:	4849      	ldr	r0, [pc, #292]	; (8001a0c <main+0x350>)
 80018e6:	f7fe fe2b 	bl	8000540 <uartTransmit>

		uartTransmit("Temperaturen\n", 13);
 80018ea:	210d      	movs	r1, #13
 80018ec:	484c      	ldr	r0, [pc, #304]	; (8001a20 <main+0x364>)
 80018ee:	f7fe fe27 	bl	8000540 <uartTransmit>

		for (uint8_t j = 0; j < 8; j++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80018f8:	e06c      	b.n	80019d4 <main+0x318>
		{
			ltc1380_write(LTC1380_MUX0, j);									// Multiplexer 0 einstellen
 80018fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80018fe:	4619      	mov	r1, r3
 8001900:	2090      	movs	r0, #144	; 0x90
 8001902:	f7fe fe51 	bl	80005a8 <ltc1380_write>
			ltc1380_write(LTC1380_MUX2, j);									// Multiplexer 1 einstellen
 8001906:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800190a:	4619      	mov	r1, r3
 800190c:	2094      	movs	r0, #148	; 0x94
 800190e:	f7fe fe4b 	bl	80005a8 <ltc1380_write>
			HAL_Delay(100);
 8001912:	2064      	movs	r0, #100	; 0x64
 8001914:	f000 fd50 	bl	80023b8 <HAL_Delay>
			ltc6811(ADAX | MD262 | GPIOALL);								// Initial Command Zellen auslesen
 8001918:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 800191c:	f7fe fea0 	bl	8000660 <ltc6811>
			HAL_Delay(300);
 8001920:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001924:	f000 fd48 	bl	80023b8 <HAL_Delay>
			ltc6811_read(RDAUXA, &data[0]);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	200c      	movs	r0, #12
 8001930:	f7fe ff54 	bl	80007dc <ltc6811_read>

			for (uint8_t i = 0; i < 3; i++)
 8001934:	2300      	movs	r3, #0
 8001936:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800193a:	e023      	b.n	8001984 <main+0x2c8>
			{
				temperatur[i] = ((data[i*2+1]<<8) | data[i*2]);
 800193c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	3301      	adds	r3, #1
 8001944:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001948:	4413      	add	r3, r2
 800194a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	b21a      	sxth	r2, r3
 8001952:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800195c:	440b      	add	r3, r1
 800195e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001962:	b21b      	sxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b21a      	sxth	r2, r3
 8001968:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800196c:	b292      	uxth	r2, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001974:	440b      	add	r3, r1
 8001976:	f823 2c50 	strh.w	r2, [r3, #-80]
			for (uint8_t i = 0; i < 3; i++)
 800197a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800197e:	3301      	adds	r3, #1
 8001980:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001984:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001988:	2b02      	cmp	r3, #2
 800198a:	d9d7      	bls.n	800193c <main+0x280>
			}
			uartTransmitNumber(temperatur[0], 10);
 800198c:	883b      	ldrh	r3, [r7, #0]
 800198e:	210a      	movs	r1, #10
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fde9 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001996:	2101      	movs	r1, #1
 8001998:	481f      	ldr	r0, [pc, #124]	; (8001a18 <main+0x35c>)
 800199a:	f7fe fdd1 	bl	8000540 <uartTransmit>
			uartTransmitNumber(temperatur[1], 10);
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	210a      	movs	r1, #10
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fde0 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 80019a8:	2101      	movs	r1, #1
 80019aa:	481b      	ldr	r0, [pc, #108]	; (8001a18 <main+0x35c>)
 80019ac:	f7fe fdc8 	bl	8000540 <uartTransmit>

			if (j == 7)
 80019b0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80019b4:	2b07      	cmp	r3, #7
 80019b6:	d108      	bne.n	80019ca <main+0x30e>
			{
				uartTransmitNumber(temperatur[2], 10);
 80019b8:	88bb      	ldrh	r3, [r7, #4]
 80019ba:	210a      	movs	r1, #10
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdd3 	bl	8000568 <uartTransmitNumber>
				uartTransmit(";", 1);
 80019c2:	2101      	movs	r1, #1
 80019c4:	4814      	ldr	r0, [pc, #80]	; (8001a18 <main+0x35c>)
 80019c6:	f7fe fdbb 	bl	8000540 <uartTransmit>
		for (uint8_t j = 0; j < 8; j++)
 80019ca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80019ce:	3301      	adds	r3, #1
 80019d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80019d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80019d8:	2b07      	cmp	r3, #7
 80019da:	d98e      	bls.n	80018fa <main+0x23e>
			}
		}

		uartTransmit("\n", 1);
 80019dc:	2101      	movs	r1, #1
 80019de:	480b      	ldr	r0, [pc, #44]	; (8001a0c <main+0x350>)
 80019e0:	f7fe fdae 	bl	8000540 <uartTransmit>

		temp++;
 80019e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019e8:	3301      	adds	r3, #1
 80019ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if(temp == 2)
 80019ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	f47f aecb 	bne.w	800178e <main+0xd2>
			return 1;
 80019f8:	2301      	movs	r3, #1
  }
  /* USER CODE END 3 */
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3750      	adds	r7, #80	; 0x50
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	080070cc 	.word	0x080070cc
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08007108 	.word	0x08007108
 8001a10:	0800710c 	.word	0x0800710c
 8001a14:	08007130 	.word	0x08007130
 8001a18:	0800713c 	.word	0x0800713c
 8001a1c:	aaaaaaab 	.word	0xaaaaaaab
 8001a20:	08007140 	.word	0x08007140

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b094      	sub	sp, #80	; 0x50
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	2234      	movs	r2, #52	; 0x34
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 f95e 	bl	8006cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	f107 0308 	add.w	r3, r7, #8
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <SystemClock_Config+0xd8>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <SystemClock_Config+0xd8>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	; 0x40
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <SystemClock_Config+0xd8>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <SystemClock_Config+0xdc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <SystemClock_Config+0xdc>)
 8001a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <SystemClock_Config+0xdc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a82:	2302      	movs	r3, #2
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a8c:	2319      	movs	r3, #25
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001a90:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001a94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 fb96 	bl	80031d8 <HAL_RCC_OscConfig>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ab2:	f000 f827 	bl	8001b04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ab6:	f001 fb3f 	bl	8003138 <HAL_PWREx_EnableOverDrive>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001ac0:	f000 f820 	bl	8001b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ad0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ad4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	2107      	movs	r1, #7
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fe26 	bl	8003734 <HAL_RCC_ClockConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001aee:	f000 f809 	bl	8001b04 <Error_Handler>
  }
}
 8001af2:	bf00      	nop
 8001af4:	3750      	adds	r7, #80	; 0x50
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8001b0c:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <Error_Handler+0x50>)
 8001b0e:	7813      	ldrb	r3, [r2, #0]
 8001b10:	f043 0320 	orr.w	r3, r3, #32
 8001b14:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <Error_Handler+0x50>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <Error_Handler+0x54>)
 8001b28:	f001 faec 	bl	8003104 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001b2c:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <Error_Handler+0x50>)
 8001b2e:	7813      	ldrb	r3, [r2, #0]
 8001b30:	f36f 1386 	bfc	r3, #6, #1
 8001b34:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <Error_Handler+0x50>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	2104      	movs	r1, #4
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <Error_Handler+0x54>)
 8001b46:	f001 fadd 	bl	8003104 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8001b4a:	2122      	movs	r1, #34	; 0x22
 8001b4c:	4803      	ldr	r0, [pc, #12]	; (8001b5c <Error_Handler+0x58>)
 8001b4e:	f7fe fcf7 	bl	8000540 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8001b52:	e7fe      	b.n	8001b52 <Error_Handler+0x4e>
 8001b54:	20000038 	.word	0x20000038
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	08007150 	.word	0x08007150

08001b60 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <MX_SPI1_Init+0x78>)
 8001b68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001b7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001b8e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001bae:	2207      	movs	r2, #7
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001bba:	2208      	movs	r2, #8
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_SPI1_Init+0x74>)
 8001bc0:	f002 fbb6 	bl	8004330 <HAL_SPI_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bca:	f7ff ff9b 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000144 	.word	0x20000144
 8001bd8:	40013000 	.word	0x40013000

08001bdc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001be2:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <MX_SPI4_Init+0x78>)
 8001be4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bec:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001bf6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bfa:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c12:	2230      	movs	r2, #48	; 0x30
 8001c14:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_SPI4_Init+0x74>)
 8001c3c:	f002 fb78 	bl	8004330 <HAL_SPI_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001c46:	f7ff ff5d 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200000e0 	.word	0x200000e0
 8001c54:	40013400 	.word	0x40013400

08001c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <HAL_SPI_MspInit+0x114>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d145      	bne.n	8001d06 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a3c      	ldr	r2, [pc, #240]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a36      	ldr	r2, [pc, #216]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001caa:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a30      	ldr	r2, [pc, #192]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4825      	ldr	r0, [pc, #148]	; (8001d74 <HAL_SPI_MspInit+0x11c>)
 8001cde:	f001 f84d 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001ce2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	481e      	ldr	r0, [pc, #120]	; (8001d78 <HAL_SPI_MspInit+0x120>)
 8001d00:	f001 f83c 	bl	8002d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001d04:	e02d      	b.n	8001d62 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_SPI_MspInit+0x124>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d128      	bne.n	8001d62 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001d16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d1a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001d40:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d52:	2305      	movs	r3, #5
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4808      	ldr	r0, [pc, #32]	; (8001d80 <HAL_SPI_MspInit+0x128>)
 8001d5e:	f001 f80d 	bl	8002d7c <HAL_GPIO_Init>
}
 8001d62:	bf00      	nop
 8001d64:	3730      	adds	r7, #48	; 0x30
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40013000 	.word	0x40013000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	40013400 	.word	0x40013400
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_MspInit+0x44>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_MspInit+0x44>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_MspInit+0x44>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <HardFault_Handler+0x4>

08001de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <MemManage_Handler+0x4>

08001de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e20:	f000 faaa 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <SystemInit+0x28>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <SystemInit+0x28>)
 8001e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SystemInit+0x28>)
 8001e3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e42:	609a      	str	r2, [r3, #8]
#endif
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e78:	463b      	mov	r3, r7
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e82:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001e84:	4a35      	ldr	r2, [pc, #212]	; (8001f5c <MX_TIM1_Init+0x108>)
 8001e86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e88:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001eae:	482a      	ldr	r0, [pc, #168]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001eb0:	f003 f9f5 	bl	800529e <HAL_TIM_IC_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001eba:	f7ff fe23 	bl	8001b04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ec2:	2350      	movs	r3, #80	; 0x50
 8001ec4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481f      	ldr	r0, [pc, #124]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001eda:	f003 fbe7 	bl	80056ac <HAL_TIM_SlaveConfigSynchro>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001ee4:	f7ff fe0e 	bl	8001b04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001eec:	2301      	movs	r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	4619      	mov	r1, r3
 8001f00:	4815      	ldr	r0, [pc, #84]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001f02:	f003 fa23 	bl	800534c <HAL_TIM_IC_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001f0c:	f7ff fdfa 	bl	8001b04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f10:	2302      	movs	r3, #2
 8001f12:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f14:	2302      	movs	r3, #2
 8001f16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001f22:	f003 fa13 	bl	800534c <HAL_TIM_IC_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001f2c:	f7ff fdea 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f30:	2300      	movs	r3, #0
 8001f32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_TIM1_Init+0x104>)
 8001f42:	f004 f931 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001f4c:	f7ff fdda 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	3730      	adds	r7, #48	; 0x30
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200001f4 	.word	0x200001f4
 8001f5c:	40010000 	.word	0x40010000

08001f60 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f72:	463b      	mov	r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
 8001f80:	615a      	str	r2, [r3, #20]
 8001f82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <MX_TIM4_Init+0xf0>)
 8001f86:	4a33      	ldr	r2, [pc, #204]	; (8002054 <MX_TIM4_Init+0xf4>)
 8001f88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <MX_TIM4_Init+0xf0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <MX_TIM4_Init+0xf0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <MX_TIM4_Init+0xf0>)
 8001f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <MX_TIM4_Init+0xf0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <MX_TIM4_Init+0xf0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001faa:	4829      	ldr	r0, [pc, #164]	; (8002050 <MX_TIM4_Init+0xf0>)
 8001fac:	f003 f920 	bl	80051f0 <HAL_TIM_PWM_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001fb6:	f7ff fda5 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4821      	ldr	r0, [pc, #132]	; (8002050 <MX_TIM4_Init+0xf0>)
 8001fca:	f004 f8ed 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001fd4:	f7ff fd96 	bl	8001b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd8:	2360      	movs	r3, #96	; 0x60
 8001fda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4818      	ldr	r0, [pc, #96]	; (8002050 <MX_TIM4_Init+0xf0>)
 8001ff0:	f003 fa48 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001ffa:	f7ff fd83 	bl	8001b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ffe:	463b      	mov	r3, r7
 8002000:	2204      	movs	r2, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4812      	ldr	r0, [pc, #72]	; (8002050 <MX_TIM4_Init+0xf0>)
 8002006:	f003 fa3d 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002010:	f7ff fd78 	bl	8001b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	2208      	movs	r2, #8
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <MX_TIM4_Init+0xf0>)
 800201c:	f003 fa32 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002026:	f7ff fd6d 	bl	8001b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800202a:	463b      	mov	r3, r7
 800202c:	220c      	movs	r2, #12
 800202e:	4619      	mov	r1, r3
 8002030:	4807      	ldr	r0, [pc, #28]	; (8002050 <MX_TIM4_Init+0xf0>)
 8002032:	f003 fa27 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800203c:	f7ff fd62 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <MX_TIM4_Init+0xf0>)
 8002042:	f000 f86d 	bl	8002120 <HAL_TIM_MspPostInit>

}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	; 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200001a8 	.word	0x200001a8
 8002054:	40000800 	.word	0x40000800

08002058 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_TIM_IC_MspInit+0x7c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d128      	bne.n	80020cc <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_TIM_IC_MspInit+0x80>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_TIM_IC_MspInit+0x80>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_TIM_IC_MspInit+0x80>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_TIM_IC_MspInit+0x80>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_TIM_IC_MspInit+0x80>)
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_TIM_IC_MspInit+0x80>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80020aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020bc:	2301      	movs	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_TIM_IC_MspInit+0x84>)
 80020c8:	f000 fe58 	bl	8002d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40021000 	.word	0x40021000

080020e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_TIM_PWM_MspInit+0x38>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10b      	bne.n	800210a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_TIM_PWM_MspInit+0x3c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_TIM_PWM_MspInit+0x3c>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_TIM_PWM_MspInit+0x3c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40000800 	.word	0x40000800
 800211c:	40023800 	.word	0x40023800

08002120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_TIM_MspPostInit+0x64>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d11c      	bne.n	800217c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_TIM_MspPostInit+0x68>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <HAL_TIM_MspPostInit+0x68>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_TIM_MspPostInit+0x68>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 800215a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800215e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800216c:	2302      	movs	r3, #2
 800216e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_TIM_MspPostInit+0x6c>)
 8002178:	f000 fe00 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40000800 	.word	0x40000800
 8002188:	40023800 	.word	0x40023800
 800218c:	40020c00 	.word	0x40020c00

08002190 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <MX_USART2_UART_Init+0x5c>)
 8002198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 800219c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021b6:	220c      	movs	r2, #12
 80021b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021d4:	f004 f876 	bl	80062c4 <HAL_UART_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021de:	f7ff fc91 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000240 	.word	0x20000240
 80021ec:	40004400 	.word	0x40004400

080021f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0ae      	sub	sp, #184	; 0xb8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2290      	movs	r2, #144	; 0x90
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f004 fd6f 	bl	8006cf4 <memset>
  if(uartHandle->Instance==USART2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <HAL_UART_MspInit+0xb0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d13a      	bne.n	8002296 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002224:	2300      	movs	r3, #0
 8002226:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4618      	mov	r0, r3
 800222e:	f001 fc57 	bl	8003ae0 <HAL_RCCEx_PeriphCLKConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002238:	f7ff fc64 	bl	8001b04 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 8002242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002246:	6413      	str	r3, [r2, #64]	; 0x40
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	6313      	str	r3, [r2, #48]	; 0x30
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800226c:	2360      	movs	r3, #96	; 0x60
 800226e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002284:	2307      	movs	r3, #7
 8002286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800228a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <HAL_UART_MspInit+0xb8>)
 8002292:	f000 fd73 	bl	8002d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002296:	bf00      	nop
 8002298:	37b8      	adds	r7, #184	; 0xb8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40004400 	.word	0x40004400
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020c00 	.word	0x40020c00

080022ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022b2:	e003      	b.n	80022bc <LoopCopyDataInit>

080022b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022ba:	3104      	adds	r1, #4

080022bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022bc:	480b      	ldr	r0, [pc, #44]	; (80022ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022c4:	d3f6      	bcc.n	80022b4 <CopyDataInit>
  ldr  r2, =_sbss
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022c8:	e002      	b.n	80022d0 <LoopFillZerobss>

080022ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022cc:	f842 3b04 	str.w	r3, [r2], #4

080022d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022d4:	d3f9      	bcc.n	80022ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d6:	f7ff fda7 	bl	8001e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022da:	f004 fce7 	bl	8006cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022de:	f7ff f9ed 	bl	80016bc <main>
  bx  lr    
 80022e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80022e8:	080073c4 	.word	0x080073c4
  ldr  r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022f0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80022f4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80022f8:	200002c8 	.word	0x200002c8

080022fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC_IRQHandler>

080022fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002302:	2003      	movs	r0, #3
 8002304:	f000 fd06 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002308:	2000      	movs	r0, #0
 800230a:	f000 f805 	bl	8002318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800230e:	f7ff fd39 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x54>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x58>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fd13 	bl	8002d62 <HAL_SYSTICK_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00e      	b.n	8002364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0f      	cmp	r3, #15
 800234a:	d80a      	bhi.n	8002362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234c:	2200      	movs	r2, #0
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f000 fce9 	bl	8002d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <HAL_InitTick+0x5c>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000000 	.word	0x20000000
 8002370:	20000008 	.word	0x20000008
 8002374:	20000004 	.word	0x20000004

08002378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_IncTick+0x20>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_IncTick+0x24>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_IncTick+0x24>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000008 	.word	0x20000008
 800239c:	200002c4 	.word	0x200002c4

080023a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_GetTick+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	200002c4 	.word	0x200002c4

080023b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff ffee 	bl	80023a0 <HAL_GetTick>
 80023c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d005      	beq.n	80023de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_Delay+0x44>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023de:	bf00      	nop
 80023e0:	f7ff ffde 	bl	80023a0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d8f7      	bhi.n	80023e0 <HAL_Delay+0x28>
  {
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000008 	.word	0x20000008

08002400 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8002404:	4b02      	ldr	r3, [pc, #8]	; (8002410 <HAL_GetHalVersion+0x10>)
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	01020a00 	.word	0x01020a00

08002414 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_GetREVID+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0c1b      	lsrs	r3, r3, #16
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e0042000 	.word	0xe0042000

0800242c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_GetDEVID+0x18>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e0042000 	.word	0xe0042000

08002448 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_GetUIDw0+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	1ff0f420 	.word	0x1ff0f420

08002460 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_GetUIDw1+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	1ff0f424 	.word	0x1ff0f424

08002478 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_GetUIDw2+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	1ff0f428 	.word	0x1ff0f428

08002490 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e031      	b.n	800250a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fe00 	bl	80010b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d116      	bne.n	80024fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_ADC_Init+0x84>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	f043 0202 	orr.w	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f970 	bl	80027c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
 80024fa:	e001      	b.n	8002500 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	ffffeefd 	.word	0xffffeefd

08002518 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x1c>
 8002530:	2302      	movs	r3, #2
 8002532:	e136      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x28a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b09      	cmp	r3, #9
 8002542:	d93a      	bls.n	80025ba <HAL_ADC_ConfigChannel+0xa2>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800254c:	d035      	beq.n	80025ba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68d9      	ldr	r1, [r3, #12]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	3b1e      	subs	r3, #30
 8002564:	2207      	movs	r2, #7
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	400a      	ands	r2, r1
 8002572:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a8d      	ldr	r2, [pc, #564]	; (80027b0 <HAL_ADC_ConfigChannel+0x298>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d10a      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68d9      	ldr	r1, [r3, #12]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	061a      	lsls	r2, r3, #24
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002592:	e035      	b.n	8002600 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68d9      	ldr	r1, [r3, #12]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4403      	add	r3, r0
 80025ac:	3b1e      	subs	r3, #30
 80025ae:	409a      	lsls	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b8:	e022      	b.n	8002600 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6919      	ldr	r1, [r3, #16]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	2207      	movs	r2, #7
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43da      	mvns	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	400a      	ands	r2, r1
 80025dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6919      	ldr	r1, [r3, #16]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4403      	add	r3, r0
 80025f6:	409a      	lsls	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d824      	bhi.n	8002652 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3b05      	subs	r3, #5
 800261a:	221f      	movs	r2, #31
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43da      	mvns	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	400a      	ands	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	3b05      	subs	r3, #5
 8002644:	fa00 f203 	lsl.w	r2, r0, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	635a      	str	r2, [r3, #52]	; 0x34
 8002650:	e04c      	b.n	80026ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d824      	bhi.n	80026a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b23      	subs	r3, #35	; 0x23
 800266c:	221f      	movs	r2, #31
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b23      	subs	r3, #35	; 0x23
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
 80026a2:	e023      	b.n	80026ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b41      	subs	r3, #65	; 0x41
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43da      	mvns	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	400a      	ands	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	3b41      	subs	r3, #65	; 0x41
 80026e0:	fa00 f203 	lsl.w	r2, r0, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a30      	ldr	r2, [pc, #192]	; (80027b4 <HAL_ADC_ConfigChannel+0x29c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10a      	bne.n	800270c <HAL_ADC_ConfigChannel+0x1f4>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026fe:	d105      	bne.n	800270c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002706:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800270a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <HAL_ADC_ConfigChannel+0x29c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10f      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x21e>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b12      	cmp	r3, #18
 800271c:	d10b      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002724:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002728:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002734:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_ADC_ConfigChannel+0x29c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d12b      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x280>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <HAL_ADC_ConfigChannel+0x298>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d003      	beq.n	8002752 <HAL_ADC_ConfigChannel+0x23a>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b11      	cmp	r3, #17
 8002750:	d122      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002758:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800275c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002768:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_ADC_ConfigChannel+0x298>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d111      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_ADC_ConfigChannel+0x2a4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <HAL_ADC_ConfigChannel+0x2a8>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0c9a      	lsrs	r2, r3, #18
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800278a:	e002      	b.n	8002792 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3b01      	subs	r3, #1
 8002790:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f9      	bne.n	800278c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	10000012 	.word	0x10000012
 80027b4:	40012000 	.word	0x40012000
 80027b8:	40012300 	.word	0x40012300
 80027bc:	20000000 	.word	0x20000000
 80027c0:	431bde83 	.word	0x431bde83

080027c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80027cc:	4b78      	ldr	r3, [pc, #480]	; (80029b0 <ADC_Init+0x1ec>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a77      	ldr	r2, [pc, #476]	; (80029b0 <ADC_Init+0x1ec>)
 80027d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80027d8:	4b75      	ldr	r3, [pc, #468]	; (80029b0 <ADC_Init+0x1ec>)
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4973      	ldr	r1, [pc, #460]	; (80029b0 <ADC_Init+0x1ec>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	021a      	lsls	r2, r3, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002818:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6899      	ldr	r1, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	4a58      	ldr	r2, [pc, #352]	; (80029b4 <ADC_Init+0x1f0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d022      	beq.n	800289e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002866:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	e00f      	b.n	80028be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0202 	bic.w	r2, r2, #2
 80028cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6899      	ldr	r1, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	005a      	lsls	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01b      	beq.n	8002924 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800290a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	3b01      	subs	r3, #1
 8002918:	035a      	lsls	r2, r3, #13
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	e007      	b.n	8002934 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002932:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	3b01      	subs	r3, #1
 8002950:	051a      	lsls	r2, r3, #20
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002976:	025a      	lsls	r2, r3, #9
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6899      	ldr	r1, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	029a      	lsls	r2, r3, #10
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	609a      	str	r2, [r3, #8]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	40012300 	.word	0x40012300
 80029b4:	0f000001 	.word	0x0f000001

080029b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0ed      	b.n	8002ba6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fc18 	bl	800120c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ec:	f7ff fcd8 	bl	80023a0 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029f2:	e012      	b.n	8002a1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029f4:	f7ff fcd4 	bl	80023a0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b0a      	cmp	r3, #10
 8002a00:	d90b      	bls.n	8002a1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2205      	movs	r2, #5
 8002a12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0c5      	b.n	8002ba6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0e5      	beq.n	80029f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0202 	bic.w	r2, r2, #2
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a38:	f7ff fcb2 	bl	80023a0 <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a3e:	e012      	b.n	8002a66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a40:	f7ff fcae 	bl	80023a0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b0a      	cmp	r3, #10
 8002a4c:	d90b      	bls.n	8002a66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e09f      	b.n	8002ba6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e5      	bne.n	8002a40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7e1b      	ldrb	r3, [r3, #24]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d108      	bne.n	8002a8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7e5b      	ldrb	r3, [r3, #25]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d108      	bne.n	8002ab8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e007      	b.n	8002ac8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7e9b      	ldrb	r3, [r3, #26]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d108      	bne.n	8002ae2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0220 	orr.w	r2, r2, #32
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e007      	b.n	8002af2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0220 	bic.w	r2, r2, #32
 8002af0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7edb      	ldrb	r3, [r3, #27]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d108      	bne.n	8002b0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0210 	bic.w	r2, r2, #16
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e007      	b.n	8002b1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0210 	orr.w	r2, r2, #16
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7f1b      	ldrb	r3, [r3, #28]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d108      	bne.n	8002b36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e007      	b.n	8002b46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0208 	bic.w	r2, r2, #8
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7f5b      	ldrb	r3, [r3, #29]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d108      	bne.n	8002b60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0204 	orr.w	r2, r2, #4
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e007      	b.n	8002b70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	ea42 0103 	orr.w	r1, r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	1e5a      	subs	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bde:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	60d3      	str	r3, [r2, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00
 8002bf4:	05fa0000 	.word	0x05fa0000

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	; (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	; (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff8e 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff47 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3c:	f7ff ff5c 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff8e 	bl	8002c68 <NVIC_EncodePriority>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff5d 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffb0 	bl	8002cd0 <SysTick_Config>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e175      	b.n	8003088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	f040 8164 	bne.w	8003082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d005      	beq.n	8002dd2 <HAL_GPIO_Init+0x56>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d130      	bne.n	8002e34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	2203      	movs	r2, #3
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e08:	2201      	movs	r2, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 0201 	and.w	r2, r3, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d017      	beq.n	8002e70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d123      	bne.n	8002ec4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	08da      	lsrs	r2, r3, #3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3208      	adds	r2, #8
 8002e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	08da      	lsrs	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3208      	adds	r2, #8
 8002ebe:	69b9      	ldr	r1, [r7, #24]
 8002ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0203 	and.w	r2, r3, #3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80be 	beq.w	8003082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f06:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4a65      	ldr	r2, [pc, #404]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f1e:	4a61      	ldr	r2, [pc, #388]	; (80030a4 <HAL_GPIO_Init+0x328>)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a58      	ldr	r2, [pc, #352]	; (80030a8 <HAL_GPIO_Init+0x32c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d037      	beq.n	8002fba <HAL_GPIO_Init+0x23e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a57      	ldr	r2, [pc, #348]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d031      	beq.n	8002fb6 <HAL_GPIO_Init+0x23a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a56      	ldr	r2, [pc, #344]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d02b      	beq.n	8002fb2 <HAL_GPIO_Init+0x236>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a55      	ldr	r2, [pc, #340]	; (80030b4 <HAL_GPIO_Init+0x338>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d025      	beq.n	8002fae <HAL_GPIO_Init+0x232>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a54      	ldr	r2, [pc, #336]	; (80030b8 <HAL_GPIO_Init+0x33c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01f      	beq.n	8002faa <HAL_GPIO_Init+0x22e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a53      	ldr	r2, [pc, #332]	; (80030bc <HAL_GPIO_Init+0x340>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d019      	beq.n	8002fa6 <HAL_GPIO_Init+0x22a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_GPIO_Init+0x344>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_GPIO_Init+0x226>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a51      	ldr	r2, [pc, #324]	; (80030c4 <HAL_GPIO_Init+0x348>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00d      	beq.n	8002f9e <HAL_GPIO_Init+0x222>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a50      	ldr	r2, [pc, #320]	; (80030c8 <HAL_GPIO_Init+0x34c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <HAL_GPIO_Init+0x21e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4f      	ldr	r2, [pc, #316]	; (80030cc <HAL_GPIO_Init+0x350>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_GPIO_Init+0x21a>
 8002f92:	2309      	movs	r3, #9
 8002f94:	e012      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002f96:	230a      	movs	r3, #10
 8002f98:	e010      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	e00e      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002f9e:	2307      	movs	r3, #7
 8002fa0:	e00c      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fa2:	2306      	movs	r3, #6
 8002fa4:	e00a      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	e008      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002faa:	2304      	movs	r3, #4
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e004      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f002 0203 	and.w	r2, r2, #3
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4093      	lsls	r3, r2
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fcc:	4935      	ldr	r1, [pc, #212]	; (80030a4 <HAL_GPIO_Init+0x328>)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffe:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003004:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003028:	4a29      	ldr	r2, [pc, #164]	; (80030d0 <HAL_GPIO_Init+0x354>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003052:	4a1f      	ldr	r2, [pc, #124]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_GPIO_Init+0x354>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <HAL_GPIO_Init+0x354>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	f67f ae86 	bls.w	8002d9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	40020400 	.word	0x40020400
 80030b0:	40020800 	.word	0x40020800
 80030b4:	40020c00 	.word	0x40020c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40021400 	.word	0x40021400
 80030c0:	40021800 	.word	0x40021800
 80030c4:	40021c00 	.word	0x40021c00
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40022400 	.word	0x40022400
 80030d0:	40013c00 	.word	0x40013c00

080030d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e001      	b.n	80030f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
 8003110:	4613      	mov	r3, r2
 8003112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003114:	787b      	ldrb	r3, [r7, #1]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311a:	887a      	ldrh	r2, [r7, #2]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003120:	e003      	b.n	800312a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	041a      	lsls	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	619a      	str	r2, [r3, #24]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003166:	f7ff f91b 	bl	80023a0 <HAL_GetTick>
 800316a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800316c:	e009      	b.n	8003182 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800316e:	f7ff f917 	bl	80023a0 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800317c:	d901      	bls.n	8003182 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e022      	b.n	80031c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d1ee      	bne.n	800316e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800319c:	f7ff f900 	bl	80023a0 <HAL_GetTick>
 80031a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031a2:	e009      	b.n	80031b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031a4:	f7ff f8fc 	bl	80023a0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b2:	d901      	bls.n	80031b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e007      	b.n	80031c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031c4:	d1ee      	bne.n	80031a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e29b      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8087 	beq.w	800330a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	4b96      	ldr	r3, [pc, #600]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b04      	cmp	r3, #4
 8003206:	d00c      	beq.n	8003222 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003208:	4b93      	ldr	r3, [pc, #588]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d112      	bne.n	800323a <HAL_RCC_OscConfig+0x62>
 8003214:	4b90      	ldr	r3, [pc, #576]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003220:	d10b      	bne.n	800323a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003222:	4b8d      	ldr	r3, [pc, #564]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d06c      	beq.n	8003308 <HAL_RCC_OscConfig+0x130>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d168      	bne.n	8003308 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e275      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x7a>
 8003244:	4b84      	ldr	r3, [pc, #528]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a83      	ldr	r2, [pc, #524]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e02e      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x9c>
 800325a:	4b7f      	ldr	r3, [pc, #508]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7e      	ldr	r2, [pc, #504]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7b      	ldr	r2, [pc, #492]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800326c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0xc0>
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a75      	ldr	r2, [pc, #468]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b73      	ldr	r3, [pc, #460]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a72      	ldr	r2, [pc, #456]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003298:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6b      	ldr	r2, [pc, #428]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7ff f872 	bl	80023a0 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7ff f86e 	bl	80023a0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e229      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe8>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7ff f85e 	bl	80023a0 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7ff f85a 	bl	80023a0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e215      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x110>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d069      	beq.n	80033ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003316:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003322:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x190>
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x17a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1e9      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	493d      	ldr	r1, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	e040      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d023      	beq.n	80033b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003370:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a38      	ldr	r2, [pc, #224]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7ff f810 	bl	80023a0 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003384:	f7ff f80c 	bl	80023a0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1c7      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4929      	ldr	r1, [pc, #164]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
 80033b6:	e018      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a26      	ldr	r2, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe ffec 	bl	80023a0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fe ffe8 	bl	80023a0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1a3      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d038      	beq.n	8003468 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe ffc9 	bl	80023a0 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003412:	f7fe ffc5 	bl	80023a0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e180      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x23a>
 8003430:	e01a      	b.n	8003468 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe ffaf 	bl	80023a0 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe ffab 	bl	80023a0 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d903      	bls.n	800345c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e166      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
 8003458:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a4 	beq.w	80035be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b8c      	ldr	r3, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a88      	ldr	r2, [pc, #544]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b86      	ldr	r3, [pc, #536]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349e:	4b83      	ldr	r3, [pc, #524]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034aa:	4b80      	ldr	r3, [pc, #512]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7f      	ldr	r2, [pc, #508]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fe ff73 	bl	80023a0 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fe ff6f 	bl	80023a0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	; 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e12a      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d0:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x31a>
 80034e4:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a6f      	ldr	r2, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e02d      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x33c>
 80034fa:	4b6b      	ldr	r3, [pc, #428]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a67      	ldr	r2, [pc, #412]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	e01c      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d10c      	bne.n	8003536 <HAL_RCC_OscConfig+0x35e>
 800351c:	4b62      	ldr	r3, [pc, #392]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a61      	ldr	r2, [pc, #388]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	4b5f      	ldr	r3, [pc, #380]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a5e      	ldr	r2, [pc, #376]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 8003536:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a5b      	ldr	r2, [pc, #364]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003556:	f7fe ff23 	bl	80023a0 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe ff1f 	bl	80023a0 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0d8      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCC_OscConfig+0x386>
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fe ff0d 	bl	80023a0 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe ff09 	bl	80023a0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0c2      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ee      	bne.n	800358a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80ae 	beq.w	8003724 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d06d      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d14b      	bne.n	8003674 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe feda 	bl	80023a0 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe fed6 	bl	80023a0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e091      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	3b01      	subs	r3, #1
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	071b      	lsls	r3, r3, #28
 800363a:	491b      	ldr	r1, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe fea8 	bl	80023a0 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe fea4 	bl	80023a0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e05f      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x47c>
 8003672:	e057      	b.n	8003724 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800367a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fe8e 	bl	80023a0 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe fe8a 	bl	80023a0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e045      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x4b0>
 80036a6:	e03d      	b.n	8003724 <HAL_RCC_OscConfig+0x54c>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCC_OscConfig+0x558>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d030      	beq.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d129      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d122      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d119      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d10f      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d0      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 020f 	bic.w	r2, r3, #15
 8003762:	4965      	ldr	r1, [pc, #404]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a58      	ldr	r2, [pc, #352]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 800379a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800379e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d040      	beq.n	8003858 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e073      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fe fdba 	bl	80023a0 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe fdb6 	bl	80023a0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e053      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d210      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 020f 	bic.w	r2, r3, #15
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f821 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x1cc>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1d0>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fd16 	bl	8002318 <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023c00 	.word	0x40023c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	08007374 	.word	0x08007374
 8003904:	20000000 	.word	0x20000000
 8003908:	20000004 	.word	0x20000004

0800390c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b5b0      	push	{r4, r5, r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003912:	2100      	movs	r1, #0
 8003914:	6079      	str	r1, [r7, #4]
 8003916:	2100      	movs	r1, #0
 8003918:	60f9      	str	r1, [r7, #12]
 800391a:	2100      	movs	r1, #0
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800391e:	2100      	movs	r1, #0
 8003920:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003922:	4952      	ldr	r1, [pc, #328]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003924:	6889      	ldr	r1, [r1, #8]
 8003926:	f001 010c 	and.w	r1, r1, #12
 800392a:	2908      	cmp	r1, #8
 800392c:	d00d      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0x3e>
 800392e:	2908      	cmp	r1, #8
 8003930:	f200 8094 	bhi.w	8003a5c <HAL_RCC_GetSysClockFreq+0x150>
 8003934:	2900      	cmp	r1, #0
 8003936:	d002      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0x32>
 8003938:	2904      	cmp	r1, #4
 800393a:	d003      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x38>
 800393c:	e08e      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800393e:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x164>)
 8003940:	60bb      	str	r3, [r7, #8]
      break;
 8003942:	e08e      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x168>)
 8003946:	60bb      	str	r3, [r7, #8]
      break;
 8003948:	e08b      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800394a:	4948      	ldr	r1, [pc, #288]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 800394c:	6849      	ldr	r1, [r1, #4]
 800394e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003952:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003954:	4945      	ldr	r1, [pc, #276]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003956:	6849      	ldr	r1, [r1, #4]
 8003958:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800395c:	2900      	cmp	r1, #0
 800395e:	d024      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003960:	4942      	ldr	r1, [pc, #264]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003962:	6849      	ldr	r1, [r1, #4]
 8003964:	0989      	lsrs	r1, r1, #6
 8003966:	4608      	mov	r0, r1
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003970:	f04f 0500 	mov.w	r5, #0
 8003974:	ea00 0204 	and.w	r2, r0, r4
 8003978:	ea01 0305 	and.w	r3, r1, r5
 800397c:	493d      	ldr	r1, [pc, #244]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x168>)
 800397e:	fb01 f003 	mul.w	r0, r1, r3
 8003982:	2100      	movs	r1, #0
 8003984:	fb01 f102 	mul.w	r1, r1, r2
 8003988:	1844      	adds	r4, r0, r1
 800398a:	493a      	ldr	r1, [pc, #232]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x168>)
 800398c:	fba2 0101 	umull	r0, r1, r2, r1
 8003990:	1863      	adds	r3, r4, r1
 8003992:	4619      	mov	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	461a      	mov	r2, r3
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	f7fc fc54 	bl	8000248 <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4613      	mov	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e04a      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039aa:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	461a      	mov	r2, r3
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	ea02 0400 	and.w	r4, r2, r0
 80039c2:	ea03 0501 	and.w	r5, r3, r1
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	014b      	lsls	r3, r1, #5
 80039d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039d8:	0142      	lsls	r2, r0, #5
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	1b00      	subs	r0, r0, r4
 80039e0:	eb61 0105 	sbc.w	r1, r1, r5
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	018b      	lsls	r3, r1, #6
 80039ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039f2:	0182      	lsls	r2, r0, #6
 80039f4:	1a12      	subs	r2, r2, r0
 80039f6:	eb63 0301 	sbc.w	r3, r3, r1
 80039fa:	f04f 0000 	mov.w	r0, #0
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	00d9      	lsls	r1, r3, #3
 8003a04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a08:	00d0      	lsls	r0, r2, #3
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	1912      	adds	r2, r2, r4
 8003a10:	eb45 0303 	adc.w	r3, r5, r3
 8003a14:	f04f 0000 	mov.w	r0, #0
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	0299      	lsls	r1, r3, #10
 8003a1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a22:	0290      	lsls	r0, r2, #10
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	f7fc fc08 	bl	8000248 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	60bb      	str	r3, [r7, #8]
      break;
 8003a5a:	e002      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a5e:	60bb      	str	r3, [r7, #8]
      break;
 8003a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a62:	68bb      	ldr	r3, [r7, #8]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	00f42400 	.word	0x00f42400
 8003a74:	017d7840 	.word	0x017d7840

08003a78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000000 	.word	0x20000000

08003a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a94:	f7ff fff0 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0a9b      	lsrs	r3, r3, #10
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	08007384 	.word	0x08007384

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003abc:	f7ff ffdc 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0b5b      	lsrs	r3, r3, #13
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	08007384 	.word	0x08007384

08003ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b08:	4b69      	ldr	r3, [pc, #420]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4a68      	ldr	r2, [pc, #416]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b12:	6093      	str	r3, [r2, #8]
 8003b14:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	4964      	ldr	r1, [pc, #400]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	4959      	ldr	r1, [pc, #356]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b58:	d101      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d017      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b76:	4b4e      	ldr	r3, [pc, #312]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	494a      	ldr	r1, [pc, #296]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b94:	d101      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 808b 	beq.w	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b3a      	ldr	r3, [pc, #232]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	4a39      	ldr	r2, [pc, #228]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd0:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bdc:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a34      	ldr	r2, [pc, #208]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7fe fbda 	bl	80023a0 <HAL_GetTick>
 8003bec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf0:	f7fe fbd6 	bl	80023a0 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e38f      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c02:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d035      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d02e      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c36:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c4e:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c54:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d114      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fe fb9e 	bl	80023a0 <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fe fb9a 	bl	80023a0 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e351      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ee      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c96:	d111      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ca6:	400b      	ands	r3, r1
 8003ca8:	4901      	ldr	r1, [pc, #4]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	0ffffcff 	.word	0x0ffffcff
 8003cbc:	4bb3      	ldr	r3, [pc, #716]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4ab2      	ldr	r2, [pc, #712]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cc6:	6093      	str	r3, [r2, #8]
 8003cc8:	4bb0      	ldr	r3, [pc, #704]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	49ad      	ldr	r1, [pc, #692]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d010      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ce6:	4ba9      	ldr	r3, [pc, #676]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cec:	4aa7      	ldr	r2, [pc, #668]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cf6:	4ba5      	ldr	r3, [pc, #660]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	49a2      	ldr	r1, [pc, #648]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d14:	4b9d      	ldr	r3, [pc, #628]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d22:	499a      	ldr	r1, [pc, #616]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d36:	4b95      	ldr	r3, [pc, #596]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d44:	4991      	ldr	r1, [pc, #580]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d58:	4b8c      	ldr	r3, [pc, #560]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d66:	4989      	ldr	r1, [pc, #548]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d7a:	4b84      	ldr	r3, [pc, #528]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4980      	ldr	r1, [pc, #512]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d9c:	4b7b      	ldr	r3, [pc, #492]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	4978      	ldr	r1, [pc, #480]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dbe:	4b73      	ldr	r3, [pc, #460]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	f023 020c 	bic.w	r2, r3, #12
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dcc:	496f      	ldr	r1, [pc, #444]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003de0:	4b6a      	ldr	r3, [pc, #424]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	4967      	ldr	r1, [pc, #412]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e02:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	495e      	ldr	r1, [pc, #376]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e24:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	4956      	ldr	r1, [pc, #344]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e46:	4b51      	ldr	r3, [pc, #324]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	494d      	ldr	r1, [pc, #308]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e68:	4b48      	ldr	r3, [pc, #288]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	4945      	ldr	r1, [pc, #276]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e8a:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e98:	493c      	ldr	r1, [pc, #240]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eac:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eba:	4934      	ldr	r1, [pc, #208]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ece:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003edc:	492b      	ldr	r1, [pc, #172]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1c:	491b      	ldr	r1, [pc, #108]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f40:	4912      	ldr	r1, [pc, #72]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f54:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f64:	4909      	ldr	r1, [pc, #36]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00f      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	4986      	ldr	r1, [pc, #536]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fa4:	4b81      	ldr	r3, [pc, #516]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003faa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb4:	497d      	ldr	r1, [pc, #500]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d006      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80d6 	beq.w	800417c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fd0:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a75      	ldr	r2, [pc, #468]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fe f9e0 	bl	80023a0 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fe4:	f7fe f9dc 	bl	80023a0 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e195      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff6:	4b6d      	ldr	r3, [pc, #436]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d021      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	2b00      	cmp	r3, #0
 8004014:	d11d      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004016:	4b65      	ldr	r3, [pc, #404]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004024:	4b61      	ldr	r3, [pc, #388]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402a:	0e1b      	lsrs	r3, r3, #24
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	019a      	lsls	r2, r3, #6
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	071b      	lsls	r3, r3, #28
 800404a:	4958      	ldr	r1, [pc, #352]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02e      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407c:	d129      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800407e:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800408c:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004092:	0f1b      	lsrs	r3, r3, #28
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	019a      	lsls	r2, r3, #6
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	431a      	orrs	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	071b      	lsls	r3, r3, #28
 80040b2:	493e      	ldr	r1, [pc, #248]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040ba:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c0:	f023 021f 	bic.w	r2, r3, #31
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	3b01      	subs	r3, #1
 80040ca:	4938      	ldr	r1, [pc, #224]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01d      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040de:	4b33      	ldr	r3, [pc, #204]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e4:	0e1b      	lsrs	r3, r3, #24
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040ec:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f2:	0f1b      	lsrs	r3, r3, #28
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	019a      	lsls	r2, r3, #6
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	431a      	orrs	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	071b      	lsls	r3, r3, #28
 8004112:	4926      	ldr	r1, [pc, #152]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d011      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	019a      	lsls	r2, r3, #6
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	071b      	lsls	r3, r3, #28
 8004142:	491a      	ldr	r1, [pc, #104]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a17      	ldr	r2, [pc, #92]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004150:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004156:	f7fe f923 	bl	80023a0 <HAL_GetTick>
 800415a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800415e:	f7fe f91f 	bl	80023a0 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b64      	cmp	r3, #100	; 0x64
 800416a:	d901      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0d8      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b01      	cmp	r3, #1
 8004180:	f040 80ce 	bne.w	8004320 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a08      	ldr	r2, [pc, #32]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004190:	f7fe f906 	bl	80023a0 <HAL_GetTick>
 8004194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004196:	e00b      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004198:	f7fe f902 	bl	80023a0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d904      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0bb      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041b0:	4b5e      	ldr	r3, [pc, #376]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041bc:	d0ec      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d02e      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d12a      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041e6:	4b51      	ldr	r3, [pc, #324]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041f4:	4b4d      	ldr	r3, [pc, #308]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	0f1b      	lsrs	r3, r3, #28
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	019a      	lsls	r2, r3, #6
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	061b      	lsls	r3, r3, #24
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	071b      	lsls	r3, r3, #28
 800421a:	4944      	ldr	r1, [pc, #272]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004222:	4b42      	ldr	r3, [pc, #264]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004228:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	3b01      	subs	r3, #1
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	493d      	ldr	r1, [pc, #244]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d022      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004250:	d11d      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	0e1b      	lsrs	r3, r3, #24
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	0f1b      	lsrs	r3, r3, #28
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	019a      	lsls	r2, r3, #6
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	071b      	lsls	r3, r3, #28
 8004286:	4929      	ldr	r1, [pc, #164]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d028      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	0e1b      	lsrs	r3, r3, #24
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042a8:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	0c1b      	lsrs	r3, r3, #16
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	019a      	lsls	r2, r3, #6
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	071b      	lsls	r3, r3, #28
 80042ce:	4917      	ldr	r1, [pc, #92]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	4911      	ldr	r1, [pc, #68]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0e      	ldr	r2, [pc, #56]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f8:	f7fe f852 	bl	80023a0 <HAL_GetTick>
 80042fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004300:	f7fe f84e 	bl	80023a0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e007      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800431a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800431e:	d1ef      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800

08004330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e09d      	b.n	800447e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	d108      	bne.n	800435c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004352:	d009      	beq.n	8004368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	61da      	str	r2, [r3, #28]
 800435a:	e005      	b.n	8004368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd fc68 	bl	8001c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a8:	d902      	bls.n	80043b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	e002      	b.n	80043b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043be:	d007      	beq.n	80043d0 <HAL_SPI_Init+0xa0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043c8:	d002      	beq.n	80043d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	ea42 0103 	orr.w	r1, r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	0c1b      	lsrs	r3, r3, #16
 800442c:	f003 0204 	and.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800444c:	ea42 0103 	orr.w	r1, r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b088      	sub	sp, #32
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	603b      	str	r3, [r7, #0]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_SPI_Transmit+0x22>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e158      	b.n	800475a <HAL_SPI_Transmit+0x2d4>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b0:	f7fd ff76 	bl	80023a0 <HAL_GetTick>
 80044b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d002      	beq.n	80044cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
 80044c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044ca:	e13d      	b.n	8004748 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_Transmit+0x52>
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044dc:	e134      	b.n	8004748 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2203      	movs	r2, #3
 80044e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004528:	d10f      	bne.n	800454a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004538:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004548:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d007      	beq.n	8004568 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004570:	d94b      	bls.n	800460a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_SPI_Transmit+0xfa>
 800457a:	8afb      	ldrh	r3, [r7, #22]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d13e      	bne.n	80045fe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	881a      	ldrh	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045a4:	e02b      	b.n	80045fe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d112      	bne.n	80045da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045d8:	e011      	b.n	80045fe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045da:	f7fd fee1 	bl	80023a0 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d803      	bhi.n	80045f2 <HAL_SPI_Transmit+0x16c>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d102      	bne.n	80045f8 <HAL_SPI_Transmit+0x172>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045fc:	e0a4      	b.n	8004748 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ce      	bne.n	80045a6 <HAL_SPI_Transmit+0x120>
 8004608:	e07c      	b.n	8004704 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_Transmit+0x192>
 8004612:	8afb      	ldrh	r3, [r7, #22]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d170      	bne.n	80046fa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d912      	bls.n	8004648 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	1c9a      	adds	r2, r3, #2
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b02      	subs	r3, #2
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004646:	e058      	b.n	80046fa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	7812      	ldrb	r2, [r2, #0]
 8004654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800466e:	e044      	b.n	80046fa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b02      	cmp	r3, #2
 800467c:	d12b      	bne.n	80046d6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d912      	bls.n	80046ae <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	881a      	ldrh	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	1c9a      	adds	r2, r3, #2
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b02      	subs	r3, #2
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ac:	e025      	b.n	80046fa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046d4:	e011      	b.n	80046fa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d6:	f7fd fe63 	bl	80023a0 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d803      	bhi.n	80046ee <HAL_SPI_Transmit+0x268>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d102      	bne.n	80046f4 <HAL_SPI_Transmit+0x26e>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046f8:	e026      	b.n	8004748 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1b5      	bne.n	8004670 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fd07 	bl	800511c <SPI_EndRxTxTransaction>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e000      	b.n	8004748 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004746:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004758:	7ffb      	ldrb	r3, [r7, #31]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b088      	sub	sp, #32
 8004766:	af02      	add	r7, sp, #8
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	603b      	str	r3, [r7, #0]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477e:	d112      	bne.n	80047a6 <HAL_SPI_Receive+0x44>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10e      	bne.n	80047a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2204      	movs	r2, #4
 800478c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f910 	bl	80049c2 <HAL_SPI_TransmitReceive>
 80047a2:	4603      	mov	r3, r0
 80047a4:	e109      	b.n	80049ba <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_SPI_Receive+0x52>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e102      	b.n	80049ba <HAL_SPI_Receive+0x258>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047bc:	f7fd fdf0 	bl	80023a0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
 80047d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047d2:	e0e9      	b.n	80049a8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_Receive+0x7e>
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047e4:	e0e0      	b.n	80049a8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2204      	movs	r2, #4
 80047ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	88fa      	ldrh	r2, [r7, #6]
 8004806:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004830:	d908      	bls.n	8004844 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	e007      	b.n	8004854 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004852:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485c:	d10f      	bne.n	800487e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800487c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d007      	beq.n	800489c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a4:	d867      	bhi.n	8004976 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048a6:	e030      	b.n	800490a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d117      	bne.n	80048e6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f103 020c 	add.w	r2, r3, #12
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	7812      	ldrb	r2, [r2, #0]
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048e4:	e011      	b.n	800490a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e6:	f7fd fd5b 	bl	80023a0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d803      	bhi.n	80048fe <HAL_SPI_Receive+0x19c>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d102      	bne.n	8004904 <HAL_SPI_Receive+0x1a2>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004908:	e04e      	b.n	80049a8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1c8      	bne.n	80048a8 <HAL_SPI_Receive+0x146>
 8004916:	e034      	b.n	8004982 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d115      	bne.n	8004952 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	b292      	uxth	r2, r2
 8004932:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	1c9a      	adds	r2, r3, #2
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004950:	e011      	b.n	8004976 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004952:	f7fd fd25 	bl	80023a0 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d803      	bhi.n	800496a <HAL_SPI_Receive+0x208>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004968:	d102      	bne.n	8004970 <HAL_SPI_Receive+0x20e>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004974:	e018      	b.n	80049a8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ca      	bne.n	8004918 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fb4c 	bl	8005024 <SPI_EndRxTransaction>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	75fb      	strb	r3, [r7, #23]
 80049a4:	e000      	b.n	80049a8 <HAL_SPI_Receive+0x246>
  }

error :
 80049a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b08a      	sub	sp, #40	; 0x28
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049d0:	2301      	movs	r3, #1
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x26>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e1fb      	b.n	8004de0 <HAL_SPI_TransmitReceive+0x41e>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049f0:	f7fd fcd6 	bl	80023a0 <HAL_GetTick>
 80049f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a04:	887b      	ldrh	r3, [r7, #2]
 8004a06:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004a08:	887b      	ldrh	r3, [r7, #2]
 8004a0a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a0c:	7efb      	ldrb	r3, [r7, #27]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d00e      	beq.n	8004a30 <HAL_SPI_TransmitReceive+0x6e>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a18:	d106      	bne.n	8004a28 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <HAL_SPI_TransmitReceive+0x66>
 8004a22:	7efb      	ldrb	r3, [r7, #27]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d003      	beq.n	8004a30 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a2e:	e1cd      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_SPI_TransmitReceive+0x80>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_SPI_TransmitReceive+0x80>
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a48:	e1c0      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d003      	beq.n	8004a5e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2205      	movs	r2, #5
 8004a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	887a      	ldrh	r2, [r7, #2]
 8004a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	887a      	ldrh	r2, [r7, #2]
 8004a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	887a      	ldrh	r2, [r7, #2]
 8004a8a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa0:	d802      	bhi.n	8004aa8 <HAL_SPI_TransmitReceive+0xe6>
 8004aa2:	8a3b      	ldrh	r3, [r7, #16]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d908      	bls.n	8004aba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	e007      	b.n	8004aca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d007      	beq.n	8004ae8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004af0:	d97c      	bls.n	8004bec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_TransmitReceive+0x13e>
 8004afa:	8a7b      	ldrh	r3, [r7, #18]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d169      	bne.n	8004bd4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	881a      	ldrh	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	1c9a      	adds	r2, r3, #2
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b24:	e056      	b.n	8004bd4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d11b      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x1aa>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0x1aa>
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d113      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	881a      	ldrh	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	1c9a      	adds	r2, r3, #2
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d11c      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x1f2>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	b292      	uxth	r2, r2
 8004b92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	1c9a      	adds	r2, r3, #2
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bb4:	f7fd fbf4 	bl	80023a0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d807      	bhi.n	8004bd4 <HAL_SPI_TransmitReceive+0x212>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d003      	beq.n	8004bd4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004bd2:	e0fb      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1a3      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x164>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d19d      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x164>
 8004bea:	e0df      	b.n	8004dac <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_SPI_TransmitReceive+0x23a>
 8004bf4:	8a7b      	ldrh	r3, [r7, #18]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f040 80cb 	bne.w	8004d92 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d912      	bls.n	8004c2c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	881a      	ldrh	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	1c9a      	adds	r2, r3, #2
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b02      	subs	r3, #2
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c2a:	e0b2      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	7812      	ldrb	r2, [r2, #0]
 8004c38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c52:	e09e      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d134      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x30a>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d02f      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x30a>
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d12c      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d912      	bls.n	8004ca2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	881a      	ldrh	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	1c9a      	adds	r2, r3, #2
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b02      	subs	r3, #2
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ca0:	e012      	b.n	8004cc8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d148      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x3aa>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d042      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d923      	bls.n	8004d3a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	1c9a      	adds	r2, r3, #2
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b02      	subs	r3, #2
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d81f      	bhi.n	8004d68 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d36:	605a      	str	r2, [r3, #4]
 8004d38:	e016      	b.n	8004d68 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f103 020c 	add.w	r2, r3, #12
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	7812      	ldrb	r2, [r2, #0]
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d6c:	f7fd fb18 	bl	80023a0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d803      	bhi.n	8004d84 <HAL_SPI_TransmitReceive+0x3c2>
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d102      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x3c8>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d103      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d90:	e01c      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f47f af5b 	bne.w	8004c54 <HAL_SPI_TransmitReceive+0x292>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f47f af54 	bne.w	8004c54 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f9b3 	bl	800511c <SPI_EndRxTxTransaction>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d006      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	661a      	str	r2, [r3, #96]	; 0x60
 8004dc8:	e000      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004dca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3728      	adds	r7, #40	; 0x28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	4613      	mov	r3, r2
 8004df6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004df8:	f7fd fad2 	bl	80023a0 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	4413      	add	r3, r2
 8004e06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e08:	f7fd faca 	bl	80023a0 <HAL_GetTick>
 8004e0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e0e:	4b39      	ldr	r3, [pc, #228]	; (8004ef4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	015b      	lsls	r3, r3, #5
 8004e14:	0d1b      	lsrs	r3, r3, #20
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	fb02 f303 	mul.w	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e1e:	e054      	b.n	8004eca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d050      	beq.n	8004eca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e28:	f7fd faba 	bl	80023a0 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d902      	bls.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d13d      	bne.n	8004eba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e56:	d111      	bne.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e60:	d004      	beq.n	8004e6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6a:	d107      	bne.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e84:	d10f      	bne.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ea4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e017      	b.n	8004eea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d19b      	bne.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000000 	.word	0x20000000

08004ef8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f0a:	f7fd fa49 	bl	80023a0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	4413      	add	r3, r2
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f1a:	f7fd fa41 	bl	80023a0 <HAL_GetTick>
 8004f1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f28:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	00da      	lsls	r2, r3, #3
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	0d1b      	lsrs	r3, r3, #20
 8004f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3a:	fb02 f303 	mul.w	r3, r2, r3
 8004f3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f40:	e060      	b.n	8005004 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f48:	d107      	bne.n	8004f5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d104      	bne.n	8004f5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d050      	beq.n	8005004 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f62:	f7fd fa1d 	bl	80023a0 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d902      	bls.n	8004f78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d13d      	bne.n	8004ff4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f90:	d111      	bne.n	8004fb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9a:	d004      	beq.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa4:	d107      	bne.n	8004fb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbe:	d10f      	bne.n	8004fe0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e010      	b.n	8005016 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	3b01      	subs	r3, #1
 8005002:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d196      	bne.n	8004f42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3728      	adds	r7, #40	; 0x28
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000000 	.word	0x20000000

08005024 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005038:	d111      	bne.n	800505e <SPI_EndRxTransaction+0x3a>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005042:	d004      	beq.n	800504e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504c:	d107      	bne.n	800505e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005066:	d112      	bne.n	800508e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2200      	movs	r2, #0
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff feb8 	bl	8004de8 <SPI_WaitFlagStateUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d021      	beq.n	80050c2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e03d      	b.n	800510a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800508e:	4b21      	ldr	r3, [pc, #132]	; (8005114 <SPI_EndRxTransaction+0xf0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a21      	ldr	r2, [pc, #132]	; (8005118 <SPI_EndRxTransaction+0xf4>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	0d5b      	lsrs	r3, r3, #21
 800509a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d0f2      	beq.n	80050a4 <SPI_EndRxTransaction+0x80>
 80050be:	e000      	b.n	80050c2 <SPI_EndRxTransaction+0x9e>
        break;
 80050c0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ca:	d11d      	bne.n	8005108 <SPI_EndRxTransaction+0xe4>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d4:	d004      	beq.n	80050e0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050de:	d113      	bne.n	8005108 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff ff03 	bl	8004ef8 <SPI_WaitFifoStateUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e000      	b.n	800510a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000000 	.word	0x20000000
 8005118:	165e9f81 	.word	0x165e9f81

0800511c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2200      	movs	r2, #0
 8005130:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fedf 	bl	8004ef8 <SPI_WaitFifoStateUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e046      	b.n	80051de <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005150:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <SPI_EndRxTxTransaction+0xcc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a25      	ldr	r2, [pc, #148]	; (80051ec <SPI_EndRxTxTransaction+0xd0>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	0d5b      	lsrs	r3, r3, #21
 800515c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005160:	fb02 f303 	mul.w	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516e:	d112      	bne.n	8005196 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2200      	movs	r2, #0
 8005178:	2180      	movs	r1, #128	; 0x80
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff fe34 	bl	8004de8 <SPI_WaitFlagStateUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e023      	b.n	80051de <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	3b01      	subs	r3, #1
 80051a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	2b80      	cmp	r3, #128	; 0x80
 80051ae:	d0f2      	beq.n	8005196 <SPI_EndRxTxTransaction+0x7a>
 80051b0:	e000      	b.n	80051b4 <SPI_EndRxTxTransaction+0x98>
        break;
 80051b2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff fe99 	bl	8004ef8 <SPI_WaitFifoStateUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e000      	b.n	80051de <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000000 	.word	0x20000000
 80051ec:	165e9f81 	.word	0x165e9f81

080051f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e049      	b.n	8005296 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc ff62 	bl	80020e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f000 fa7e 	bl	8005730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e049      	b.n	8005344 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fc fec7 	bl	8002058 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3304      	adds	r3, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f000 fa27 	bl	8005730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005366:	2302      	movs	r3, #2
 8005368:	e088      	b.n	800547c <HAL_TIM_IC_ConfigChannel+0x130>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11b      	bne.n	80053b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f000 fd64 	bl	8005e54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 020c 	bic.w	r2, r2, #12
 800539a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	619a      	str	r2, [r3, #24]
 80053ae:	e060      	b.n	8005472 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d11c      	bne.n	80053f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6819      	ldr	r1, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f000 fde8 	bl	8005f9a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6999      	ldr	r1, [r3, #24]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	021a      	lsls	r2, r3, #8
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	619a      	str	r2, [r3, #24]
 80053ee:	e040      	b.n	8005472 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d11b      	bne.n	800542e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f000 fe35 	bl	8006074 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 020c 	bic.w	r2, r2, #12
 8005418:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69d9      	ldr	r1, [r3, #28]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	61da      	str	r2, [r3, #28]
 800542c:	e021      	b.n	8005472 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d11c      	bne.n	800546e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6819      	ldr	r1, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f000 fe52 	bl	80060ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005456:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69d9      	ldr	r1, [r3, #28]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	021a      	lsls	r2, r3, #8
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	61da      	str	r2, [r3, #28]
 800546c:	e001      	b.n	8005472 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800547a:	7dfb      	ldrb	r3, [r7, #23]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0ff      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b14      	cmp	r3, #20
 80054ae:	f200 80f0 	bhi.w	8005692 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	0800550d 	.word	0x0800550d
 80054bc:	08005693 	.word	0x08005693
 80054c0:	08005693 	.word	0x08005693
 80054c4:	08005693 	.word	0x08005693
 80054c8:	0800554d 	.word	0x0800554d
 80054cc:	08005693 	.word	0x08005693
 80054d0:	08005693 	.word	0x08005693
 80054d4:	08005693 	.word	0x08005693
 80054d8:	0800558f 	.word	0x0800558f
 80054dc:	08005693 	.word	0x08005693
 80054e0:	08005693 	.word	0x08005693
 80054e4:	08005693 	.word	0x08005693
 80054e8:	080055cf 	.word	0x080055cf
 80054ec:	08005693 	.word	0x08005693
 80054f0:	08005693 	.word	0x08005693
 80054f4:	08005693 	.word	0x08005693
 80054f8:	08005611 	.word	0x08005611
 80054fc:	08005693 	.word	0x08005693
 8005500:	08005693 	.word	0x08005693
 8005504:	08005693 	.word	0x08005693
 8005508:	08005651 	.word	0x08005651
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f9ac 	bl	8005870 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0208 	orr.w	r2, r2, #8
 8005526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0204 	bic.w	r2, r2, #4
 8005536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6999      	ldr	r1, [r3, #24]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	619a      	str	r2, [r3, #24]
      break;
 800554a:	e0a5      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f9fe 	bl	8005954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	021a      	lsls	r2, r3, #8
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	619a      	str	r2, [r3, #24]
      break;
 800558c:	e084      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fa55 	bl	8005a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0208 	orr.w	r2, r2, #8
 80055a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0204 	bic.w	r2, r2, #4
 80055b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	61da      	str	r2, [r3, #28]
      break;
 80055cc:	e064      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 faab 	bl	8005b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	61da      	str	r2, [r3, #28]
      break;
 800560e:	e043      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fae2 	bl	8005be0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0208 	orr.w	r2, r2, #8
 800562a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0204 	bic.w	r2, r2, #4
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800564e:	e023      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fb14 	bl	8005c84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005690:	e002      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	75fb      	strb	r3, [r7, #23]
      break;
 8005696:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop

080056ac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e031      	b.n	8005728 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fb28 	bl	8005d2c <TIM_SlaveTimer_SetConfig>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e018      	b.n	8005728 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005704:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005714:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a40      	ldr	r2, [pc, #256]	; (8005844 <TIM_Base_SetConfig+0x114>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d013      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574e:	d00f      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a3d      	ldr	r2, [pc, #244]	; (8005848 <TIM_Base_SetConfig+0x118>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00b      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a3c      	ldr	r2, [pc, #240]	; (800584c <TIM_Base_SetConfig+0x11c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d007      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a3b      	ldr	r2, [pc, #236]	; (8005850 <TIM_Base_SetConfig+0x120>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a3a      	ldr	r2, [pc, #232]	; (8005854 <TIM_Base_SetConfig+0x124>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d108      	bne.n	8005782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <TIM_Base_SetConfig+0x114>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d02b      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005790:	d027      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2c      	ldr	r2, [pc, #176]	; (8005848 <TIM_Base_SetConfig+0x118>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d023      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2b      	ldr	r2, [pc, #172]	; (800584c <TIM_Base_SetConfig+0x11c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01f      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <TIM_Base_SetConfig+0x120>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01b      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a29      	ldr	r2, [pc, #164]	; (8005854 <TIM_Base_SetConfig+0x124>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d017      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a28      	ldr	r2, [pc, #160]	; (8005858 <TIM_Base_SetConfig+0x128>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a27      	ldr	r2, [pc, #156]	; (800585c <TIM_Base_SetConfig+0x12c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00f      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a26      	ldr	r2, [pc, #152]	; (8005860 <TIM_Base_SetConfig+0x130>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00b      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a25      	ldr	r2, [pc, #148]	; (8005864 <TIM_Base_SetConfig+0x134>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a24      	ldr	r2, [pc, #144]	; (8005868 <TIM_Base_SetConfig+0x138>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a23      	ldr	r2, [pc, #140]	; (800586c <TIM_Base_SetConfig+0x13c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d108      	bne.n	80057f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <TIM_Base_SetConfig+0x114>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_Base_SetConfig+0xf8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a0c      	ldr	r2, [pc, #48]	; (8005854 <TIM_Base_SetConfig+0x124>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d103      	bne.n	8005830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	615a      	str	r2, [r3, #20]
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40010400 	.word	0x40010400
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800
 8005864:	40001800 	.word	0x40001800
 8005868:	40001c00 	.word	0x40001c00
 800586c:	40002000 	.word	0x40002000

08005870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f023 0201 	bic.w	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <TIM_OC1_SetConfig+0xd8>)
 800589c:	4013      	ands	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f023 0302 	bic.w	r3, r3, #2
 80058b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a21      	ldr	r2, [pc, #132]	; (800594c <TIM_OC1_SetConfig+0xdc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC1_SetConfig+0x64>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a20      	ldr	r2, [pc, #128]	; (8005950 <TIM_OC1_SetConfig+0xe0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10c      	bne.n	80058ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0308 	bic.w	r3, r3, #8
 80058da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f023 0304 	bic.w	r3, r3, #4
 80058ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC1_SetConfig+0xdc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_OC1_SetConfig+0x8e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a15      	ldr	r2, [pc, #84]	; (8005950 <TIM_OC1_SetConfig+0xe0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d111      	bne.n	8005922 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	fffeff8f 	.word	0xfffeff8f
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0210 	bic.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4b2e      	ldr	r3, [pc, #184]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 8005980:	4013      	ands	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x68>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <TIM_OC2_SetConfig+0xec>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10d      	bne.n	80059d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC2_SetConfig+0x94>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <TIM_OC2_SetConfig+0xec>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	feff8fff 	.word	0xfeff8fff
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40010400 	.word	0x40010400

08005a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4b2d      	ldr	r3, [pc, #180]	; (8005b24 <TIM_OC3_SetConfig+0xe0>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0303 	bic.w	r3, r3, #3
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <TIM_OC3_SetConfig+0xe4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_OC3_SetConfig+0x66>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <TIM_OC3_SetConfig+0xe8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10d      	bne.n	8005ac6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <TIM_OC3_SetConfig+0xe4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_OC3_SetConfig+0x92>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a16      	ldr	r2, [pc, #88]	; (8005b2c <TIM_OC3_SetConfig+0xe8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d113      	bne.n	8005afe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	621a      	str	r2, [r3, #32]
}
 8005b18:	bf00      	nop
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	fffeff8f 	.word	0xfffeff8f
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40010400 	.word	0x40010400

08005b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <TIM_OC4_SetConfig+0xa4>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <TIM_OC4_SetConfig+0xa8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_OC4_SetConfig+0x68>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <TIM_OC4_SetConfig+0xac>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d109      	bne.n	8005bac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	019b      	lsls	r3, r3, #6
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	feff8fff 	.word	0xfeff8fff
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40010400 	.word	0x40010400

08005be0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <TIM_OC5_SetConfig+0x98>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a12      	ldr	r2, [pc, #72]	; (8005c7c <TIM_OC5_SetConfig+0x9c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC5_SetConfig+0x5e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <TIM_OC5_SetConfig+0xa0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d109      	bne.n	8005c52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	fffeff8f 	.word	0xfffeff8f
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <TIM_OC6_SetConfig+0x9c>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	051b      	lsls	r3, r3, #20
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <TIM_OC6_SetConfig+0xa0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC6_SetConfig+0x60>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <TIM_OC6_SetConfig+0xa4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d109      	bne.n	8005cf8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	029b      	lsls	r3, r3, #10
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	feff8fff 	.word	0xfeff8fff
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40010400 	.word	0x40010400

08005d2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d48:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4b3e      	ldr	r3, [pc, #248]	; (8005e50 <TIM_SlaveTimer_SetConfig+0x124>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b70      	cmp	r3, #112	; 0x70
 8005d74:	d01a      	beq.n	8005dac <TIM_SlaveTimer_SetConfig+0x80>
 8005d76:	2b70      	cmp	r3, #112	; 0x70
 8005d78:	d860      	bhi.n	8005e3c <TIM_SlaveTimer_SetConfig+0x110>
 8005d7a:	2b60      	cmp	r3, #96	; 0x60
 8005d7c:	d054      	beq.n	8005e28 <TIM_SlaveTimer_SetConfig+0xfc>
 8005d7e:	2b60      	cmp	r3, #96	; 0x60
 8005d80:	d85c      	bhi.n	8005e3c <TIM_SlaveTimer_SetConfig+0x110>
 8005d82:	2b50      	cmp	r3, #80	; 0x50
 8005d84:	d046      	beq.n	8005e14 <TIM_SlaveTimer_SetConfig+0xe8>
 8005d86:	2b50      	cmp	r3, #80	; 0x50
 8005d88:	d858      	bhi.n	8005e3c <TIM_SlaveTimer_SetConfig+0x110>
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d019      	beq.n	8005dc2 <TIM_SlaveTimer_SetConfig+0x96>
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d854      	bhi.n	8005e3c <TIM_SlaveTimer_SetConfig+0x110>
 8005d92:	2b30      	cmp	r3, #48	; 0x30
 8005d94:	d055      	beq.n	8005e42 <TIM_SlaveTimer_SetConfig+0x116>
 8005d96:	2b30      	cmp	r3, #48	; 0x30
 8005d98:	d850      	bhi.n	8005e3c <TIM_SlaveTimer_SetConfig+0x110>
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	d051      	beq.n	8005e42 <TIM_SlaveTimer_SetConfig+0x116>
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d84c      	bhi.n	8005e3c <TIM_SlaveTimer_SetConfig+0x110>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d04d      	beq.n	8005e42 <TIM_SlaveTimer_SetConfig+0x116>
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d04b      	beq.n	8005e42 <TIM_SlaveTimer_SetConfig+0x116>
 8005daa:	e047      	b.n	8005e3c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	68d9      	ldr	r1, [r3, #12]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f000 f9d3 	bl	8006166 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005dc0:	e040      	b.n	8005e44 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d101      	bne.n	8005dce <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e03b      	b.n	8005e46 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0201 	bic.w	r2, r2, #1
 8005de4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
      break;
 8005e12:	e017      	b.n	8005e44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6899      	ldr	r1, [r3, #8]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	461a      	mov	r2, r3
 8005e22:	f000 f88b 	bl	8005f3c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005e26:	e00d      	b.n	8005e44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	6899      	ldr	r1, [r3, #8]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	461a      	mov	r2, r3
 8005e36:	f000 f8ed 	bl	8006014 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005e3a:	e003      	b.n	8005e44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e40:	e000      	b.n	8005e44 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005e42:	bf00      	nop
  }

  return status;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	fffefff8 	.word	0xfffefff8

08005e54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f023 0201 	bic.w	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <TIM_TI1_SetConfig+0xcc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01b      	beq.n	8005eba <TIM_TI1_SetConfig+0x66>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e88:	d017      	beq.n	8005eba <TIM_TI1_SetConfig+0x66>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a25      	ldr	r2, [pc, #148]	; (8005f24 <TIM_TI1_SetConfig+0xd0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <TIM_TI1_SetConfig+0x66>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a24      	ldr	r2, [pc, #144]	; (8005f28 <TIM_TI1_SetConfig+0xd4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00f      	beq.n	8005eba <TIM_TI1_SetConfig+0x66>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a23      	ldr	r2, [pc, #140]	; (8005f2c <TIM_TI1_SetConfig+0xd8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <TIM_TI1_SetConfig+0x66>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a22      	ldr	r2, [pc, #136]	; (8005f30 <TIM_TI1_SetConfig+0xdc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <TIM_TI1_SetConfig+0x66>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4a21      	ldr	r2, [pc, #132]	; (8005f34 <TIM_TI1_SetConfig+0xe0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_TI1_SetConfig+0x66>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <TIM_TI1_SetConfig+0xe4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d101      	bne.n	8005ebe <TIM_TI1_SetConfig+0x6a>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <TIM_TI1_SetConfig+0x6c>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d008      	beq.n	8005ed6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e003      	b.n	8005ede <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f023 030a 	bic.w	r3, r3, #10
 8005ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f003 030a 	and.w	r3, r3, #10
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40010400 	.word	0x40010400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40001800 	.word	0x40001800

08005f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f023 0201 	bic.w	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f023 030a 	bic.w	r3, r3, #10
 8005f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b087      	sub	sp, #28
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
 8005fa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f023 0210 	bic.w	r2, r3, #16
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	031b      	lsls	r3, r3, #12
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	621a      	str	r2, [r3, #32]
}
 8006008:	bf00      	nop
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f023 0210 	bic.w	r2, r3, #16
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800603e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	031b      	lsls	r3, r3, #12
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006050:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 0303 	bic.w	r3, r3, #3
 80060a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80060c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006118:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800612a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	031b      	lsls	r3, r3, #12
 8006130:	b29b      	uxth	r3, r3
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800613e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	031b      	lsls	r3, r3, #12
 8006144:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006166:	b480      	push	{r7}
 8006168:	b087      	sub	sp, #28
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006180:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	021a      	lsls	r2, r3, #8
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	431a      	orrs	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	4313      	orrs	r3, r2
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	609a      	str	r2, [r3, #8]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061bc:	2302      	movs	r3, #2
 80061be:	e06d      	b.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a30      	ldr	r2, [pc, #192]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d004      	beq.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2f      	ldr	r2, [pc, #188]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d108      	bne.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a20      	ldr	r2, [pc, #128]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d022      	beq.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006232:	d01d      	beq.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d018      	beq.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1a      	ldr	r2, [pc, #104]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00e      	beq.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a15      	ldr	r2, [pc, #84]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d009      	beq.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a16      	ldr	r2, [pc, #88]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d10c      	bne.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006276:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	4313      	orrs	r3, r2
 8006280:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40010400 	.word	0x40010400
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40001800 	.word	0x40001800

080062c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e040      	b.n	8006358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fb ff82 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	; 0x24
 80062f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0201 	bic.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f8c0 	bl	8006488 <UART_SetConfig>
 8006308:	4603      	mov	r3, r0
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e022      	b.n	8006358 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fb16 	bl	800694c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb9d 	bl	8006a90 <UART_CheckIdleState>
 8006356:	4603      	mov	r3, r0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006374:	2b20      	cmp	r3, #32
 8006376:	f040 8081 	bne.w	800647c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_UART_Transmit+0x26>
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e079      	b.n	800647e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_UART_Transmit+0x38>
 8006394:	2302      	movs	r3, #2
 8006396:	e072      	b.n	800647e <HAL_UART_Transmit+0x11e>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2221      	movs	r2, #33	; 0x21
 80063ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ae:	f7fb fff7 	bl	80023a0 <HAL_GetTick>
 80063b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	88fa      	ldrh	r2, [r7, #6]
 80063b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	88fa      	ldrh	r2, [r7, #6]
 80063c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063cc:	d108      	bne.n	80063e0 <HAL_UART_Transmit+0x80>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e003      	b.n	80063e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063f0:	e02c      	b.n	800644c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2200      	movs	r2, #0
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fb90 	bl	8006b22 <UART_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e038      	b.n	800647e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006420:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	3302      	adds	r3, #2
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e007      	b.n	800643a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	3301      	adds	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1cc      	bne.n	80063f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2200      	movs	r2, #0
 8006460:	2140      	movs	r1, #64	; 0x40
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fb5d 	bl	8006b22 <UART_WaitOnFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e005      	b.n	800647e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4ba7      	ldr	r3, [pc, #668]	; (8006750 <UART_SetConfig+0x2c8>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	430b      	orrs	r3, r1
 80064be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a95      	ldr	r2, [pc, #596]	; (8006754 <UART_SetConfig+0x2cc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d120      	bne.n	8006546 <UART_SetConfig+0xbe>
 8006504:	4b94      	ldr	r3, [pc, #592]	; (8006758 <UART_SetConfig+0x2d0>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b03      	cmp	r3, #3
 8006510:	d816      	bhi.n	8006540 <UART_SetConfig+0xb8>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0x90>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006529 	.word	0x08006529
 800651c:	08006535 	.word	0x08006535
 8006520:	0800652f 	.word	0x0800652f
 8006524:	0800653b 	.word	0x0800653b
 8006528:	2301      	movs	r3, #1
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e14f      	b.n	80067ce <UART_SetConfig+0x346>
 800652e:	2302      	movs	r3, #2
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e14c      	b.n	80067ce <UART_SetConfig+0x346>
 8006534:	2304      	movs	r3, #4
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e149      	b.n	80067ce <UART_SetConfig+0x346>
 800653a:	2308      	movs	r3, #8
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e146      	b.n	80067ce <UART_SetConfig+0x346>
 8006540:	2310      	movs	r3, #16
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e143      	b.n	80067ce <UART_SetConfig+0x346>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a84      	ldr	r2, [pc, #528]	; (800675c <UART_SetConfig+0x2d4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d132      	bne.n	80065b6 <UART_SetConfig+0x12e>
 8006550:	4b81      	ldr	r3, [pc, #516]	; (8006758 <UART_SetConfig+0x2d0>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b0c      	cmp	r3, #12
 800655c:	d828      	bhi.n	80065b0 <UART_SetConfig+0x128>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0xdc>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006599 	.word	0x08006599
 8006568:	080065b1 	.word	0x080065b1
 800656c:	080065b1 	.word	0x080065b1
 8006570:	080065b1 	.word	0x080065b1
 8006574:	080065a5 	.word	0x080065a5
 8006578:	080065b1 	.word	0x080065b1
 800657c:	080065b1 	.word	0x080065b1
 8006580:	080065b1 	.word	0x080065b1
 8006584:	0800659f 	.word	0x0800659f
 8006588:	080065b1 	.word	0x080065b1
 800658c:	080065b1 	.word	0x080065b1
 8006590:	080065b1 	.word	0x080065b1
 8006594:	080065ab 	.word	0x080065ab
 8006598:	2300      	movs	r3, #0
 800659a:	77fb      	strb	r3, [r7, #31]
 800659c:	e117      	b.n	80067ce <UART_SetConfig+0x346>
 800659e:	2302      	movs	r3, #2
 80065a0:	77fb      	strb	r3, [r7, #31]
 80065a2:	e114      	b.n	80067ce <UART_SetConfig+0x346>
 80065a4:	2304      	movs	r3, #4
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e111      	b.n	80067ce <UART_SetConfig+0x346>
 80065aa:	2308      	movs	r3, #8
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e10e      	b.n	80067ce <UART_SetConfig+0x346>
 80065b0:	2310      	movs	r3, #16
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e10b      	b.n	80067ce <UART_SetConfig+0x346>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a69      	ldr	r2, [pc, #420]	; (8006760 <UART_SetConfig+0x2d8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d120      	bne.n	8006602 <UART_SetConfig+0x17a>
 80065c0:	4b65      	ldr	r3, [pc, #404]	; (8006758 <UART_SetConfig+0x2d0>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ca:	2b30      	cmp	r3, #48	; 0x30
 80065cc:	d013      	beq.n	80065f6 <UART_SetConfig+0x16e>
 80065ce:	2b30      	cmp	r3, #48	; 0x30
 80065d0:	d814      	bhi.n	80065fc <UART_SetConfig+0x174>
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d009      	beq.n	80065ea <UART_SetConfig+0x162>
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d810      	bhi.n	80065fc <UART_SetConfig+0x174>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <UART_SetConfig+0x15c>
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d006      	beq.n	80065f0 <UART_SetConfig+0x168>
 80065e2:	e00b      	b.n	80065fc <UART_SetConfig+0x174>
 80065e4:	2300      	movs	r3, #0
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e0f1      	b.n	80067ce <UART_SetConfig+0x346>
 80065ea:	2302      	movs	r3, #2
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	e0ee      	b.n	80067ce <UART_SetConfig+0x346>
 80065f0:	2304      	movs	r3, #4
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e0eb      	b.n	80067ce <UART_SetConfig+0x346>
 80065f6:	2308      	movs	r3, #8
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e0e8      	b.n	80067ce <UART_SetConfig+0x346>
 80065fc:	2310      	movs	r3, #16
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e0e5      	b.n	80067ce <UART_SetConfig+0x346>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a57      	ldr	r2, [pc, #348]	; (8006764 <UART_SetConfig+0x2dc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d120      	bne.n	800664e <UART_SetConfig+0x1c6>
 800660c:	4b52      	ldr	r3, [pc, #328]	; (8006758 <UART_SetConfig+0x2d0>)
 800660e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006612:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006616:	2bc0      	cmp	r3, #192	; 0xc0
 8006618:	d013      	beq.n	8006642 <UART_SetConfig+0x1ba>
 800661a:	2bc0      	cmp	r3, #192	; 0xc0
 800661c:	d814      	bhi.n	8006648 <UART_SetConfig+0x1c0>
 800661e:	2b80      	cmp	r3, #128	; 0x80
 8006620:	d009      	beq.n	8006636 <UART_SetConfig+0x1ae>
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d810      	bhi.n	8006648 <UART_SetConfig+0x1c0>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <UART_SetConfig+0x1a8>
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d006      	beq.n	800663c <UART_SetConfig+0x1b4>
 800662e:	e00b      	b.n	8006648 <UART_SetConfig+0x1c0>
 8006630:	2300      	movs	r3, #0
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e0cb      	b.n	80067ce <UART_SetConfig+0x346>
 8006636:	2302      	movs	r3, #2
 8006638:	77fb      	strb	r3, [r7, #31]
 800663a:	e0c8      	b.n	80067ce <UART_SetConfig+0x346>
 800663c:	2304      	movs	r3, #4
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e0c5      	b.n	80067ce <UART_SetConfig+0x346>
 8006642:	2308      	movs	r3, #8
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e0c2      	b.n	80067ce <UART_SetConfig+0x346>
 8006648:	2310      	movs	r3, #16
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e0bf      	b.n	80067ce <UART_SetConfig+0x346>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a45      	ldr	r2, [pc, #276]	; (8006768 <UART_SetConfig+0x2e0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d125      	bne.n	80066a4 <UART_SetConfig+0x21c>
 8006658:	4b3f      	ldr	r3, [pc, #252]	; (8006758 <UART_SetConfig+0x2d0>)
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006666:	d017      	beq.n	8006698 <UART_SetConfig+0x210>
 8006668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800666c:	d817      	bhi.n	800669e <UART_SetConfig+0x216>
 800666e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006672:	d00b      	beq.n	800668c <UART_SetConfig+0x204>
 8006674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006678:	d811      	bhi.n	800669e <UART_SetConfig+0x216>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <UART_SetConfig+0x1fe>
 800667e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006682:	d006      	beq.n	8006692 <UART_SetConfig+0x20a>
 8006684:	e00b      	b.n	800669e <UART_SetConfig+0x216>
 8006686:	2300      	movs	r3, #0
 8006688:	77fb      	strb	r3, [r7, #31]
 800668a:	e0a0      	b.n	80067ce <UART_SetConfig+0x346>
 800668c:	2302      	movs	r3, #2
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e09d      	b.n	80067ce <UART_SetConfig+0x346>
 8006692:	2304      	movs	r3, #4
 8006694:	77fb      	strb	r3, [r7, #31]
 8006696:	e09a      	b.n	80067ce <UART_SetConfig+0x346>
 8006698:	2308      	movs	r3, #8
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e097      	b.n	80067ce <UART_SetConfig+0x346>
 800669e:	2310      	movs	r3, #16
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e094      	b.n	80067ce <UART_SetConfig+0x346>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a30      	ldr	r2, [pc, #192]	; (800676c <UART_SetConfig+0x2e4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d125      	bne.n	80066fa <UART_SetConfig+0x272>
 80066ae:	4b2a      	ldr	r3, [pc, #168]	; (8006758 <UART_SetConfig+0x2d0>)
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066bc:	d017      	beq.n	80066ee <UART_SetConfig+0x266>
 80066be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066c2:	d817      	bhi.n	80066f4 <UART_SetConfig+0x26c>
 80066c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c8:	d00b      	beq.n	80066e2 <UART_SetConfig+0x25a>
 80066ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ce:	d811      	bhi.n	80066f4 <UART_SetConfig+0x26c>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <UART_SetConfig+0x254>
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d8:	d006      	beq.n	80066e8 <UART_SetConfig+0x260>
 80066da:	e00b      	b.n	80066f4 <UART_SetConfig+0x26c>
 80066dc:	2301      	movs	r3, #1
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e075      	b.n	80067ce <UART_SetConfig+0x346>
 80066e2:	2302      	movs	r3, #2
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e072      	b.n	80067ce <UART_SetConfig+0x346>
 80066e8:	2304      	movs	r3, #4
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e06f      	b.n	80067ce <UART_SetConfig+0x346>
 80066ee:	2308      	movs	r3, #8
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e06c      	b.n	80067ce <UART_SetConfig+0x346>
 80066f4:	2310      	movs	r3, #16
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e069      	b.n	80067ce <UART_SetConfig+0x346>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <UART_SetConfig+0x2e8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d137      	bne.n	8006774 <UART_SetConfig+0x2ec>
 8006704:	4b14      	ldr	r3, [pc, #80]	; (8006758 <UART_SetConfig+0x2d0>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800670e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006712:	d017      	beq.n	8006744 <UART_SetConfig+0x2bc>
 8006714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006718:	d817      	bhi.n	800674a <UART_SetConfig+0x2c2>
 800671a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800671e:	d00b      	beq.n	8006738 <UART_SetConfig+0x2b0>
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006724:	d811      	bhi.n	800674a <UART_SetConfig+0x2c2>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <UART_SetConfig+0x2aa>
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672e:	d006      	beq.n	800673e <UART_SetConfig+0x2b6>
 8006730:	e00b      	b.n	800674a <UART_SetConfig+0x2c2>
 8006732:	2300      	movs	r3, #0
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e04a      	b.n	80067ce <UART_SetConfig+0x346>
 8006738:	2302      	movs	r3, #2
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e047      	b.n	80067ce <UART_SetConfig+0x346>
 800673e:	2304      	movs	r3, #4
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e044      	b.n	80067ce <UART_SetConfig+0x346>
 8006744:	2308      	movs	r3, #8
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e041      	b.n	80067ce <UART_SetConfig+0x346>
 800674a:	2310      	movs	r3, #16
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e03e      	b.n	80067ce <UART_SetConfig+0x346>
 8006750:	efff69f3 	.word	0xefff69f3
 8006754:	40011000 	.word	0x40011000
 8006758:	40023800 	.word	0x40023800
 800675c:	40004400 	.word	0x40004400
 8006760:	40004800 	.word	0x40004800
 8006764:	40004c00 	.word	0x40004c00
 8006768:	40005000 	.word	0x40005000
 800676c:	40011400 	.word	0x40011400
 8006770:	40007800 	.word	0x40007800
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a71      	ldr	r2, [pc, #452]	; (8006940 <UART_SetConfig+0x4b8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d125      	bne.n	80067ca <UART_SetConfig+0x342>
 800677e:	4b71      	ldr	r3, [pc, #452]	; (8006944 <UART_SetConfig+0x4bc>)
 8006780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006788:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800678c:	d017      	beq.n	80067be <UART_SetConfig+0x336>
 800678e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006792:	d817      	bhi.n	80067c4 <UART_SetConfig+0x33c>
 8006794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006798:	d00b      	beq.n	80067b2 <UART_SetConfig+0x32a>
 800679a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679e:	d811      	bhi.n	80067c4 <UART_SetConfig+0x33c>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <UART_SetConfig+0x324>
 80067a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067a8:	d006      	beq.n	80067b8 <UART_SetConfig+0x330>
 80067aa:	e00b      	b.n	80067c4 <UART_SetConfig+0x33c>
 80067ac:	2300      	movs	r3, #0
 80067ae:	77fb      	strb	r3, [r7, #31]
 80067b0:	e00d      	b.n	80067ce <UART_SetConfig+0x346>
 80067b2:	2302      	movs	r3, #2
 80067b4:	77fb      	strb	r3, [r7, #31]
 80067b6:	e00a      	b.n	80067ce <UART_SetConfig+0x346>
 80067b8:	2304      	movs	r3, #4
 80067ba:	77fb      	strb	r3, [r7, #31]
 80067bc:	e007      	b.n	80067ce <UART_SetConfig+0x346>
 80067be:	2308      	movs	r3, #8
 80067c0:	77fb      	strb	r3, [r7, #31]
 80067c2:	e004      	b.n	80067ce <UART_SetConfig+0x346>
 80067c4:	2310      	movs	r3, #16
 80067c6:	77fb      	strb	r3, [r7, #31]
 80067c8:	e001      	b.n	80067ce <UART_SetConfig+0x346>
 80067ca:	2310      	movs	r3, #16
 80067cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d6:	d15a      	bne.n	800688e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80067d8:	7ffb      	ldrb	r3, [r7, #31]
 80067da:	2b08      	cmp	r3, #8
 80067dc:	d827      	bhi.n	800682e <UART_SetConfig+0x3a6>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <UART_SetConfig+0x35c>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006811 	.word	0x08006811
 80067ec:	08006819 	.word	0x08006819
 80067f0:	0800682f 	.word	0x0800682f
 80067f4:	0800681f 	.word	0x0800681f
 80067f8:	0800682f 	.word	0x0800682f
 80067fc:	0800682f 	.word	0x0800682f
 8006800:	0800682f 	.word	0x0800682f
 8006804:	08006827 	.word	0x08006827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006808:	f7fd f942 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 800680c:	61b8      	str	r0, [r7, #24]
        break;
 800680e:	e013      	b.n	8006838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006810:	f7fd f952 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8006814:	61b8      	str	r0, [r7, #24]
        break;
 8006816:	e00f      	b.n	8006838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006818:	4b4b      	ldr	r3, [pc, #300]	; (8006948 <UART_SetConfig+0x4c0>)
 800681a:	61bb      	str	r3, [r7, #24]
        break;
 800681c:	e00c      	b.n	8006838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681e:	f7fd f875 	bl	800390c <HAL_RCC_GetSysClockFreq>
 8006822:	61b8      	str	r0, [r7, #24]
        break;
 8006824:	e008      	b.n	8006838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682a:	61bb      	str	r3, [r7, #24]
        break;
 800682c:	e004      	b.n	8006838 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	77bb      	strb	r3, [r7, #30]
        break;
 8006836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d074      	beq.n	8006928 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	005a      	lsls	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	441a      	add	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b0f      	cmp	r3, #15
 8006858:	d916      	bls.n	8006888 <UART_SetConfig+0x400>
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006860:	d212      	bcs.n	8006888 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	b29b      	uxth	r3, r3
 8006866:	f023 030f 	bic.w	r3, r3, #15
 800686a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	b29b      	uxth	r3, r3
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	b29a      	uxth	r2, r3
 8006878:	89fb      	ldrh	r3, [r7, #14]
 800687a:	4313      	orrs	r3, r2
 800687c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	89fa      	ldrh	r2, [r7, #14]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	e04f      	b.n	8006928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	77bb      	strb	r3, [r7, #30]
 800688c:	e04c      	b.n	8006928 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800688e:	7ffb      	ldrb	r3, [r7, #31]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d828      	bhi.n	80068e6 <UART_SetConfig+0x45e>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <UART_SetConfig+0x414>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068c9 	.word	0x080068c9
 80068a4:	080068d1 	.word	0x080068d1
 80068a8:	080068e7 	.word	0x080068e7
 80068ac:	080068d7 	.word	0x080068d7
 80068b0:	080068e7 	.word	0x080068e7
 80068b4:	080068e7 	.word	0x080068e7
 80068b8:	080068e7 	.word	0x080068e7
 80068bc:	080068df 	.word	0x080068df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c0:	f7fd f8e6 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 80068c4:	61b8      	str	r0, [r7, #24]
        break;
 80068c6:	e013      	b.n	80068f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c8:	f7fd f8f6 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 80068cc:	61b8      	str	r0, [r7, #24]
        break;
 80068ce:	e00f      	b.n	80068f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d0:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <UART_SetConfig+0x4c0>)
 80068d2:	61bb      	str	r3, [r7, #24]
        break;
 80068d4:	e00c      	b.n	80068f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068d6:	f7fd f819 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80068da:	61b8      	str	r0, [r7, #24]
        break;
 80068dc:	e008      	b.n	80068f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e2:	61bb      	str	r3, [r7, #24]
        break;
 80068e4:	e004      	b.n	80068f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	77bb      	strb	r3, [r7, #30]
        break;
 80068ee:	bf00      	nop
    }

    if (pclk != 0U)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d018      	beq.n	8006928 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	085a      	lsrs	r2, r3, #1
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	441a      	add	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b0f      	cmp	r3, #15
 800690e:	d909      	bls.n	8006924 <UART_SetConfig+0x49c>
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006916:	d205      	bcs.n	8006924 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	b29a      	uxth	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60da      	str	r2, [r3, #12]
 8006922:	e001      	b.n	8006928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006934:	7fbb      	ldrb	r3, [r7, #30]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40007c00 	.word	0x40007c00
 8006944:	40023800 	.word	0x40023800
 8006948:	00f42400 	.word	0x00f42400

0800694c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	f003 0310 	and.w	r3, r3, #16
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01a      	beq.n	8006a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4a:	d10a      	bne.n	8006a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
  }
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aa0:	f7fb fc7e 	bl	80023a0 <HAL_GetTick>
 8006aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d10e      	bne.n	8006ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f82d 	bl	8006b22 <UART_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e023      	b.n	8006b1a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d10e      	bne.n	8006afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f817 	bl	8006b22 <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e00d      	b.n	8006b1a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b09c      	sub	sp, #112	; 0x70
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	603b      	str	r3, [r7, #0]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b32:	e0a5      	b.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	f000 80a1 	beq.w	8006c80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3e:	f7fb fc2f 	bl	80023a0 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d302      	bcc.n	8006b54 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d13e      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b68:	667b      	str	r3, [r7, #100]	; 0x64
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e6      	bne.n	8006b54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b98:	f023 0301 	bic.w	r3, r3, #1
 8006b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ba6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e067      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d04f      	beq.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bee:	d147      	bne.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e6      	bne.n	8006bfa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f023 0301 	bic.w	r3, r3, #1
 8006c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c4c:	623a      	str	r2, [r7, #32]
 8006c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	69f9      	ldr	r1, [r7, #28]
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e5      	bne.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e010      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69da      	ldr	r2, [r3, #28]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	bf0c      	ite	eq
 8006c90:	2301      	moveq	r3, #1
 8006c92:	2300      	movne	r3, #0
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	f43f af4a 	beq.w	8006b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3770      	adds	r7, #112	; 0x70
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <__libc_init_array>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	4d0d      	ldr	r5, [pc, #52]	; (8006ce4 <__libc_init_array+0x38>)
 8006cb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ce8 <__libc_init_array+0x3c>)
 8006cb2:	1b64      	subs	r4, r4, r5
 8006cb4:	10a4      	asrs	r4, r4, #2
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	42a6      	cmp	r6, r4
 8006cba:	d109      	bne.n	8006cd0 <__libc_init_array+0x24>
 8006cbc:	4d0b      	ldr	r5, [pc, #44]	; (8006cec <__libc_init_array+0x40>)
 8006cbe:	4c0c      	ldr	r4, [pc, #48]	; (8006cf0 <__libc_init_array+0x44>)
 8006cc0:	f000 f864 	bl	8006d8c <_init>
 8006cc4:	1b64      	subs	r4, r4, r5
 8006cc6:	10a4      	asrs	r4, r4, #2
 8006cc8:	2600      	movs	r6, #0
 8006cca:	42a6      	cmp	r6, r4
 8006ccc:	d105      	bne.n	8006cda <__libc_init_array+0x2e>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd4:	4798      	blx	r3
 8006cd6:	3601      	adds	r6, #1
 8006cd8:	e7ee      	b.n	8006cb8 <__libc_init_array+0xc>
 8006cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cde:	4798      	blx	r3
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	e7f2      	b.n	8006cca <__libc_init_array+0x1e>
 8006ce4:	080073bc 	.word	0x080073bc
 8006ce8:	080073bc 	.word	0x080073bc
 8006cec:	080073bc 	.word	0x080073bc
 8006cf0:	080073c0 	.word	0x080073c0

08006cf4 <memset>:
 8006cf4:	4402      	add	r2, r0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d100      	bne.n	8006cfe <memset+0xa>
 8006cfc:	4770      	bx	lr
 8006cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006d02:	e7f9      	b.n	8006cf8 <memset+0x4>

08006d04 <__utoa>:
 8006d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d06:	4c1f      	ldr	r4, [pc, #124]	; (8006d84 <__utoa+0x80>)
 8006d08:	b08b      	sub	sp, #44	; 0x2c
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	466e      	mov	r6, sp
 8006d10:	f104 0c20 	add.w	ip, r4, #32
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	6861      	ldr	r1, [r4, #4]
 8006d18:	4637      	mov	r7, r6
 8006d1a:	c703      	stmia	r7!, {r0, r1}
 8006d1c:	3408      	adds	r4, #8
 8006d1e:	4564      	cmp	r4, ip
 8006d20:	463e      	mov	r6, r7
 8006d22:	d1f7      	bne.n	8006d14 <__utoa+0x10>
 8006d24:	7921      	ldrb	r1, [r4, #4]
 8006d26:	7139      	strb	r1, [r7, #4]
 8006d28:	1e91      	subs	r1, r2, #2
 8006d2a:	6820      	ldr	r0, [r4, #0]
 8006d2c:	6038      	str	r0, [r7, #0]
 8006d2e:	2922      	cmp	r1, #34	; 0x22
 8006d30:	f04f 0100 	mov.w	r1, #0
 8006d34:	d904      	bls.n	8006d40 <__utoa+0x3c>
 8006d36:	7019      	strb	r1, [r3, #0]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	b00b      	add	sp, #44	; 0x2c
 8006d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d40:	1e58      	subs	r0, r3, #1
 8006d42:	4684      	mov	ip, r0
 8006d44:	fbb5 f7f2 	udiv	r7, r5, r2
 8006d48:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006d4c:	fb02 5617 	mls	r6, r2, r7, r5
 8006d50:	4476      	add	r6, lr
 8006d52:	460c      	mov	r4, r1
 8006d54:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006d58:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006d5c:	462e      	mov	r6, r5
 8006d5e:	42b2      	cmp	r2, r6
 8006d60:	f101 0101 	add.w	r1, r1, #1
 8006d64:	463d      	mov	r5, r7
 8006d66:	d9ed      	bls.n	8006d44 <__utoa+0x40>
 8006d68:	2200      	movs	r2, #0
 8006d6a:	545a      	strb	r2, [r3, r1]
 8006d6c:	1919      	adds	r1, r3, r4
 8006d6e:	1aa5      	subs	r5, r4, r2
 8006d70:	42aa      	cmp	r2, r5
 8006d72:	dae2      	bge.n	8006d3a <__utoa+0x36>
 8006d74:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006d78:	780e      	ldrb	r6, [r1, #0]
 8006d7a:	7006      	strb	r6, [r0, #0]
 8006d7c:	3201      	adds	r2, #1
 8006d7e:	f801 5901 	strb.w	r5, [r1], #-1
 8006d82:	e7f4      	b.n	8006d6e <__utoa+0x6a>
 8006d84:	0800738c 	.word	0x0800738c

08006d88 <utoa>:
 8006d88:	f7ff bfbc 	b.w	8006d04 <__utoa>

08006d8c <_init>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr

08006d98 <_fini>:
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	bf00      	nop
 8006d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9e:	bc08      	pop	{r3}
 8006da0:	469e      	mov	lr, r3
 8006da2:	4770      	bx	lr
