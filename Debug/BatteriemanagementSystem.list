
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000725c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  08007454  08007454  00017454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c58  08007c58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c58  08007c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c60  08007c60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08007c74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08007c74  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d01  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003893  00000000  00000000  00038d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0003c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4e6  00000000  00000000  0003eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a52  00000000  00000000  0006af8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108227  00000000  00000000  000849e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018cc07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea0  00000000  00000000  0018cc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800743c 	.word	0x0800743c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800743c 	.word	0x0800743c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f006 faa3 	bl	8006aa0 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000026c 	.word	0x2000026c

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 ff5c 	bl	8007438 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f006 fa82 	bl	8006aa0 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000026c 	.word	0x2000026c

080005a8 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Chip wird geweckt.\n");
 80005ae:	4811      	ldr	r0, [pc, #68]	; (80005f4 <wakeup_ltc6811+0x4c>)
 80005b0:	f001 f87f 	bl	80016b2 <ITM_SendString>
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	e014      	b.n	80005e4 <wakeup_ltc6811+0x3c>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <wakeup_ltc6811+0x50>)
 80005c2:	f003 f99b 	bl	80038fc <HAL_GPIO_WritePin>

		// Dummy Paket senden
		HAL_SPI_Transmit(&hspi4, (uint8_t*)0xAA, 1, 100);					// Chip wecken
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2201      	movs	r2, #1
 80005ca:	21aa      	movs	r1, #170	; 0xaa
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <wakeup_ltc6811+0x54>)
 80005ce:	f004 fb56 	bl	8004c7e <HAL_SPI_Transmit>

//		HAL_Delay(2);														// isoSPI braucht Zeit bis ready

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <wakeup_ltc6811+0x50>)
 80005da:	f003 f98f 	bl	80038fc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	3301      	adds	r3, #1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0e7      	beq.n	80005ba <wakeup_ltc6811+0x12>
	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08007454 	.word	0x08007454
 80005f8:	40021000 	.word	0x40021000
 80005fc:	2000010c 	.word	0x2000010c

08000600 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Transcreceive LTC6811.\n");
 800060a:	4835      	ldr	r0, [pc, #212]	; (80006e0 <ltc6811+0xe0>)
 800060c:	f001 f851 	bl	80016b2 <ITM_SendString>
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f90e 	bl	8000834 <peccommand>
 8000618:	4603      	mov	r3, r0
 800061a:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 800061c:	f7ff ffc4 	bl	80005a8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	0a1b      	lsrs	r3, r3, #8
 8000624:	b29b      	uxth	r3, r3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0307 	and.w	r3, r3, #7
 800062c:	b2db      	uxtb	r3, r3
 800062e:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000636:	89bb      	ldrh	r3, [r7, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29b      	uxth	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000640:	89bb      	ldrh	r3, [r7, #12]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f023 0301 	bic.w	r3, r3, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000652:	4824      	ldr	r0, [pc, #144]	; (80006e4 <ltc6811+0xe4>)
 8000654:	f003 f952 	bl	80038fc <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000658:	f107 0108 	add.w	r1, r7, #8
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2204      	movs	r2, #4
 8000660:	4821      	ldr	r0, [pc, #132]	; (80006e8 <ltc6811+0xe8>)
 8000662:	f004 fb0c 	bl	8004c7e <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	f240 7223 	movw	r2, #1827	; 0x723
 800066c:	4293      	cmp	r3, r2
 800066e:	d10e      	bne.n	800068e <ltc6811+0x8e>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e008      	b.n	8000688 <ltc6811+0x88>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xFF, 1, 100);
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	2201      	movs	r2, #1
 800067a:	21ff      	movs	r1, #255	; 0xff
 800067c:	481a      	ldr	r0, [pc, #104]	; (80006e8 <ltc6811+0xe8>)
 800067e:	f004 fafe 	bl	8004c7e <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	3301      	adds	r3, #1
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	2b08      	cmp	r3, #8
 800068c:	d9f3      	bls.n	8000676 <ltc6811+0x76>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <ltc6811+0xe4>)
 8000696:	f003 f931 	bl	80038fc <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Command wurde gesendet.\n");
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <ltc6811+0xec>)
 800069c:	f001 f809 	bl	80016b2 <ITM_SendString>
	ITM_SendString("Folgendes wurde gesendet:");
 80006a0:	4813      	ldr	r0, [pc, #76]	; (80006f0 <ltc6811+0xf0>)
 80006a2:	f001 f806 	bl	80016b2 <ITM_SendString>

	// Sende Command auf UART
	for (uint8_t i = 0; i < 4; i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	73bb      	strb	r3, [r7, #14]
 80006aa:	e00e      	b.n	80006ca <ltc6811+0xca>
	{
		ITM_SendString(" ");
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <ltc6811+0xf4>)
 80006ae:	f001 f800 	bl	80016b2 <ITM_SendString>
		ITM_SendNumber(cmd[i]);
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	f107 0210 	add.w	r2, r7, #16
 80006b8:	4413      	add	r3, r2
 80006ba:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f80e 	bl	80016e0 <ITM_SendNumber>
	for (uint8_t i = 0; i < 4; i++)
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73bb      	strb	r3, [r7, #14]
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d9ed      	bls.n	80006ac <ltc6811+0xac>
	}
	ITM_SendString("\n");
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <ltc6811+0xf8>)
 80006d2:	f000 ffee 	bl	80016b2 <ITM_SendString>
#endif
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	08007468 	.word	0x08007468
 80006e4:	40021000 	.word	0x40021000
 80006e8:	2000010c 	.word	0x2000010c
 80006ec:	0800748c 	.word	0x0800748c
 80006f0:	080074a8 	.word	0x080074a8
 80006f4:	080074c4 	.word	0x080074c4
 80006f8:	080074c8 	.word	0x080074c8

080006fc <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	80fb      	strh	r3, [r7, #6]
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Receive LTC6811.\n");
 8000708:	4842      	ldr	r0, [pc, #264]	; (8000814 <ltc6811_read+0x118>)
 800070a:	f000 ffd2 	bl	80016b2 <ITM_SendString>
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f88f 	bl	8000834 <peccommand>
 8000716:	4603      	mov	r3, r0
 8000718:	827b      	strh	r3, [r7, #18]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 800071a:	f7ff ff45 	bl	80005a8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	b29b      	uxth	r3, r3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	b2db      	uxtb	r3, r3
 800072c:	733b      	strb	r3, [r7, #12]
	cmd[1] = (command & 0xFF);
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	737b      	strb	r3, [r7, #13]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000734:	8a7b      	ldrh	r3, [r7, #18]
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b29b      	uxth	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (pec & 0xFE);
 800073e:	8a7b      	ldrh	r3, [r7, #18]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	73fb      	strb	r3, [r7, #15]

	// ISOCS einschalten
	ISOCS_ENABLE();
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000750:	4831      	ldr	r0, [pc, #196]	; (8000818 <ltc6811_read+0x11c>)
 8000752:	f003 f8d3 	bl	80038fc <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000756:	f107 010c 	add.w	r1, r7, #12
 800075a:	2364      	movs	r3, #100	; 0x64
 800075c:	2204      	movs	r2, #4
 800075e:	482f      	ldr	r0, [pc, #188]	; (800081c <ltc6811_read+0x120>)
 8000760:	f004 fa8d 	bl	8004c7e <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	75fb      	strb	r3, [r7, #23]
 8000768:	e00c      	b.n	8000784 <ltc6811_read+0x88>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	461a      	mov	r2, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	1899      	adds	r1, r3, r2
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	2208      	movs	r2, #8
 8000778:	4828      	ldr	r0, [pc, #160]	; (800081c <ltc6811_read+0x120>)
 800077a:	f004 fbee 	bl	8004f5a <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800077e:	7dfb      	ldrb	r3, [r7, #23]
 8000780:	3301      	adds	r3, #1
 8000782:	75fb      	strb	r3, [r7, #23]
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0ef      	beq.n	800076a <ltc6811_read+0x6e>
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000790:	4821      	ldr	r0, [pc, #132]	; (8000818 <ltc6811_read+0x11c>)
 8000792:	f003 f8b3 	bl	80038fc <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Command wurde empfangen.\n");
 8000796:	4822      	ldr	r0, [pc, #136]	; (8000820 <ltc6811_read+0x124>)
 8000798:	f000 ff8b 	bl	80016b2 <ITM_SendString>
	ITM_SendString("Folgendes wurde empfangen:");
 800079c:	4821      	ldr	r0, [pc, #132]	; (8000824 <ltc6811_read+0x128>)
 800079e:	f000 ff88 	bl	80016b2 <ITM_SendString>

	// Sende Command auf UART
	for (uint8_t i = 0; i < 4; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	75bb      	strb	r3, [r7, #22]
 80007a6:	e00e      	b.n	80007c6 <ltc6811_read+0xca>
	{
		ITM_SendString(" ");
 80007a8:	481f      	ldr	r0, [pc, #124]	; (8000828 <ltc6811_read+0x12c>)
 80007aa:	f000 ff82 	bl	80016b2 <ITM_SendString>
		ITM_SendNumber(cmd[i]);
 80007ae:	7dbb      	ldrb	r3, [r7, #22]
 80007b0:	f107 0218 	add.w	r2, r7, #24
 80007b4:	4413      	add	r3, r2
 80007b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 ff90 	bl	80016e0 <ITM_SendNumber>
	for (uint8_t i = 0; i < 4; i++)
 80007c0:	7dbb      	ldrb	r3, [r7, #22]
 80007c2:	3301      	adds	r3, #1
 80007c4:	75bb      	strb	r3, [r7, #22]
 80007c6:	7dbb      	ldrb	r3, [r7, #22]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d9ed      	bls.n	80007a8 <ltc6811_read+0xac>
	}
	ITM_SendString("\n");
 80007cc:	4817      	ldr	r0, [pc, #92]	; (800082c <ltc6811_read+0x130>)
 80007ce:	f000 ff70 	bl	80016b2 <ITM_SendString>

	ITM_SendString("Daten wurde empfangen.\n");
 80007d2:	4817      	ldr	r0, [pc, #92]	; (8000830 <ltc6811_read+0x134>)
 80007d4:	f000 ff6d 	bl	80016b2 <ITM_SendString>
	ITM_SendString("Folgendes wurde empfangen:");
 80007d8:	4812      	ldr	r0, [pc, #72]	; (8000824 <ltc6811_read+0x128>)
 80007da:	f000 ff6a 	bl	80016b2 <ITM_SendString>

	// Sende Daten auf UART
	for (uint8_t i = 0; i < 8; i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	757b      	strb	r3, [r7, #21]
 80007e2:	e00c      	b.n	80007fe <ltc6811_read+0x102>
	{
		ITM_SendString(" ");
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <ltc6811_read+0x12c>)
 80007e6:	f000 ff64 	bl	80016b2 <ITM_SendString>
		ITM_SendNumber(data[i]);
 80007ea:	7d7b      	ldrb	r3, [r7, #21]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 ff74 	bl	80016e0 <ITM_SendNumber>
	for (uint8_t i = 0; i < 8; i++)
 80007f8:	7d7b      	ldrb	r3, [r7, #21]
 80007fa:	3301      	adds	r3, #1
 80007fc:	757b      	strb	r3, [r7, #21]
 80007fe:	7d7b      	ldrb	r3, [r7, #21]
 8000800:	2b07      	cmp	r3, #7
 8000802:	d9ef      	bls.n	80007e4 <ltc6811_read+0xe8>
	}
	ITM_SendString("\n");
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <ltc6811_read+0x130>)
 8000806:	f000 ff54 	bl	80016b2 <ITM_SendString>
#endif

	return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08007504 	.word	0x08007504
 8000818:	40021000 	.word	0x40021000
 800081c:	2000010c 	.word	0x2000010c
 8000820:	08007524 	.word	0x08007524
 8000824:	08007540 	.word	0x08007540
 8000828:	080074c4 	.word	0x080074c4
 800082c:	080074c8 	.word	0x080074c8
 8000830:	0800755c 	.word	0x0800755c

08000834 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	0a1b      	lsrs	r3, r3, #8
 8000848:	b29b      	uxth	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 0307 	and.w	r3, r3, #7
 8000850:	b2db      	uxtb	r3, r3
 8000852:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4619      	mov	r1, r3
 800085a:	2002      	movs	r0, #2
 800085c:	f000 f806 	bl	800086c <peclookup>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 8000878:	2310      	movs	r3, #16
 800087a:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 800087c:	2300      	movs	r3, #0
 800087e:	737b      	strb	r3, [r7, #13]
 8000880:	e019      	b.n	80008b6 <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 8000882:	89fb      	ldrh	r3, [r7, #14]
 8000884:	09db      	lsrs	r3, r3, #7
 8000886:	b29a      	uxth	r2, r3
 8000888:	7b7b      	ldrb	r3, [r7, #13]
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	440b      	add	r3, r1
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b29b      	uxth	r3, r3
 8000892:	4053      	eors	r3, r2
 8000894:	b29b      	uxth	r3, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 800089a:	89fb      	ldrh	r3, [r7, #14]
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	b21a      	sxth	r2, r3
 80008a0:	897b      	ldrh	r3, [r7, #10]
 80008a2:	490b      	ldr	r1, [pc, #44]	; (80008d0 <peclookup+0x64>)
 80008a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4053      	eors	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80008b0:	7b7b      	ldrb	r3, [r7, #13]
 80008b2:	3301      	adds	r3, #1
 80008b4:	737b      	strb	r3, [r7, #13]
 80008b6:	7b7a      	ldrb	r2, [r7, #13]
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d3e1      	bcc.n	8000882 <peclookup+0x16>
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	b29b      	uxth	r3, r3
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	08007a18 	.word	0x08007a18

080008d4 <ltc6811_check>:
//----------------------------------------------------------------------*/

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b092      	sub	sp, #72	; 0x48
 80008d8:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Check LTC6811.\n");
 80008da:	4831      	ldr	r0, [pc, #196]	; (80009a0 <ltc6811_check+0xcc>)
 80008dc:	f000 fee9 	bl	80016b2 <ITM_SendString>
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	223c      	movs	r2, #60	; 0x3c
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 fd59 	bl	80073a4 <memset>
 80008f2:	2300      	movs	r3, #0
 80008f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80008f8:	f7ff fe56 	bl	80005a8 <wakeup_ltc6811>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 80008fc:	f240 7011 	movw	r0, #1809	; 0x711
 8000900:	f7ff fe7e 	bl	8000600 <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 8000904:	f240 7012 	movw	r0, #1810	; 0x712
 8000908:	f7ff fe7a 	bl	8000600 <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 800090c:	f240 7013 	movw	r0, #1811	; 0x713
 8000910:	f7ff fe76 	bl	8000600 <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	2012      	movs	r0, #18
 800091a:	f7ff feef 	bl	80006fc <ltc6811_read>
	{
		error |= (1 << 0);													// Thermal Shutdown nicht Ok
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 800091e:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000922:	f000 f843 	bl	80009ac <ltc6811_test>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	d105      	bne.n	8000938 <ltc6811_check+0x64>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 800092c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000938:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800093c:	f000 f836 	bl	80009ac <ltc6811_test>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d105      	bne.n	8000952 <ltc6811_check+0x7e>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 8000946:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 8000952:	f000 fa03 	bl	8000d5c <ltc6811_diagn>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d105      	bne.n	8000968 <ltc6811_check+0x94>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 800095c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 8000968:	f000 fa1e 	bl	8000da8 <ltc6811_openwire>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d105      	bne.n	800097e <ltc6811_check+0xaa>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 8000972:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Error Code:\t");
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <ltc6811_check+0xd0>)
 8000980:	f000 fe97 	bl	80016b2 <ITM_SendString>
	ITM_SendNumber(error);
 8000984:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fea9 	bl	80016e0 <ITM_SendNumber>
	ITM_SendString("\n");
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <ltc6811_check+0xd4>)
 8000990:	f000 fe8f 	bl	80016b2 <ITM_SendString>
#endif

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000994:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000998:	4618      	mov	r0, r3
 800099a:	3748      	adds	r7, #72	; 0x48
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	08007574 	.word	0x08007574
 80009a4:	08007590 	.word	0x08007590
 80009a8:	080074c8 	.word	0x080074c8

080009ac <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	; 0x50
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	80fb      	strh	r3, [r7, #6]
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Test LTC6811.\n");
 80009b6:	48dc      	ldr	r0, [pc, #880]	; (8000d28 <ltc6811_test+0x37c>)
 80009b8:	f000 fe7b 	bl	80016b2 <ITM_SendString>
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	223c      	movs	r2, #60	; 0x3c
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f006 fceb 	bl	80073a4 <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 80009e0:	f043 0303 	orr.w	r3, r3, #3
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fe0a 	bl	8000600 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 80009ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009f0:	f002 f8ea 	bl	8002bc8 <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	f043 0307 	orr.w	r3, r3, #7
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fdfd 	bl	8000600 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000a06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a0a:	f002 f8dd 	bl	8002bc8 <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000a14:	f043 0307 	orr.w	r3, r3, #7
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fdf0 	bl	8000600 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000a20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a24:	f002 f8d0 	bl	8002bc8 <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f7ff fe64 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2006      	movs	r0, #6
 8000a3e:	f7ff fe5d 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	3310      	adds	r3, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2008      	movs	r0, #8
 8000a4c:	f7ff fe56 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	3318      	adds	r3, #24
 8000a56:	4619      	mov	r1, r3
 8000a58:	200a      	movs	r0, #10
 8000a5a:	f7ff fe4f 	bl	80006fc <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	3320      	adds	r3, #32
 8000a64:	4619      	mov	r1, r3
 8000a66:	200c      	movs	r0, #12
 8000a68:	f7ff fe48 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	3328      	adds	r3, #40	; 0x28
 8000a72:	4619      	mov	r1, r3
 8000a74:	200e      	movs	r0, #14
 8000a76:	f7ff fe41 	bl	80006fc <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	3330      	adds	r3, #48	; 0x30
 8000a80:	4619      	mov	r1, r3
 8000a82:	2010      	movs	r0, #16
 8000a84:	f7ff fe3a 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	3338      	adds	r3, #56	; 0x38
 8000a8e:	4619      	mov	r1, r3
 8000a90:	2012      	movs	r0, #18
 8000a92:	f7ff fe33 	bl	80006fc <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command && MD2714)													// Wenn Sampling Frequenz = MD2714
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d013      	beq.n	8000ac4 <ltc6811_test+0x118>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{*/
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	2b20      	cmp	r3, #32
 8000aa0:	d104      	bne.n	8000aac <ltc6811_test+0x100>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000aa2:	f249 5365 	movw	r3, #38245	; 0x9565
 8000aa6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000aaa:	e01e      	b.n	8000aea <ltc6811_test+0x13e>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	2b40      	cmp	r3, #64	; 0x40
 8000ab0:	d104      	bne.n	8000abc <ltc6811_test+0x110>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000ab2:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000ab6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000aba:	e016      	b.n	8000aea <ltc6811_test+0x13e>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000ac2:	e012      	b.n	8000aea <ltc6811_test+0x13e>
//		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command == ST1)
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	2b20      	cmp	r3, #32
 8000ac8:	d104      	bne.n	8000ad4 <ltc6811_test+0x128>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000aca:	f249 5355 	movw	r3, #38229	; 0x9555
 8000ace:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000ad2:	e00a      	b.n	8000aea <ltc6811_test+0x13e>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command == ST2)
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	2b40      	cmp	r3, #64	; 0x40
 8000ad8:	d104      	bne.n	8000ae4 <ltc6811_test+0x138>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000ada:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000ade:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000ae2:	e002      	b.n	8000aea <ltc6811_test+0x13e>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000af0:	e12a      	b.n	8000d48 <ltc6811_test+0x39c>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 8000af2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000af6:	2b1d      	cmp	r3, #29
 8000af8:	f200 8118 	bhi.w	8000d2c <ltc6811_test+0x380>
 8000afc:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <ltc6811_test+0x158>)
 8000afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b02:	bf00      	nop
 8000b04:	08000b7d 	.word	0x08000b7d
 8000b08:	08000b7d 	.word	0x08000b7d
 8000b0c:	08000b7d 	.word	0x08000b7d
 8000b10:	08000baf 	.word	0x08000baf
 8000b14:	08000baf 	.word	0x08000baf
 8000b18:	08000baf 	.word	0x08000baf
 8000b1c:	08000be3 	.word	0x08000be3
 8000b20:	08000be3 	.word	0x08000be3
 8000b24:	08000be3 	.word	0x08000be3
 8000b28:	08000c19 	.word	0x08000c19
 8000b2c:	08000c19 	.word	0x08000c19
 8000b30:	08000c19 	.word	0x08000c19
 8000b34:	08000c4f 	.word	0x08000c4f
 8000b38:	08000c4f 	.word	0x08000c4f
 8000b3c:	08000c4f 	.word	0x08000c4f
 8000b40:	08000c87 	.word	0x08000c87
 8000b44:	08000c87 	.word	0x08000c87
 8000b48:	08000c87 	.word	0x08000c87
 8000b4c:	08000cbd 	.word	0x08000cbd
 8000b50:	08000d2d 	.word	0x08000d2d
 8000b54:	08000cbd 	.word	0x08000cbd
 8000b58:	08000cf3 	.word	0x08000cf3
 8000b5c:	08000d2d 	.word	0x08000d2d
 8000b60:	08000d2d 	.word	0x08000d2d
 8000b64:	08000d2d 	.word	0x08000d2d
 8000b68:	08000d2d 	.word	0x08000d2d
 8000b6c:	08000d2d 	.word	0x08000d2d
 8000b70:	08000d2d 	.word	0x08000d2d
 8000b74:	08000d2d 	.word	0x08000d2d
 8000b78:	08000cbd 	.word	0x08000cbd
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000b7c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	3301      	adds	r3, #1
 8000b84:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b88:	4413      	add	r3, r2
 8000b8a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000b9c:	440b      	add	r3, r1
 8000b9e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000bac:	e0bf      	b.n	8000d2e <ltc6811_test+0x382>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3] << 8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000bae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	3303      	adds	r3, #3
 8000bb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000bba:	4413      	add	r3, r2
 8000bbc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bc8:	3301      	adds	r3, #1
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000bd0:	440b      	add	r3, r1
 8000bd2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000be0:	e0a5      	b.n	8000d2e <ltc6811_test+0x382>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1] << 8)|tmp_data[(i+2)*2]);		// Register CVC umwandeln
 8000be2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000be6:	3302      	adds	r3, #2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	3301      	adds	r3, #1
 8000bec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bfe:	3302      	adds	r3, #2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c06:	440b      	add	r3, r1
 8000c08:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000c16:	e08a      	b.n	8000d2e <ltc6811_test+0x382>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3] << 8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000c18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	3303      	adds	r3, #3
 8000c22:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c26:	4413      	add	r3, r2
 8000c28:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c34:	3303      	adds	r3, #3
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c3c:	440b      	add	r3, r1
 8000c3e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000c4c:	e06f      	b.n	8000d2e <ltc6811_test+0x382>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1] << 8)|tmp_data[(i+4)*2+1]);		// Register AUXA umwandeln
 8000c4e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c52:	3304      	adds	r3, #4
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	3301      	adds	r3, #1
 8000c58:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	3301      	adds	r3, #1
 8000c70:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c74:	440b      	add	r3, r1
 8000c76:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000c84:	e053      	b.n	8000d2e <ltc6811_test+0x382>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3] << 8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000c86:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	3303      	adds	r3, #3
 8000c90:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c94:	4413      	add	r3, r2
 8000c96:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ca2:	3305      	adds	r3, #5
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000caa:	440b      	add	r3, r1
 8000cac:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000cba:	e038      	b.n	8000d2e <ltc6811_test+0x382>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATA umwandeln
 8000cbc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cc0:	3306      	adds	r3, #6
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	3303      	adds	r3, #3
 8000cc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000cca:	4413      	add	r3, r2
 8000ccc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cd8:	3307      	adds	r3, #7
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000ce0:	440b      	add	r3, r1
 8000ce2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000cf0:	e01d      	b.n	8000d2e <ltc6811_test+0x382>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000cf2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cf6:	3306      	adds	r3, #6
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d00:	4413      	add	r3, r2
 8000d02:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d0e:	3307      	adds	r3, #7
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d16:	440b      	add	r3, r1
 8000d18:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d26:	e002      	b.n	8000d2e <ltc6811_test+0x382>
 8000d28:	080075a0 	.word	0x080075a0
			// Kein Register
			default:
				break;
 8000d2c:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000d2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000d32:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d001      	beq.n	8000d3e <ltc6811_test+0x392>
		{
			return 1;														// Selbsttest 1 nicht OK
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00a      	b.n	8000d54 <ltc6811_test+0x3a8>
	for (uint8_t i=0; i<22; i++)
 8000d3e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d42:	3301      	adds	r3, #1
 8000d44:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000d48:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d4c:	2b15      	cmp	r3, #21
 8000d4e:	f67f aed0 	bls.w	8000af2 <ltc6811_test+0x146>
		}
	}

	return 0;																// Selbsttest 1 OK
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3750      	adds	r7, #80	; 0x50
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Diagnostic LTC6811.\n");
 8000d62:	4810      	ldr	r0, [pc, #64]	; (8000da4 <ltc6811_diagn+0x48>)
 8000d64:	f000 fca5 	bl	80016b2 <ITM_SendString>
#endif

	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000d70:	f7ff fc1a 	bl	80005a8 <wakeup_ltc6811>

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000d74:	f240 7015 	movw	r0, #1813	; 0x715
 8000d78:	f7ff fc42 	bl	8000600 <ltc6811>

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000d7c:	f7ff fc14 	bl	80005a8 <wakeup_ltc6811>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000d80:	463b      	mov	r3, r7
 8000d82:	4619      	mov	r1, r3
 8000d84:	2012      	movs	r0, #18
 8000d86:	f7ff fcb9 	bl	80006fc <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1 << 1))
 8000d8a:	797b      	ldrb	r3, [r7, #5]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <ltc6811_diagn+0x3c>
	{
		return 1;															// Multiplexertest nicht OK
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <ltc6811_diagn+0x3e>
	}

	return 0;																// Multiplexertest OK
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	080075bc 	.word	0x080075bc

08000da8 <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b098      	sub	sp, #96	; 0x60
 8000dac:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Openwire LTC6811.\n");
 8000dae:	48c9      	ldr	r0, [pc, #804]	; (80010d4 <ltc6811_openwire+0x32c>)
 8000db0:	f000 fc7f 	bl	80016b2 <ITM_SendString>
#endif

	// Arrays definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	223c      	movs	r2, #60	; 0x3c
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 faef 	bl	80073a4 <memset>
	uint16_t cell[1] = {0}, openwire[12] = {0};								// Speicher Zelle, Openwire vergleic Threshold
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	833b      	strh	r3, [r7, #24]
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]

	// Pullup Current
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000dda:	f7ff fbe5 	bl	80005a8 <wakeup_ltc6811>

	// Commands fuer Openwire Test, Durchgang 1
	ltc6811(ADOW | MD262 | PUP);											// Pullup Current
 8000dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de2:	f7ff fc0d 	bl	8000600 <ltc6811>
	HAL_Delay(300);
 8000de6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dea:	f001 feed 	bl	8002bc8 <HAL_Delay>

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000dee:	f7ff fbdb 	bl	80005a8 <wakeup_ltc6811>

	// Commands fuer Openwire Test, Durchgang 2
	ltc6811(ADOW | MD262 | PUP);											// Pullup Current
 8000df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df6:	f7ff fc03 	bl	8000600 <ltc6811>
	HAL_Delay(300);
 8000dfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dfe:	f001 fee3 	bl	8002bc8 <HAL_Delay>

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &tmp_data[0]);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	2004      	movs	r0, #4
 8000e0a:	f7ff fc77 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	3308      	adds	r3, #8
 8000e14:	4619      	mov	r1, r3
 8000e16:	2006      	movs	r0, #6
 8000e18:	f7ff fc70 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	3310      	adds	r3, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	2008      	movs	r0, #8
 8000e26:	f7ff fc69 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	3318      	adds	r3, #24
 8000e30:	4619      	mov	r1, r3
 8000e32:	200a      	movs	r0, #10
 8000e34:	f7ff fc62 	bl	80006fc <ltc6811_read>

	// Pulldown Current
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000e38:	f7ff fbb6 	bl	80005a8 <wakeup_ltc6811>

	// Commands fuer Openwire Test, Durchgang 1
	ltc6811(ADOW | MD262);													// Pulldown Current
 8000e3c:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 8000e40:	f7ff fbde 	bl	8000600 <ltc6811>
	HAL_Delay(300);
 8000e44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e48:	f001 febe 	bl	8002bc8 <HAL_Delay>

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000e4c:	f7ff fbac 	bl	80005a8 <wakeup_ltc6811>

	// Commands fuer Openwire Test, Durchgang 2
	ltc6811(ADOW | MD262);													// Pulldown Current
 8000e50:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 8000e54:	f7ff fbd4 	bl	8000600 <ltc6811>
	HAL_Delay(300);
 8000e58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e5c:	f001 feb4 	bl	8002bc8 <HAL_Delay>

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &tmp_data[32]);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	3320      	adds	r3, #32
 8000e66:	4619      	mov	r1, r3
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f7ff fc47 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[40]);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	3328      	adds	r3, #40	; 0x28
 8000e74:	4619      	mov	r1, r3
 8000e76:	2006      	movs	r0, #6
 8000e78:	f7ff fc40 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[48]);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	3330      	adds	r3, #48	; 0x30
 8000e82:	4619      	mov	r1, r3
 8000e84:	2008      	movs	r0, #8
 8000e86:	f7ff fc39 	bl	80006fc <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[56]);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	3338      	adds	r3, #56	; 0x38
 8000e90:	4619      	mov	r1, r3
 8000e92:	200a      	movs	r0, #10
 8000e94:	f7ff fc32 	bl	80006fc <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t i = 1; i < 12; i++)
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000e9e:	e110      	b.n	80010c2 <ltc6811_openwire+0x31a>
	{
		// Auswahl welche Leitung
		switch (i)
 8000ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ea4:	2b0b      	cmp	r3, #11
 8000ea6:	f200 8106 	bhi.w	80010b6 <ltc6811_openwire+0x30e>
 8000eaa:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <ltc6811_openwire+0x108>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000ee1 	.word	0x08000ee1
 8000eb4:	08000ee1 	.word	0x08000ee1
 8000eb8:	08000ee1 	.word	0x08000ee1
 8000ebc:	08000f55 	.word	0x08000f55
 8000ec0:	08000f55 	.word	0x08000f55
 8000ec4:	08000f55 	.word	0x08000f55
 8000ec8:	08000fcb 	.word	0x08000fcb
 8000ecc:	08000fcb 	.word	0x08000fcb
 8000ed0:	08000fcb 	.word	0x08000fcb
 8000ed4:	08001041 	.word	0x08001041
 8000ed8:	08001041 	.word	0x08001041
 8000edc:	08001041 	.word	0x08001041
		{
			// Leitungen Zelle 1/2 bis 3/4
			case 0:
			case 1:
			case 2:
				openwire[i] = (((tmp_data[i*2+33] << 8) + tmp_data[i*2+32]) - ((tmp_data[i*2+1] << 8) + tmp_data[i*2]));
 8000ee0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	3321      	adds	r3, #33	; 0x21
 8000ee8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000eec:	4413      	add	r3, r2
 8000eee:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000efc:	3310      	adds	r3, #16
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f04:	440b      	add	r3, r1
 8000f06:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b299      	uxth	r1, r3
 8000f10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	3301      	adds	r3, #1
 8000f18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000f32:	4403      	add	r3, r0
 8000f34:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f42:	1a8a      	subs	r2, r1, r2
 8000f44:	b292      	uxth	r2, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f4c:	440b      	add	r3, r1
 8000f4e:	f823 2c60 	strh.w	r2, [r3, #-96]
				break;
 8000f52:	e0b1      	b.n	80010b8 <ltc6811_openwire+0x310>
			// Leitungen Zelle 4/5 bis 6/7
			case 3:
			case 4:
			case 5:
				openwire[i] = (((tmp_data[i*2+35] << 8) + tmp_data[i*2+34]) - ((tmp_data[i*2+3] << 8) + tmp_data[i*2+2]));
 8000f54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	3323      	adds	r3, #35	; 0x23
 8000f5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f60:	4413      	add	r3, r2
 8000f62:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f70:	3311      	adds	r3, #17
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000f78:	440b      	add	r3, r1
 8000f7a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	b299      	uxth	r1, r3
 8000f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	3303      	adds	r3, #3
 8000f8c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f90:	4413      	add	r3, r2
 8000f92:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000fa8:	4403      	add	r3, r0
 8000faa:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fb8:	1a8a      	subs	r2, r1, r2
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f823 2c60 	strh.w	r2, [r3, #-96]
				break;
 8000fc8:	e076      	b.n	80010b8 <ltc6811_openwire+0x310>
			// Leitungen Zelle 7/8 bis 9/10
			case 6:
			case 7:
			case 8:
				openwire[i] = (((tmp_data[i*2+37] << 8) + tmp_data[i*2+36]) - ((tmp_data[i*2+5] << 8) + tmp_data[i*2+4]));
 8000fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	3325      	adds	r3, #37	; 0x25
 8000fd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fe6:	3312      	adds	r3, #18
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000fee:	440b      	add	r3, r1
 8000ff0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b299      	uxth	r1, r3
 8000ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	3305      	adds	r3, #5
 8001002:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001006:	4413      	add	r3, r2
 8001008:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800100c:	b29b      	uxth	r3, r3
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b29a      	uxth	r2, r3
 8001012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001016:	3302      	adds	r3, #2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800101e:	4403      	add	r3, r0
 8001020:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001024:	b29b      	uxth	r3, r3
 8001026:	4413      	add	r3, r2
 8001028:	b29a      	uxth	r2, r3
 800102a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800102e:	1a8a      	subs	r2, r1, r2
 8001030:	b292      	uxth	r2, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001038:	440b      	add	r3, r1
 800103a:	f823 2c60 	strh.w	r2, [r3, #-96]
				break;
 800103e:	e03b      	b.n	80010b8 <ltc6811_openwire+0x310>
			// Leitungen Zelle 10/11 und 11/12
			case 9:
			case 10:
			case 11:
				openwire[i] = (((tmp_data[i*2+39] << 8) + tmp_data[i*2+38]) - ((tmp_data[i*2+7] << 8) + tmp_data[i*2+6]));
 8001040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	3327      	adds	r3, #39	; 0x27
 8001048:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800104c:	4413      	add	r3, r2
 800104e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001052:	b29b      	uxth	r3, r3
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b29a      	uxth	r2, r3
 8001058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800105c:	3313      	adds	r3, #19
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001064:	440b      	add	r3, r1
 8001066:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	b299      	uxth	r1, r3
 8001070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	3307      	adds	r3, #7
 8001078:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800107c:	4413      	add	r3, r2
 800107e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001082:	b29b      	uxth	r3, r3
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b29a      	uxth	r2, r3
 8001088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800108c:	3303      	adds	r3, #3
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001094:	4403      	add	r3, r0
 8001096:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4413      	add	r3, r2
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010a4:	1a8a      	subs	r2, r1, r2
 80010a6:	b292      	uxth	r2, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80010ae:	440b      	add	r3, r1
 80010b0:	f823 2c60 	strh.w	r2, [r3, #-96]
				break;
 80010b4:	e000      	b.n	80010b8 <ltc6811_openwire+0x310>
			default:
			break;
 80010b6:	bf00      	nop
	for (uint8_t i = 1; i < 12; i++)
 80010b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010bc:	3301      	adds	r3, #1
 80010be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80010c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010c6:	2b0b      	cmp	r3, #11
 80010c8:	f67f aeea 	bls.w	8000ea0 <ltc6811_openwire+0xf8>
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t i = 1; i < 12; i++)
 80010cc:	2301      	movs	r3, #1
 80010ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80010d2:	e01d      	b.n	8001110 <ltc6811_openwire+0x368>
 80010d4:	080075dc 	.word	0x080075dc
	{
		// Vergleiche Messdaten mit Threshold
		if (openwire[i] > OPENWIRE_THRESHOLD)
 80010d8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010e2:	4413      	add	r3, r2
 80010e4:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80010e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80010ec:	d90b      	bls.n	8001106 <ltc6811_openwire+0x35e>
		{
			cell[0] |= (1 << i);											// Wenn Threshold ueberschritten, Offene Leitung
 80010ee:	8b3b      	ldrh	r3, [r7, #24]
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21b      	sxth	r3, r3
 8001102:	b29b      	uxth	r3, r3
 8001104:	833b      	strh	r3, [r7, #24]
	for (uint8_t i = 1; i < 12; i++)
 8001106:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800110a:	3301      	adds	r3, #1
 800110c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001110:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001114:	2b0b      	cmp	r3, #11
 8001116:	d9df      	bls.n	80010d8 <ltc6811_openwire+0x330>
		}
	}

	// Offene Leitung erste Zelle messen
	if (((tmp_data[1] << 8) + tmp_data[0]) == 0)
 8001118:	7f7b      	ldrb	r3, [r7, #29]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	7f3a      	ldrb	r2, [r7, #28]
 800111e:	4413      	add	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <ltc6811_openwire+0x386>
	{
		cell[0] |= (1 << 0);												// Unterste Leitung Offen
 8001124:	8b3b      	ldrh	r3, [r7, #24]
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	b29b      	uxth	r3, r3
 800112c:	833b      	strh	r3, [r7, #24]
	}

	// Offene Leitung letzte Zelle messen
	if (((tmp_data[61] << 8) + tmp_data[60]) == 0)
 800112e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8001138:	4413      	add	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <ltc6811_openwire+0x3a0>
	{
		cell[0] |= (1 << 12);												// Oberste Leitung offen
 800113e:	8b3b      	ldrh	r3, [r7, #24]
 8001140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001144:	b29b      	uxth	r3, r3
 8001146:	833b      	strh	r3, [r7, #24]
	}

	// Wenn offene Leitung vorhanden
	if (cell[0] != 0)
 8001148:	8b3b      	ldrh	r3, [r7, #24]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <ltc6811_openwire+0x3aa>
	{
		return 1;															// Open Wire nicht OK
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <ltc6811_openwire+0x3ac>
	}

	return 0;																// Open Wire OK
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3760      	adds	r7, #96	; 0x60
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8001162:	2115      	movs	r1, #21
 8001164:	483b      	ldr	r0, [pc, #236]	; (8001254 <collectHardwareInfo+0xf8>)
 8001166:	f7ff f9eb 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800116a:	f001 fd67 	bl	8002c3c <HAL_GetDEVID>
 800116e:	4603      	mov	r3, r0
 8001170:	210a      	movs	r1, #10
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9f8 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8001178:	2117      	movs	r1, #23
 800117a:	4837      	ldr	r0, [pc, #220]	; (8001258 <collectHardwareInfo+0xfc>)
 800117c:	f7ff f9e0 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8001180:	f001 fd50 	bl	8002c24 <HAL_GetREVID>
 8001184:	4603      	mov	r3, r0
 8001186:	f242 0201 	movw	r2, #8193	; 0x2001
 800118a:	4293      	cmp	r3, r2
 800118c:	d016      	beq.n	80011bc <collectHardwareInfo+0x60>
 800118e:	f242 0201 	movw	r2, #8193	; 0x2001
 8001192:	4293      	cmp	r3, r2
 8001194:	d817      	bhi.n	80011c6 <collectHardwareInfo+0x6a>
 8001196:	f241 0201 	movw	r2, #4097	; 0x1001
 800119a:	4293      	cmp	r3, r2
 800119c:	d004      	beq.n	80011a8 <collectHardwareInfo+0x4c>
 800119e:	f241 0203 	movw	r2, #4099	; 0x1003
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d005      	beq.n	80011b2 <collectHardwareInfo+0x56>
 80011a6:	e00e      	b.n	80011c6 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80011a8:	2101      	movs	r1, #1
 80011aa:	482c      	ldr	r0, [pc, #176]	; (800125c <collectHardwareInfo+0x100>)
 80011ac:	f7ff f9c8 	bl	8000540 <uartTransmit>
			break;
 80011b0:	e011      	b.n	80011d6 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80011b2:	2101      	movs	r1, #1
 80011b4:	482a      	ldr	r0, [pc, #168]	; (8001260 <collectHardwareInfo+0x104>)
 80011b6:	f7ff f9c3 	bl	8000540 <uartTransmit>
			break;
 80011ba:	e00c      	b.n	80011d6 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 80011bc:	2101      	movs	r1, #1
 80011be:	4829      	ldr	r0, [pc, #164]	; (8001264 <collectHardwareInfo+0x108>)
 80011c0:	f7ff f9be 	bl	8000540 <uartTransmit>
			break;
 80011c4:	e007      	b.n	80011d6 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80011c6:	f001 fd2d 	bl	8002c24 <HAL_GetREVID>
 80011ca:	4603      	mov	r3, r0
 80011cc:	210a      	movs	r1, #10
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9ca 	bl	8000568 <uartTransmitNumber>
			break;
 80011d4:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80011d6:	2115      	movs	r1, #21
 80011d8:	4823      	ldr	r0, [pc, #140]	; (8001268 <collectHardwareInfo+0x10c>)
 80011da:	f7ff f9b1 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80011de:	f002 ff91 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80011e2:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a21      	ldr	r2, [pc, #132]	; (800126c <collectHardwareInfo+0x110>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9b      	lsrs	r3, r3, #18
 80011ee:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80011f0:	210a      	movs	r1, #10
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff f9b8 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80011f8:	2104      	movs	r1, #4
 80011fa:	481d      	ldr	r0, [pc, #116]	; (8001270 <collectHardwareInfo+0x114>)
 80011fc:	f7ff f9a0 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8001200:	2111      	movs	r1, #17
 8001202:	481c      	ldr	r0, [pc, #112]	; (8001274 <collectHardwareInfo+0x118>)
 8001204:	f7ff f99c 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8001208:	f001 fd26 	bl	8002c58 <HAL_GetUIDw0>
 800120c:	4603      	mov	r3, r0
 800120e:	2110      	movs	r1, #16
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f9a9 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8001216:	2101      	movs	r1, #1
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <collectHardwareInfo+0x11c>)
 800121a:	f7ff f991 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800121e:	f001 fd27 	bl	8002c70 <HAL_GetUIDw1>
 8001222:	4603      	mov	r3, r0
 8001224:	2110      	movs	r1, #16
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f99e 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 800122c:	2101      	movs	r1, #1
 800122e:	4812      	ldr	r0, [pc, #72]	; (8001278 <collectHardwareInfo+0x11c>)
 8001230:	f7ff f986 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8001234:	f001 fd28 	bl	8002c88 <HAL_GetUIDw2>
 8001238:	4603      	mov	r3, r0
 800123a:	2110      	movs	r1, #16
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f993 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8001242:	2101      	movs	r1, #1
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <collectHardwareInfo+0x120>)
 8001246:	f7ff f97b 	bl	8000540 <uartTransmit>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	08007634 	.word	0x08007634
 8001258:	0800764c 	.word	0x0800764c
 800125c:	08007664 	.word	0x08007664
 8001260:	08007668 	.word	0x08007668
 8001264:	0800766c 	.word	0x0800766c
 8001268:	08007670 	.word	0x08007670
 800126c:	431bde83 	.word	0x431bde83
 8001270:	08007688 	.word	0x08007688
 8001274:	08007690 	.word	0x08007690
 8001278:	080076a4 	.word	0x080076a4
 800127c:	080076a8 	.word	0x080076a8

08001280 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8001284:	2114      	movs	r1, #20
 8001286:	4824      	ldr	r0, [pc, #144]	; (8001318 <collectMiddlewareInfo+0x98>)
 8001288:	f7ff f95a 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 800128c:	210a      	movs	r1, #10
 800128e:	2005      	movs	r0, #5
 8001290:	f7ff f96a 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 8001294:	2101      	movs	r1, #1
 8001296:	4821      	ldr	r0, [pc, #132]	; (800131c <collectMiddlewareInfo+0x9c>)
 8001298:	f7ff f952 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 800129c:	210a      	movs	r1, #10
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff f962 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80012a4:	2112      	movs	r1, #18
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <collectMiddlewareInfo+0xa0>)
 80012a8:	f7ff f94a 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80012ac:	f001 fcb0 	bl	8002c10 <HAL_GetHalVersion>
 80012b0:	4603      	mov	r3, r0
 80012b2:	0e1b      	lsrs	r3, r3, #24
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	210a      	movs	r1, #10
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f955 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80012be:	2101      	movs	r1, #1
 80012c0:	4816      	ldr	r0, [pc, #88]	; (800131c <collectMiddlewareInfo+0x9c>)
 80012c2:	f7ff f93d 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80012c6:	f001 fca3 	bl	8002c10 <HAL_GetHalVersion>
 80012ca:	4603      	mov	r3, r0
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	210a      	movs	r1, #10
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f948 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80012d8:	2101      	movs	r1, #1
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <collectMiddlewareInfo+0x9c>)
 80012dc:	f7ff f930 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 80012e0:	f001 fc96 	bl	8002c10 <HAL_GetHalVersion>
 80012e4:	4603      	mov	r3, r0
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	210a      	movs	r1, #10
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f93b 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80012f2:	2101      	movs	r1, #1
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <collectMiddlewareInfo+0x9c>)
 80012f6:	f7ff f923 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80012fa:	f001 fc89 	bl	8002c10 <HAL_GetHalVersion>
 80012fe:	4603      	mov	r3, r0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	210a      	movs	r1, #10
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f92f 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 800130a:	2101      	movs	r1, #1
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <collectMiddlewareInfo+0xa4>)
 800130e:	f7ff f917 	bl	8000540 <uartTransmit>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	080076ac 	.word	0x080076ac
 800131c:	080076c0 	.word	0x080076c0
 8001320:	080076c4 	.word	0x080076c4
 8001324:	080076a8 	.word	0x080076a8

08001328 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 800132c:	2111      	movs	r1, #17
 800132e:	4826      	ldr	r0, [pc, #152]	; (80013c8 <collectSoftwareInfo+0xa0>)
 8001330:	f7ff f906 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8001334:	2108      	movs	r1, #8
 8001336:	4825      	ldr	r0, [pc, #148]	; (80013cc <collectSoftwareInfo+0xa4>)
 8001338:	f7ff f902 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 800133c:	2111      	movs	r1, #17
 800133e:	4824      	ldr	r0, [pc, #144]	; (80013d0 <collectSoftwareInfo+0xa8>)
 8001340:	f7ff f8fe 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8001344:	2108      	movs	r1, #8
 8001346:	4823      	ldr	r0, [pc, #140]	; (80013d4 <collectSoftwareInfo+0xac>)
 8001348:	f7ff f8fa 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 800134c:	210f      	movs	r1, #15
 800134e:	4822      	ldr	r0, [pc, #136]	; (80013d8 <collectSoftwareInfo+0xb0>)
 8001350:	f7ff f8f6 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8001354:	2129      	movs	r1, #41	; 0x29
 8001356:	4821      	ldr	r0, [pc, #132]	; (80013dc <collectSoftwareInfo+0xb4>)
 8001358:	f7ff f8f2 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800135c:	2101      	movs	r1, #1
 800135e:	4820      	ldr	r0, [pc, #128]	; (80013e0 <collectSoftwareInfo+0xb8>)
 8001360:	f7ff f8ee 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001364:	2116      	movs	r1, #22
 8001366:	481f      	ldr	r0, [pc, #124]	; (80013e4 <collectSoftwareInfo+0xbc>)
 8001368:	f7ff f8ea 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 800136c:	2105      	movs	r1, #5
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <collectSoftwareInfo+0xc0>)
 8001370:	f7ff f8e6 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001374:	2115      	movs	r1, #21
 8001376:	481d      	ldr	r0, [pc, #116]	; (80013ec <collectSoftwareInfo+0xc4>)
 8001378:	f7ff f8e2 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 800137c:	2108      	movs	r1, #8
 800137e:	481c      	ldr	r0, [pc, #112]	; (80013f0 <collectSoftwareInfo+0xc8>)
 8001380:	f7ff f8de 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8001384:	2116      	movs	r1, #22
 8001386:	481b      	ldr	r0, [pc, #108]	; (80013f4 <collectSoftwareInfo+0xcc>)
 8001388:	f7ff f8da 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 800138c:	2111      	movs	r1, #17
 800138e:	481a      	ldr	r0, [pc, #104]	; (80013f8 <collectSoftwareInfo+0xd0>)
 8001390:	f7ff f8d6 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001394:	2101      	movs	r1, #1
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <collectSoftwareInfo+0xb8>)
 8001398:	f7ff f8d2 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 800139c:	2111      	movs	r1, #17
 800139e:	4817      	ldr	r0, [pc, #92]	; (80013fc <collectSoftwareInfo+0xd4>)
 80013a0:	f7ff f8ce 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80013a4:	210b      	movs	r1, #11
 80013a6:	4816      	ldr	r0, [pc, #88]	; (8001400 <collectSoftwareInfo+0xd8>)
 80013a8:	f7ff f8ca 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80013ac:	2111      	movs	r1, #17
 80013ae:	4815      	ldr	r0, [pc, #84]	; (8001404 <collectSoftwareInfo+0xdc>)
 80013b0:	f7ff f8c6 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80013b4:	2109      	movs	r1, #9
 80013b6:	4814      	ldr	r0, [pc, #80]	; (8001408 <collectSoftwareInfo+0xe0>)
 80013b8:	f7ff f8c2 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80013bc:	2101      	movs	r1, #1
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <collectSoftwareInfo+0xb8>)
 80013c0:	f7ff f8be 	bl	8000540 <uartTransmit>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	080076d8 	.word	0x080076d8
 80013cc:	080076ec 	.word	0x080076ec
 80013d0:	080076f4 	.word	0x080076f4
 80013d4:	08007708 	.word	0x08007708
 80013d8:	08007710 	.word	0x08007710
 80013dc:	08007720 	.word	0x08007720
 80013e0:	080076a8 	.word	0x080076a8
 80013e4:	0800774c 	.word	0x0800774c
 80013e8:	08007764 	.word	0x08007764
 80013ec:	0800776c 	.word	0x0800776c
 80013f0:	08007784 	.word	0x08007784
 80013f4:	0800778c 	.word	0x0800778c
 80013f8:	080077a4 	.word	0x080077a4
 80013fc:	080077b8 	.word	0x080077b8
 8001400:	080077cc 	.word	0x080077cc
 8001404:	080077d8 	.word	0x080077d8
 8001408:	080077ec 	.word	0x080077ec

0800140c <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8001410:	2115      	movs	r1, #21
 8001412:	4814      	ldr	r0, [pc, #80]	; (8001464 <collectGitcounts+0x58>)
 8001414:	f7ff f894 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8001418:	2103      	movs	r1, #3
 800141a:	4813      	ldr	r0, [pc, #76]	; (8001468 <collectGitcounts+0x5c>)
 800141c:	f7ff f890 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8001420:	2117      	movs	r1, #23
 8001422:	4812      	ldr	r0, [pc, #72]	; (800146c <collectGitcounts+0x60>)
 8001424:	f7ff f88c 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8001428:	2103      	movs	r1, #3
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <collectGitcounts+0x64>)
 800142c:	f7ff f888 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8001430:	211c      	movs	r1, #28
 8001432:	4810      	ldr	r0, [pc, #64]	; (8001474 <collectGitcounts+0x68>)
 8001434:	f7ff f884 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8001438:	2103      	movs	r1, #3
 800143a:	480f      	ldr	r0, [pc, #60]	; (8001478 <collectGitcounts+0x6c>)
 800143c:	f7ff f880 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001440:	2116      	movs	r1, #22
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <collectGitcounts+0x70>)
 8001444:	f7ff f87c 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8001448:	2102      	movs	r1, #2
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <collectGitcounts+0x74>)
 800144c:	f7ff f878 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001450:	2115      	movs	r1, #21
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <collectGitcounts+0x78>)
 8001454:	f7ff f874 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8001458:	2102      	movs	r1, #2
 800145a:	480b      	ldr	r0, [pc, #44]	; (8001488 <collectGitcounts+0x7c>)
 800145c:	f7ff f870 	bl	8000540 <uartTransmit>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	080077f8 	.word	0x080077f8
 8001468:	08007810 	.word	0x08007810
 800146c:	08007814 	.word	0x08007814
 8001470:	0800782c 	.word	0x0800782c
 8001474:	08007830 	.word	0x08007830
 8001478:	0800784c 	.word	0x0800784c
 800147c:	0800774c 	.word	0x0800774c
 8001480:	08007850 	.word	0x08007850
 8001484:	0800776c 	.word	0x0800776c
 8001488:	08007854 	.word	0x08007854

0800148c <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8001490:	2111      	movs	r1, #17
 8001492:	480e      	ldr	r0, [pc, #56]	; (80014cc <collectSystemInfo+0x40>)
 8001494:	f7ff f854 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8001498:	f7ff fe60 	bl	800115c <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 800149c:	2111      	movs	r1, #17
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <collectSystemInfo+0x44>)
 80014a0:	f7ff f84e 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 80014a4:	f7ff ff40 	bl	8001328 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80014a8:	2113      	movs	r1, #19
 80014aa:	480a      	ldr	r0, [pc, #40]	; (80014d4 <collectSystemInfo+0x48>)
 80014ac:	f7ff f848 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80014b0:	f7ff fee6 	bl	8001280 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 80014b4:	2113      	movs	r1, #19
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <collectSystemInfo+0x4c>)
 80014b8:	f7ff f842 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 80014bc:	f7ff ffa6 	bl	800140c <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 80014c0:	2103      	movs	r1, #3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <collectSystemInfo+0x50>)
 80014c4:	f7ff f83c 	bl	8000540 <uartTransmit>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	08007858 	.word	0x08007858
 80014d0:	0800786c 	.word	0x0800786c
 80014d4:	08007880 	.word	0x08007880
 80014d8:	08007894 	.word	0x08007894
 80014dc:	080078a8 	.word	0x080078a8

080014e0 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 80014e6:	2300      	movs	r3, #0
 80014e8:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <readResetSource+0xa0>)
 80014ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	3301      	adds	r3, #1
 80014fa:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <readResetSource+0xa0>)
 80014fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001500:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	3302      	adds	r3, #2
 800150c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <readResetSource+0xa0>)
 8001510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001512:	2b00      	cmp	r3, #0
 8001514:	da02      	bge.n	800151c <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	3304      	adds	r3, #4
 800151a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <readResetSource+0xa0>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	3308      	adds	r3, #8
 800152c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <readResetSource+0xa0>)
 8001530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	3310      	adds	r3, #16
 800153e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <readResetSource+0xa0>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3320      	adds	r3, #32
 8001550:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <readResetSource+0xa0>)
 8001554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001556:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	3340      	adds	r3, #64	; 0x40
 8001562:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <readResetSource+0xa0>)
 8001566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001568:	4a05      	ldr	r2, [pc, #20]	; (8001580 <readResetSource+0xa0>)
 800156a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156e:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8001570:	79fb      	ldrb	r3, [r7, #7]
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 800158e:	2106      	movs	r1, #6
 8001590:	482a      	ldr	r0, [pc, #168]	; (800163c <printResetSource+0xb8>)
 8001592:	f7fe ffd5 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d104      	bne.n	80015a6 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 800159c:	210f      	movs	r1, #15
 800159e:	4828      	ldr	r0, [pc, #160]	; (8001640 <printResetSource+0xbc>)
 80015a0:	f7fe ffce 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80015a4:	e046      	b.n	8001634 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80015b0:	2118      	movs	r1, #24
 80015b2:	4824      	ldr	r0, [pc, #144]	; (8001644 <printResetSource+0xc0>)
 80015b4:	f7fe ffc4 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 80015c2:	2116      	movs	r1, #22
 80015c4:	4820      	ldr	r0, [pc, #128]	; (8001648 <printResetSource+0xc4>)
 80015c6:	f7fe ffbb 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 80015d4:	210a      	movs	r1, #10
 80015d6:	481d      	ldr	r0, [pc, #116]	; (800164c <printResetSource+0xc8>)
 80015d8:	f7fe ffb2 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 80015e6:	2110      	movs	r1, #16
 80015e8:	4819      	ldr	r0, [pc, #100]	; (8001650 <printResetSource+0xcc>)
 80015ea:	f7fe ffa9 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80015f8:	210f      	movs	r1, #15
 80015fa:	4816      	ldr	r0, [pc, #88]	; (8001654 <printResetSource+0xd0>)
 80015fc:	f7fe ffa0 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 800160a:	210f      	movs	r1, #15
 800160c:	4812      	ldr	r0, [pc, #72]	; (8001658 <printResetSource+0xd4>)
 800160e:	f7fe ff97 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 800161c:	210a      	movs	r1, #10
 800161e:	480f      	ldr	r0, [pc, #60]	; (800165c <printResetSource+0xd8>)
 8001620:	f7fe ff8e 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da03      	bge.n	8001634 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 800162c:	2105      	movs	r1, #5
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <printResetSource+0xdc>)
 8001630:	f7fe ff86 	bl	8000540 <uartTransmit>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	080078ac 	.word	0x080078ac
 8001640:	080078b4 	.word	0x080078b4
 8001644:	080078c4 	.word	0x080078c4
 8001648:	080078e0 	.word	0x080078e0
 800164c:	080078f8 	.word	0x080078f8
 8001650:	08007904 	.word	0x08007904
 8001654:	08007918 	.word	0x08007918
 8001658:	08007928 	.word	0x08007928
 800165c:	08007938 	.word	0x08007938
 8001660:	08007944 	.word	0x08007944

08001664 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800166c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001670:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800167c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001680:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001684:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00b      	beq.n	80016a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800168c:	e000      	b.n	8001690 <ITM_SendChar+0x2c>
    {
      __NOP();
 800168e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001690:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f9      	beq.n	800168e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800169a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <ITM_SendString>:
// Core Clock := Maximalfrequenz
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------

void ITM_SendString(char *text)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	// So lange *text != '\0', also ungleich dem "String-Endezeichen(Terminator)"
	while(*text)															// Starte Pointerschleife
 80016ba:	e007      	b.n	80016cc <ITM_SendString+0x1a>
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ffcf 	bl	8001664 <ITM_SendChar>
		text++;																// Pointer hochzaehlen
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3301      	adds	r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
	while(*text)															// Starte Pointerschleife
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f3      	bne.n	80016bc <ITM_SendString+0xa>
	}
#endif
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	// Variablen definieren
	unsigned char buf[8 * sizeof(long)];
	unsigned int i = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Wenn Nummer 0 ist
	if(number == 0)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <ITM_SendNumber+0x1a>
	{
		// Sende 0
		ITM_SendChar('0');
 80016f2:	2030      	movs	r0, #48	; 0x30
 80016f4:	f7ff ffb6 	bl	8001664 <ITM_SendChar>
 80016f8:	e03b      	b.n	8001772 <ITM_SendNumber+0x92>
		// Beende Funktion
		return;
	}

	// Wenn Zahl negativ ist
	if(number < 0)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da23      	bge.n	8001748 <ITM_SendNumber+0x68>
	{
		// Vorzeichen senden
		ITM_SendChar('-');
 8001700:	202d      	movs	r0, #45	; 0x2d
 8001702:	f7ff ffaf 	bl	8001664 <ITM_SendChar>

		// Nummer invertieren
		number = number * -1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	425b      	negs	r3, r3
 800170a:	607b      	str	r3, [r7, #4]
	}

	// Berechne Ziffern bis Zahl 0 ist
	while(number > 0)
 800170c:	e01c      	b.n	8001748 <ITM_SendNumber+0x68>
	{
		// Ziffern in Puffer schreiben
		buf[i++] = number % 10;												// Rest berechnen
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <ITM_SendNumber+0x98>)
 8001712:	fb83 1302 	smull	r1, r3, r3, r2
 8001716:	1099      	asrs	r1, r3, #2
 8001718:	17d3      	asrs	r3, r2, #31
 800171a:	1ac9      	subs	r1, r1, r3
 800171c:	460b      	mov	r3, r1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	1ad1      	subs	r1, r2, r3
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800172c:	b2ca      	uxtb	r2, r1
 800172e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001732:	440b      	add	r3, r1
 8001734:	f803 2c24 	strb.w	r2, [r3, #-36]
		number = number / 10;												// Dividiere durch 10
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <ITM_SendNumber+0x98>)
 800173c:	fb82 1203 	smull	r1, r2, r2, r3
 8001740:	1092      	asrs	r2, r2, #2
 8001742:	17db      	asrs	r3, r3, #31
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	607b      	str	r3, [r7, #4]
	while(number > 0)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	dcdf      	bgt.n	800170e <ITM_SendNumber+0x2e>
	}

	// Sende Zeichen
	for(; i > 0; i--)
 800174e:	e00d      	b.n	800176c <ITM_SendNumber+0x8c>
	{
		ITM_SendChar('0' + buf[i-1]);
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	3b01      	subs	r3, #1
 8001754:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001758:	4413      	add	r3, r2
 800175a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800175e:	3330      	adds	r3, #48	; 0x30
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff7f 	bl	8001664 <ITM_SendChar>
	for(; i > 0; i--)
 8001766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001768:	3b01      	subs	r3, #1
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ee      	bne.n	8001750 <ITM_SendNumber+0x70>
	}
#endif
}
 8001772:	3730      	adds	r7, #48	; 0x30
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	66666667 	.word	0x66666667

0800177c <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8001780:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001784:	4850      	ldr	r0, [pc, #320]	; (80018c8 <readall_inputs+0x14c>)
 8001786:	f002 f8a1 	bl	80038cc <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	b2d9      	uxtb	r1, r3
 8001792:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <readall_inputs+0x150>)
 8001794:	7813      	ldrb	r3, [r2, #0]
 8001796:	f361 0300 	bfi	r3, r1, #0, #1
 800179a:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 800179c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a0:	484b      	ldr	r0, [pc, #300]	; (80018d0 <readall_inputs+0x154>)
 80017a2:	f002 f893 	bl	80038cc <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	b2d9      	uxtb	r1, r3
 80017ae:	4a47      	ldr	r2, [pc, #284]	; (80018cc <readall_inputs+0x150>)
 80017b0:	7813      	ldrb	r3, [r2, #0]
 80017b2:	f361 0341 	bfi	r3, r1, #1, #1
 80017b6:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 80017b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017bc:	4845      	ldr	r0, [pc, #276]	; (80018d4 <readall_inputs+0x158>)
 80017be:	f002 f885 	bl	80038cc <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	b2d9      	uxtb	r1, r3
 80017ca:	4a40      	ldr	r2, [pc, #256]	; (80018cc <readall_inputs+0x150>)
 80017cc:	7813      	ldrb	r3, [r2, #0]
 80017ce:	f361 03c3 	bfi	r3, r1, #3, #1
 80017d2:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 80017d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d8:	483e      	ldr	r0, [pc, #248]	; (80018d4 <readall_inputs+0x158>)
 80017da:	f002 f877 	bl	80038cc <HAL_GPIO_ReadPin>
 80017de:	4603      	mov	r3, r0
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	b2d9      	uxtb	r1, r3
 80017e6:	4a39      	ldr	r2, [pc, #228]	; (80018cc <readall_inputs+0x150>)
 80017e8:	7813      	ldrb	r3, [r2, #0]
 80017ea:	f361 1304 	bfi	r3, r1, #4, #1
 80017ee:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 80017f0:	2101      	movs	r1, #1
 80017f2:	4838      	ldr	r0, [pc, #224]	; (80018d4 <readall_inputs+0x158>)
 80017f4:	f002 f86a 	bl	80038cc <HAL_GPIO_ReadPin>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	b2d9      	uxtb	r1, r3
 8001800:	4a32      	ldr	r2, [pc, #200]	; (80018cc <readall_inputs+0x150>)
 8001802:	7813      	ldrb	r3, [r2, #0]
 8001804:	f361 1345 	bfi	r3, r1, #5, #1
 8001808:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 800180a:	2104      	movs	r1, #4
 800180c:	4831      	ldr	r0, [pc, #196]	; (80018d4 <readall_inputs+0x158>)
 800180e:	f002 f85d 	bl	80038cc <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	b2d9      	uxtb	r1, r3
 800181a:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <readall_inputs+0x150>)
 800181c:	7813      	ldrb	r3, [r2, #0]
 800181e:	f361 1386 	bfi	r3, r1, #6, #1
 8001822:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8001824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001828:	4827      	ldr	r0, [pc, #156]	; (80018c8 <readall_inputs+0x14c>)
 800182a:	f002 f84f 	bl	80038cc <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	b2d9      	uxtb	r1, r3
 8001836:	4a28      	ldr	r2, [pc, #160]	; (80018d8 <readall_inputs+0x15c>)
 8001838:	7813      	ldrb	r3, [r2, #0]
 800183a:	f361 0300 	bfi	r3, r1, #0, #1
 800183e:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8001840:	2108      	movs	r1, #8
 8001842:	4821      	ldr	r0, [pc, #132]	; (80018c8 <readall_inputs+0x14c>)
 8001844:	f002 f842 	bl	80038cc <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	b2d9      	uxtb	r1, r3
 8001850:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <readall_inputs+0x15c>)
 8001852:	7813      	ldrb	r3, [r2, #0]
 8001854:	f361 0341 	bfi	r3, r1, #1, #1
 8001858:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 800185a:	2120      	movs	r1, #32
 800185c:	481a      	ldr	r0, [pc, #104]	; (80018c8 <readall_inputs+0x14c>)
 800185e:	f002 f835 	bl	80038cc <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	b2d9      	uxtb	r1, r3
 800186a:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <readall_inputs+0x15c>)
 800186c:	7813      	ldrb	r3, [r2, #0]
 800186e:	f361 0382 	bfi	r3, r1, #2, #1
 8001872:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001874:	2110      	movs	r1, #16
 8001876:	4814      	ldr	r0, [pc, #80]	; (80018c8 <readall_inputs+0x14c>)
 8001878:	f002 f828 	bl	80038cc <HAL_GPIO_ReadPin>
 800187c:	4603      	mov	r3, r0
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	b2d9      	uxtb	r1, r3
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <readall_inputs+0x15c>)
 8001886:	7813      	ldrb	r3, [r2, #0]
 8001888:	f361 03c3 	bfi	r3, r1, #3, #1
 800188c:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 800188e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001892:	4812      	ldr	r0, [pc, #72]	; (80018dc <readall_inputs+0x160>)
 8001894:	f002 f81a 	bl	80038cc <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	b2d9      	uxtb	r1, r3
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <readall_inputs+0x15c>)
 80018a2:	7813      	ldrb	r3, [r2, #0]
 80018a4:	f361 1304 	bfi	r3, r1, #4, #1
 80018a8:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 80018aa:	2104      	movs	r1, #4
 80018ac:	480b      	ldr	r0, [pc, #44]	; (80018dc <readall_inputs+0x160>)
 80018ae:	f002 f80d 	bl	80038cc <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	b2d9      	uxtb	r1, r3
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <readall_inputs+0x164>)
 80018bc:	7813      	ldrb	r3, [r2, #0]
 80018be:	f361 0300 	bfi	r3, r1, #0, #1
 80018c2:	7013      	strb	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	20000060 	.word	0x20000060
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40020000 	.word	0x40020000
 80018d8:	20000068 	.word	0x20000068
 80018dc:	40021400 	.word	0x40021400
 80018e0:	20000064 	.word	0x20000064

080018e4 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	481b      	ldr	r0, [pc, #108]	; (800195c <testPCB_Leds+0x78>)
 80018ee:	f002 f805 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80018f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f6:	f001 f967 	bl	8002bc8 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	4817      	ldr	r0, [pc, #92]	; (800195c <testPCB_Leds+0x78>)
 8001900:	f001 fffc 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001908:	f001 f95e 	bl	8002bc8 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	2104      	movs	r1, #4
 8001910:	4812      	ldr	r0, [pc, #72]	; (800195c <testPCB_Leds+0x78>)
 8001912:	f001 fff3 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800191a:	f001 f955 	bl	8002bc8 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2104      	movs	r1, #4
 8001922:	480e      	ldr	r0, [pc, #56]	; (800195c <testPCB_Leds+0x78>)
 8001924:	f001 ffea 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800192c:	f001 f94c 	bl	8002bc8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	4809      	ldr	r0, [pc, #36]	; (800195c <testPCB_Leds+0x78>)
 8001938:	f001 ffe0 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800193c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001940:	f001 f942 	bl	8002bc8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800194a:	4804      	ldr	r0, [pc, #16]	; (800195c <testPCB_Leds+0x78>)
 800194c:	f001 ffd6 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001950:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001954:	f001 f938 	bl	8002bc8 <HAL_Delay>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40020400 	.word	0x40020400

08001960 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001966:	463b      	mov	r3, r7
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <MX_ADC1_Init+0x98>)
 8001974:	4a21      	ldr	r2, [pc, #132]	; (80019fc <MX_ADC1_Init+0x9c>)
 8001976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <MX_ADC1_Init+0x98>)
 800197a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800197e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <MX_ADC1_Init+0x98>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_ADC1_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_ADC1_Init+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <MX_ADC1_Init+0x98>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_ADC1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <MX_ADC1_Init+0xa0>)
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019bc:	2201      	movs	r2, #1
 80019be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019c2:	f001 f96d 	bl	8002ca0 <HAL_ADC_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019cc:	f000 fcbc 	bl	8002348 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019d0:	2304      	movs	r3, #4
 80019d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019e2:	f001 f9a1 	bl	8002d28 <HAL_ADC_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019ec:	f000 fcac 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2000006c 	.word	0x2000006c
 80019fc:	40012000 	.word	0x40012000
 8001a00:	0f000001 	.word	0x0f000001

08001a04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <HAL_ADC_MspInit+0x74>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d123      	bne.n	8001a6e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_ADC_MspInit+0x78>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_ADC_MspInit+0x78>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_ADC_MspInit+0x78>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_ADC_MspInit+0x78>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_ADC_MspInit+0x78>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_ADC_MspInit+0x78>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001a56:	23f8      	movs	r3, #248	; 0xf8
 8001a58:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <HAL_ADC_MspInit+0x7c>)
 8001a6a:	f001 fd83 	bl	8003574 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	; 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000

08001a84 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <MX_CAN1_Init+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001a90:	2210      	movs	r2, #16
 8001a92:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001aa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aa6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001ad4:	f001 fb6c 	bl	80031b0 <HAL_CAN_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001ade:	f000 fc33 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200000dc 	.word	0x200000dc
 8001aec:	40006400 	.word	0x40006400

08001af0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001af6:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <MX_CAN3_Init+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001afc:	2206      	movs	r2, #6
 8001afe:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b0e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b12:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b1a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_CAN3_Init+0x64>)
 8001b42:	f001 fb35 	bl	80031b0 <HAL_CAN_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001b4c:	f000 fbfc 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200000b4 	.word	0x200000b4
 8001b58:	40003400 	.word	0x40003400

08001b5c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08e      	sub	sp, #56	; 0x38
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a43      	ldr	r2, [pc, #268]	; (8001c88 <HAL_CAN_MspInit+0x12c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d131      	bne.n	8001be2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_CAN_MspInit+0x130>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_CAN_MspInit+0x130>)
 8001b86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b88:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <HAL_CAN_MspInit+0x130>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b90:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001b96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9c:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	623b      	str	r3, [r7, #32]
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a38      	ldr	r2, [pc, #224]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001bae:	f043 0308 	orr.w	r3, r3, #8
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bd0:	2309      	movs	r3, #9
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	482e      	ldr	r0, [pc, #184]	; (8001c94 <HAL_CAN_MspInit+0x138>)
 8001bdc:	f001 fcca 	bl	8003574 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001be0:	e04e      	b.n	8001c80 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2c      	ldr	r2, [pc, #176]	; (8001c98 <HAL_CAN_MspInit+0x13c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d149      	bne.n	8001c80 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001bf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_CAN_MspInit+0x130>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_CAN_MspInit+0x130>)
 8001c24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_CAN_MspInit+0x130>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10b      	bne.n	8001c46 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_CAN_MspInit+0x134>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001c5e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001c70:	230b      	movs	r3, #11
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <HAL_CAN_MspInit+0x140>)
 8001c7c:	f001 fc7a 	bl	8003574 <HAL_GPIO_Init>
}
 8001c80:	bf00      	nop
 8001c82:	3738      	adds	r7, #56	; 0x38
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40006400 	.word	0x40006400
 8001c8c:	20000028 	.word	0x20000028
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40003400 	.word	0x40003400
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cb6:	4bb7      	ldr	r3, [pc, #732]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4ab6      	ldr	r2, [pc, #728]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001cbc:	f043 0310 	orr.w	r3, r3, #16
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4bb4      	ldr	r3, [pc, #720]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4bb1      	ldr	r3, [pc, #708]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4ab0      	ldr	r2, [pc, #704]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4bae      	ldr	r3, [pc, #696]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce6:	4bab      	ldr	r3, [pc, #684]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4aaa      	ldr	r2, [pc, #680]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4ba8      	ldr	r3, [pc, #672]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfe:	4ba5      	ldr	r3, [pc, #660]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4aa4      	ldr	r2, [pc, #656]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4ba2      	ldr	r3, [pc, #648]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b9f      	ldr	r3, [pc, #636]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a9e      	ldr	r2, [pc, #632]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b9c      	ldr	r3, [pc, #624]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	4b99      	ldr	r3, [pc, #612]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a98      	ldr	r2, [pc, #608]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b96      	ldr	r3, [pc, #600]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d46:	4b93      	ldr	r3, [pc, #588]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a92      	ldr	r2, [pc, #584]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b90      	ldr	r3, [pc, #576]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a8c      	ldr	r2, [pc, #560]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b8a      	ldr	r3, [pc, #552]	; (8001f94 <MX_GPIO_Init+0x2f4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001d76:	2200      	movs	r2, #0
 8001d78:	f248 0187 	movw	r1, #32903	; 0x8087
 8001d7c:	4886      	ldr	r0, [pc, #536]	; (8001f98 <MX_GPIO_Init+0x2f8>)
 8001d7e:	f001 fdbd 	bl	80038fc <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d88:	4884      	ldr	r0, [pc, #528]	; (8001f9c <MX_GPIO_Init+0x2fc>)
 8001d8a:	f001 fdb7 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f242 0102 	movw	r1, #8194	; 0x2002
 8001d94:	4882      	ldr	r0, [pc, #520]	; (8001fa0 <MX_GPIO_Init+0x300>)
 8001d96:	f001 fdb1 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f240 6102 	movw	r1, #1538	; 0x602
 8001da0:	4880      	ldr	r0, [pc, #512]	; (8001fa4 <MX_GPIO_Init+0x304>)
 8001da2:	f001 fdab 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001da6:	2200      	movs	r2, #0
 8001da8:	f244 0184 	movw	r1, #16516	; 0x4084
 8001dac:	487e      	ldr	r0, [pc, #504]	; (8001fa8 <MX_GPIO_Init+0x308>)
 8001dae:	f001 fda5 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db8:	4877      	ldr	r0, [pc, #476]	; (8001f98 <MX_GPIO_Init+0x2f8>)
 8001dba:	f001 fd9f 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001dc4:	4879      	ldr	r0, [pc, #484]	; (8001fac <MX_GPIO_Init+0x30c>)
 8001dc6:	f001 fd99 	bl	80038fc <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2118      	movs	r1, #24
 8001dce:	4878      	ldr	r0, [pc, #480]	; (8001fb0 <MX_GPIO_Init+0x310>)
 8001dd0:	f001 fd94 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001dd4:	f648 0387 	movw	r3, #34951	; 0x8887
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	4619      	mov	r1, r3
 8001dec:	486a      	ldr	r0, [pc, #424]	; (8001f98 <MX_GPIO_Init+0x2f8>)
 8001dee:	f001 fbc1 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001df2:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	4864      	ldr	r0, [pc, #400]	; (8001f98 <MX_GPIO_Init+0x2f8>)
 8001e08:	f001 fbb4 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001e0c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e12:	2303      	movs	r3, #3
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	485d      	ldr	r0, [pc, #372]	; (8001f98 <MX_GPIO_Init+0x2f8>)
 8001e22:	f001 fba7 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4857      	ldr	r0, [pc, #348]	; (8001f9c <MX_GPIO_Init+0x2fc>)
 8001e40:	f001 fb98 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001e44:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	4619      	mov	r1, r3
 8001e58:	4850      	ldr	r0, [pc, #320]	; (8001f9c <MX_GPIO_Init+0x2fc>)
 8001e5a:	f001 fb8b 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001e5e:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	484b      	ldr	r0, [pc, #300]	; (8001fa0 <MX_GPIO_Init+0x300>)
 8001e74:	f001 fb7e 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001e78:	f242 0302 	movw	r3, #8194	; 0x2002
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4843      	ldr	r0, [pc, #268]	; (8001fa0 <MX_GPIO_Init+0x300>)
 8001e92:	f001 fb6f 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001e96:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	483d      	ldr	r0, [pc, #244]	; (8001fa0 <MX_GPIO_Init+0x300>)
 8001eac:	f001 fb62 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001eb0:	f641 0305 	movw	r3, #6149	; 0x1805
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4837      	ldr	r0, [pc, #220]	; (8001fa4 <MX_GPIO_Init+0x304>)
 8001ec6:	f001 fb55 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001eca:	f240 6302 	movw	r3, #1538	; 0x602
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4830      	ldr	r0, [pc, #192]	; (8001fa4 <MX_GPIO_Init+0x304>)
 8001ee4:	f001 fb46 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001ee8:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efa:	4619      	mov	r1, r3
 8001efc:	482a      	ldr	r0, [pc, #168]	; (8001fa8 <MX_GPIO_Init+0x308>)
 8001efe:	f001 fb39 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001f02:	f244 0384 	movw	r3, #16516	; 0x4084
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4823      	ldr	r0, [pc, #140]	; (8001fa8 <MX_GPIO_Init+0x308>)
 8001f1c:	f001 fb2a 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8001f20:	f240 1343 	movw	r3, #323	; 0x143
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f26:	2303      	movs	r3, #3
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	481d      	ldr	r0, [pc, #116]	; (8001fac <MX_GPIO_Init+0x30c>)
 8001f36:	f001 fb1d 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001f3a:	f240 7304 	movw	r3, #1796	; 0x704
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f40:	2303      	movs	r3, #3
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <MX_GPIO_Init+0x310>)
 8001f50:	f001 fb10 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f66:	4619      	mov	r1, r3
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <MX_GPIO_Init+0x310>)
 8001f6a:	f001 fb03 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001f6e:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	4619      	mov	r1, r3
 8001f86:	4809      	ldr	r0, [pc, #36]	; (8001fac <MX_GPIO_Init+0x30c>)
 8001f88:	f001 faf4 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8001f8c:	2318      	movs	r3, #24
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f90:	e010      	b.n	8001fb4 <MX_GPIO_Init+0x314>
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <MX_GPIO_Init+0x334>)
 8001fc8:	f001 fad4 	bl	8003574 <HAL_GPIO_Init>

}
 8001fcc:	bf00      	nop
 8001fce:	3738      	adds	r7, #56	; 0x38
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40020c00 	.word	0x40020c00

08001fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fde:	f000 fd96 	bl	8002b0e <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t spannungen[12] = {0};
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
 8001ff0:	615a      	str	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff2:	f000 f917 	bl	8002224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff6:	f7ff fe53 	bl	8001ca0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001ffa:	f7ff fd43 	bl	8001a84 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001ffe:	f000 fa0f 	bl	8002420 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8002002:	f000 fce7 	bl	80029d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002006:	f7ff fcab 	bl	8001960 <MX_ADC1_Init>
  MX_TIM1_Init();
 800200a:	f000 fb45 	bl	8002698 <MX_TIM1_Init>
  MX_TIM4_Init();
 800200e:	f000 fbc9 	bl	80027a4 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002012:	f000 f9c7 	bl	80023a4 <MX_SPI1_Init>
  MX_CAN3_Init();
 8002016:	f7ff fd6b 	bl	8001af0 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 800201a:	f7ff fa61 	bl	80014e0 <readResetSource>
 800201e:	4603      	mov	r3, r0
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff faaf 	bl	8001584 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8002026:	213a      	movs	r1, #58	; 0x3a
 8002028:	486d      	ldr	r0, [pc, #436]	; (80021e0 <main+0x208>)
 800202a:	f7fe fa89 	bl	8000540 <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 800202e:	f7ff fa2d 	bl	800148c <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8002032:	f7ff fc57 	bl	80018e4 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8002036:	f7ff fba1 	bl	800177c <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002040:	4868      	ldr	r0, [pc, #416]	; (80021e4 <main+0x20c>)
 8002042:	f001 fc5b 	bl	80038fc <HAL_GPIO_WritePin>

    uartTransmit("\n", 1);
 8002046:	2101      	movs	r1, #1
 8002048:	4867      	ldr	r0, [pc, #412]	; (80021e8 <main+0x210>)
 800204a:	f7fe fa79 	bl	8000540 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 800204e:	2122      	movs	r1, #34	; 0x22
 8002050:	4866      	ldr	r0, [pc, #408]	; (80021ec <main+0x214>)
 8002052:	f7fe fa75 	bl	8000540 <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 8002056:	f7fe fc3d 	bl	80008d4 <ltc6811_check>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <main+0x218>)
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <main+0x218>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01e      	beq.n	80020a8 <main+0xd0>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 800206a:	211f      	movs	r1, #31
 800206c:	4861      	ldr	r0, [pc, #388]	; (80021f4 <main+0x21c>)
 800206e:	f7fe fa67 	bl	8000540 <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 8002072:	4a61      	ldr	r2, [pc, #388]	; (80021f8 <main+0x220>)
 8002074:	7813      	ldrb	r3, [r2, #0]
 8002076:	f043 0320 	orr.w	r3, r3, #32
 800207a:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 800207c:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <main+0x220>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800208c:	485b      	ldr	r0, [pc, #364]	; (80021fc <main+0x224>)
 800208e:	f001 fc35 	bl	80038fc <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 8002092:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <main+0x218>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	210a      	movs	r1, #10
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fa65 	bl	8000568 <uartTransmitNumber>
		uartTransmit("\n", 1);
 800209e:	2101      	movs	r1, #1
 80020a0:	4851      	ldr	r0, [pc, #324]	; (80021e8 <main+0x210>)
 80020a2:	f7fe fa4d 	bl	8000540 <uartTransmit>
 80020a6:	e003      	b.n	80020b0 <main+0xd8>
		//return 0;														// Programm abbrechen
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 80020a8:	2120      	movs	r1, #32
 80020aa:	4855      	ldr	r0, [pc, #340]	; (8002200 <main+0x228>)
 80020ac:	f7fe fa48 	bl	8000540 <uartTransmit>
	}

	ltc6811_read(RDCFG, &data[0]);
 80020b0:	4954      	ldr	r1, [pc, #336]	; (8002204 <main+0x22c>)
 80020b2:	2002      	movs	r0, #2
 80020b4:	f7fe fb22 	bl	80006fc <ltc6811_read>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 80020b8:	f240 7011 	movw	r0, #1809	; 0x711
 80020bc:	f7fe faa0 	bl	8000600 <ltc6811>
	ltc6811(CLRSTAT);
 80020c0:	f240 7013 	movw	r0, #1811	; 0x713
 80020c4:	f7fe fa9c 	bl	8000600 <ltc6811>
	ltc6811(CLRAUX);
 80020c8:	f240 7012 	movw	r0, #1810	; 0x712
 80020cc:	f7fe fa98 	bl	8000600 <ltc6811>

	ltc6811(ADAX | MD262 | GPIOALL);
 80020d0:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 80020d4:	f7fe fa94 	bl	8000600 <ltc6811>
	ltc6811_read(RDAUXA, &data[0]);
 80020d8:	494a      	ldr	r1, [pc, #296]	; (8002204 <main+0x22c>)
 80020da:	200c      	movs	r0, #12
 80020dc:	f7fe fb0e 	bl	80006fc <ltc6811_read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 80020e0:	f44f 7058 	mov.w	r0, #864	; 0x360
 80020e4:	f7fe fa8c 	bl	8000600 <ltc6811>
		HAL_Delay(300);
 80020e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020ec:	f000 fd6c 	bl	8002bc8 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 80020f0:	4944      	ldr	r1, [pc, #272]	; (8002204 <main+0x22c>)
 80020f2:	2004      	movs	r0, #4
 80020f4:	f7fe fb02 	bl	80006fc <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 80020f8:	4943      	ldr	r1, [pc, #268]	; (8002208 <main+0x230>)
 80020fa:	2006      	movs	r0, #6
 80020fc:	f7fe fafe 	bl	80006fc <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 8002100:	4942      	ldr	r1, [pc, #264]	; (800220c <main+0x234>)
 8002102:	2008      	movs	r0, #8
 8002104:	f7fe fafa 	bl	80006fc <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 8002108:	4941      	ldr	r1, [pc, #260]	; (8002210 <main+0x238>)
 800210a:	200a      	movs	r0, #10
 800210c:	f7fe faf6 	bl	80006fc <ltc6811_read>
		ltc6811_read(RDCFG, &data[26]);
 8002110:	4940      	ldr	r1, [pc, #256]	; (8002214 <main+0x23c>)
 8002112:	2002      	movs	r0, #2
 8002114:	f7fe faf2 	bl	80006fc <ltc6811_read>

		for (uint8_t i = 0; i < 12; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	77fb      	strb	r3, [r7, #31]
 800211c:	e018      	b.n	8002150 <main+0x178>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	3301      	adds	r3, #1
 8002124:	4a37      	ldr	r2, [pc, #220]	; (8002204 <main+0x22c>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21a      	sxth	r2, r3
 800212c:	7ffb      	ldrb	r3, [r7, #31]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4934      	ldr	r1, [pc, #208]	; (8002204 <main+0x22c>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	b21b      	sxth	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b21a      	sxth	r2, r3
 800213a:	7ffb      	ldrb	r3, [r7, #31]
 800213c:	b292      	uxth	r2, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	f107 0120 	add.w	r1, r7, #32
 8002144:	440b      	add	r3, r1
 8002146:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < 12; i++)
 800214a:	7ffb      	ldrb	r3, [r7, #31]
 800214c:	3301      	adds	r3, #1
 800214e:	77fb      	strb	r3, [r7, #31]
 8002150:	7ffb      	ldrb	r3, [r7, #31]
 8002152:	2b0b      	cmp	r3, #11
 8002154:	d9e3      	bls.n	800211e <main+0x146>
		}

		for (uint8_t i = 0; i < 12; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	77bb      	strb	r3, [r7, #30]
 800215a:	e011      	b.n	8002180 <main+0x1a8>
		{
			uartTransmitNumber(spannungen[i], 10);
 800215c:	7fbb      	ldrb	r3, [r7, #30]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	f107 0220 	add.w	r2, r7, #32
 8002164:	4413      	add	r3, r2
 8002166:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800216a:	210a      	movs	r1, #10
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f9fb 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 8002172:	2101      	movs	r1, #1
 8002174:	4828      	ldr	r0, [pc, #160]	; (8002218 <main+0x240>)
 8002176:	f7fe f9e3 	bl	8000540 <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 800217a:	7fbb      	ldrb	r3, [r7, #30]
 800217c:	3301      	adds	r3, #1
 800217e:	77bb      	strb	r3, [r7, #30]
 8002180:	7fbb      	ldrb	r3, [r7, #30]
 8002182:	2b0b      	cmp	r3, #11
 8002184:	d9ea      	bls.n	800215c <main+0x184>
		}

		tmp = 0;
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <main+0x244>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 12; i++)
 800218c:	2300      	movs	r3, #0
 800218e:	777b      	strb	r3, [r7, #29]
 8002190:	e00f      	b.n	80021b2 <main+0x1da>
		{
			tmp += spannungen[i];
 8002192:	7f7b      	ldrb	r3, [r7, #29]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	f107 0220 	add.w	r2, r7, #32
 800219a:	4413      	add	r3, r2
 800219c:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <main+0x244>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <main+0x244>)
 80021aa:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 12; i++)
 80021ac:	7f7b      	ldrb	r3, [r7, #29]
 80021ae:	3301      	adds	r3, #1
 80021b0:	777b      	strb	r3, [r7, #29]
 80021b2:	7f7b      	ldrb	r3, [r7, #29]
 80021b4:	2b0b      	cmp	r3, #11
 80021b6:	d9ec      	bls.n	8002192 <main+0x1ba>
		}
		tmp /= 12;
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <main+0x244>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a18      	ldr	r2, [pc, #96]	; (8002220 <main+0x248>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	08db      	lsrs	r3, r3, #3
 80021c4:	4a15      	ldr	r2, [pc, #84]	; (800221c <main+0x244>)
 80021c6:	6013      	str	r3, [r2, #0]
		uartTransmitNumber(tmp, 10);
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <main+0x244>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	210a      	movs	r1, #10
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9ca 	bl	8000568 <uartTransmitNumber>

		uartTransmit("\n", 1);
 80021d4:	2101      	movs	r1, #1
 80021d6:	4804      	ldr	r0, [pc, #16]	; (80021e8 <main+0x210>)
 80021d8:	f7fe f9b2 	bl	8000540 <uartTransmit>
		ltc6811(ADCVC | MD73 | CELLALL);
 80021dc:	e780      	b.n	80020e0 <main+0x108>
 80021de:	bf00      	nop
 80021e0:	0800794c 	.word	0x0800794c
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08007988 	.word	0x08007988
 80021ec:	0800798c 	.word	0x0800798c
 80021f0:	20000108 	.word	0x20000108
 80021f4:	080079b0 	.word	0x080079b0
 80021f8:	2000005c 	.word	0x2000005c
 80021fc:	40020400 	.word	0x40020400
 8002200:	080079d0 	.word	0x080079d0
 8002204:	2000002c 	.word	0x2000002c
 8002208:	20000032 	.word	0x20000032
 800220c:	20000038 	.word	0x20000038
 8002210:	2000003e 	.word	0x2000003e
 8002214:	20000046 	.word	0x20000046
 8002218:	080079f0 	.word	0x080079f0
 800221c:	20000104 	.word	0x20000104
 8002220:	aaaaaaab 	.word	0xaaaaaaab

08002224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0b8      	sub	sp, #224	; 0xe0
 8002228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800222a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800222e:	2234      	movs	r2, #52	; 0x34
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f005 f8b6 	bl	80073a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002238:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	2290      	movs	r2, #144	; 0x90
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f005 f8a7 	bl	80073a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <SystemClock_Config+0x11c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a39      	ldr	r2, [pc, #228]	; (8002340 <SystemClock_Config+0x11c>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b37      	ldr	r3, [pc, #220]	; (8002340 <SystemClock_Config+0x11c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <SystemClock_Config+0x120>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a34      	ldr	r2, [pc, #208]	; (8002344 <SystemClock_Config+0x120>)
 8002274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b32      	ldr	r3, [pc, #200]	; (8002344 <SystemClock_Config+0x120>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002286:	2301      	movs	r3, #1
 8002288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800228c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800229a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800229e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80022a2:	2319      	movs	r3, #25
 80022a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80022a8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80022ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80022b6:	2308      	movs	r3, #8
 80022b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022c6:	4618      	mov	r0, r3
 80022c8:	f001 fb82 	bl	80039d0 <HAL_RCC_OscConfig>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80022d2:	f000 f839 	bl	8002348 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022d6:	f001 fb2b 	bl	8003930 <HAL_PWREx_EnableOverDrive>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80022e0:	f000 f832 	bl	8002348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e4:	230f      	movs	r3, #15
 80022e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ea:	2302      	movs	r3, #2
 80022ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002302:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002306:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800230a:	2107      	movs	r1, #7
 800230c:	4618      	mov	r0, r3
 800230e:	f001 fe0d 	bl	8003f2c <HAL_RCC_ClockConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002318:	f000 f816 	bl	8002348 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002320:	2300      	movs	r3, #0
 8002322:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	4618      	mov	r0, r3
 800232a:	f001 ffd5 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8002334:	f000 f808 	bl	8002348 <Error_Handler>
  }
}
 8002338:	bf00      	nop
 800233a:	37e0      	adds	r7, #224	; 0xe0
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000

08002348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <Error_Handler+0x50>)
 8002352:	7813      	ldrb	r3, [r2, #0]
 8002354:	f043 0320 	orr.w	r3, r3, #32
 8002358:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <Error_Handler+0x50>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800236a:	480c      	ldr	r0, [pc, #48]	; (800239c <Error_Handler+0x54>)
 800236c:	f001 fac6 	bl	80038fc <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002370:	4a09      	ldr	r2, [pc, #36]	; (8002398 <Error_Handler+0x50>)
 8002372:	7813      	ldrb	r3, [r2, #0]
 8002374:	f36f 1386 	bfc	r3, #6, #1
 8002378:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <Error_Handler+0x50>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	2104      	movs	r1, #4
 8002388:	4804      	ldr	r0, [pc, #16]	; (800239c <Error_Handler+0x54>)
 800238a:	f001 fab7 	bl	80038fc <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 800238e:	2122      	movs	r1, #34	; 0x22
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <Error_Handler+0x58>)
 8002392:	f7fe f8d5 	bl	8000540 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8002396:	e7fe      	b.n	8002396 <Error_Handler+0x4e>
 8002398:	2000005c 	.word	0x2000005c
 800239c:	40020400 	.word	0x40020400
 80023a0:	080079f4 	.word	0x080079f4

080023a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <MX_SPI1_Init+0x74>)
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <MX_SPI1_Init+0x78>)
 80023ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <MX_SPI1_Init+0x74>)
 80023b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023b6:	4b18      	ldr	r3, [pc, #96]	; (8002418 <MX_SPI1_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80023bc:	4b16      	ldr	r3, [pc, #88]	; (8002418 <MX_SPI1_Init+0x74>)
 80023be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80023c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <MX_SPI1_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <MX_SPI1_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_SPI1_Init+0x74>)
 80023d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80023d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <MX_SPI1_Init+0x74>)
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_SPI1_Init+0x74>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_SPI1_Init+0x74>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_SPI1_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_SPI1_Init+0x74>)
 80023f2:	2207      	movs	r2, #7
 80023f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <MX_SPI1_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_SPI1_Init+0x74>)
 80023fe:	2208      	movs	r2, #8
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_SPI1_Init+0x74>)
 8002404:	f002 fb90 	bl	8004b28 <HAL_SPI_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800240e:	f7ff ff9b 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000170 	.word	0x20000170
 800241c:	40013000 	.word	0x40013000

08002420 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <MX_SPI4_Init+0x74>)
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <MX_SPI4_Init+0x78>)
 8002428:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <MX_SPI4_Init+0x74>)
 800242c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002430:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <MX_SPI4_Init+0x74>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <MX_SPI4_Init+0x74>)
 800243a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800243e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <MX_SPI4_Init+0x74>)
 8002442:	2202      	movs	r2, #2
 8002444:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <MX_SPI4_Init+0x74>)
 8002448:	2201      	movs	r2, #1
 800244a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_SPI4_Init+0x74>)
 800244e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002452:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <MX_SPI4_Init+0x74>)
 8002456:	2230      	movs	r2, #48	; 0x30
 8002458:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <MX_SPI4_Init+0x74>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_SPI4_Init+0x74>)
 8002462:	2200      	movs	r2, #0
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MX_SPI4_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <MX_SPI4_Init+0x74>)
 800246e:	2207      	movs	r2, #7
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MX_SPI4_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_SPI4_Init+0x74>)
 800247a:	2200      	movs	r2, #0
 800247c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_SPI4_Init+0x74>)
 8002480:	f002 fb52 	bl	8004b28 <HAL_SPI_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800248a:	f7ff ff5d 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000010c 	.word	0x2000010c
 8002498:	40013400 	.word	0x40013400

0800249c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3d      	ldr	r2, [pc, #244]	; (80025b0 <HAL_SPI_MspInit+0x114>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d145      	bne.n	800254a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4a3c      	ldr	r2, [pc, #240]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 80024c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024c8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a36      	ldr	r2, [pc, #216]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 80024f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002516:	2305      	movs	r3, #5
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	4619      	mov	r1, r3
 8002520:	4825      	ldr	r0, [pc, #148]	; (80025b8 <HAL_SPI_MspInit+0x11c>)
 8002522:	f001 f827 	bl	8003574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8002526:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800252a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002534:	2303      	movs	r3, #3
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002538:	2305      	movs	r3, #5
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	4619      	mov	r1, r3
 8002542:	481e      	ldr	r0, [pc, #120]	; (80025bc <HAL_SPI_MspInit+0x120>)
 8002544:	f001 f816 	bl	8003574 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002548:	e02d      	b.n	80025a6 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_SPI_MspInit+0x124>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d128      	bne.n	80025a6 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 800255a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800255e:	6453      	str	r3, [r2, #68]	; 0x44
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6313      	str	r3, [r2, #48]	; 0x30
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_SPI_MspInit+0x118>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8002584:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	2303      	movs	r3, #3
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002596:	2305      	movs	r3, #5
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	4619      	mov	r1, r3
 80025a0:	4808      	ldr	r0, [pc, #32]	; (80025c4 <HAL_SPI_MspInit+0x128>)
 80025a2:	f000 ffe7 	bl	8003574 <HAL_GPIO_Init>
}
 80025a6:	bf00      	nop
 80025a8:	3730      	adds	r7, #48	; 0x30
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40013000 	.word	0x40013000
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40013400 	.word	0x40013400
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_MspInit+0x44>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_MspInit+0x44>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_MspInit+0x44>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_MspInit+0x44>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_MspInit+0x44>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_MspInit+0x44>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <MemManage_Handler+0x4>

0800262a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <UsageFault_Handler+0x4>

08002636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002664:	f000 fa90 	bl	8002b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <SystemInit+0x28>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <SystemInit+0x28>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <SystemInit+0x28>)
 8002682:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002686:	609a      	str	r2, [r3, #8]
#endif
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026bc:	463b      	mov	r3, r7
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c6:	4b35      	ldr	r3, [pc, #212]	; (800279c <MX_TIM1_Init+0x104>)
 80026c8:	4a35      	ldr	r2, [pc, #212]	; (80027a0 <MX_TIM1_Init+0x108>)
 80026ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026cc:	4b33      	ldr	r3, [pc, #204]	; (800279c <MX_TIM1_Init+0x104>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b32      	ldr	r3, [pc, #200]	; (800279c <MX_TIM1_Init+0x104>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <MX_TIM1_Init+0x104>)
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <MX_TIM1_Init+0x104>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <MX_TIM1_Init+0x104>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <MX_TIM1_Init+0x104>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80026f2:	482a      	ldr	r0, [pc, #168]	; (800279c <MX_TIM1_Init+0x104>)
 80026f4:	f003 f983 	bl	80059fe <HAL_TIM_IC_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80026fe:	f7ff fe23 	bl	8002348 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002702:	2304      	movs	r3, #4
 8002704:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002706:	2350      	movs	r3, #80	; 0x50
 8002708:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	4619      	mov	r1, r3
 800271c:	481f      	ldr	r0, [pc, #124]	; (800279c <MX_TIM1_Init+0x104>)
 800271e:	f003 fb69 	bl	8005df4 <HAL_TIM_SlaveConfigSynchro>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002728:	f7ff fe0e 	bl	8002348 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002730:	2301      	movs	r3, #1
 8002732:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	2200      	movs	r2, #0
 8002742:	4619      	mov	r1, r3
 8002744:	4815      	ldr	r0, [pc, #84]	; (800279c <MX_TIM1_Init+0x104>)
 8002746:	f003 f9b1 	bl	8005aac <HAL_TIM_IC_ConfigChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002750:	f7ff fdfa 	bl	8002348 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002754:	2302      	movs	r3, #2
 8002756:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002758:	2302      	movs	r3, #2
 800275a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	2204      	movs	r2, #4
 8002762:	4619      	mov	r1, r3
 8002764:	480d      	ldr	r0, [pc, #52]	; (800279c <MX_TIM1_Init+0x104>)
 8002766:	f003 f9a1 	bl	8005aac <HAL_TIM_IC_ConfigChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002770:	f7ff fdea 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002780:	463b      	mov	r3, r7
 8002782:	4619      	mov	r1, r3
 8002784:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_TIM1_Init+0x104>)
 8002786:	f004 f8af 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002790:	f7ff fdda 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	3730      	adds	r7, #48	; 0x30
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000220 	.word	0x20000220
 80027a0:	40010000 	.word	0x40010000

080027a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b6:	463b      	mov	r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
 80027c4:	615a      	str	r2, [r3, #20]
 80027c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027c8:	4b32      	ldr	r3, [pc, #200]	; (8002894 <MX_TIM4_Init+0xf0>)
 80027ca:	4a33      	ldr	r2, [pc, #204]	; (8002898 <MX_TIM4_Init+0xf4>)
 80027cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <MX_TIM4_Init+0xf0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <MX_TIM4_Init+0xf0>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027da:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <MX_TIM4_Init+0xf0>)
 80027dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <MX_TIM4_Init+0xf0>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <MX_TIM4_Init+0xf0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027ee:	4829      	ldr	r0, [pc, #164]	; (8002894 <MX_TIM4_Init+0xf0>)
 80027f0:	f003 f8ae 	bl	8005950 <HAL_TIM_PWM_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80027fa:	f7ff fda5 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4821      	ldr	r0, [pc, #132]	; (8002894 <MX_TIM4_Init+0xf0>)
 800280e:	f004 f86b 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002818:	f7ff fd96 	bl	8002348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281c:	2360      	movs	r3, #96	; 0x60
 800281e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282c:	463b      	mov	r3, r7
 800282e:	2200      	movs	r2, #0
 8002830:	4619      	mov	r1, r3
 8002832:	4818      	ldr	r0, [pc, #96]	; (8002894 <MX_TIM4_Init+0xf0>)
 8002834:	f003 f9ce 	bl	8005bd4 <HAL_TIM_PWM_ConfigChannel>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800283e:	f7ff fd83 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002842:	463b      	mov	r3, r7
 8002844:	2204      	movs	r2, #4
 8002846:	4619      	mov	r1, r3
 8002848:	4812      	ldr	r0, [pc, #72]	; (8002894 <MX_TIM4_Init+0xf0>)
 800284a:	f003 f9c3 	bl	8005bd4 <HAL_TIM_PWM_ConfigChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002854:	f7ff fd78 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002858:	463b      	mov	r3, r7
 800285a:	2208      	movs	r2, #8
 800285c:	4619      	mov	r1, r3
 800285e:	480d      	ldr	r0, [pc, #52]	; (8002894 <MX_TIM4_Init+0xf0>)
 8002860:	f003 f9b8 	bl	8005bd4 <HAL_TIM_PWM_ConfigChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800286a:	f7ff fd6d 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800286e:	463b      	mov	r3, r7
 8002870:	220c      	movs	r2, #12
 8002872:	4619      	mov	r1, r3
 8002874:	4807      	ldr	r0, [pc, #28]	; (8002894 <MX_TIM4_Init+0xf0>)
 8002876:	f003 f9ad 	bl	8005bd4 <HAL_TIM_PWM_ConfigChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002880:	f7ff fd62 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002884:	4803      	ldr	r0, [pc, #12]	; (8002894 <MX_TIM4_Init+0xf0>)
 8002886:	f000 f86d 	bl	8002964 <HAL_TIM_MspPostInit>

}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	; 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200001d4 	.word	0x200001d4
 8002898:	40000800 	.word	0x40000800

0800289c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_TIM_IC_MspInit+0x7c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d128      	bne.n	8002910 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <HAL_TIM_IC_MspInit+0x80>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a16      	ldr	r2, [pc, #88]	; (800291c <HAL_TIM_IC_MspInit+0x80>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <HAL_TIM_IC_MspInit+0x80>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_TIM_IC_MspInit+0x80>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <HAL_TIM_IC_MspInit+0x80>)
 80028dc:	f043 0310 	orr.w	r3, r3, #16
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <HAL_TIM_IC_MspInit+0x80>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80028ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002900:	2301      	movs	r3, #1
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <HAL_TIM_IC_MspInit+0x84>)
 800290c:	f000 fe32 	bl	8003574 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002910:	bf00      	nop
 8002912:	3728      	adds	r7, #40	; 0x28
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40010000 	.word	0x40010000
 800291c:	40023800 	.word	0x40023800
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <HAL_TIM_PWM_MspInit+0x38>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10b      	bne.n	800294e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_TIM_PWM_MspInit+0x3c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_TIM_PWM_MspInit+0x3c>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_TIM_PWM_MspInit+0x3c>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40000800 	.word	0x40000800
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <HAL_TIM_MspPostInit+0x64>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d11c      	bne.n	80029c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_TIM_MspPostInit+0x68>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_TIM_MspPostInit+0x68>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_TIM_MspPostInit+0x68>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 800299e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80029a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	4619      	mov	r1, r3
 80029ba:	4805      	ldr	r0, [pc, #20]	; (80029d0 <HAL_TIM_MspPostInit+0x6c>)
 80029bc:	f000 fdda 	bl	8003574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020c00 	.word	0x40020c00

080029d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <MX_USART2_UART_Init+0x5c>)
 80029dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 80029e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 80029fa:	220c      	movs	r2, #12
 80029fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a16:	4805      	ldr	r0, [pc, #20]	; (8002a2c <MX_USART2_UART_Init+0x58>)
 8002a18:	f003 fff4 	bl	8006a04 <HAL_UART_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a22:	f7ff fc91 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2000026c 	.word	0x2000026c
 8002a30:	40004400 	.word	0x40004400

08002a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_UART_MspInit+0x7c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d127      	bne.n	8002aa6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a56:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <HAL_UART_MspInit+0x80>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <HAL_UART_MspInit+0x80>)
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_UART_MspInit+0x80>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_UART_MspInit+0x80>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <HAL_UART_MspInit+0x80>)
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_UART_MspInit+0x80>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a86:	2360      	movs	r3, #96	; 0x60
 8002a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a96:	2307      	movs	r3, #7
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <HAL_UART_MspInit+0x84>)
 8002aa2:	f000 fd67 	bl	8003574 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3728      	adds	r7, #40	; 0x28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40004400 	.word	0x40004400
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020c00 	.word	0x40020c00

08002abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ac2:	e003      	b.n	8002acc <LoopCopyDataInit>

08002ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002aca:	3104      	adds	r1, #4

08002acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002acc:	480b      	ldr	r0, [pc, #44]	; (8002afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ad4:	d3f6      	bcc.n	8002ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ad6:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ad8:	e002      	b.n	8002ae0 <LoopFillZerobss>

08002ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002adc:	f842 3b04 	str.w	r3, [r2], #4

08002ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ae4:	d3f9      	bcc.n	8002ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ae6:	f7ff fdc1 	bl	800266c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aea:	f004 fc37 	bl	800735c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aee:	f7ff fa73 	bl	8001fd8 <main>
  bx  lr    
 8002af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002af4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002af8:	08007c68 	.word	0x08007c68
  ldr  r0, =_sdata
 8002afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b00:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002b04:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002b08:	200002f4 	.word	0x200002f4

08002b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b0c:	e7fe      	b.n	8002b0c <ADC_IRQHandler>

08002b0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b12:	2003      	movs	r0, #3
 8002b14:	f000 fcfa 	bl	800350c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f000 f805 	bl	8002b28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b1e:	f7ff fd53 	bl	80025c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_InitTick+0x54>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_InitTick+0x58>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fd07 	bl	800355a <HAL_SYSTICK_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00e      	b.n	8002b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b0f      	cmp	r3, #15
 8002b5a:	d80a      	bhi.n	8002b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f000 fcdd 	bl	8003522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b68:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <HAL_InitTick+0x5c>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e000      	b.n	8002b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000008 	.word	0x20000008
 8002b84:	20000004 	.word	0x20000004

08002b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_IncTick+0x20>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_IncTick+0x24>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <HAL_IncTick+0x24>)
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000008 	.word	0x20000008
 8002bac:	200002f0 	.word	0x200002f0

08002bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_GetTick+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	200002f0 	.word	0x200002f0

08002bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd0:	f7ff ffee 	bl	8002bb0 <HAL_GetTick>
 8002bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d005      	beq.n	8002bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_Delay+0x44>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bee:	bf00      	nop
 8002bf0:	f7ff ffde 	bl	8002bb0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d8f7      	bhi.n	8002bf0 <HAL_Delay+0x28>
  {
  }
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000008 	.word	0x20000008

08002c10 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8002c14:	4b02      	ldr	r3, [pc, #8]	; (8002c20 <HAL_GetHalVersion+0x10>)
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	01020900 	.word	0x01020900

08002c24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_GetREVID+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e0042000 	.word	0xe0042000

08002c3c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_GetDEVID+0x18>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e0042000 	.word	0xe0042000

08002c58 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_GetUIDw0+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	1ff0f420 	.word	0x1ff0f420

08002c70 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <HAL_GetUIDw1+0x14>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	1ff0f424 	.word	0x1ff0f424

08002c88 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_GetUIDw2+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	1ff0f428 	.word	0x1ff0f428

08002ca0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e031      	b.n	8002d1a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe fea0 	bl	8001a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d116      	bne.n	8002d0c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_ADC_Init+0x84>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	f043 0202 	orr.w	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f964 	bl	8002fbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
 8002d0a:	e001      	b.n	8002d10 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	ffffeefd 	.word	0xffffeefd

08002d28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x1c>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e12a      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x272>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b09      	cmp	r3, #9
 8002d52:	d93a      	bls.n	8002dca <HAL_ADC_ConfigChannel+0xa2>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d5c:	d035      	beq.n	8002dca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68d9      	ldr	r1, [r3, #12]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	3b1e      	subs	r3, #30
 8002d74:	2207      	movs	r2, #7
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	400a      	ands	r2, r1
 8002d82:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a87      	ldr	r2, [pc, #540]	; (8002fa8 <HAL_ADC_ConfigChannel+0x280>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10a      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68d9      	ldr	r1, [r3, #12]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	061a      	lsls	r2, r3, #24
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da2:	e035      	b.n	8002e10 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68d9      	ldr	r1, [r3, #12]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4403      	add	r3, r0
 8002dbc:	3b1e      	subs	r3, #30
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc8:	e022      	b.n	8002e10 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6919      	ldr	r1, [r3, #16]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	2207      	movs	r2, #7
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43da      	mvns	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	400a      	ands	r2, r1
 8002dec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6919      	ldr	r1, [r3, #16]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	4603      	mov	r3, r0
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4403      	add	r3, r0
 8002e06:	409a      	lsls	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d824      	bhi.n	8002e62 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	3b05      	subs	r3, #5
 8002e2a:	221f      	movs	r2, #31
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43da      	mvns	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	400a      	ands	r2, r1
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3b05      	subs	r3, #5
 8002e54:	fa00 f203 	lsl.w	r2, r0, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e60:	e04c      	b.n	8002efc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d824      	bhi.n	8002eb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	3b23      	subs	r3, #35	; 0x23
 8002e7c:	221f      	movs	r2, #31
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	400a      	ands	r2, r1
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b23      	subs	r3, #35	; 0x23
 8002ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb2:	e023      	b.n	8002efc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3b41      	subs	r3, #65	; 0x41
 8002ec6:	221f      	movs	r2, #31
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	3b41      	subs	r3, #65	; 0x41
 8002ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <HAL_ADC_ConfigChannel+0x284>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10a      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x1f4>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f0e:	d105      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_ADC_ConfigChannel+0x288>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a26      	ldr	r2, [pc, #152]	; (8002fb0 <HAL_ADC_ConfigChannel+0x288>)
 8002f16:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <HAL_ADC_ConfigChannel+0x284>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d109      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x212>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b12      	cmp	r3, #18
 8002f2c:	d105      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_ADC_ConfigChannel+0x288>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_ADC_ConfigChannel+0x288>)
 8002f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f38:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_ADC_ConfigChannel+0x284>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d125      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x268>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_ADC_ConfigChannel+0x280>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <HAL_ADC_ConfigChannel+0x22e>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b11      	cmp	r3, #17
 8002f54:	d11c      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_ADC_ConfigChannel+0x288>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <HAL_ADC_ConfigChannel+0x288>)
 8002f5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f60:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_ADC_ConfigChannel+0x280>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d111      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_ADC_ConfigChannel+0x28c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <HAL_ADC_ConfigChannel+0x290>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0c9a      	lsrs	r2, r3, #18
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f82:	e002      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f9      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	10000012 	.word	0x10000012
 8002fac:	40012000 	.word	0x40012000
 8002fb0:	40012300 	.word	0x40012300
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	431bde83 	.word	0x431bde83

08002fbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fc4:	4b78      	ldr	r3, [pc, #480]	; (80031a8 <ADC_Init+0x1ec>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a77      	ldr	r2, [pc, #476]	; (80031a8 <ADC_Init+0x1ec>)
 8002fca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fd0:	4b75      	ldr	r3, [pc, #468]	; (80031a8 <ADC_Init+0x1ec>)
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4973      	ldr	r1, [pc, #460]	; (80031a8 <ADC_Init+0x1ec>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	021a      	lsls	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6899      	ldr	r1, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	4a58      	ldr	r2, [pc, #352]	; (80031ac <ADC_Init+0x1f0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800305e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	e00f      	b.n	80030b6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0202 	bic.w	r2, r2, #2
 80030c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	005a      	lsls	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01b      	beq.n	800311c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003102:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	3b01      	subs	r3, #1
 8003110:	035a      	lsls	r2, r3, #13
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	e007      	b.n	800312c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800312a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	3b01      	subs	r3, #1
 8003148:	051a      	lsls	r2, r3, #20
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800316e:	025a      	lsls	r2, r3, #9
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	029a      	lsls	r2, r3, #10
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40012300 	.word	0x40012300
 80031ac:	0f000001 	.word	0x0f000001

080031b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0ed      	b.n	800339e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe fcc4 	bl	8001b5c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0202 	bic.w	r2, r2, #2
 80031e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e4:	f7ff fce4 	bl	8002bb0 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ea:	e012      	b.n	8003212 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031ec:	f7ff fce0 	bl	8002bb0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b0a      	cmp	r3, #10
 80031f8:	d90b      	bls.n	8003212 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2205      	movs	r2, #5
 800320a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e0c5      	b.n	800339e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003230:	f7ff fcbe 	bl	8002bb0 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003236:	e012      	b.n	800325e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003238:	f7ff fcba 	bl	8002bb0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b0a      	cmp	r3, #10
 8003244:	d90b      	bls.n	800325e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2205      	movs	r2, #5
 8003256:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e09f      	b.n	800339e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0e5      	beq.n	8003238 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7e1b      	ldrb	r3, [r3, #24]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d108      	bne.n	8003286 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e007      	b.n	8003296 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7e5b      	ldrb	r3, [r3, #25]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d108      	bne.n	80032b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e007      	b.n	80032c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7e9b      	ldrb	r3, [r3, #26]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d108      	bne.n	80032da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0220 	orr.w	r2, r2, #32
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e007      	b.n	80032ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0220 	bic.w	r2, r2, #32
 80032e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7edb      	ldrb	r3, [r3, #27]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0210 	bic.w	r2, r2, #16
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e007      	b.n	8003314 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0210 	orr.w	r2, r2, #16
 8003312:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	7f1b      	ldrb	r3, [r3, #28]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d108      	bne.n	800332e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0208 	orr.w	r2, r2, #8
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e007      	b.n	800333e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	7f5b      	ldrb	r3, [r3, #29]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d108      	bne.n	8003358 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0204 	orr.w	r2, r2, #4
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e007      	b.n	8003368 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0204 	bic.w	r2, r2, #4
 8003366:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	ea42 0103 	orr.w	r1, r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <__NVIC_SetPriorityGrouping>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <__NVIC_SetPriorityGrouping+0x40>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c4:	4013      	ands	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <__NVIC_SetPriorityGrouping+0x44>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <__NVIC_SetPriorityGrouping+0x40>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60d3      	str	r3, [r2, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00
 80033ec:	05fa0000 	.word	0x05fa0000

080033f0 <__NVIC_GetPriorityGrouping>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <__NVIC_GetPriorityGrouping+0x18>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f003 0307 	and.w	r3, r3, #7
}
 80033fe:	4618      	mov	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_SetPriority>:
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	db0a      	blt.n	8003436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	490c      	ldr	r1, [pc, #48]	; (8003458 <__NVIC_SetPriority+0x4c>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	440b      	add	r3, r1
 8003430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003434:	e00a      	b.n	800344c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4908      	ldr	r1, [pc, #32]	; (800345c <__NVIC_SetPriority+0x50>)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	3b04      	subs	r3, #4
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	440b      	add	r3, r1
 800344a:	761a      	strb	r2, [r3, #24]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <NVIC_EncodePriority>:
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f1c3 0307 	rsb	r3, r3, #7
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf28      	it	cs
 800347e:	2304      	movcs	r3, #4
 8003480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3304      	adds	r3, #4
 8003486:	2b06      	cmp	r3, #6
 8003488:	d902      	bls.n	8003490 <NVIC_EncodePriority+0x30>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3b03      	subs	r3, #3
 800348e:	e000      	b.n	8003492 <NVIC_EncodePriority+0x32>
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	f04f 32ff 	mov.w	r2, #4294967295
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	401a      	ands	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43d9      	mvns	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	4313      	orrs	r3, r2
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3724      	adds	r7, #36	; 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <SysTick_Config>:
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d8:	d301      	bcc.n	80034de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034da:	2301      	movs	r3, #1
 80034dc:	e00f      	b.n	80034fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <SysTick_Config+0x40>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e6:	210f      	movs	r1, #15
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	f7ff ff8e 	bl	800340c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <SysTick_Config+0x40>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <SysTick_Config+0x40>)
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	e000e010 	.word	0xe000e010

0800350c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff47 	bl	80033a8 <__NVIC_SetPriorityGrouping>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003534:	f7ff ff5c 	bl	80033f0 <__NVIC_GetPriorityGrouping>
 8003538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	6978      	ldr	r0, [r7, #20]
 8003540:	f7ff ff8e 	bl	8003460 <NVIC_EncodePriority>
 8003544:	4602      	mov	r2, r0
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff5d 	bl	800340c <__NVIC_SetPriority>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ffb0 	bl	80034c8 <SysTick_Config>
 8003568:	4603      	mov	r3, r0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e175      	b.n	8003880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003594:	2201      	movs	r2, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f040 8164 	bne.w	800387a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d00b      	beq.n	80035d2 <HAL_GPIO_Init+0x5e>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d007      	beq.n	80035d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035c6:	2b11      	cmp	r3, #17
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b12      	cmp	r3, #18
 80035d0:	d130      	bne.n	8003634 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2203      	movs	r2, #3
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003608:	2201      	movs	r2, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0201 	and.w	r2, r3, #1
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x100>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b12      	cmp	r3, #18
 8003672:	d123      	bne.n	80036bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	08da      	lsrs	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3208      	adds	r2, #8
 800367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	220f      	movs	r2, #15
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	08da      	lsrs	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3208      	adds	r2, #8
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0203 	and.w	r2, r3, #3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80be 	beq.w	800387a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fe:	4b66      	ldr	r3, [pc, #408]	; (8003898 <HAL_GPIO_Init+0x324>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	4a65      	ldr	r2, [pc, #404]	; (8003898 <HAL_GPIO_Init+0x324>)
 8003704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003708:	6453      	str	r3, [r2, #68]	; 0x44
 800370a:	4b63      	ldr	r3, [pc, #396]	; (8003898 <HAL_GPIO_Init+0x324>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003716:	4a61      	ldr	r2, [pc, #388]	; (800389c <HAL_GPIO_Init+0x328>)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	3302      	adds	r3, #2
 800371e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	220f      	movs	r2, #15
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_GPIO_Init+0x32c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d037      	beq.n	80037b2 <HAL_GPIO_Init+0x23e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a57      	ldr	r2, [pc, #348]	; (80038a4 <HAL_GPIO_Init+0x330>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d031      	beq.n	80037ae <HAL_GPIO_Init+0x23a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a56      	ldr	r2, [pc, #344]	; (80038a8 <HAL_GPIO_Init+0x334>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02b      	beq.n	80037aa <HAL_GPIO_Init+0x236>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a55      	ldr	r2, [pc, #340]	; (80038ac <HAL_GPIO_Init+0x338>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d025      	beq.n	80037a6 <HAL_GPIO_Init+0x232>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a54      	ldr	r2, [pc, #336]	; (80038b0 <HAL_GPIO_Init+0x33c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01f      	beq.n	80037a2 <HAL_GPIO_Init+0x22e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a53      	ldr	r2, [pc, #332]	; (80038b4 <HAL_GPIO_Init+0x340>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d019      	beq.n	800379e <HAL_GPIO_Init+0x22a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a52      	ldr	r2, [pc, #328]	; (80038b8 <HAL_GPIO_Init+0x344>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_GPIO_Init+0x226>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a51      	ldr	r2, [pc, #324]	; (80038bc <HAL_GPIO_Init+0x348>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00d      	beq.n	8003796 <HAL_GPIO_Init+0x222>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <HAL_GPIO_Init+0x34c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <HAL_GPIO_Init+0x21e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4f      	ldr	r2, [pc, #316]	; (80038c4 <HAL_GPIO_Init+0x350>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_GPIO_Init+0x21a>
 800378a:	2309      	movs	r3, #9
 800378c:	e012      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 800378e:	230a      	movs	r3, #10
 8003790:	e010      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 8003792:	2308      	movs	r3, #8
 8003794:	e00e      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 8003796:	2307      	movs	r3, #7
 8003798:	e00c      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 800379a:	2306      	movs	r3, #6
 800379c:	e00a      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 800379e:	2305      	movs	r3, #5
 80037a0:	e008      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037b2:	2300      	movs	r3, #0
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f002 0203 	and.w	r2, r2, #3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4093      	lsls	r3, r2
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037c4:	4935      	ldr	r1, [pc, #212]	; (800389c <HAL_GPIO_Init+0x328>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d2:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_GPIO_Init+0x354>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f6:	4a34      	ldr	r2, [pc, #208]	; (80038c8 <HAL_GPIO_Init+0x354>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <HAL_GPIO_Init+0x354>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003820:	4a29      	ldr	r2, [pc, #164]	; (80038c8 <HAL_GPIO_Init+0x354>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <HAL_GPIO_Init+0x354>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384a:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <HAL_GPIO_Init+0x354>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_GPIO_Init+0x354>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <HAL_GPIO_Init+0x354>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	f67f ae86 	bls.w	8003594 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40013800 	.word	0x40013800
 80038a0:	40020000 	.word	0x40020000
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40021400 	.word	0x40021400
 80038b8:	40021800 	.word	0x40021800
 80038bc:	40021c00 	.word	0x40021c00
 80038c0:	40022000 	.word	0x40022000
 80038c4:	40022400 	.word	0x40022400
 80038c8:	40013c00 	.word	0x40013c00

080038cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e001      	b.n	80038ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
 8003908:	4613      	mov	r3, r2
 800390a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800390c:	787b      	ldrb	r3, [r7, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003918:	e003      	b.n	8003922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	041a      	lsls	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	619a      	str	r2, [r3, #24]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800395e:	f7ff f927 	bl	8002bb0 <HAL_GetTick>
 8003962:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003964:	e009      	b.n	800397a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003966:	f7ff f923 	bl	8002bb0 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003974:	d901      	bls.n	800397a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e022      	b.n	80039c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003986:	d1ee      	bne.n	8003966 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0f      	ldr	r2, [pc, #60]	; (80039cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800398e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003992:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003994:	f7ff f90c 	bl	8002bb0 <HAL_GetTick>
 8003998:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800399a:	e009      	b.n	80039b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800399c:	f7ff f908 	bl	8002bb0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039aa:	d901      	bls.n	80039b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e007      	b.n	80039c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039bc:	d1ee      	bne.n	800399c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40007000 	.word	0x40007000

080039d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039d8:	2300      	movs	r3, #0
 80039da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e29b      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8087 	beq.w	8003b02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f4:	4b96      	ldr	r3, [pc, #600]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d00c      	beq.n	8003a1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a00:	4b93      	ldr	r3, [pc, #588]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d112      	bne.n	8003a32 <HAL_RCC_OscConfig+0x62>
 8003a0c:	4b90      	ldr	r3, [pc, #576]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a18:	d10b      	bne.n	8003a32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1a:	4b8d      	ldr	r3, [pc, #564]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d06c      	beq.n	8003b00 <HAL_RCC_OscConfig+0x130>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d168      	bne.n	8003b00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e275      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x7a>
 8003a3c:	4b84      	ldr	r3, [pc, #528]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a83      	ldr	r2, [pc, #524]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	e02e      	b.n	8003aa8 <HAL_RCC_OscConfig+0xd8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x9c>
 8003a52:	4b7f      	ldr	r3, [pc, #508]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7e      	ldr	r2, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b7c      	ldr	r3, [pc, #496]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7b      	ldr	r2, [pc, #492]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e01d      	b.n	8003aa8 <HAL_RCC_OscConfig+0xd8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0xc0>
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b73      	ldr	r3, [pc, #460]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a72      	ldr	r2, [pc, #456]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e00b      	b.n	8003aa8 <HAL_RCC_OscConfig+0xd8>
 8003a90:	4b6f      	ldr	r3, [pc, #444]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a6e      	ldr	r2, [pc, #440]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a6b      	ldr	r2, [pc, #428]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7ff f87e 	bl	8002bb0 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7ff f87a 	bl	8002bb0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e229      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xe8>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7ff f86a 	bl	8002bb0 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7ff f866 	bl	8002bb0 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e215      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	4b57      	ldr	r3, [pc, #348]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x110>
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d069      	beq.n	8003be2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b0e:	4b50      	ldr	r3, [pc, #320]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b4d      	ldr	r3, [pc, #308]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d11c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x190>
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d116      	bne.n	8003b60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_RCC_OscConfig+0x17a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e1e9      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	493d      	ldr	r1, [pc, #244]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	e040      	b.n	8003be2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d023      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b68:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a38      	ldr	r2, [pc, #224]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7ff f81c 	bl	8002bb0 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7c:	f7ff f818 	bl	8002bb0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e1c7      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4929      	ldr	r1, [pc, #164]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
 8003bae:	e018      	b.n	8003be2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb0:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a26      	ldr	r2, [pc, #152]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fff8 	bl	8002bb0 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc4:	f7fe fff4 	bl	8002bb0 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1a3      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d038      	beq.n	8003c60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d019      	beq.n	8003c2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fe ffd5 	bl	8002bb0 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7fe ffd1 	bl	8002bb0 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e180      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x23a>
 8003c28:	e01a      	b.n	8003c60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <HAL_RCC_OscConfig+0x280>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c36:	f7fe ffbb 	bl	8002bb0 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fe ffb7 	bl	8002bb0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d903      	bls.n	8003c54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e166      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
 8003c50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	4b92      	ldr	r3, [pc, #584]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ee      	bne.n	8003c3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80a4 	beq.w	8003db6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6e:	4b8c      	ldr	r3, [pc, #560]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10d      	bne.n	8003c96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	4b89      	ldr	r3, [pc, #548]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	4a88      	ldr	r2, [pc, #544]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6413      	str	r3, [r2, #64]	; 0x40
 8003c86:	4b86      	ldr	r3, [pc, #536]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c96:	4b83      	ldr	r3, [pc, #524]	; (8003ea4 <HAL_RCC_OscConfig+0x4d4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d118      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ca2:	4b80      	ldr	r3, [pc, #512]	; (8003ea4 <HAL_RCC_OscConfig+0x4d4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7f      	ldr	r2, [pc, #508]	; (8003ea4 <HAL_RCC_OscConfig+0x4d4>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cae:	f7fe ff7f 	bl	8002bb0 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb6:	f7fe ff7b 	bl	8002bb0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b64      	cmp	r3, #100	; 0x64
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e12a      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc8:	4b76      	ldr	r3, [pc, #472]	; (8003ea4 <HAL_RCC_OscConfig+0x4d4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d106      	bne.n	8003cea <HAL_RCC_OscConfig+0x31a>
 8003cdc:	4b70      	ldr	r3, [pc, #448]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	4a6f      	ldr	r2, [pc, #444]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce8:	e02d      	b.n	8003d46 <HAL_RCC_OscConfig+0x376>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x33c>
 8003cf2:	4b6b      	ldr	r3, [pc, #428]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a6a      	ldr	r2, [pc, #424]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfe:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a67      	ldr	r2, [pc, #412]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d04:	f023 0304 	bic.w	r3, r3, #4
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0a:	e01c      	b.n	8003d46 <HAL_RCC_OscConfig+0x376>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b05      	cmp	r3, #5
 8003d12:	d10c      	bne.n	8003d2e <HAL_RCC_OscConfig+0x35e>
 8003d14:	4b62      	ldr	r3, [pc, #392]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4a61      	ldr	r2, [pc, #388]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d1a:	f043 0304 	orr.w	r3, r3, #4
 8003d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d20:	4b5f      	ldr	r3, [pc, #380]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a5e      	ldr	r2, [pc, #376]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	e00b      	b.n	8003d46 <HAL_RCC_OscConfig+0x376>
 8003d2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	4a5b      	ldr	r2, [pc, #364]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	4a58      	ldr	r2, [pc, #352]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	f023 0304 	bic.w	r3, r3, #4
 8003d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d015      	beq.n	8003d7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fe ff2f 	bl	8002bb0 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fe ff2b 	bl	8002bb0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0d8      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ee      	beq.n	8003d56 <HAL_RCC_OscConfig+0x386>
 8003d78:	e014      	b.n	8003da4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fe ff19 	bl	8002bb0 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fe ff15 	bl	8002bb0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0c2      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d98:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ee      	bne.n	8003d82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003daa:	4b3d      	ldr	r3, [pc, #244]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80ae 	beq.w	8003f1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dc0:	4b37      	ldr	r3, [pc, #220]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d06d      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d14b      	bne.n	8003e6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd4:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a31      	ldr	r2, [pc, #196]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fe fee6 	bl	8002bb0 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fe fee2 	bl	8002bb0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e091      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	071b      	lsls	r3, r3, #28
 8003e32:	491b      	ldr	r1, [pc, #108]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fe feb4 	bl	8002bb0 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fe feb0 	bl	8002bb0 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e05f      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x47c>
 8003e6a:	e057      	b.n	8003f1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fe9a 	bl	8002bb0 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fe fe96 	bl	8002bb0 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e045      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <HAL_RCC_OscConfig+0x4d0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4b0>
 8003e9e:	e03d      	b.n	8003f1c <HAL_RCC_OscConfig+0x54c>
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ea8:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <HAL_RCC_OscConfig+0x558>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d030      	beq.n	8003f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d129      	bne.n	8003f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d122      	bne.n	8003f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ede:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d119      	bne.n	8003f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d10f      	bne.n	8003f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800

08003f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0d0      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b6a      	ldr	r3, [pc, #424]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d910      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b67      	ldr	r3, [pc, #412]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 020f 	bic.w	r2, r3, #15
 8003f5a:	4965      	ldr	r1, [pc, #404]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0b8      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d020      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f8c:	4b59      	ldr	r3, [pc, #356]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a58      	ldr	r2, [pc, #352]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa4:	4b53      	ldr	r3, [pc, #332]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a52      	ldr	r2, [pc, #328]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	4b50      	ldr	r3, [pc, #320]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	494d      	ldr	r1, [pc, #308]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d040      	beq.n	8004050 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b47      	ldr	r3, [pc, #284]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d115      	bne.n	800400e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e07f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e073      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffe:	4b3d      	ldr	r3, [pc, #244]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e06b      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800400e:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4936      	ldr	r1, [pc, #216]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 800401c:	4313      	orrs	r3, r2
 800401e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004020:	f7fe fdc6 	bl	8002bb0 <HAL_GetTick>
 8004024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	e00a      	b.n	800403e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004028:	f7fe fdc2 	bl	8002bb0 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e053      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 020c 	and.w	r2, r3, #12
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	429a      	cmp	r2, r3
 800404e:	d1eb      	bne.n	8004028 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004050:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d210      	bcs.n	8004080 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 020f 	bic.w	r2, r3, #15
 8004066:	4922      	ldr	r1, [pc, #136]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e032      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4916      	ldr	r1, [pc, #88]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	490e      	ldr	r1, [pc, #56]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040be:	f000 f821 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	490a      	ldr	r1, [pc, #40]	; (80040f8 <HAL_RCC_ClockConfig+0x1cc>)
 80040d0:	5ccb      	ldrb	r3, [r1, r3]
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	4a09      	ldr	r2, [pc, #36]	; (80040fc <HAL_RCC_ClockConfig+0x1d0>)
 80040d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_RCC_ClockConfig+0x1d4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fd22 	bl	8002b28 <HAL_InitTick>

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40023c00 	.word	0x40023c00
 80040f4:	40023800 	.word	0x40023800
 80040f8:	08007c18 	.word	0x08007c18
 80040fc:	20000000 	.word	0x20000000
 8004100:	20000004 	.word	0x20000004

08004104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004104:	b5b0      	push	{r4, r5, r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800410a:	2100      	movs	r1, #0
 800410c:	6079      	str	r1, [r7, #4]
 800410e:	2100      	movs	r1, #0
 8004110:	60f9      	str	r1, [r7, #12]
 8004112:	2100      	movs	r1, #0
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004116:	2100      	movs	r1, #0
 8004118:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800411a:	4952      	ldr	r1, [pc, #328]	; (8004264 <HAL_RCC_GetSysClockFreq+0x160>)
 800411c:	6889      	ldr	r1, [r1, #8]
 800411e:	f001 010c 	and.w	r1, r1, #12
 8004122:	2908      	cmp	r1, #8
 8004124:	d00d      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x3e>
 8004126:	2908      	cmp	r1, #8
 8004128:	f200 8094 	bhi.w	8004254 <HAL_RCC_GetSysClockFreq+0x150>
 800412c:	2900      	cmp	r1, #0
 800412e:	d002      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0x32>
 8004130:	2904      	cmp	r1, #4
 8004132:	d003      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x38>
 8004134:	e08e      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004136:	4b4c      	ldr	r3, [pc, #304]	; (8004268 <HAL_RCC_GetSysClockFreq+0x164>)
 8004138:	60bb      	str	r3, [r7, #8]
      break;
 800413a:	e08e      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800413c:	4b4b      	ldr	r3, [pc, #300]	; (800426c <HAL_RCC_GetSysClockFreq+0x168>)
 800413e:	60bb      	str	r3, [r7, #8]
      break;
 8004140:	e08b      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004142:	4948      	ldr	r1, [pc, #288]	; (8004264 <HAL_RCC_GetSysClockFreq+0x160>)
 8004144:	6849      	ldr	r1, [r1, #4]
 8004146:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800414a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800414c:	4945      	ldr	r1, [pc, #276]	; (8004264 <HAL_RCC_GetSysClockFreq+0x160>)
 800414e:	6849      	ldr	r1, [r1, #4]
 8004150:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004154:	2900      	cmp	r1, #0
 8004156:	d024      	beq.n	80041a2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004158:	4942      	ldr	r1, [pc, #264]	; (8004264 <HAL_RCC_GetSysClockFreq+0x160>)
 800415a:	6849      	ldr	r1, [r1, #4]
 800415c:	0989      	lsrs	r1, r1, #6
 800415e:	4608      	mov	r0, r1
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004168:	f04f 0500 	mov.w	r5, #0
 800416c:	ea00 0204 	and.w	r2, r0, r4
 8004170:	ea01 0305 	and.w	r3, r1, r5
 8004174:	493d      	ldr	r1, [pc, #244]	; (800426c <HAL_RCC_GetSysClockFreq+0x168>)
 8004176:	fb01 f003 	mul.w	r0, r1, r3
 800417a:	2100      	movs	r1, #0
 800417c:	fb01 f102 	mul.w	r1, r1, r2
 8004180:	1844      	adds	r4, r0, r1
 8004182:	493a      	ldr	r1, [pc, #232]	; (800426c <HAL_RCC_GetSysClockFreq+0x168>)
 8004184:	fba2 0101 	umull	r0, r1, r2, r1
 8004188:	1863      	adds	r3, r4, r1
 800418a:	4619      	mov	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	461a      	mov	r2, r3
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	f7fc f858 	bl	8000248 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4613      	mov	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e04a      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a2:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_RCC_GetSysClockFreq+0x160>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	461a      	mov	r2, r3
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	ea02 0400 	and.w	r4, r2, r0
 80041ba:	ea03 0501 	and.w	r5, r3, r1
 80041be:	4620      	mov	r0, r4
 80041c0:	4629      	mov	r1, r5
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	014b      	lsls	r3, r1, #5
 80041cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041d0:	0142      	lsls	r2, r0, #5
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	1b00      	subs	r0, r0, r4
 80041d8:	eb61 0105 	sbc.w	r1, r1, r5
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	018b      	lsls	r3, r1, #6
 80041e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041ea:	0182      	lsls	r2, r0, #6
 80041ec:	1a12      	subs	r2, r2, r0
 80041ee:	eb63 0301 	sbc.w	r3, r3, r1
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	00d9      	lsls	r1, r3, #3
 80041fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004200:	00d0      	lsls	r0, r2, #3
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	1912      	adds	r2, r2, r4
 8004208:	eb45 0303 	adc.w	r3, r5, r3
 800420c:	f04f 0000 	mov.w	r0, #0
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	0299      	lsls	r1, r3, #10
 8004216:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800421a:	0290      	lsls	r0, r2, #10
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4610      	mov	r0, r2
 8004222:	4619      	mov	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	461a      	mov	r2, r3
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	f7fc f80c 	bl	8000248 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <HAL_RCC_GetSysClockFreq+0x160>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	3301      	adds	r3, #1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	60bb      	str	r3, [r7, #8]
      break;
 8004252:	e002      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <HAL_RCC_GetSysClockFreq+0x164>)
 8004256:	60bb      	str	r3, [r7, #8]
      break;
 8004258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425a:	68bb      	ldr	r3, [r7, #8]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bdb0      	pop	{r4, r5, r7, pc}
 8004264:	40023800 	.word	0x40023800
 8004268:	00f42400 	.word	0x00f42400
 800426c:	017d7840 	.word	0x017d7840

08004270 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004274:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_RCC_GetHCLKFreq+0x14>)
 8004276:	681b      	ldr	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000000 	.word	0x20000000

08004288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800428c:	f7ff fff0 	bl	8004270 <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	0a9b      	lsrs	r3, r3, #10
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4903      	ldr	r1, [pc, #12]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40023800 	.word	0x40023800
 80042ac:	08007c28 	.word	0x08007c28

080042b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042b4:	f7ff ffdc 	bl	8004270 <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0b5b      	lsrs	r3, r3, #13
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4903      	ldr	r1, [pc, #12]	; (80042d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40023800 	.word	0x40023800
 80042d4:	08007c28 	.word	0x08007c28

080042d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d012      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004300:	4b69      	ldr	r3, [pc, #420]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a68      	ldr	r2, [pc, #416]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800430a:	6093      	str	r3, [r2, #8]
 800430c:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	4964      	ldr	r1, [pc, #400]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d017      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004332:	4b5d      	ldr	r3, [pc, #372]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	4959      	ldr	r1, [pc, #356]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004350:	d101      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004352:	2301      	movs	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800435e:	2301      	movs	r3, #1
 8004360:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d017      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800436e:	4b4e      	ldr	r3, [pc, #312]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004374:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	494a      	ldr	r1, [pc, #296]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438c:	d101      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800439a:	2301      	movs	r3, #1
 800439c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 808b 	beq.w	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043bc:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	4a39      	ldr	r2, [pc, #228]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6413      	str	r3, [r2, #64]	; 0x40
 80043c8:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043d4:	4b35      	ldr	r3, [pc, #212]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a34      	ldr	r2, [pc, #208]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e0:	f7fe fbe6 	bl	8002bb0 <HAL_GetTick>
 80043e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fe fbe2 	bl	8002bb0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e38f      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043fa:	4b2c      	ldr	r3, [pc, #176]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004406:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d035      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	429a      	cmp	r2, r3
 8004422:	d02e      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004424:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800442e:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800443a:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004444:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004446:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800444c:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d114      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fe fbaa 	bl	8002bb0 <HAL_GetTick>
 800445c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445e:	e00a      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004460:	f7fe fba6 	bl	8002bb0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	; 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e351      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0ee      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448e:	d111      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800449e:	400b      	ands	r3, r1
 80044a0:	4901      	ldr	r1, [pc, #4]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
 80044a6:	e00b      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40007000 	.word	0x40007000
 80044b0:	0ffffcff 	.word	0x0ffffcff
 80044b4:	4bb3      	ldr	r3, [pc, #716]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4ab2      	ldr	r2, [pc, #712]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044be:	6093      	str	r3, [r2, #8]
 80044c0:	4bb0      	ldr	r3, [pc, #704]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044cc:	49ad      	ldr	r1, [pc, #692]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d010      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044de:	4ba9      	ldr	r3, [pc, #676]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e4:	4aa7      	ldr	r2, [pc, #668]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044ee:	4ba5      	ldr	r3, [pc, #660]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	49a2      	ldr	r1, [pc, #648]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800450c:	4b9d      	ldr	r3, [pc, #628]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451a:	499a      	ldr	r1, [pc, #616]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800452e:	4b95      	ldr	r3, [pc, #596]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800453c:	4991      	ldr	r1, [pc, #580]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004550:	4b8c      	ldr	r3, [pc, #560]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800455e:	4989      	ldr	r1, [pc, #548]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004572:	4b84      	ldr	r3, [pc, #528]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	4980      	ldr	r1, [pc, #512]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004594:	4b7b      	ldr	r3, [pc, #492]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f023 0203 	bic.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	4978      	ldr	r1, [pc, #480]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045b6:	4b73      	ldr	r3, [pc, #460]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f023 020c 	bic.w	r2, r3, #12
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c4:	496f      	ldr	r1, [pc, #444]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045d8:	4b6a      	ldr	r3, [pc, #424]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	4967      	ldr	r1, [pc, #412]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045fa:	4b62      	ldr	r3, [pc, #392]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	495e      	ldr	r1, [pc, #376]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800461c:	4b59      	ldr	r3, [pc, #356]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	4956      	ldr	r1, [pc, #344]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800463e:	4b51      	ldr	r3, [pc, #324]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464c:	494d      	ldr	r1, [pc, #308]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004660:	4b48      	ldr	r3, [pc, #288]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	4945      	ldr	r1, [pc, #276]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004682:	4b40      	ldr	r3, [pc, #256]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	493c      	ldr	r1, [pc, #240]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046a4:	4b37      	ldr	r3, [pc, #220]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b2:	4934      	ldr	r1, [pc, #208]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d011      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046c6:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d4:	492b      	ldr	r1, [pc, #172]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046e4:	d101      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046e6:	2301      	movs	r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004706:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	491b      	ldr	r1, [pc, #108]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004728:	4b16      	ldr	r3, [pc, #88]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004738:	4912      	ldr	r1, [pc, #72]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800474c:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475c:	4909      	ldr	r1, [pc, #36]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00f      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004776:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	e002      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	4986      	ldr	r1, [pc, #536]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00b      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ac:	497d      	ldr	r1, [pc, #500]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d006      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80d6 	beq.w	8004974 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047c8:	4b76      	ldr	r3, [pc, #472]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a75      	ldr	r2, [pc, #468]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fe f9ec 	bl	8002bb0 <HAL_GetTick>
 80047d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047dc:	f7fe f9e8 	bl	8002bb0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e195      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ee:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d021      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11d      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800480e:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800481c:	4b61      	ldr	r3, [pc, #388]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	0e1b      	lsrs	r3, r3, #24
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	019a      	lsls	r2, r3, #6
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	431a      	orrs	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	071b      	lsls	r3, r3, #28
 8004842:	4958      	ldr	r1, [pc, #352]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02e      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004874:	d129      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004876:	4b4b      	ldr	r3, [pc, #300]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004884:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488a:	0f1b      	lsrs	r3, r3, #28
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	019a      	lsls	r2, r3, #6
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	041b      	lsls	r3, r3, #16
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	061b      	lsls	r3, r3, #24
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	071b      	lsls	r3, r3, #28
 80048aa:	493e      	ldr	r1, [pc, #248]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048b2:	4b3c      	ldr	r3, [pc, #240]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b8:	f023 021f 	bic.w	r2, r3, #31
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	3b01      	subs	r3, #1
 80048c2:	4938      	ldr	r1, [pc, #224]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01d      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048d6:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	0e1b      	lsrs	r3, r3, #24
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048e4:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ea:	0f1b      	lsrs	r3, r3, #28
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	019a      	lsls	r2, r3, #6
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	431a      	orrs	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	4926      	ldr	r1, [pc, #152]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d011      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	019a      	lsls	r2, r3, #6
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	491a      	ldr	r1, [pc, #104]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004942:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800494c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494e:	f7fe f92f 	bl	8002bb0 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004954:	e008      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004956:	f7fe f92b 	bl	8002bb0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b64      	cmp	r3, #100	; 0x64
 8004962:	d901      	bls.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e0d8      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004968:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b01      	cmp	r3, #1
 8004978:	f040 80ce 	bne.w	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fe f912 	bl	8002bb0 <HAL_GetTick>
 800498c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800498e:	e00b      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004990:	f7fe f90e 	bl	8002bb0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d904      	bls.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e0bb      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049a8:	4b5e      	ldr	r3, [pc, #376]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b4:	d0ec      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d12a      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049de:	4b51      	ldr	r3, [pc, #324]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049ec:	4b4d      	ldr	r3, [pc, #308]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	0f1b      	lsrs	r3, r3, #28
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	019a      	lsls	r2, r3, #6
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	4944      	ldr	r1, [pc, #272]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a1a:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	493d      	ldr	r1, [pc, #244]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d022      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a48:	d11d      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a4a:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	0e1b      	lsrs	r3, r3, #24
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a58:	4b32      	ldr	r3, [pc, #200]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	0f1b      	lsrs	r3, r3, #28
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	019a      	lsls	r2, r3, #6
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	431a      	orrs	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	061b      	lsls	r3, r3, #24
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	071b      	lsls	r3, r3, #28
 8004a7e:	4929      	ldr	r1, [pc, #164]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d028      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	0e1b      	lsrs	r3, r3, #24
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aa0:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	0c1b      	lsrs	r3, r3, #16
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	019a      	lsls	r2, r3, #6
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	071b      	lsls	r3, r3, #28
 8004ac6:	4917      	ldr	r1, [pc, #92]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	4911      	ldr	r1, [pc, #68]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af0:	f7fe f85e 	bl	8002bb0 <HAL_GetTick>
 8004af4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004af8:	f7fe f85a 	bl	8002bb0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	; 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e007      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b16:	d1ef      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023800 	.word	0x40023800

08004b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e09d      	b.n	8004c76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4a:	d009      	beq.n	8004b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	61da      	str	r2, [r3, #28]
 8004b52:	e005      	b.n	8004b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fd fc8e 	bl	800249c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ba0:	d902      	bls.n	8004ba8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	e002      	b.n	8004bae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bb6:	d007      	beq.n	8004bc8 <HAL_SPI_Init+0xa0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	ea42 0103 	orr.w	r1, r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	0c1b      	lsrs	r3, r3, #16
 8004c24:	f003 0204 	and.w	r2, r3, #4
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c44:	ea42 0103 	orr.w	r1, r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b088      	sub	sp, #32
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_SPI_Transmit+0x22>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e158      	b.n	8004f52 <HAL_SPI_Transmit+0x2d4>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ca8:	f7fd ff82 	bl	8002bb0 <HAL_GetTick>
 8004cac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cc2:	e13d      	b.n	8004f40 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Transmit+0x52>
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd4:	e134      	b.n	8004f40 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2203      	movs	r2, #3
 8004cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	d10f      	bne.n	8004d42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d007      	beq.n	8004d60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d68:	d94b      	bls.n	8004e02 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Transmit+0xfa>
 8004d72:	8afb      	ldrh	r3, [r7, #22]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d13e      	bne.n	8004df6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d9c:	e02b      	b.n	8004df6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d112      	bne.n	8004dd2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	881a      	ldrh	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	1c9a      	adds	r2, r3, #2
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dd0:	e011      	b.n	8004df6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd2:	f7fd feed 	bl	8002bb0 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d803      	bhi.n	8004dea <HAL_SPI_Transmit+0x16c>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d102      	bne.n	8004df0 <HAL_SPI_Transmit+0x172>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004df4:	e0a4      	b.n	8004f40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1ce      	bne.n	8004d9e <HAL_SPI_Transmit+0x120>
 8004e00:	e07c      	b.n	8004efc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_Transmit+0x192>
 8004e0a:	8afb      	ldrh	r3, [r7, #22]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d170      	bne.n	8004ef2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d912      	bls.n	8004e40 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	881a      	ldrh	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b02      	subs	r3, #2
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e3e:	e058      	b.n	8004ef2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e66:	e044      	b.n	8004ef2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d12b      	bne.n	8004ece <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d912      	bls.n	8004ea6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b02      	subs	r3, #2
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ea4:	e025      	b.n	8004ef2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	7812      	ldrb	r2, [r2, #0]
 8004eb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ecc:	e011      	b.n	8004ef2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ece:	f7fd fe6f 	bl	8002bb0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d803      	bhi.n	8004ee6 <HAL_SPI_Transmit+0x268>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d102      	bne.n	8004eec <HAL_SPI_Transmit+0x26e>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ef0:	e026      	b.n	8004f40 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1b5      	bne.n	8004e68 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fcdf 	bl	80058c4 <SPI_EndRxTxTransaction>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e000      	b.n	8004f40 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b088      	sub	sp, #32
 8004f5e:	af02      	add	r7, sp, #8
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f76:	d112      	bne.n	8004f9e <HAL_SPI_Receive+0x44>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10e      	bne.n	8004f9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2204      	movs	r2, #4
 8004f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f910 	bl	80051ba <HAL_SPI_TransmitReceive>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	e109      	b.n	80051b2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_SPI_Receive+0x52>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e102      	b.n	80051b2 <HAL_SPI_Receive+0x258>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb4:	f7fd fdfc 	bl	8002bb0 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d002      	beq.n	8004fcc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fca:	e0e9      	b.n	80051a0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_SPI_Receive+0x7e>
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fdc:	e0e0      	b.n	80051a0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	88fa      	ldrh	r2, [r7, #6]
 8004ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005028:	d908      	bls.n	800503c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	e007      	b.n	800504c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800504a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005054:	d10f      	bne.n	8005076 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005074:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d007      	beq.n	8005094 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005092:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800509c:	d867      	bhi.n	800516e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800509e:	e030      	b.n	8005102 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d117      	bne.n	80050de <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f103 020c 	add.w	r2, r3, #12
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80050dc:	e011      	b.n	8005102 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050de:	f7fd fd67 	bl	8002bb0 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d803      	bhi.n	80050f6 <HAL_SPI_Receive+0x19c>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d102      	bne.n	80050fc <HAL_SPI_Receive+0x1a2>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005100:	e04e      	b.n	80051a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1c8      	bne.n	80050a0 <HAL_SPI_Receive+0x146>
 800510e:	e034      	b.n	800517a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b01      	cmp	r3, #1
 800511c:	d115      	bne.n	800514a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	b292      	uxth	r2, r2
 800512a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005148:	e011      	b.n	800516e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800514a:	f7fd fd31 	bl	8002bb0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d803      	bhi.n	8005162 <HAL_SPI_Receive+0x208>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d102      	bne.n	8005168 <HAL_SPI_Receive+0x20e>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800516c:	e018      	b.n	80051a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1ca      	bne.n	8005110 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fb48 	bl	8005814 <SPI_EndRxTransaction>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	75fb      	strb	r3, [r7, #23]
 800519c:	e000      	b.n	80051a0 <HAL_SPI_Receive+0x246>
  }

error :
 800519e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b08a      	sub	sp, #40	; 0x28
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]
 80051c6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051c8:	2301      	movs	r3, #1
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_SPI_TransmitReceive+0x26>
 80051dc:	2302      	movs	r3, #2
 80051de:	e1fb      	b.n	80055d8 <HAL_SPI_TransmitReceive+0x41e>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051e8:	f7fd fce2 	bl	8002bb0 <HAL_GetTick>
 80051ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80051fc:	887b      	ldrh	r3, [r7, #2]
 80051fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005200:	887b      	ldrh	r3, [r7, #2]
 8005202:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005204:	7efb      	ldrb	r3, [r7, #27]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d00e      	beq.n	8005228 <HAL_SPI_TransmitReceive+0x6e>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005210:	d106      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x66>
 800521a:	7efb      	ldrb	r3, [r7, #27]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d003      	beq.n	8005228 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005220:	2302      	movs	r3, #2
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005226:	e1cd      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_SPI_TransmitReceive+0x80>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_SPI_TransmitReceive+0x80>
 8005234:	887b      	ldrh	r3, [r7, #2]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d103      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005240:	e1c0      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b04      	cmp	r3, #4
 800524c:	d003      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2205      	movs	r2, #5
 8005252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	887a      	ldrh	r2, [r7, #2]
 8005266:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	887a      	ldrh	r2, [r7, #2]
 800526e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	887a      	ldrh	r2, [r7, #2]
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	887a      	ldrh	r2, [r7, #2]
 8005282:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005298:	d802      	bhi.n	80052a0 <HAL_SPI_TransmitReceive+0xe6>
 800529a:	8a3b      	ldrh	r3, [r7, #16]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d908      	bls.n	80052b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	e007      	b.n	80052c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d007      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052e8:	d97c      	bls.n	80053e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x13e>
 80052f2:	8a7b      	ldrh	r3, [r7, #18]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d169      	bne.n	80053cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	1c9a      	adds	r2, r3, #2
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800531c:	e056      	b.n	80053cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d11b      	bne.n	8005364 <HAL_SPI_TransmitReceive+0x1aa>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_SPI_TransmitReceive+0x1aa>
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	2b01      	cmp	r3, #1
 800533a:	d113      	bne.n	8005364 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	881a      	ldrh	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	1c9a      	adds	r2, r3, #2
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b01      	cmp	r3, #1
 8005370:	d11c      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x1f2>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	b292      	uxth	r2, r2
 800538a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	1c9a      	adds	r2, r3, #2
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053a8:	2301      	movs	r3, #1
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053ac:	f7fd fc00 	bl	8002bb0 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d807      	bhi.n	80053cc <HAL_SPI_TransmitReceive+0x212>
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c2:	d003      	beq.n	80053cc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80053ca:	e0fb      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1a3      	bne.n	800531e <HAL_SPI_TransmitReceive+0x164>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d19d      	bne.n	800531e <HAL_SPI_TransmitReceive+0x164>
 80053e2:	e0df      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_SPI_TransmitReceive+0x23a>
 80053ec:	8a7b      	ldrh	r3, [r7, #18]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	f040 80cb 	bne.w	800558a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d912      	bls.n	8005424 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	1c9a      	adds	r2, r3, #2
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b02      	subs	r3, #2
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005422:	e0b2      	b.n	800558a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	7812      	ldrb	r2, [r2, #0]
 8005430:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800544a:	e09e      	b.n	800558a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d134      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x30a>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02f      	beq.n	80054c4 <HAL_SPI_TransmitReceive+0x30a>
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	2b01      	cmp	r3, #1
 8005468:	d12c      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	d912      	bls.n	800549a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	881a      	ldrh	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	1c9a      	adds	r2, r3, #2
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b02      	subs	r3, #2
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005498:	e012      	b.n	80054c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d148      	bne.n	8005564 <HAL_SPI_TransmitReceive+0x3aa>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d042      	beq.n	8005564 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d923      	bls.n	8005532 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	b292      	uxth	r2, r2
 80054f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	1c9a      	adds	r2, r3, #2
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b02      	subs	r3, #2
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d81f      	bhi.n	8005560 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800552e:	605a      	str	r2, [r3, #4]
 8005530:	e016      	b.n	8005560 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f103 020c 	add.w	r2, r3, #12
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005560:	2301      	movs	r3, #1
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005564:	f7fd fb24 	bl	8002bb0 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005570:	429a      	cmp	r2, r3
 8005572:	d803      	bhi.n	800557c <HAL_SPI_TransmitReceive+0x3c2>
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d102      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x3c8>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005588:	e01c      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	f47f af5b 	bne.w	800544c <HAL_SPI_TransmitReceive+0x292>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f47f af54 	bne.w	800544c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f98b 	bl	80058c4 <SPI_EndRxTxTransaction>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d006      	beq.n	80055c2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	661a      	str	r2, [r3, #96]	; 0x60
 80055c0:	e000      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80055c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3728      	adds	r7, #40	; 0x28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	4613      	mov	r3, r2
 80055ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055f0:	f7fd fade 	bl	8002bb0 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	4413      	add	r3, r2
 80055fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005600:	f7fd fad6 	bl	8002bb0 <HAL_GetTick>
 8005604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005606:	4b39      	ldr	r3, [pc, #228]	; (80056ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	015b      	lsls	r3, r3, #5
 800560c:	0d1b      	lsrs	r3, r3, #20
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	fb02 f303 	mul.w	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005616:	e054      	b.n	80056c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d050      	beq.n	80056c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005620:	f7fd fac6 	bl	8002bb0 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	429a      	cmp	r2, r3
 800562e:	d902      	bls.n	8005636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d13d      	bne.n	80056b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800564e:	d111      	bne.n	8005674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005658:	d004      	beq.n	8005664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005662:	d107      	bne.n	8005674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567c:	d10f      	bne.n	800569e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800569c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e017      	b.n	80056e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	3b01      	subs	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4013      	ands	r3, r2
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	bf0c      	ite	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	2300      	movne	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d19b      	bne.n	8005618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3720      	adds	r7, #32
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000000 	.word	0x20000000

080056f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80056fe:	f7fd fa57 	bl	8002bb0 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	4413      	add	r3, r2
 800570c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800570e:	f7fd fa4f 	bl	8002bb0 <HAL_GetTick>
 8005712:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005714:	4b3e      	ldr	r3, [pc, #248]	; (8005810 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00da      	lsls	r2, r3, #3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	0d1b      	lsrs	r3, r3, #20
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	fb02 f303 	mul.w	r3, r2, r3
 800572a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800572c:	e062      	b.n	80057f4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005734:	d109      	bne.n	800574a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d106      	bne.n	800574a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005748:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d050      	beq.n	80057f4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005752:	f7fd fa2d 	bl	8002bb0 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	429a      	cmp	r2, r3
 8005760:	d902      	bls.n	8005768 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d13d      	bne.n	80057e4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005776:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005780:	d111      	bne.n	80057a6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578a:	d004      	beq.n	8005796 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005794:	d107      	bne.n	80057a6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ae:	d10f      	bne.n	80057d0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e010      	b.n	8005806 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	4013      	ands	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d194      	bne.n	800572e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000000 	.word	0x20000000

08005814 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005828:	d111      	bne.n	800584e <SPI_EndRxTransaction+0x3a>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005832:	d004      	beq.n	800583e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583c:	d107      	bne.n	800584e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2200      	movs	r2, #0
 8005856:	2180      	movs	r1, #128	; 0x80
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff fec1 	bl	80055e0 <SPI_WaitFlagStateUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e023      	b.n	80058bc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587c:	d11d      	bne.n	80058ba <SPI_EndRxTransaction+0xa6>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005886:	d004      	beq.n	8005892 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005890:	d113      	bne.n	80058ba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2200      	movs	r2, #0
 800589a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f7ff ff26 	bl	80056f0 <SPI_WaitFifoStateUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ae:	f043 0220 	orr.w	r2, r3, #32
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e000      	b.n	80058bc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff ff07 	bl	80056f0 <SPI_WaitFifoStateUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ec:	f043 0220 	orr.w	r2, r3, #32
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e027      	b.n	8005948 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2200      	movs	r2, #0
 8005900:	2180      	movs	r1, #128	; 0x80
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff fe6c 	bl	80055e0 <SPI_WaitFlagStateUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e014      	b.n	8005948 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2200      	movs	r2, #0
 8005926:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff fee0 	bl	80056f0 <SPI_WaitFifoStateUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e000      	b.n	8005948 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e049      	b.n	80059f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fc ffd4 	bl	8002924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f000 fa72 	bl	8005e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e049      	b.n	8005aa4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7fc ff39 	bl	800289c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f000 fa1b 	bl	8005e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e082      	b.n	8005bcc <HAL_TIM_IC_ConfigChannel+0x120>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d11b      	bne.n	8005b0c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6819      	ldr	r1, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f000 fd56 	bl	8006594 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 020c 	bic.w	r2, r2, #12
 8005af6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6999      	ldr	r1, [r3, #24]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	619a      	str	r2, [r3, #24]
 8005b0a:	e05a      	b.n	8005bc2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d11c      	bne.n	8005b4c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f000 fdda 	bl	80066da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b34:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6999      	ldr	r1, [r3, #24]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	021a      	lsls	r2, r3, #8
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	619a      	str	r2, [r3, #24]
 8005b4a:	e03a      	b.n	8005bc2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d11b      	bne.n	8005b8a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6819      	ldr	r1, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f000 fe27 	bl	80067b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 020c 	bic.w	r2, r2, #12
 8005b74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	61da      	str	r2, [r3, #28]
 8005b88:	e01b      	b.n	8005bc2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6819      	ldr	r1, [r3, #0]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f000 fe47 	bl	800682c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69d9      	ldr	r1, [r3, #28]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	021a      	lsls	r2, r3, #8
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e0fd      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x216>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b14      	cmp	r3, #20
 8005bfa:	f200 80f0 	bhi.w	8005dde <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c59 	.word	0x08005c59
 8005c08:	08005ddf 	.word	0x08005ddf
 8005c0c:	08005ddf 	.word	0x08005ddf
 8005c10:	08005ddf 	.word	0x08005ddf
 8005c14:	08005c99 	.word	0x08005c99
 8005c18:	08005ddf 	.word	0x08005ddf
 8005c1c:	08005ddf 	.word	0x08005ddf
 8005c20:	08005ddf 	.word	0x08005ddf
 8005c24:	08005cdb 	.word	0x08005cdb
 8005c28:	08005ddf 	.word	0x08005ddf
 8005c2c:	08005ddf 	.word	0x08005ddf
 8005c30:	08005ddf 	.word	0x08005ddf
 8005c34:	08005d1b 	.word	0x08005d1b
 8005c38:	08005ddf 	.word	0x08005ddf
 8005c3c:	08005ddf 	.word	0x08005ddf
 8005c40:	08005ddf 	.word	0x08005ddf
 8005c44:	08005d5d 	.word	0x08005d5d
 8005c48:	08005ddf 	.word	0x08005ddf
 8005c4c:	08005ddf 	.word	0x08005ddf
 8005c50:	08005ddf 	.word	0x08005ddf
 8005c54:	08005d9d 	.word	0x08005d9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f9aa 	bl	8005fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0208 	orr.w	r2, r2, #8
 8005c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0204 	bic.w	r2, r2, #4
 8005c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6999      	ldr	r1, [r3, #24]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	619a      	str	r2, [r3, #24]
      break;
 8005c96:	e0a3      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f9fc 	bl	800609c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6999      	ldr	r1, [r3, #24]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	021a      	lsls	r2, r3, #8
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	619a      	str	r2, [r3, #24]
      break;
 8005cd8:	e082      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fa53 	bl	800618c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0208 	orr.w	r2, r2, #8
 8005cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0204 	bic.w	r2, r2, #4
 8005d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69d9      	ldr	r1, [r3, #28]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	61da      	str	r2, [r3, #28]
      break;
 8005d18:	e062      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 faa9 	bl	8006278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69d9      	ldr	r1, [r3, #28]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	021a      	lsls	r2, r3, #8
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	61da      	str	r2, [r3, #28]
      break;
 8005d5a:	e041      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fae0 	bl	8006328 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0208 	orr.w	r2, r2, #8
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0204 	bic.w	r2, r2, #4
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d9a:	e021      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fb12 	bl	80063cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	021a      	lsls	r2, r3, #8
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ddc:	e000      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005dde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop

08005df4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e031      	b.n	8005e70 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fb28 	bl	8006474 <TIM_SlaveTimer_SetConfig>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e018      	b.n	8005e70 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e4c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e5c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a40      	ldr	r2, [pc, #256]	; (8005f8c <TIM_Base_SetConfig+0x114>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d013      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e96:	d00f      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a3d      	ldr	r2, [pc, #244]	; (8005f90 <TIM_Base_SetConfig+0x118>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00b      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a3c      	ldr	r2, [pc, #240]	; (8005f94 <TIM_Base_SetConfig+0x11c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d007      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3b      	ldr	r2, [pc, #236]	; (8005f98 <TIM_Base_SetConfig+0x120>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3a      	ldr	r2, [pc, #232]	; (8005f9c <TIM_Base_SetConfig+0x124>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d108      	bne.n	8005eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2f      	ldr	r2, [pc, #188]	; (8005f8c <TIM_Base_SetConfig+0x114>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d02b      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed8:	d027      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a2c      	ldr	r2, [pc, #176]	; (8005f90 <TIM_Base_SetConfig+0x118>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d023      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2b      	ldr	r2, [pc, #172]	; (8005f94 <TIM_Base_SetConfig+0x11c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01f      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2a      	ldr	r2, [pc, #168]	; (8005f98 <TIM_Base_SetConfig+0x120>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01b      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a29      	ldr	r2, [pc, #164]	; (8005f9c <TIM_Base_SetConfig+0x124>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d017      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a28      	ldr	r2, [pc, #160]	; (8005fa0 <TIM_Base_SetConfig+0x128>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a27      	ldr	r2, [pc, #156]	; (8005fa4 <TIM_Base_SetConfig+0x12c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00f      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a26      	ldr	r2, [pc, #152]	; (8005fa8 <TIM_Base_SetConfig+0x130>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00b      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a25      	ldr	r2, [pc, #148]	; (8005fac <TIM_Base_SetConfig+0x134>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d007      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a24      	ldr	r2, [pc, #144]	; (8005fb0 <TIM_Base_SetConfig+0x138>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d003      	beq.n	8005f2a <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a23      	ldr	r2, [pc, #140]	; (8005fb4 <TIM_Base_SetConfig+0x13c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d108      	bne.n	8005f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a0a      	ldr	r2, [pc, #40]	; (8005f8c <TIM_Base_SetConfig+0x114>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_Base_SetConfig+0xf8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	; (8005f9c <TIM_Base_SetConfig+0x124>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d103      	bne.n	8005f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	615a      	str	r2, [r3, #20]
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	40010400 	.word	0x40010400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800
 8005fac:	40001800 	.word	0x40001800
 8005fb0:	40001c00 	.word	0x40001c00
 8005fb4:	40002000 	.word	0x40002000

08005fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0201 	bic.w	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4b2b      	ldr	r3, [pc, #172]	; (8006090 <TIM_OC1_SetConfig+0xd8>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f023 0302 	bic.w	r3, r3, #2
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a21      	ldr	r2, [pc, #132]	; (8006094 <TIM_OC1_SetConfig+0xdc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_OC1_SetConfig+0x64>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a20      	ldr	r2, [pc, #128]	; (8006098 <TIM_OC1_SetConfig+0xe0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d10c      	bne.n	8006036 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 0308 	bic.w	r3, r3, #8
 8006022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f023 0304 	bic.w	r3, r3, #4
 8006034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a16      	ldr	r2, [pc, #88]	; (8006094 <TIM_OC1_SetConfig+0xdc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_OC1_SetConfig+0x8e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a15      	ldr	r2, [pc, #84]	; (8006098 <TIM_OC1_SetConfig+0xe0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d111      	bne.n	800606a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800604c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	fffeff8f 	.word	0xfffeff8f
 8006094:	40010000 	.word	0x40010000
 8006098:	40010400 	.word	0x40010400

0800609c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f023 0210 	bic.w	r2, r3, #16
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4b2e      	ldr	r3, [pc, #184]	; (8006180 <TIM_OC2_SetConfig+0xe4>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 0320 	bic.w	r3, r3, #32
 80060e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a23      	ldr	r2, [pc, #140]	; (8006184 <TIM_OC2_SetConfig+0xe8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC2_SetConfig+0x68>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a22      	ldr	r2, [pc, #136]	; (8006188 <TIM_OC2_SetConfig+0xec>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d10d      	bne.n	8006120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a18      	ldr	r2, [pc, #96]	; (8006184 <TIM_OC2_SetConfig+0xe8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_OC2_SetConfig+0x94>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a17      	ldr	r2, [pc, #92]	; (8006188 <TIM_OC2_SetConfig+0xec>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d113      	bne.n	8006158 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800613e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	feff8fff 	.word	0xfeff8fff
 8006184:	40010000 	.word	0x40010000
 8006188:	40010400 	.word	0x40010400

0800618c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4b2d      	ldr	r3, [pc, #180]	; (800626c <TIM_OC3_SetConfig+0xe0>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a22      	ldr	r2, [pc, #136]	; (8006270 <TIM_OC3_SetConfig+0xe4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_OC3_SetConfig+0x66>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a21      	ldr	r2, [pc, #132]	; (8006274 <TIM_OC3_SetConfig+0xe8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10d      	bne.n	800620e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800620c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a17      	ldr	r2, [pc, #92]	; (8006270 <TIM_OC3_SetConfig+0xe4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_OC3_SetConfig+0x92>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a16      	ldr	r2, [pc, #88]	; (8006274 <TIM_OC3_SetConfig+0xe8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d113      	bne.n	8006246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	fffeff8f 	.word	0xfffeff8f
 8006270:	40010000 	.word	0x40010000
 8006274:	40010400 	.word	0x40010400

08006278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4b1e      	ldr	r3, [pc, #120]	; (800631c <TIM_OC4_SetConfig+0xa4>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	031b      	lsls	r3, r3, #12
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a13      	ldr	r2, [pc, #76]	; (8006320 <TIM_OC4_SetConfig+0xa8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_OC4_SetConfig+0x68>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a12      	ldr	r2, [pc, #72]	; (8006324 <TIM_OC4_SetConfig+0xac>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d109      	bne.n	80062f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	019b      	lsls	r3, r3, #6
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	feff8fff 	.word	0xfeff8fff
 8006320:	40010000 	.word	0x40010000
 8006324:	40010400 	.word	0x40010400

08006328 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4b1b      	ldr	r3, [pc, #108]	; (80063c0 <TIM_OC5_SetConfig+0x98>)
 8006354:	4013      	ands	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006368:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	041b      	lsls	r3, r3, #16
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <TIM_OC5_SetConfig+0x9c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_OC5_SetConfig+0x5e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a11      	ldr	r2, [pc, #68]	; (80063c8 <TIM_OC5_SetConfig+0xa0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d109      	bne.n	800639a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	621a      	str	r2, [r3, #32]
}
 80063b4:	bf00      	nop
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	fffeff8f 	.word	0xfffeff8f
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40010400 	.word	0x40010400

080063cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4b1c      	ldr	r3, [pc, #112]	; (8006468 <TIM_OC6_SetConfig+0x9c>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	051b      	lsls	r3, r3, #20
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a13      	ldr	r2, [pc, #76]	; (800646c <TIM_OC6_SetConfig+0xa0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC6_SetConfig+0x60>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a12      	ldr	r2, [pc, #72]	; (8006470 <TIM_OC6_SetConfig+0xa4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d109      	bne.n	8006440 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006432:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	029b      	lsls	r3, r3, #10
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	feff8fff 	.word	0xfeff8fff
 800646c:	40010000 	.word	0x40010000
 8006470:	40010400 	.word	0x40010400

08006474 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4b3d      	ldr	r3, [pc, #244]	; (8006590 <TIM_SlaveTimer_SetConfig+0x11c>)
 800649c:	4013      	ands	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b70      	cmp	r3, #112	; 0x70
 80064b8:	d01a      	beq.n	80064f0 <TIM_SlaveTimer_SetConfig+0x7c>
 80064ba:	2b70      	cmp	r3, #112	; 0x70
 80064bc:	d860      	bhi.n	8006580 <TIM_SlaveTimer_SetConfig+0x10c>
 80064be:	2b60      	cmp	r3, #96	; 0x60
 80064c0:	d054      	beq.n	800656c <TIM_SlaveTimer_SetConfig+0xf8>
 80064c2:	2b60      	cmp	r3, #96	; 0x60
 80064c4:	d85c      	bhi.n	8006580 <TIM_SlaveTimer_SetConfig+0x10c>
 80064c6:	2b50      	cmp	r3, #80	; 0x50
 80064c8:	d046      	beq.n	8006558 <TIM_SlaveTimer_SetConfig+0xe4>
 80064ca:	2b50      	cmp	r3, #80	; 0x50
 80064cc:	d858      	bhi.n	8006580 <TIM_SlaveTimer_SetConfig+0x10c>
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	d019      	beq.n	8006506 <TIM_SlaveTimer_SetConfig+0x92>
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d854      	bhi.n	8006580 <TIM_SlaveTimer_SetConfig+0x10c>
 80064d6:	2b30      	cmp	r3, #48	; 0x30
 80064d8:	d054      	beq.n	8006584 <TIM_SlaveTimer_SetConfig+0x110>
 80064da:	2b30      	cmp	r3, #48	; 0x30
 80064dc:	d850      	bhi.n	8006580 <TIM_SlaveTimer_SetConfig+0x10c>
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d050      	beq.n	8006584 <TIM_SlaveTimer_SetConfig+0x110>
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d84c      	bhi.n	8006580 <TIM_SlaveTimer_SetConfig+0x10c>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d04c      	beq.n	8006584 <TIM_SlaveTimer_SetConfig+0x110>
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d04a      	beq.n	8006584 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80064ee:	e047      	b.n	8006580 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68d9      	ldr	r1, [r3, #12]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f000 f9d1 	bl	80068a6 <TIM_ETR_SetConfig>
      break;
 8006504:	e03f      	b.n	8006586 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b05      	cmp	r3, #5
 800650c:	d101      	bne.n	8006512 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e03a      	b.n	8006588 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6a1a      	ldr	r2, [r3, #32]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0201 	bic.w	r2, r2, #1
 8006528:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006538:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	621a      	str	r2, [r3, #32]
      break;
 8006556:	e016      	b.n	8006586 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6899      	ldr	r1, [r3, #8]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	461a      	mov	r2, r3
 8006566:	f000 f889 	bl	800667c <TIM_TI1_ConfigInputStage>
      break;
 800656a:	e00c      	b.n	8006586 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6899      	ldr	r1, [r3, #8]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	461a      	mov	r2, r3
 800657a:	f000 f8eb 	bl	8006754 <TIM_TI2_ConfigInputStage>
      break;
 800657e:	e002      	b.n	8006586 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8006584:	bf00      	nop
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	fffefff8 	.word	0xfffefff8

08006594 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f023 0201 	bic.w	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a28      	ldr	r2, [pc, #160]	; (8006660 <TIM_TI1_SetConfig+0xcc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01b      	beq.n	80065fa <TIM_TI1_SetConfig+0x66>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c8:	d017      	beq.n	80065fa <TIM_TI1_SetConfig+0x66>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4a25      	ldr	r2, [pc, #148]	; (8006664 <TIM_TI1_SetConfig+0xd0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <TIM_TI1_SetConfig+0x66>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a24      	ldr	r2, [pc, #144]	; (8006668 <TIM_TI1_SetConfig+0xd4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00f      	beq.n	80065fa <TIM_TI1_SetConfig+0x66>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4a23      	ldr	r2, [pc, #140]	; (800666c <TIM_TI1_SetConfig+0xd8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00b      	beq.n	80065fa <TIM_TI1_SetConfig+0x66>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a22      	ldr	r2, [pc, #136]	; (8006670 <TIM_TI1_SetConfig+0xdc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <TIM_TI1_SetConfig+0x66>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4a21      	ldr	r2, [pc, #132]	; (8006674 <TIM_TI1_SetConfig+0xe0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_TI1_SetConfig+0x66>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4a20      	ldr	r2, [pc, #128]	; (8006678 <TIM_TI1_SetConfig+0xe4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <TIM_TI1_SetConfig+0x6a>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <TIM_TI1_SetConfig+0x6c>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	e003      	b.n	800661e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	b2db      	uxtb	r3, r3
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f023 030a 	bic.w	r3, r3, #10
 8006638:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f003 030a 	and.w	r3, r3, #10
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40010000 	.word	0x40010000
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	40010400 	.word	0x40010400
 8006674:	40014000 	.word	0x40014000
 8006678:	40001800 	.word	0x40001800

0800667c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f023 0201 	bic.w	r2, r3, #1
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 030a 	bic.w	r3, r3, #10
 80066b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	621a      	str	r2, [r3, #32]
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066da:	b480      	push	{r7}
 80066dc:	b087      	sub	sp, #28
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f023 0210 	bic.w	r2, r3, #16
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006706:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	031b      	lsls	r3, r3, #12
 800671e:	b29b      	uxth	r3, r3
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800672c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	621a      	str	r2, [r3, #32]
}
 8006748:	bf00      	nop
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f023 0210 	bic.w	r2, r3, #16
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800677e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	031b      	lsls	r3, r3, #12
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006790:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	621a      	str	r2, [r3, #32]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 0303 	bic.w	r3, r3, #3
 80067e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006804:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006858:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800686a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	031b      	lsls	r3, r3, #12
 8006870:	b29b      	uxth	r3, r3
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800687e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	031b      	lsls	r3, r3, #12
 8006884:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	621a      	str	r2, [r3, #32]
}
 800689a:	bf00      	nop
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b087      	sub	sp, #28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	021a      	lsls	r2, r3, #8
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	609a      	str	r2, [r3, #8]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e06d      	b.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a30      	ldr	r2, [pc, #192]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d004      	beq.n	8006934 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a2f      	ldr	r2, [pc, #188]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d108      	bne.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800693a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a20      	ldr	r2, [pc, #128]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d022      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006972:	d01d      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1d      	ldr	r2, [pc, #116]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d018      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1c      	ldr	r2, [pc, #112]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d013      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1a      	ldr	r2, [pc, #104]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00e      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a15      	ldr	r2, [pc, #84]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d009      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a16      	ldr	r2, [pc, #88]	; (80069fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a15      	ldr	r2, [pc, #84]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d10c      	bne.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40010400 	.word	0x40010400
 80069f0:	40000400 	.word	0x40000400
 80069f4:	40000800 	.word	0x40000800
 80069f8:	40000c00 	.word	0x40000c00
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40001800 	.word	0x40001800

08006a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e040      	b.n	8006a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d106      	bne.n	8006a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fc f804 	bl	8002a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2224      	movs	r2, #36	; 0x24
 8006a30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0201 	bic.w	r2, r2, #1
 8006a40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f8c0 	bl	8006bc8 <UART_SetConfig>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e022      	b.n	8006a98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fb16 	bl	800708c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fb9d 	bl	80071d0 <UART_CheckIdleState>
 8006a96:	4603      	mov	r3, r0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	f040 8081 	bne.w	8006bbc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_UART_Transmit+0x26>
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e079      	b.n	8006bbe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_UART_Transmit+0x38>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e072      	b.n	8006bbe <HAL_UART_Transmit+0x11e>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2221      	movs	r2, #33	; 0x21
 8006aec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aee:	f7fc f85f 	bl	8002bb0 <HAL_GetTick>
 8006af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	88fa      	ldrh	r2, [r7, #6]
 8006af8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0c:	d108      	bne.n	8006b20 <HAL_UART_Transmit+0x80>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d104      	bne.n	8006b20 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	e003      	b.n	8006b28 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b30:	e02c      	b.n	8006b8c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2180      	movs	r1, #128	; 0x80
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 fb90 	bl	8007262 <UART_WaitOnFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e038      	b.n	8006bbe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	3302      	adds	r3, #2
 8006b66:	61bb      	str	r3, [r7, #24]
 8006b68:	e007      	b.n	8006b7a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	781a      	ldrb	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	3301      	adds	r3, #1
 8006b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1cc      	bne.n	8006b32 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2140      	movs	r1, #64	; 0x40
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fb5d 	bl	8007262 <UART_WaitOnFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e005      	b.n	8006bbe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4ba7      	ldr	r3, [pc, #668]	; (8006e90 <UART_SetConfig+0x2c8>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	6979      	ldr	r1, [r7, #20]
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a95      	ldr	r2, [pc, #596]	; (8006e94 <UART_SetConfig+0x2cc>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d120      	bne.n	8006c86 <UART_SetConfig+0xbe>
 8006c44:	4b94      	ldr	r3, [pc, #592]	; (8006e98 <UART_SetConfig+0x2d0>)
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d816      	bhi.n	8006c80 <UART_SetConfig+0xb8>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <UART_SetConfig+0x90>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c69 	.word	0x08006c69
 8006c5c:	08006c75 	.word	0x08006c75
 8006c60:	08006c6f 	.word	0x08006c6f
 8006c64:	08006c7b 	.word	0x08006c7b
 8006c68:	2301      	movs	r3, #1
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e14f      	b.n	8006f0e <UART_SetConfig+0x346>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	77fb      	strb	r3, [r7, #31]
 8006c72:	e14c      	b.n	8006f0e <UART_SetConfig+0x346>
 8006c74:	2304      	movs	r3, #4
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e149      	b.n	8006f0e <UART_SetConfig+0x346>
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e146      	b.n	8006f0e <UART_SetConfig+0x346>
 8006c80:	2310      	movs	r3, #16
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e143      	b.n	8006f0e <UART_SetConfig+0x346>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a84      	ldr	r2, [pc, #528]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d132      	bne.n	8006cf6 <UART_SetConfig+0x12e>
 8006c90:	4b81      	ldr	r3, [pc, #516]	; (8006e98 <UART_SetConfig+0x2d0>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	f003 030c 	and.w	r3, r3, #12
 8006c9a:	2b0c      	cmp	r3, #12
 8006c9c:	d828      	bhi.n	8006cf0 <UART_SetConfig+0x128>
 8006c9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <UART_SetConfig+0xdc>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006cd9 	.word	0x08006cd9
 8006ca8:	08006cf1 	.word	0x08006cf1
 8006cac:	08006cf1 	.word	0x08006cf1
 8006cb0:	08006cf1 	.word	0x08006cf1
 8006cb4:	08006ce5 	.word	0x08006ce5
 8006cb8:	08006cf1 	.word	0x08006cf1
 8006cbc:	08006cf1 	.word	0x08006cf1
 8006cc0:	08006cf1 	.word	0x08006cf1
 8006cc4:	08006cdf 	.word	0x08006cdf
 8006cc8:	08006cf1 	.word	0x08006cf1
 8006ccc:	08006cf1 	.word	0x08006cf1
 8006cd0:	08006cf1 	.word	0x08006cf1
 8006cd4:	08006ceb 	.word	0x08006ceb
 8006cd8:	2300      	movs	r3, #0
 8006cda:	77fb      	strb	r3, [r7, #31]
 8006cdc:	e117      	b.n	8006f0e <UART_SetConfig+0x346>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	77fb      	strb	r3, [r7, #31]
 8006ce2:	e114      	b.n	8006f0e <UART_SetConfig+0x346>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	77fb      	strb	r3, [r7, #31]
 8006ce8:	e111      	b.n	8006f0e <UART_SetConfig+0x346>
 8006cea:	2308      	movs	r3, #8
 8006cec:	77fb      	strb	r3, [r7, #31]
 8006cee:	e10e      	b.n	8006f0e <UART_SetConfig+0x346>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	77fb      	strb	r3, [r7, #31]
 8006cf4:	e10b      	b.n	8006f0e <UART_SetConfig+0x346>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a69      	ldr	r2, [pc, #420]	; (8006ea0 <UART_SetConfig+0x2d8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d120      	bne.n	8006d42 <UART_SetConfig+0x17a>
 8006d00:	4b65      	ldr	r3, [pc, #404]	; (8006e98 <UART_SetConfig+0x2d0>)
 8006d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d0a:	2b30      	cmp	r3, #48	; 0x30
 8006d0c:	d013      	beq.n	8006d36 <UART_SetConfig+0x16e>
 8006d0e:	2b30      	cmp	r3, #48	; 0x30
 8006d10:	d814      	bhi.n	8006d3c <UART_SetConfig+0x174>
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d009      	beq.n	8006d2a <UART_SetConfig+0x162>
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d810      	bhi.n	8006d3c <UART_SetConfig+0x174>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <UART_SetConfig+0x15c>
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d006      	beq.n	8006d30 <UART_SetConfig+0x168>
 8006d22:	e00b      	b.n	8006d3c <UART_SetConfig+0x174>
 8006d24:	2300      	movs	r3, #0
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e0f1      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	77fb      	strb	r3, [r7, #31]
 8006d2e:	e0ee      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d30:	2304      	movs	r3, #4
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e0eb      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d36:	2308      	movs	r3, #8
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e0e8      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e0e5      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a57      	ldr	r2, [pc, #348]	; (8006ea4 <UART_SetConfig+0x2dc>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d120      	bne.n	8006d8e <UART_SetConfig+0x1c6>
 8006d4c:	4b52      	ldr	r3, [pc, #328]	; (8006e98 <UART_SetConfig+0x2d0>)
 8006d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d56:	2bc0      	cmp	r3, #192	; 0xc0
 8006d58:	d013      	beq.n	8006d82 <UART_SetConfig+0x1ba>
 8006d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d5c:	d814      	bhi.n	8006d88 <UART_SetConfig+0x1c0>
 8006d5e:	2b80      	cmp	r3, #128	; 0x80
 8006d60:	d009      	beq.n	8006d76 <UART_SetConfig+0x1ae>
 8006d62:	2b80      	cmp	r3, #128	; 0x80
 8006d64:	d810      	bhi.n	8006d88 <UART_SetConfig+0x1c0>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <UART_SetConfig+0x1a8>
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d006      	beq.n	8006d7c <UART_SetConfig+0x1b4>
 8006d6e:	e00b      	b.n	8006d88 <UART_SetConfig+0x1c0>
 8006d70:	2300      	movs	r3, #0
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e0cb      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d76:	2302      	movs	r3, #2
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e0c8      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e0c5      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d82:	2308      	movs	r3, #8
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e0c2      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e0bf      	b.n	8006f0e <UART_SetConfig+0x346>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a45      	ldr	r2, [pc, #276]	; (8006ea8 <UART_SetConfig+0x2e0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d125      	bne.n	8006de4 <UART_SetConfig+0x21c>
 8006d98:	4b3f      	ldr	r3, [pc, #252]	; (8006e98 <UART_SetConfig+0x2d0>)
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006da6:	d017      	beq.n	8006dd8 <UART_SetConfig+0x210>
 8006da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dac:	d817      	bhi.n	8006dde <UART_SetConfig+0x216>
 8006dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db2:	d00b      	beq.n	8006dcc <UART_SetConfig+0x204>
 8006db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db8:	d811      	bhi.n	8006dde <UART_SetConfig+0x216>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <UART_SetConfig+0x1fe>
 8006dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dc2:	d006      	beq.n	8006dd2 <UART_SetConfig+0x20a>
 8006dc4:	e00b      	b.n	8006dde <UART_SetConfig+0x216>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	77fb      	strb	r3, [r7, #31]
 8006dca:	e0a0      	b.n	8006f0e <UART_SetConfig+0x346>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e09d      	b.n	8006f0e <UART_SetConfig+0x346>
 8006dd2:	2304      	movs	r3, #4
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	e09a      	b.n	8006f0e <UART_SetConfig+0x346>
 8006dd8:	2308      	movs	r3, #8
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e097      	b.n	8006f0e <UART_SetConfig+0x346>
 8006dde:	2310      	movs	r3, #16
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e094      	b.n	8006f0e <UART_SetConfig+0x346>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a30      	ldr	r2, [pc, #192]	; (8006eac <UART_SetConfig+0x2e4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d125      	bne.n	8006e3a <UART_SetConfig+0x272>
 8006dee:	4b2a      	ldr	r3, [pc, #168]	; (8006e98 <UART_SetConfig+0x2d0>)
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006df8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dfc:	d017      	beq.n	8006e2e <UART_SetConfig+0x266>
 8006dfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e02:	d817      	bhi.n	8006e34 <UART_SetConfig+0x26c>
 8006e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e08:	d00b      	beq.n	8006e22 <UART_SetConfig+0x25a>
 8006e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e0e:	d811      	bhi.n	8006e34 <UART_SetConfig+0x26c>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <UART_SetConfig+0x254>
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e18:	d006      	beq.n	8006e28 <UART_SetConfig+0x260>
 8006e1a:	e00b      	b.n	8006e34 <UART_SetConfig+0x26c>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e075      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e22:	2302      	movs	r3, #2
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e072      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e06f      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e2e:	2308      	movs	r3, #8
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e06c      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e34:	2310      	movs	r3, #16
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e069      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1c      	ldr	r2, [pc, #112]	; (8006eb0 <UART_SetConfig+0x2e8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d137      	bne.n	8006eb4 <UART_SetConfig+0x2ec>
 8006e44:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <UART_SetConfig+0x2d0>)
 8006e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e52:	d017      	beq.n	8006e84 <UART_SetConfig+0x2bc>
 8006e54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e58:	d817      	bhi.n	8006e8a <UART_SetConfig+0x2c2>
 8006e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5e:	d00b      	beq.n	8006e78 <UART_SetConfig+0x2b0>
 8006e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e64:	d811      	bhi.n	8006e8a <UART_SetConfig+0x2c2>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <UART_SetConfig+0x2aa>
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6e:	d006      	beq.n	8006e7e <UART_SetConfig+0x2b6>
 8006e70:	e00b      	b.n	8006e8a <UART_SetConfig+0x2c2>
 8006e72:	2300      	movs	r3, #0
 8006e74:	77fb      	strb	r3, [r7, #31]
 8006e76:	e04a      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e047      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e7e:	2304      	movs	r3, #4
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e044      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e84:	2308      	movs	r3, #8
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e041      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e8a:	2310      	movs	r3, #16
 8006e8c:	77fb      	strb	r3, [r7, #31]
 8006e8e:	e03e      	b.n	8006f0e <UART_SetConfig+0x346>
 8006e90:	efff69f3 	.word	0xefff69f3
 8006e94:	40011000 	.word	0x40011000
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	40004400 	.word	0x40004400
 8006ea0:	40004800 	.word	0x40004800
 8006ea4:	40004c00 	.word	0x40004c00
 8006ea8:	40005000 	.word	0x40005000
 8006eac:	40011400 	.word	0x40011400
 8006eb0:	40007800 	.word	0x40007800
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a71      	ldr	r2, [pc, #452]	; (8007080 <UART_SetConfig+0x4b8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d125      	bne.n	8006f0a <UART_SetConfig+0x342>
 8006ebe:	4b71      	ldr	r3, [pc, #452]	; (8007084 <UART_SetConfig+0x4bc>)
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ec8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ecc:	d017      	beq.n	8006efe <UART_SetConfig+0x336>
 8006ece:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ed2:	d817      	bhi.n	8006f04 <UART_SetConfig+0x33c>
 8006ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed8:	d00b      	beq.n	8006ef2 <UART_SetConfig+0x32a>
 8006eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ede:	d811      	bhi.n	8006f04 <UART_SetConfig+0x33c>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <UART_SetConfig+0x324>
 8006ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ee8:	d006      	beq.n	8006ef8 <UART_SetConfig+0x330>
 8006eea:	e00b      	b.n	8006f04 <UART_SetConfig+0x33c>
 8006eec:	2300      	movs	r3, #0
 8006eee:	77fb      	strb	r3, [r7, #31]
 8006ef0:	e00d      	b.n	8006f0e <UART_SetConfig+0x346>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	77fb      	strb	r3, [r7, #31]
 8006ef6:	e00a      	b.n	8006f0e <UART_SetConfig+0x346>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e007      	b.n	8006f0e <UART_SetConfig+0x346>
 8006efe:	2308      	movs	r3, #8
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e004      	b.n	8006f0e <UART_SetConfig+0x346>
 8006f04:	2310      	movs	r3, #16
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e001      	b.n	8006f0e <UART_SetConfig+0x346>
 8006f0a:	2310      	movs	r3, #16
 8006f0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f16:	d15b      	bne.n	8006fd0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006f18:	7ffb      	ldrb	r3, [r7, #31]
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d827      	bhi.n	8006f6e <UART_SetConfig+0x3a6>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <UART_SetConfig+0x35c>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f51 	.word	0x08006f51
 8006f2c:	08006f59 	.word	0x08006f59
 8006f30:	08006f6f 	.word	0x08006f6f
 8006f34:	08006f5f 	.word	0x08006f5f
 8006f38:	08006f6f 	.word	0x08006f6f
 8006f3c:	08006f6f 	.word	0x08006f6f
 8006f40:	08006f6f 	.word	0x08006f6f
 8006f44:	08006f67 	.word	0x08006f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f48:	f7fd f99e 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8006f4c:	61b8      	str	r0, [r7, #24]
        break;
 8006f4e:	e013      	b.n	8006f78 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f50:	f7fd f9ae 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8006f54:	61b8      	str	r0, [r7, #24]
        break;
 8006f56:	e00f      	b.n	8006f78 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f58:	4b4b      	ldr	r3, [pc, #300]	; (8007088 <UART_SetConfig+0x4c0>)
 8006f5a:	61bb      	str	r3, [r7, #24]
        break;
 8006f5c:	e00c      	b.n	8006f78 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f5e:	f7fd f8d1 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 8006f62:	61b8      	str	r0, [r7, #24]
        break;
 8006f64:	e008      	b.n	8006f78 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f6a:	61bb      	str	r3, [r7, #24]
        break;
 8006f6c:	e004      	b.n	8006f78 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	77bb      	strb	r3, [r7, #30]
        break;
 8006f76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d074      	beq.n	8007068 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	005a      	lsls	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	441a      	add	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2b0f      	cmp	r3, #15
 8006f9a:	d916      	bls.n	8006fca <UART_SetConfig+0x402>
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa2:	d212      	bcs.n	8006fca <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	f023 030f 	bic.w	r3, r3, #15
 8006fac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	89fb      	ldrh	r3, [r7, #14]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	89fa      	ldrh	r2, [r7, #14]
 8006fc6:	60da      	str	r2, [r3, #12]
 8006fc8:	e04e      	b.n	8007068 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	77bb      	strb	r3, [r7, #30]
 8006fce:	e04b      	b.n	8007068 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fd0:	7ffb      	ldrb	r3, [r7, #31]
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d827      	bhi.n	8007026 <UART_SetConfig+0x45e>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <UART_SetConfig+0x414>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	08007009 	.word	0x08007009
 8006fe4:	08007011 	.word	0x08007011
 8006fe8:	08007027 	.word	0x08007027
 8006fec:	08007017 	.word	0x08007017
 8006ff0:	08007027 	.word	0x08007027
 8006ff4:	08007027 	.word	0x08007027
 8006ff8:	08007027 	.word	0x08007027
 8006ffc:	0800701f 	.word	0x0800701f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007000:	f7fd f942 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007004:	61b8      	str	r0, [r7, #24]
        break;
 8007006:	e013      	b.n	8007030 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007008:	f7fd f952 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 800700c:	61b8      	str	r0, [r7, #24]
        break;
 800700e:	e00f      	b.n	8007030 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007010:	4b1d      	ldr	r3, [pc, #116]	; (8007088 <UART_SetConfig+0x4c0>)
 8007012:	61bb      	str	r3, [r7, #24]
        break;
 8007014:	e00c      	b.n	8007030 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007016:	f7fd f875 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 800701a:	61b8      	str	r0, [r7, #24]
        break;
 800701c:	e008      	b.n	8007030 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800701e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007022:	61bb      	str	r3, [r7, #24]
        break;
 8007024:	e004      	b.n	8007030 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	77bb      	strb	r3, [r7, #30]
        break;
 800702e:	bf00      	nop
    }

    if (pclk != 0U)
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d018      	beq.n	8007068 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	085a      	lsrs	r2, r3, #1
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	441a      	add	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	fbb2 f3f3 	udiv	r3, r2, r3
 8007048:	b29b      	uxth	r3, r3
 800704a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b0f      	cmp	r3, #15
 8007050:	d908      	bls.n	8007064 <UART_SetConfig+0x49c>
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007058:	d204      	bcs.n	8007064 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	60da      	str	r2, [r3, #12]
 8007062:	e001      	b.n	8007068 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007074:	7fbb      	ldrb	r3, [r7, #30]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40007c00 	.word	0x40007c00
 8007084:	40023800 	.word	0x40023800
 8007088:	00f42400 	.word	0x00f42400

0800708c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01a      	beq.n	80071a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800718a:	d10a      	bne.n	80071a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071e0:	f7fb fce6 	bl	8002bb0 <HAL_GetTick>
 80071e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d10e      	bne.n	8007212 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f82d 	bl	8007262 <UART_WaitOnFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e023      	b.n	800725a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b04      	cmp	r3, #4
 800721e:	d10e      	bne.n	800723e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f817 	bl	8007262 <UART_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e00d      	b.n	800725a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	4613      	mov	r3, r2
 8007270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007272:	e05e      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d05a      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800727c:	f7fb fc98 	bl	8002bb0 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <UART_WaitOnFlagUntilTimeout+0x30>
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d11b      	bne.n	80072ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e043      	b.n	8007352 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d02c      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e6:	d124      	bne.n	8007332 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007300:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0201 	bic.w	r2, r2, #1
 8007310:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2220      	movs	r2, #32
 8007316:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e00f      	b.n	8007352 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4013      	ands	r3, r2
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	bf0c      	ite	eq
 8007342:	2301      	moveq	r3, #1
 8007344:	2300      	movne	r3, #0
 8007346:	b2db      	uxtb	r3, r3
 8007348:	461a      	mov	r2, r3
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	429a      	cmp	r2, r3
 800734e:	d091      	beq.n	8007274 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <__libc_init_array>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4d0d      	ldr	r5, [pc, #52]	; (8007394 <__libc_init_array+0x38>)
 8007360:	4c0d      	ldr	r4, [pc, #52]	; (8007398 <__libc_init_array+0x3c>)
 8007362:	1b64      	subs	r4, r4, r5
 8007364:	10a4      	asrs	r4, r4, #2
 8007366:	2600      	movs	r6, #0
 8007368:	42a6      	cmp	r6, r4
 800736a:	d109      	bne.n	8007380 <__libc_init_array+0x24>
 800736c:	4d0b      	ldr	r5, [pc, #44]	; (800739c <__libc_init_array+0x40>)
 800736e:	4c0c      	ldr	r4, [pc, #48]	; (80073a0 <__libc_init_array+0x44>)
 8007370:	f000 f864 	bl	800743c <_init>
 8007374:	1b64      	subs	r4, r4, r5
 8007376:	10a4      	asrs	r4, r4, #2
 8007378:	2600      	movs	r6, #0
 800737a:	42a6      	cmp	r6, r4
 800737c:	d105      	bne.n	800738a <__libc_init_array+0x2e>
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	f855 3b04 	ldr.w	r3, [r5], #4
 8007384:	4798      	blx	r3
 8007386:	3601      	adds	r6, #1
 8007388:	e7ee      	b.n	8007368 <__libc_init_array+0xc>
 800738a:	f855 3b04 	ldr.w	r3, [r5], #4
 800738e:	4798      	blx	r3
 8007390:	3601      	adds	r6, #1
 8007392:	e7f2      	b.n	800737a <__libc_init_array+0x1e>
 8007394:	08007c60 	.word	0x08007c60
 8007398:	08007c60 	.word	0x08007c60
 800739c:	08007c60 	.word	0x08007c60
 80073a0:	08007c64 	.word	0x08007c64

080073a4 <memset>:
 80073a4:	4402      	add	r2, r0
 80073a6:	4603      	mov	r3, r0
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d100      	bne.n	80073ae <memset+0xa>
 80073ac:	4770      	bx	lr
 80073ae:	f803 1b01 	strb.w	r1, [r3], #1
 80073b2:	e7f9      	b.n	80073a8 <memset+0x4>

080073b4 <__utoa>:
 80073b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b6:	4c1f      	ldr	r4, [pc, #124]	; (8007434 <__utoa+0x80>)
 80073b8:	b08b      	sub	sp, #44	; 0x2c
 80073ba:	4605      	mov	r5, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	466e      	mov	r6, sp
 80073c0:	f104 0c20 	add.w	ip, r4, #32
 80073c4:	6820      	ldr	r0, [r4, #0]
 80073c6:	6861      	ldr	r1, [r4, #4]
 80073c8:	4637      	mov	r7, r6
 80073ca:	c703      	stmia	r7!, {r0, r1}
 80073cc:	3408      	adds	r4, #8
 80073ce:	4564      	cmp	r4, ip
 80073d0:	463e      	mov	r6, r7
 80073d2:	d1f7      	bne.n	80073c4 <__utoa+0x10>
 80073d4:	7921      	ldrb	r1, [r4, #4]
 80073d6:	7139      	strb	r1, [r7, #4]
 80073d8:	1e91      	subs	r1, r2, #2
 80073da:	6820      	ldr	r0, [r4, #0]
 80073dc:	6038      	str	r0, [r7, #0]
 80073de:	2922      	cmp	r1, #34	; 0x22
 80073e0:	f04f 0100 	mov.w	r1, #0
 80073e4:	d904      	bls.n	80073f0 <__utoa+0x3c>
 80073e6:	7019      	strb	r1, [r3, #0]
 80073e8:	460b      	mov	r3, r1
 80073ea:	4618      	mov	r0, r3
 80073ec:	b00b      	add	sp, #44	; 0x2c
 80073ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f0:	1e58      	subs	r0, r3, #1
 80073f2:	4684      	mov	ip, r0
 80073f4:	fbb5 f7f2 	udiv	r7, r5, r2
 80073f8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80073fc:	fb02 5617 	mls	r6, r2, r7, r5
 8007400:	4476      	add	r6, lr
 8007402:	460c      	mov	r4, r1
 8007404:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007408:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800740c:	462e      	mov	r6, r5
 800740e:	42b2      	cmp	r2, r6
 8007410:	f101 0101 	add.w	r1, r1, #1
 8007414:	463d      	mov	r5, r7
 8007416:	d9ed      	bls.n	80073f4 <__utoa+0x40>
 8007418:	2200      	movs	r2, #0
 800741a:	545a      	strb	r2, [r3, r1]
 800741c:	1919      	adds	r1, r3, r4
 800741e:	1aa5      	subs	r5, r4, r2
 8007420:	42aa      	cmp	r2, r5
 8007422:	dae2      	bge.n	80073ea <__utoa+0x36>
 8007424:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007428:	780e      	ldrb	r6, [r1, #0]
 800742a:	7006      	strb	r6, [r0, #0]
 800742c:	3201      	adds	r2, #1
 800742e:	f801 5901 	strb.w	r5, [r1], #-1
 8007432:	e7f4      	b.n	800741e <__utoa+0x6a>
 8007434:	08007c30 	.word	0x08007c30

08007438 <utoa>:
 8007438:	f7ff bfbc 	b.w	80073b4 <__utoa>

0800743c <_init>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	bf00      	nop
 8007440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007442:	bc08      	pop	{r3}
 8007444:	469e      	mov	lr, r3
 8007446:	4770      	bx	lr

08007448 <_fini>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	bf00      	nop
 800744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744e:	bc08      	pop	{r3}
 8007450:	469e      	mov	lr, r3
 8007452:	4770      	bx	lr
