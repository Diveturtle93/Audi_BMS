
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d60  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800977c  0800977c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800977c  0800977c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009784  08009784  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009788  08009788  00019788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800978c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000000c  08009798  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08009798  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f3a  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ed0  00000000  00000000  00039f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003de48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf31  00000000  00000000  00040560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d25c  00000000  00000000  0006d491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a0e9  00000000  00000000  0008a6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001947d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052e0  00000000  00000000  00194828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08008f40 	.word	0x08008f40

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08008f40 	.word	0x08008f40

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <uartTransmit+0x24>)
 8000562:	f007 ffd5 	bl	8008510 <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000258 	.word	0x20000258

08000574 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f008 fcd8 	bl	8008f3c <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartTransmitNumber+0x3c>)
 80005a4:	f007 ffb4 	bl	8008510 <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000258 	.word	0x20000258

080005b4 <set_IsoSpiState>:
//----------------------------------------------------------------------

// Setze Statemaschine IsoSPI
//----------------------------------------------------------------------
void set_IsoSpiState(IsoSpi_State newState)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	IsoSpiState = newState;													// Neuen Status setzen
 80005be:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <set_IsoSpiState+0x24>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	7013      	strb	r3, [r2, #0]
	timeIsoSpiState = millis();												// Zeit speichern
 80005c4:	f001 fdd2 	bl	800216c <millis>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <set_IsoSpiState+0x28>)
 80005cc:	6013      	str	r3, [r2, #0]
		default:
			ITM_SendString("#RED#FEHLER\n");
			break;
	}
#endif
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	2000002c 	.word	0x2000002c

080005e0 <IsoSPI_statemaschine>:
//----------------------------------------------------------------------

// Setze Statemaschine ISOSpi
//----------------------------------------------------------------------
void IsoSPI_statemaschine(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	switch (IsoSpiState)
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <IsoSPI_statemaschine+0x68>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d825      	bhi.n	8000638 <IsoSPI_statemaschine+0x58>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <IsoSPI_statemaschine+0x14>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000639 	.word	0x08000639
 80005f8:	08000621 	.word	0x08000621
 80005fc:	08000639 	.word	0x08000639
 8000600:	08000609 	.word	0x08000609
 8000604:	08000639 	.word	0x08000639
	{
		case IsoIdle:
			break;

		case IsoGetReady:
			if (millis() - timeIsoSpiState > 1)
 8000608:	f001 fdb0 	bl	800216c <millis>
 800060c:	4602      	mov	r2, r0
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <IsoSPI_statemaschine+0x6c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	2b01      	cmp	r3, #1
 8000616:	d911      	bls.n	800063c <IsoSPI_statemaschine+0x5c>
			{
				IsoSpiState = IsoReady;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <IsoSPI_statemaschine+0x68>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800061e:	e00d      	b.n	800063c <IsoSPI_statemaschine+0x5c>

		case IsoReady:
			if (millis() - timeIsoSpiState > 4)
 8000620:	f001 fda4 	bl	800216c <millis>
 8000624:	4602      	mov	r2, r0
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <IsoSPI_statemaschine+0x6c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	2b04      	cmp	r3, #4
 800062e:	d907      	bls.n	8000640 <IsoSPI_statemaschine+0x60>
			{
				IsoSpiState = IsoIdle;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <IsoSPI_statemaschine+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000636:	e003      	b.n	8000640 <IsoSPI_statemaschine+0x60>

		case IsoSleep:
			break;

		default:
			break;
 8000638:	bf00      	nop
 800063a:	e002      	b.n	8000642 <IsoSPI_statemaschine+0x62>
			break;
 800063c:	bf00      	nop
 800063e:	e000      	b.n	8000642 <IsoSPI_statemaschine+0x62>
			break;
 8000640:	bf00      	nop
	}
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	2000002c 	.word	0x2000002c

08000650 <get_IsoSpiState>:
//----------------------------------------------------------------------

// Bekomme aktuellen State ISOSpi
//----------------------------------------------------------------------
IsoSpi_State get_IsoSpiState(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	// Statemaschine abfragen
	IsoSPI_statemaschine();
 8000654:	f7ff ffc4 	bl	80005e0 <IsoSPI_statemaschine>

	// Aktuellen State ausgeben
	return IsoSpiState;
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <get_IsoSpiState+0x10>)
 800065a:	781b      	ldrb	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000028 	.word	0x20000028

08000664 <IsoSPI_wakeup>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void IsoSPI_wakeup(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
#ifdef DEBUG_ISOSPI
	ITM_SendString("IsoSPI wird geweckt.\n");
#endif

	// Wenn Statemaschine Idle ist, dann IsoSPI wecken
	if (get_IsoSpiState() == IsoIdle)
 800066a:	f7ff fff1 	bl	8000650 <get_IsoSpiState>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d123      	bne.n	80006bc <IsoSPI_wakeup+0x58>
	{
		for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000674:	2300      	movs	r3, #0
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	e014      	b.n	80006a4 <IsoSPI_wakeup+0x40>
		{
			// ISOCS einschalten
			ISOCS_ENABLE();														// Chip-Select einschalten
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <IsoSPI_wakeup+0x60>)
 8000682:	f004 fa57 	bl	8004b34 <HAL_GPIO_WritePin>

			// Dummy Paket senden
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken, isoSPI braucht Zeit bis ready
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	2201      	movs	r2, #1
 800068a:	21aa      	movs	r1, #170	; 0xaa
 800068c:	480e      	ldr	r0, [pc, #56]	; (80006c8 <IsoSPI_wakeup+0x64>)
 800068e:	f005 fc3c 	bl	8005f0a <HAL_SPI_Transmit>

			// ISOCS ausschalten
			ISOCS_DISABLE();													// Chip-Select ausschalten
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <IsoSPI_wakeup+0x60>)
 800069a:	f004 fa4b 	bl	8004b34 <HAL_GPIO_WritePin>
		for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	3301      	adds	r3, #1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0e7      	beq.n	800067a <IsoSPI_wakeup+0x16>
		}

		// Setze Statemaschine auf GetReady
		set_IsoSpiState(IsoGetReady);
 80006aa:	2003      	movs	r0, #3
 80006ac:	f7ff ff82 	bl	80005b4 <set_IsoSpiState>

		// Warten das bis Ready
		while(get_IsoSpiState() == IsoGetReady);
 80006b0:	bf00      	nop
 80006b2:	f7ff ffcd 	bl	8000650 <get_IsoSpiState>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d0fa      	beq.n	80006b2 <IsoSPI_wakeup+0x4e>
	}
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	2000015c 	.word	0x2000015c

080006cc <IsoSPI_cmd>:
//----------------------------------------------------------------------

// Sende Command
//----------------------------------------------------------------------
void IsoSPI_cmd(uint8_t* command)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von IsoSPI_cmd\n");
#endif

	// Verzoegerungszeit zum wecken des LTC6811
	IsoSPI_wakeup();
 80006d4:	f7ff ffc6 	bl	8000664 <IsoSPI_wakeup>

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <IsoSPI_cmd+0x7c>)
 80006e0:	f004 fa28 	bl	8004b34 <HAL_GPIO_WritePin>

	// Setze State auf Aktiv
	set_IsoSpiState(IsoActive);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f7ff ff65 	bl	80005b4 <set_IsoSpiState>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, command, 4, 100);
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2204      	movs	r2, #4
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	4816      	ldr	r0, [pc, #88]	; (800074c <IsoSPI_cmd+0x80>)
 80006f2:	f005 fc0a 	bl	8005f0a <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (((command[0] << 8) | command[1]) == STCOMM)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	3201      	adds	r2, #1
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	4313      	orrs	r3, r2
 8000704:	f240 7223 	movw	r2, #1827	; 0x723
 8000708:	4293      	cmp	r3, r2
 800070a:	d10f      	bne.n	800072c <IsoSPI_cmd+0x60>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	e009      	b.n	8000726 <IsoSPI_cmd+0x5a>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2201      	movs	r2, #1
 8000718:	21aa      	movs	r1, #170	; 0xaa
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <IsoSPI_cmd+0x80>)
 800071c:	f005 fbf5 	bl	8005f0a <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	3301      	adds	r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	2b08      	cmp	r3, #8
 800072a:	d9f2      	bls.n	8000712 <IsoSPI_cmd+0x46>
		}
	}

	// ISOCS ausschalten
	ISOCS_DISABLE();
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <IsoSPI_cmd+0x7c>)
 8000734:	f004 f9fe 	bl	8004b34 <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Setze State auf Ready
	set_IsoSpiState(IsoReady);
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff3b 	bl	80005b4 <set_IsoSpiState>
		ITM_SendChar(' ');
		ITM_SendNumber(command[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000
 800074c:	2000015c 	.word	0x2000015c

08000750 <IsoSPI_read>:
//----------------------------------------------------------------------

// Lese Daten
//----------------------------------------------------------------------
void IsoSPI_read(uint8_t* command, uint8_t* data)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von Receive LTC6811.\n");
#endif

	// Verzoegerungszeit zum wecken des IsoSPI
	IsoSPI_wakeup();
 800075a:	f7ff ff83 	bl	8000664 <IsoSPI_wakeup>

	// ISOCS einschalten
	ISOCS_ENABLE();
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	4815      	ldr	r0, [pc, #84]	; (80007bc <IsoSPI_read+0x6c>)
 8000766:	f004 f9e5 	bl	8004b34 <HAL_GPIO_WritePin>

	// Setze State auf Aktiv
	set_IsoSpiState(IsoActive);
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ff22 	bl	80005b4 <set_IsoSpiState>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, command, 4, 100);
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	2204      	movs	r2, #4
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <IsoSPI_read+0x70>)
 8000778:	f005 fbc7 	bl	8005f0a <HAL_SPI_Transmit>

	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e00c      	b.n	800079c <IsoSPI_read+0x4c>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	461a      	mov	r2, r3
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	1899      	adds	r1, r3, r2
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2208      	movs	r2, #8
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <IsoSPI_read+0x70>)
 8000792:	f005 fd28 	bl	80061e6 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	3301      	adds	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0ef      	beq.n	8000782 <IsoSPI_read+0x32>
	}

	// ISOCS ausschalten
	ISOCS_DISABLE();
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <IsoSPI_read+0x6c>)
 80007aa:	f004 f9c3 	bl	8004b34 <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Setze Statemaschine auf Ready;
	set_IsoSpiState(IsoReady);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff ff00 	bl	80005b4 <set_IsoSpiState>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000
 80007c0:	2000015c 	.word	0x2000015c

080007c4 <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	80fb      	strh	r3, [r7, #6]
 80007d0:	4613      	mov	r3, r2
 80007d2:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 80007d4:	88fa      	ldrh	r2, [r7, #6]
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d904      	bls.n	80007e6 <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 80007dc:	88fa      	ldrh	r2, [r7, #6]
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	e009      	b.n	80007fa <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d204      	bcs.n	80007f8 <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 80007ee:	88ba      	ldrh	r2, [r7, #4]
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	e000      	b.n	80007fa <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 80007f8:	2300      	movs	r3, #0
	}
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <set_ltc6811_state>:
//----------------------------------------------------------------------

// Setze Statemaschine von LTC6811
//----------------------------------------------------------------------
void set_ltc6811_state(LTC6811_State newState)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	Ltc6811State = newState;												// Neuen Status setzen
 8000812:	4a06      	ldr	r2, [pc, #24]	; (800082c <set_ltc6811_state+0x24>)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	7013      	strb	r3, [r2, #0]
	timeLtc6811State = millis();											// Zeit speichern
 8000818:	f001 fca8 	bl	800216c <millis>
 800081c:	4603      	mov	r3, r0
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <set_ltc6811_state+0x28>)
 8000820:	6013      	str	r3, [r2, #0]
		default:
			ITM_SendString("#RED#FEHLER\n");
			break;
	}
#endif
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000038 	.word	0x20000038
 8000830:	2000003c 	.word	0x2000003c

08000834 <ltc6811_statemaschine>:
//----------------------------------------------------------------------

// Statemaschine von LTC6811
//----------------------------------------------------------------------
void ltc6811_statemaschine(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
	// Messzeit feststellen, Messzeit immer fuer alle Zellen + GPIOs (Das ist eine Abschaetzung zur sicheren Seite)
	uint32_t measurementDuration; // in us
	uint16_t samplingMode = MD73;
 800083a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083e:	807b      	strh	r3, [r7, #2]

	switch (Ltc6811State)
 8000840:	4b6d      	ldr	r3, [pc, #436]	; (80009f8 <ltc6811_statemaschine+0x1c4>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b06      	cmp	r3, #6
 8000846:	f200 80c7 	bhi.w	80009d8 <ltc6811_statemaschine+0x1a4>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <ltc6811_statemaschine+0x1c>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800086d 	.word	0x0800086d
 8000854:	080008d1 	.word	0x080008d1
 8000858:	0800089f 	.word	0x0800089f
 800085c:	080009c1 	.word	0x080009c1
 8000860:	080009a9 	.word	0x080009a9
 8000864:	080009d9 	.word	0x080009d9
 8000868:	080009d9 	.word	0x080009d9
	{
		case LTCSleep:
			break;

		case LTCStandby:
			if (timeLtc6811State + 1800 < millis())							// ms
 800086c:	4b63      	ldr	r3, [pc, #396]	; (80009fc <ltc6811_statemaschine+0x1c8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f503 64e1 	add.w	r4, r3, #1800	; 0x708
 8000874:	f001 fc7a 	bl	800216c <millis>
 8000878:	4603      	mov	r3, r0
 800087a:	429c      	cmp	r4, r3
 800087c:	d203      	bcs.n	8000886 <ltc6811_statemaschine+0x52>
			{
				// 1.8s ist in diesem Zustand vergangen, Watchdog koennte ausgeloest haben (t_sleep)
				set_ltc6811_state(LTCSleep);
 800087e:	2006      	movs	r0, #6
 8000880:	f7ff ffc2 	bl	8000808 <set_ltc6811_state>
				break;
 8000884:	e0b3      	b.n	80009ee <ltc6811_statemaschine+0x1ba>
			}

			if (ltc6811_Conf.REFON == 1)
 8000886:	4b5e      	ldr	r3, [pc, #376]	; (8000a00 <ltc6811_statemaschine+0x1cc>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	f000 80a3 	beq.w	80009dc <ltc6811_statemaschine+0x1a8>
			{
				set_ltc6811_state(LTCRefup);
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff ffb6 	bl	8000808 <set_ltc6811_state>
			}
			break;
 800089c:	e09e      	b.n	80009dc <ltc6811_statemaschine+0x1a8>

		case LTCRefup:
			if (ltc6811_Conf.REFON == 1)
 800089e:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <ltc6811_statemaschine+0x1cc>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00d      	beq.n	80008c8 <ltc6811_statemaschine+0x94>
			{
				if (timeLtc6811State + 1800 < millis())						// ms
 80008ac:	4b53      	ldr	r3, [pc, #332]	; (80009fc <ltc6811_statemaschine+0x1c8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f503 64e1 	add.w	r4, r3, #1800	; 0x708
 80008b4:	f001 fc5a 	bl	800216c <millis>
 80008b8:	4603      	mov	r3, r0
 80008ba:	429c      	cmp	r4, r3
 80008bc:	f080 8090 	bcs.w	80009e0 <ltc6811_statemaschine+0x1ac>
				{
					// 1.8s ist in diesem Zustand vergangen, Watchdog koennte ausgeloest haben (t_sleep)
					set_ltc6811_state(LTCSleep);
 80008c0:	2006      	movs	r0, #6
 80008c2:	f7ff ffa1 	bl	8000808 <set_ltc6811_state>
			}
			else
			{
				set_ltc6811_state(LTCStandby);
			}
			break;
 80008c6:	e08b      	b.n	80009e0 <ltc6811_statemaschine+0x1ac>
				set_ltc6811_state(LTCStandby);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff ff9d 	bl	8000808 <set_ltc6811_state>
			break;
 80008ce:	e087      	b.n	80009e0 <ltc6811_statemaschine+0x1ac>

		case LTCMeasure:
			if (ltc6811_Conf.ADCOPT == 0)
 80008d0:	4b4b      	ldr	r3, [pc, #300]	; (8000a00 <ltc6811_statemaschine+0x1cc>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d121      	bne.n	8000922 <ltc6811_statemaschine+0xee>
			{
				switch (samplingMode)
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80008e4:	d012      	beq.n	800090c <ltc6811_statemaschine+0xd8>
 80008e6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80008ea:	dc16      	bgt.n	800091a <ltc6811_statemaschine+0xe6>
 80008ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f0:	d009      	beq.n	8000906 <ltc6811_statemaschine+0xd2>
 80008f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f6:	dc10      	bgt.n	800091a <ltc6811_statemaschine+0xe6>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00b      	beq.n	8000914 <ltc6811_statemaschine+0xe0>
 80008fc:	2b80      	cmp	r3, #128	; 0x80
 80008fe:	d10c      	bne.n	800091a <ltc6811_statemaschine+0xe6>
				{
					case MD2714:
						//measurementDuration = 1503;							// us
						measurementDuration = 2;							// ms
 8000900:	2302      	movs	r3, #2
 8000902:	607b      	str	r3, [r7, #4]
						break;
 8000904:	e035      	b.n	8000972 <ltc6811_statemaschine+0x13e>

					case MD73:
						//measurementDuration = 3133;							// us
						measurementDuration = 4;							// ms
 8000906:	2304      	movs	r3, #4
 8000908:	607b      	str	r3, [r7, #4]
						break;
 800090a:	e032      	b.n	8000972 <ltc6811_statemaschine+0x13e>

					case MD262:
						//measurementDuration = 268442;						// us
						measurementDuration = 269;							// ms
 800090c:	f240 130d 	movw	r3, #269	; 0x10d
 8000910:	607b      	str	r3, [r7, #4]
						break;
 8000912:	e02e      	b.n	8000972 <ltc6811_statemaschine+0x13e>

					case MD1422:
						//measurementDuration = 17096;						// us
						measurementDuration = 17;							// ms
 8000914:	2311      	movs	r3, #17
 8000916:	607b      	str	r3, [r7, #4]
						break;
 8000918:	e02b      	b.n	8000972 <ltc6811_statemaschine+0x13e>

					default:
						//measurementDuration = 300000;						// us Dummy Wert
						measurementDuration = 300;							// ms
 800091a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800091e:	607b      	str	r3, [r7, #4]
						break;
 8000920:	e027      	b.n	8000972 <ltc6811_statemaschine+0x13e>
				}
			}
			else if (ltc6811_Conf.ADCOPT == 1)
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <ltc6811_statemaschine+0x1cc>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d020      	beq.n	8000972 <ltc6811_statemaschine+0x13e>
			{
				switch (samplingMode)
 8000930:	887b      	ldrh	r3, [r7, #2]
 8000932:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000936:	d012      	beq.n	800095e <ltc6811_statemaschine+0x12a>
 8000938:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800093c:	dc15      	bgt.n	800096a <ltc6811_statemaschine+0x136>
 800093e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000942:	d009      	beq.n	8000958 <ltc6811_statemaschine+0x124>
 8000944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000948:	dc0f      	bgt.n	800096a <ltc6811_statemaschine+0x136>
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00a      	beq.n	8000964 <ltc6811_statemaschine+0x130>
 800094e:	2b80      	cmp	r3, #128	; 0x80
 8000950:	d10b      	bne.n	800096a <ltc6811_statemaschine+0x136>
				{
					case MD2714:
						//measurementDuration = 1736;							// us
						measurementDuration = 2;							// ms
 8000952:	2302      	movs	r3, #2
 8000954:	607b      	str	r3, [r7, #4]
						break;
 8000956:	e00c      	b.n	8000972 <ltc6811_statemaschine+0x13e>

					case MD73:
						//measurementDuration = 4064;							// us
						measurementDuration = 4;							// ms
 8000958:	2304      	movs	r3, #4
 800095a:	607b      	str	r3, [r7, #4]
						break;
 800095c:	e009      	b.n	8000972 <ltc6811_statemaschine+0x13e>

					case MD262:
						//measurementDuration = 9648;							// us
						measurementDuration = 10;							// ms
 800095e:	230a      	movs	r3, #10
 8000960:	607b      	str	r3, [r7, #4]
						break;
 8000962:	e006      	b.n	8000972 <ltc6811_statemaschine+0x13e>

					case MD1422:
						//measurementDuration = 5925;							// us
						measurementDuration = 6;							// ms
 8000964:	2306      	movs	r3, #6
 8000966:	607b      	str	r3, [r7, #4]
						break;
 8000968:	e003      	b.n	8000972 <ltc6811_statemaschine+0x13e>

					default:
						//measurementDuration = 300000;						// us Dummy Wert
						measurementDuration = 300;							// ms
 800096a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800096e:	607b      	str	r3, [r7, #4]
						break;
 8000970:	bf00      	nop
			{

			}

			// Wenn die Referenz zuerst eingeschaltet werden muss, dauert die Messung 5ms (t_Refup) laenger
			measurementDuration = measurementDuration + 5;					// ms
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3305      	adds	r3, #5
 8000976:	607b      	str	r3, [r7, #4]

			if (timeLtc6811State + measurementDuration < millis())			// ms
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <ltc6811_statemaschine+0x1c8>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	18d4      	adds	r4, r2, r3
 8000980:	f001 fbf4 	bl	800216c <millis>
 8000984:	4603      	mov	r3, r0
 8000986:	429c      	cmp	r4, r3
 8000988:	d22c      	bcs.n	80009e4 <ltc6811_statemaschine+0x1b0>
			{
				// Messung ist beendet
				if (ltc6811_Conf.REFON == 1)
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <ltc6811_statemaschine+0x1cc>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d003      	beq.n	80009a0 <ltc6811_statemaschine+0x16c>
				{
					set_ltc6811_state(LTCRefup);
 8000998:	2002      	movs	r0, #2
 800099a:	f7ff ff35 	bl	8000808 <set_ltc6811_state>
				{
					set_ltc6811_state(LTCStandby);
				}
			}

			break;
 800099e:	e021      	b.n	80009e4 <ltc6811_statemaschine+0x1b0>
					set_ltc6811_state(LTCStandby);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff31 	bl	8000808 <set_ltc6811_state>
			break;
 80009a6:	e01d      	b.n	80009e4 <ltc6811_statemaschine+0x1b0>

		case LTCWakeup:
			// 500us (t_Wakeup) warten bis Chip aufgewacht ist
			if (timeLtc6811State + 1 < millis())							// ms
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <ltc6811_statemaschine+0x1c8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1c5c      	adds	r4, r3, #1
 80009ae:	f001 fbdd 	bl	800216c <millis>
 80009b2:	4603      	mov	r3, r0
 80009b4:	429c      	cmp	r4, r3
 80009b6:	d217      	bcs.n	80009e8 <ltc6811_statemaschine+0x1b4>
			{
				set_ltc6811_state(LTCStandby);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff ff25 	bl	8000808 <set_ltc6811_state>
			}
			break;
 80009be:	e013      	b.n	80009e8 <ltc6811_statemaschine+0x1b4>

		case LTCSetRefup:
			// 5ms (t_Refup) warten bis Referenz eingeschaltet ist
			if (timeLtc6811State + 5 < millis())							// ms
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <ltc6811_statemaschine+0x1c8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1d5c      	adds	r4, r3, #5
 80009c6:	f001 fbd1 	bl	800216c <millis>
 80009ca:	4603      	mov	r3, r0
 80009cc:	429c      	cmp	r4, r3
 80009ce:	d20d      	bcs.n	80009ec <ltc6811_statemaschine+0x1b8>
			{
				set_ltc6811_state(LTCRefup);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff ff19 	bl	8000808 <set_ltc6811_state>
			}
			break;
 80009d6:	e009      	b.n	80009ec <ltc6811_statemaschine+0x1b8>

		default:
			break;
 80009d8:	bf00      	nop
 80009da:	e008      	b.n	80009ee <ltc6811_statemaschine+0x1ba>
			break;
 80009dc:	bf00      	nop
 80009de:	e006      	b.n	80009ee <ltc6811_statemaschine+0x1ba>
			break;
 80009e0:	bf00      	nop
 80009e2:	e004      	b.n	80009ee <ltc6811_statemaschine+0x1ba>
			break;
 80009e4:	bf00      	nop
 80009e6:	e002      	b.n	80009ee <ltc6811_statemaschine+0x1ba>
			break;
 80009e8:	bf00      	nop
 80009ea:	e000      	b.n	80009ee <ltc6811_statemaschine+0x1ba>
			break;
 80009ec:	bf00      	nop
	}
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000038 	.word	0x20000038
 80009fc:	2000003c 	.word	0x2000003c
 8000a00:	20000030 	.word	0x20000030

08000a04 <get_ltc6811_state>:
//----------------------------------------------------------------------

// Bekomme aktuellen State LTC6811
//----------------------------------------------------------------------
LTC6811_State get_ltc6811_state(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	// Statemaschine abfragen
	ltc6811_statemaschine();
 8000a08:	f7ff ff14 	bl	8000834 <ltc6811_statemaschine>

	// Aktuellen State ausgeben
	return Ltc6811State;
 8000a0c:	4b01      	ldr	r3, [pc, #4]	; (8000a14 <get_ltc6811_state+0x10>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000038 	.word	0x20000038

08000a18 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);												// CRC berechnen
 8000a22:	88fb      	ldrh	r3, [r7, #6]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f892 	bl	8000b4e <peccommand>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	81fb      	strh	r3, [r7, #14]

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000a44:	89fb      	ldrh	r3, [r7, #14]
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	f023 0301 	bic.w	r3, r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	72fb      	strb	r3, [r7, #11]

	if (get_ltc6811_state() == LTCStandby)
 8000a5a:	f7ff ffd3 	bl	8000a04 <get_ltc6811_state>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d108      	bne.n	8000a76 <ltc6811+0x5e>
	{
		set_ltc6811_state(LTCSetRefup);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f7ff fecf 	bl	8000808 <set_ltc6811_state>
		while (get_ltc6811_state() == LTCSetRefup);
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffca 	bl	8000a04 <get_ltc6811_state>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d0fa      	beq.n	8000a6c <ltc6811+0x54>
	}

	// Befehl ueber IsoSPI senden
	IsoSPI_cmd(&cmd[0]);													// Sende Befehl
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fe26 	bl	80006cc <IsoSPI_cmd>

	// Setze Statemaschine auf Messen
	if ((command & ADAX) || (command & ADCVC) || (command & ADCVAX) || (command & ADSTAT))
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	f403 638c 	and.w	r3, r3, #1120	; 0x460
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10f      	bne.n	8000aaa <ltc6811+0x92>
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	f403 7318 	and.w	r3, r3, #608	; 0x260
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10a      	bne.n	8000aaa <ltc6811+0x92>
 8000a94:	88fa      	ldrh	r2, [r7, #6]
 8000a96:	f240 436f 	movw	r3, #1135	; 0x46f
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <ltc6811+0x92>
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	f403 638d 	and.w	r3, r3, #1128	; 0x468
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d002      	beq.n	8000ab0 <ltc6811+0x98>
	{
		set_ltc6811_state(LTCMeasure);
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff feac 	bl	8000808 <set_ltc6811_state>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	80fb      	strh	r3, [r7, #6]
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
#ifdef DEBUG_LTC6811
	uint16_t tmp;															// Zwischenspeicher fuer Pruefung CRC
#endif
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f841 	bl	8000b4e <peccommand>
 8000acc:	4603      	mov	r3, r0
 8000ace:	81bb      	strh	r3, [r7, #12]

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0307 	and.w	r3, r3, #7
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000ae6:	89bb      	ldrh	r3, [r7, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000af0:	89bb      	ldrh	r3, [r7, #12]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f023 0301 	bic.w	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	72fb      	strb	r3, [r7, #11]

	while (get_ltc6811_state() == LTCMeasure);								// Warten solange bis LTC fertig mit Messen ist
 8000afc:	bf00      	nop
 8000afe:	f7ff ff81 	bl	8000a04 <get_ltc6811_state>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d0fa      	beq.n	8000afe <ltc6811_read+0x46>

	// Befehl ueber IsoSPI senden
	IsoSPI_read(&cmd[0], &data[0]);											// Sende Daten
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	6839      	ldr	r1, [r7, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe1e 	bl	8000750 <IsoSPI_read>

	// Pec zuruecksetzen
	pec = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	81bb      	strh	r3, [r7, #12]

	// Pec pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	e00f      	b.n	8000b3e <ltc6811_read+0x86>
			uartTransmit("\n", 1);
		}
#endif

		// Pec zuruecksetzen
		pec = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	81bb      	strh	r3, [r7, #12]

		// Variante 2, Daten inklusive Pec mit durch Peccheck pruefen, ob Ergebnis gleich 0 ist
		pec = peccheck(8, &data[i*8]);
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	461a      	mov	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2008      	movs	r0, #8
 8000b30:	f000 f85c 	bl	8000bec <peccheck>
 8000b34:	4603      	mov	r3, r0
 8000b36:	81bb      	strh	r3, [r7, #12]
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0ec      	beq.n	8000b1e <ltc6811_read+0x66>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 f805 	bl	8000b84 <peclookup>
 8000b7a:	4603      	mov	r3, r0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 8000b90:	2310      	movs	r3, #16
 8000b92:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	737b      	strb	r3, [r7, #13]
 8000b98:	e019      	b.n	8000bce <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 8000b9a:	89fb      	ldrh	r3, [r7, #14]
 8000b9c:	09db      	lsrs	r3, r3, #7
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	7b7b      	ldrb	r3, [r7, #13]
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	440b      	add	r3, r1
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	4053      	eors	r3, r2
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	897b      	ldrh	r3, [r7, #10]
 8000bba:	490b      	ldr	r1, [pc, #44]	; (8000be8 <peclookup+0x64>)
 8000bbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4053      	eors	r3, r2
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	737b      	strb	r3, [r7, #13]
 8000bce:	7b7a      	ldrb	r2, [r7, #13]
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d3e1      	bcc.n	8000b9a <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 8000bd6:	89fb      	ldrh	r3, [r7, #14]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	b29b      	uxth	r3, r3
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	0800953c 	.word	0x0800953c

08000bec <peccheck>:
//----------------------------------------------------------------------*/

// Validiere Pec von Daten
//----------------------------------------------------------------------
uint8_t peccheck(uint8_t len, uint8_t *data)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t pec = peclookup(len, data);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffc1 	bl	8000b84 <peclookup>
 8000c02:	4603      	mov	r3, r0
 8000c04:	81fb      	strh	r3, [r7, #14]

	// Wenn Ergebnis 0, ist Pec OK
	if (pec == 0)
 8000c06:	89fb      	ldrh	r3, [r7, #14]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <peccheck+0x24>
	{
		return 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e000      	b.n	8000c12 <peccheck+0x26>
	}
	// Wenn Ergebnis 1, ist Pec nicht OK
	else
	{
		return 1;
 8000c10:	2301      	movs	r3, #1
	}
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <ltc6811_init>:
//----------------------------------------------------------------------

// Initialisiere LTC6811, Schreibe Config in Konfigurationsregister
//----------------------------------------------------------------------
void ltc6811_init(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
	// Setze Konfiguration
	ltc6811_Conf.ADCOPT = 0;												// Setze ADC Mode option, 0 = default
 8000c20:	4a3b      	ldr	r2, [pc, #236]	; (8000d10 <ltc6811_init+0xf4>)
 8000c22:	7813      	ldrb	r3, [r2, #0]
 8000c24:	f36f 0300 	bfc	r3, #0, #1
 8000c28:	7013      	strb	r3, [r2, #0]
	ltc6811_Conf.REFON = 0;													// Setze Referenzspannung, 0 = default, 0 = Shutdown after Conversion, 1 = Shutdown after Watchdog timeout
 8000c2a:	4a39      	ldr	r2, [pc, #228]	; (8000d10 <ltc6811_init+0xf4>)
 8000c2c:	7813      	ldrb	r3, [r2, #0]
 8000c2e:	f36f 0382 	bfc	r3, #2, #1
 8000c32:	7013      	strb	r3, [r2, #0]
	ltc6811_Conf.LTC_GPIO1 = 1;												// Setze GPIO Pulldown, 1 = default, 0 = On, 1 = Off
 8000c34:	4a36      	ldr	r2, [pc, #216]	; (8000d10 <ltc6811_init+0xf4>)
 8000c36:	7813      	ldrb	r3, [r2, #0]
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	7013      	strb	r3, [r2, #0]
	ltc6811_Conf.LTC_GPIO2 = 1;												// Setze GPIO Pulldown, 1 = default, 0 = On, 1 = Off
 8000c3e:	4a34      	ldr	r2, [pc, #208]	; (8000d10 <ltc6811_init+0xf4>)
 8000c40:	7813      	ldrb	r3, [r2, #0]
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	7013      	strb	r3, [r2, #0]
	ltc6811_Conf.LTC_GPIO3 = 1;												// Setze GPIO Pulldown, 1 = default, 0 = On, 1 = Off
 8000c48:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <ltc6811_init+0xf4>)
 8000c4a:	7813      	ldrb	r3, [r2, #0]
 8000c4c:	f043 0320 	orr.w	r3, r3, #32
 8000c50:	7013      	strb	r3, [r2, #0]
	ltc6811_Conf.LTC_GPIO4 = 1;												// Setze GPIO Pulldown, 1 = default, 0 = On, 1 = Off
 8000c52:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <ltc6811_init+0xf4>)
 8000c54:	7813      	ldrb	r3, [r2, #0]
 8000c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5a:	7013      	strb	r3, [r2, #0]
	ltc6811_Conf.LTC_GPIO5 = 1;												// Setze GPIO Pulldown, 1 = default, 0 = On, 1 = Off
 8000c5c:	4a2c      	ldr	r2, [pc, #176]	; (8000d10 <ltc6811_init+0xf4>)
 8000c5e:	7813      	ldrb	r3, [r2, #0]
 8000c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c64:	7013      	strb	r3, [r2, #0]

	// Setze Vergleichsspannungen
	ltc6811_Conf.VUV = LTC6811_UVOLT;										// Setze Vergleichsspannung fuer Unterspannung
 8000c66:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <ltc6811_init+0xf4>)
 8000c68:	6813      	ldr	r3, [r2, #0]
 8000c6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c6e:	f361 2313 	bfi	r3, r1, #8, #12
 8000c72:	6013      	str	r3, [r2, #0]
	ltc6811_Conf.VOV = LTC6811_OVOLT;										// Setze Vergleichsspannung fuer Ueberspannung
 8000c74:	4a26      	ldr	r2, [pc, #152]	; (8000d10 <ltc6811_init+0xf4>)
 8000c76:	8853      	ldrh	r3, [r2, #2]
 8000c78:	f640 2141 	movw	r1, #2625	; 0xa41
 8000c7c:	f361 130f 	bfi	r3, r1, #4, #12
 8000c80:	8053      	strh	r3, [r2, #2]

	// Balancing
	ltc6811_Conf.DCC1 = 0;													// Balancing von Zelle 1 ausschalten
 8000c82:	4a23      	ldr	r2, [pc, #140]	; (8000d10 <ltc6811_init+0xf4>)
 8000c84:	7913      	ldrb	r3, [r2, #4]
 8000c86:	f36f 0300 	bfc	r3, #0, #1
 8000c8a:	7113      	strb	r3, [r2, #4]
	ltc6811_Conf.DCC2 = 0;													// Balancing von Zelle 2 ausschalten
 8000c8c:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <ltc6811_init+0xf4>)
 8000c8e:	7913      	ldrb	r3, [r2, #4]
 8000c90:	f36f 0341 	bfc	r3, #1, #1
 8000c94:	7113      	strb	r3, [r2, #4]
	ltc6811_Conf.DCC3 = 0;													// Balancing von Zelle 3 ausschalten
 8000c96:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <ltc6811_init+0xf4>)
 8000c98:	7913      	ldrb	r3, [r2, #4]
 8000c9a:	f36f 0382 	bfc	r3, #2, #1
 8000c9e:	7113      	strb	r3, [r2, #4]
	ltc6811_Conf.DCC4 = 0;													// Balancing von Zelle 4 ausschalten
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <ltc6811_init+0xf4>)
 8000ca2:	7913      	ldrb	r3, [r2, #4]
 8000ca4:	f36f 03c3 	bfc	r3, #3, #1
 8000ca8:	7113      	strb	r3, [r2, #4]
	ltc6811_Conf.DCC5 = 0;													// Balancing von Zelle 5 ausschalten
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <ltc6811_init+0xf4>)
 8000cac:	7913      	ldrb	r3, [r2, #4]
 8000cae:	f36f 1304 	bfc	r3, #4, #1
 8000cb2:	7113      	strb	r3, [r2, #4]
	ltc6811_Conf.DCC6 = 0;													// Balancing von Zelle 6 ausschalten
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <ltc6811_init+0xf4>)
 8000cb6:	7913      	ldrb	r3, [r2, #4]
 8000cb8:	f36f 1345 	bfc	r3, #5, #1
 8000cbc:	7113      	strb	r3, [r2, #4]
	ltc6811_Conf.DCC7 = 0;													// Balancing von Zelle 7 ausschalten
 8000cbe:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <ltc6811_init+0xf4>)
 8000cc0:	7913      	ldrb	r3, [r2, #4]
 8000cc2:	f36f 1386 	bfc	r3, #6, #1
 8000cc6:	7113      	strb	r3, [r2, #4]
	ltc6811_Conf.DCC8 = 0;													// Balancing von Zelle 8 ausschalten
 8000cc8:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <ltc6811_init+0xf4>)
 8000cca:	7913      	ldrb	r3, [r2, #4]
 8000ccc:	f36f 13c7 	bfc	r3, #7, #1
 8000cd0:	7113      	strb	r3, [r2, #4]
	ltc6811_Conf.DCC9 = 0;													// Balancing von Zelle 9 ausschalten
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <ltc6811_init+0xf4>)
 8000cd4:	7953      	ldrb	r3, [r2, #5]
 8000cd6:	f36f 0300 	bfc	r3, #0, #1
 8000cda:	7153      	strb	r3, [r2, #5]
	ltc6811_Conf.DCC10 = 0;													// Balancing von Zelle 10 ausschalten
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <ltc6811_init+0xf4>)
 8000cde:	7953      	ldrb	r3, [r2, #5]
 8000ce0:	f36f 0341 	bfc	r3, #1, #1
 8000ce4:	7153      	strb	r3, [r2, #5]
	ltc6811_Conf.DCC11 = 0;													// Balancing von Zelle 11 ausschalten
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <ltc6811_init+0xf4>)
 8000ce8:	7953      	ldrb	r3, [r2, #5]
 8000cea:	f36f 0382 	bfc	r3, #2, #1
 8000cee:	7153      	strb	r3, [r2, #5]
	ltc6811_Conf.DCC12 = 0;													// Balancing von Zelle 12 ausschalten
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <ltc6811_init+0xf4>)
 8000cf2:	7953      	ldrb	r3, [r2, #5]
 8000cf4:	f36f 03c3 	bfc	r3, #3, #1
 8000cf8:	7153      	strb	r3, [r2, #5]
	ltc6811_Conf.DCTO = 0;													// Balancing Timer zuruecksetzen
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <ltc6811_init+0xf4>)
 8000cfc:	7953      	ldrb	r3, [r2, #5]
 8000cfe:	f36f 1307 	bfc	r3, #4, #4
 8000d02:	7153      	strb	r3, [r2, #5]

	// Schreibe Konfiguration in Register am LTC6811
	//ltc6811_write(WRCFG, &ltc6811_Conf.ltc6811_configuration[0]);
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000030 	.word	0x20000030

08000d14 <ltc6811_check>:
//----------------------------------------------------------------------

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Check LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t error = 0;														// Speicher fuer Error
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]

	// Thermal Shutdown pruefen
	if (ltc6811_thermal() == 1)
 8000d1e:	f000 fa7d 	bl	800121c <ltc6811_thermal>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d103      	bne.n	8000d30 <ltc6811_check+0x1c>
	{
		error |= (1 << 0);													// Thermal Shutdown nicht Ok
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	71fb      	strb	r3, [r7, #7]
		ITM_SendChar('\n');
#endif
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 8000d30:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000d34:	f000 f836 	bl	8000da4 <ltc6811_test>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d103      	bne.n	8000d46 <ltc6811_check+0x32>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 1 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000d46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d4a:	f002 fdef 	bl	800392c <HAL_Delay>

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000d4e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000d52:	f000 f827 	bl	8000da4 <ltc6811_test>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d103      	bne.n	8000d64 <ltc6811_check+0x50>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 2 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000d64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d68:	f002 fde0 	bl	800392c <HAL_Delay>

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 8000d6c:	f000 fa8c 	bl	8001288 <ltc6811_diagn>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d103      	bne.n	8000d7e <ltc6811_check+0x6a>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_LTC6811
		ITM_SendString("Multiplexer Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000d7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d82:	f002 fdd3 	bl	800392c <HAL_Delay>

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 8000d86:	f000 faad 	bl	80012e4 <ltc6811_openwire>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d103      	bne.n	8000d98 <ltc6811_check+0x84>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	71fb      	strb	r3, [r7, #7]
	ITM_SendNumber(error);
	ITM_SendChar('\n');
#endif

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000d98:	79fb      	ldrb	r3, [r7, #7]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Test LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64 * LTC6811_DEVICES] = {0};							// Speicher Registerwerte
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	223c      	movs	r2, #60	; 0x3c
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f008 f874 	bl	8008ea8 <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000dd2:	f043 0303 	orr.w	r3, r3, #3
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe1d 	bl	8000a18 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000dde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000de2:	f002 fda3 	bl	800392c <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dec:	f043 0307 	orr.w	r3, r3, #7
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fe10 	bl	8000a18 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000df8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dfc:	f002 fd96 	bl	800392c <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000e06:	f043 0307 	orr.w	r3, r3, #7
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fe03 	bl	8000a18 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000e12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e16:	f002 fd89 	bl	800392c <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	4619      	mov	r1, r3
 8000e20:	2004      	movs	r0, #4
 8000e22:	f7ff fe49 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8 * LTC6811_DEVICES]);					// Lese Register CVB zurueck
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2006      	movs	r0, #6
 8000e30:	f7ff fe42 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16 * LTC6811_DEVICES]);					// Lese Register CVC zurueck
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	3310      	adds	r3, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	2008      	movs	r0, #8
 8000e3e:	f7ff fe3b 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24 * LTC6811_DEVICES]);					// Lese Register CVD zurueck
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	3318      	adds	r3, #24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f7ff fe34 	bl	8000ab8 <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32 * LTC6811_DEVICES]);					// Lese Register AUXA zurueck
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	3320      	adds	r3, #32
 8000e56:	4619      	mov	r1, r3
 8000e58:	200c      	movs	r0, #12
 8000e5a:	f7ff fe2d 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40 * LTC6811_DEVICES]);					// Lese Register AUXB zurueck
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	3328      	adds	r3, #40	; 0x28
 8000e64:	4619      	mov	r1, r3
 8000e66:	200e      	movs	r0, #14
 8000e68:	f7ff fe26 	bl	8000ab8 <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48 * LTC6811_DEVICES]);					// Lese Register STATA zurueck
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	3330      	adds	r3, #48	; 0x30
 8000e72:	4619      	mov	r1, r3
 8000e74:	2010      	movs	r0, #16
 8000e76:	f7ff fe1f 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56 * LTC6811_DEVICES]);					// Lese Register STATB zurueck
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	3338      	adds	r3, #56	; 0x38
 8000e80:	4619      	mov	r1, r3
 8000e82:	2012      	movs	r0, #18
 8000e84:	f7ff fe18 	bl	8000ab8 <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command & MD2714)													// Wenn Sampling Frequenz = MD2714
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d032      	beq.n	8000ef8 <ltc6811_test+0x154>
	{
		// Wenn ADCOPT gesetzt
		if (ltc6811_Conf.ADCOPT == 1)
 8000e92:	4bd4      	ldr	r3, [pc, #848]	; (80011e4 <ltc6811_test+0x440>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d013      	beq.n	8000ec8 <ltc6811_test+0x124>
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	2b20      	cmp	r3, #32
 8000ea4:	d104      	bne.n	8000eb0 <ltc6811_test+0x10c>
			{
				test_pattern = 0x9553;										// Registerwert bei 14kHz
 8000ea6:	f249 5353 	movw	r3, #38227	; 0x9553
 8000eaa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000eae:	e03a      	b.n	8000f26 <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	2b40      	cmp	r3, #64	; 0x40
 8000eb4:	d104      	bne.n	8000ec0 <ltc6811_test+0x11c>
			{
				test_pattern = 0x6AAC;										// Registerwert bei 14kHz
 8000eb6:	f646 23ac 	movw	r3, #27308	; 0x6aac
 8000eba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000ebe:	e032      	b.n	8000f26 <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000ec6:	e02e      	b.n	8000f26 <ltc6811_test+0x182>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command & ST1)
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	f003 0320 	and.w	r3, r3, #32
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <ltc6811_test+0x138>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000ed2:	f249 5365 	movw	r3, #38245	; 0x9565
 8000ed6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000eda:	e024      	b.n	8000f26 <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command & ST2)
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d004      	beq.n	8000ef0 <ltc6811_test+0x14c>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000ee6:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000eea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000eee:	e01a      	b.n	8000f26 <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000ef6:	e016      	b.n	8000f26 <ltc6811_test+0x182>
		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command & ST1)
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	f003 0320 	and.w	r3, r3, #32
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <ltc6811_test+0x168>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000f02:	f249 5355 	movw	r3, #38229	; 0x9555
 8000f06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000f0a:	e00c      	b.n	8000f26 <ltc6811_test+0x182>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command & ST2)
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d004      	beq.n	8000f20 <ltc6811_test+0x17c>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000f16:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000f1a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000f1e:	e002      	b.n	8000f26 <ltc6811_test+0x182>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000f2c:	e16b      	b.n	8001206 <ltc6811_test+0x462>
	{
		for (uint8_t i = 0; i < 22; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8000f34:	e15d      	b.n	80011f2 <ltc6811_test+0x44e>
		{
			// Auswaehlen welches Register im Array steht
			switch (i)
 8000f36:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000f3a:	2b1d      	cmp	r3, #29
 8000f3c:	f200 8148 	bhi.w	80011d0 <ltc6811_test+0x42c>
 8000f40:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <ltc6811_test+0x1a4>)
 8000f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f46:	bf00      	nop
 8000f48:	08000fc1 	.word	0x08000fc1
 8000f4c:	08000fc1 	.word	0x08000fc1
 8000f50:	08000fc1 	.word	0x08000fc1
 8000f54:	08000fff 	.word	0x08000fff
 8000f58:	08000fff 	.word	0x08000fff
 8000f5c:	08000fff 	.word	0x08000fff
 8000f60:	0800103f 	.word	0x0800103f
 8000f64:	0800103f 	.word	0x0800103f
 8000f68:	0800103f 	.word	0x0800103f
 8000f6c:	08001081 	.word	0x08001081
 8000f70:	08001081 	.word	0x08001081
 8000f74:	08001081 	.word	0x08001081
 8000f78:	080010c5 	.word	0x080010c5
 8000f7c:	080010c5 	.word	0x080010c5
 8000f80:	080010c5 	.word	0x080010c5
 8000f84:	08001107 	.word	0x08001107
 8000f88:	08001107 	.word	0x08001107
 8000f8c:	08001107 	.word	0x08001107
 8000f90:	0800114b 	.word	0x0800114b
 8000f94:	080011d1 	.word	0x080011d1
 8000f98:	0800114b 	.word	0x0800114b
 8000f9c:	0800118d 	.word	0x0800118d
 8000fa0:	080011d1 	.word	0x080011d1
 8000fa4:	080011d1 	.word	0x080011d1
 8000fa8:	080011d1 	.word	0x080011d1
 8000fac:	080011d1 	.word	0x080011d1
 8000fb0:	080011d1 	.word	0x080011d1
 8000fb4:	080011d1 	.word	0x080011d1
 8000fb8:	080011d1 	.word	0x080011d1
 8000fbc:	0800114b 	.word	0x0800114b
			{
				// Register CVA
				case 0:
				case 1:
				case 2:
					tmp = ((tmp_data[j*64 + i*2 + 1] << 8) | tmp_data[j*64 + i*2]);		// Register CVA umwandeln
 8000fc0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000fc4:	015a      	lsls	r2, r3, #5
 8000fc6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	3301      	adds	r3, #1
 8000fd0:	3350      	adds	r3, #80	; 0x50
 8000fd2:	443b      	add	r3, r7
 8000fd4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000fe0:	0159      	lsls	r1, r3, #5
 8000fe2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000fe6:	440b      	add	r3, r1
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	3350      	adds	r3, #80	; 0x50
 8000fec:	443b      	add	r3, r7
 8000fee:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					break;
 8000ffc:	e0e9      	b.n	80011d2 <ltc6811_test+0x42e>
				// Register CVB
				case 3:
				case 4:
				case 5:
					tmp = ((tmp_data[j*64 + i*2 + 3] << 8) | tmp_data[j*64 + i*2 + 2]);	// Register CVB umwandeln
 8000ffe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001002:	015a      	lsls	r2, r3, #5
 8001004:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001008:	4413      	add	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	3303      	adds	r3, #3
 800100e:	3350      	adds	r3, #80	; 0x50
 8001010:	443b      	add	r3, r7
 8001012:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800101e:	0159      	lsls	r1, r3, #5
 8001020:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001024:	440b      	add	r3, r1
 8001026:	3301      	adds	r3, #1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	3350      	adds	r3, #80	; 0x50
 800102c:	443b      	add	r3, r7
 800102e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001032:	b21b      	sxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b21b      	sxth	r3, r3
 8001038:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					break;
 800103c:	e0c9      	b.n	80011d2 <ltc6811_test+0x42e>
				// Register CVC
				case 6:
				case 7:
				case 8:
					tmp = ((tmp_data[j*64 + (i + 2)*2 + 1] << 8) | tmp_data[j*64 + (i + 2)*2]);// Register CVC umwandeln
 800103e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001042:	015a      	lsls	r2, r3, #5
 8001044:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001048:	3302      	adds	r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	3301      	adds	r3, #1
 8001050:	3350      	adds	r3, #80	; 0x50
 8001052:	443b      	add	r3, r7
 8001054:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001060:	0159      	lsls	r1, r3, #5
 8001062:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001066:	3302      	adds	r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	3350      	adds	r3, #80	; 0x50
 800106e:	443b      	add	r3, r7
 8001070:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					break;
 800107e:	e0a8      	b.n	80011d2 <ltc6811_test+0x42e>
				// Register CVD
				case 9:
				case 10:
				case 11:
					tmp = ((tmp_data[j*64 + (i + 2)*2 + 3] << 8) | tmp_data[j*64 + (i + 2)*2 + 2]);// Register CVD umwandeln
 8001080:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001084:	015a      	lsls	r2, r3, #5
 8001086:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800108a:	3302      	adds	r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	3303      	adds	r3, #3
 8001092:	3350      	adds	r3, #80	; 0x50
 8001094:	443b      	add	r3, r7
 8001096:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80010a2:	0159      	lsls	r1, r3, #5
 80010a4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80010a8:	3302      	adds	r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3301      	adds	r3, #1
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	3350      	adds	r3, #80	; 0x50
 80010b2:	443b      	add	r3, r7
 80010b4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21b      	sxth	r3, r3
 80010be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					break;
 80010c2:	e086      	b.n	80011d2 <ltc6811_test+0x42e>
				// Register AUXA
				case 12:
				case 13:
				case 14:
					tmp = ((tmp_data[j*64 + (i + 4)*2 + 1] << 8) | tmp_data[j*64 + (i + 4)*2]);// Register AUXA umwandeln
 80010c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80010c8:	015a      	lsls	r2, r3, #5
 80010ca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80010ce:	3304      	adds	r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	3301      	adds	r3, #1
 80010d6:	3350      	adds	r3, #80	; 0x50
 80010d8:	443b      	add	r3, r7
 80010da:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80010e6:	0159      	lsls	r1, r3, #5
 80010e8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80010ec:	3304      	adds	r3, #4
 80010ee:	440b      	add	r3, r1
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	3350      	adds	r3, #80	; 0x50
 80010f4:	443b      	add	r3, r7
 80010f6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21b      	sxth	r3, r3
 8001100:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					break;
 8001104:	e065      	b.n	80011d2 <ltc6811_test+0x42e>
				// Register AUXB
				case 15:
				case 16:
				case 17:
					tmp = ((tmp_data[j*64 + (i + 4)*2 + 3] << 8) | tmp_data[j*64 + (i + 4)*2 + 2]);// Register AUXB umwandeln
 8001106:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800110a:	015a      	lsls	r2, r3, #5
 800110c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001110:	3304      	adds	r3, #4
 8001112:	4413      	add	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	3303      	adds	r3, #3
 8001118:	3350      	adds	r3, #80	; 0x50
 800111a:	443b      	add	r3, r7
 800111c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21a      	sxth	r2, r3
 8001124:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001128:	0159      	lsls	r1, r3, #5
 800112a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800112e:	3304      	adds	r3, #4
 8001130:	440b      	add	r3, r1
 8001132:	3301      	adds	r3, #1
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	3350      	adds	r3, #80	; 0x50
 8001138:	443b      	add	r3, r7
 800113a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21b      	sxth	r3, r3
 8001144:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					break;
 8001148:	e043      	b.n	80011d2 <ltc6811_test+0x42e>
				// Register STATA
				case 18:
				case 29:
				case 20:
					tmp = ((tmp_data[j*64 + (i + 6)*2 + 1] << 8) | tmp_data[j*64 + (i + 6)*2]);// Register STATA umwandeln
 800114a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800114e:	015a      	lsls	r2, r3, #5
 8001150:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001154:	3306      	adds	r3, #6
 8001156:	4413      	add	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	3301      	adds	r3, #1
 800115c:	3350      	adds	r3, #80	; 0x50
 800115e:	443b      	add	r3, r7
 8001160:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800116c:	0159      	lsls	r1, r3, #5
 800116e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001172:	3306      	adds	r3, #6
 8001174:	440b      	add	r3, r1
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	3350      	adds	r3, #80	; 0x50
 800117a:	443b      	add	r3, r7
 800117c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
 8001186:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					break;
 800118a:	e022      	b.n	80011d2 <ltc6811_test+0x42e>
				// Register STATB
				case 21:
					tmp = ((tmp_data[j*64 + (i + 6)*2 + 3] << 8) | tmp_data[j*64 + (i + 6)*2 + 2]);// Register STATB umwandeln
 800118c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001190:	015a      	lsls	r2, r3, #5
 8001192:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001196:	3306      	adds	r3, #6
 8001198:	4413      	add	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	3303      	adds	r3, #3
 800119e:	3350      	adds	r3, #80	; 0x50
 80011a0:	443b      	add	r3, r7
 80011a2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011ae:	0159      	lsls	r1, r3, #5
 80011b0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80011b4:	3306      	adds	r3, #6
 80011b6:	440b      	add	r3, r1
 80011b8:	3301      	adds	r3, #1
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	3350      	adds	r3, #80	; 0x50
 80011be:	443b      	add	r3, r7
 80011c0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					break;
 80011ce:	e000      	b.n	80011d2 <ltc6811_test+0x42e>
				// Kein Register
				default:
					break;
 80011d0:	bf00      	nop
			}

			// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
			if (tmp != test_pattern)
 80011d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80011d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80011da:	429a      	cmp	r2, r3
 80011dc:	d004      	beq.n	80011e8 <ltc6811_test+0x444>
	#ifdef DEBUG_LTC6811
				ITM_SendString("Test failed: ");
				ITM_SendNumber(i);
				ITM_SendChar('\n');
	#endif
				return 1;													// Selbsttest 1 nicht OK
 80011de:	2301      	movs	r3, #1
 80011e0:	e017      	b.n	8001212 <ltc6811_test+0x46e>
 80011e2:	bf00      	nop
 80011e4:	20000030 	.word	0x20000030
		for (uint8_t i = 0; i < 22; i++)
 80011e8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80011ec:	3301      	adds	r3, #1
 80011ee:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80011f2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80011f6:	2b15      	cmp	r3, #21
 80011f8:	f67f ae9d 	bls.w	8000f36 <ltc6811_test+0x192>
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 80011fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001200:	3301      	adds	r3, #1
 8001202:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001206:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800120a:	2b00      	cmp	r3, #0
 800120c:	f43f ae8f 	beq.w	8000f2e <ltc6811_test+0x18a>
		}
	}
#ifdef DEBUG_LTC6811
	ITM_SendString("Test passed\n");
#endif
	return 0;																// Selbsttest 1 OK
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3750      	adds	r7, #80	; 0x50
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop

0800121c <ltc6811_thermal>:
//----------------------------------------------------------------------

// Selbstdiagnose Thermal Shutdown Test (Datasheet ltc6811 Page 30)
//----------------------------------------------------------------------
uint8_t ltc6811_thermal(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Thermal LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[8 * LTC6811_DEVICES] = {0};							// Speicher Registerwerte
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 800122a:	f240 7011 	movw	r0, #1809	; 0x711
 800122e:	f7ff fbf3 	bl	8000a18 <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 8001232:	f240 7012 	movw	r0, #1810	; 0x712
 8001236:	f7ff fbef 	bl	8000a18 <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 800123a:	f240 7013 	movw	r0, #1811	; 0x713
 800123e:	f7ff fbeb 	bl	8000a18 <ltc6811>

	// Wartezeit um Register zurueck zu setzen
	HAL_Delay(5);
 8001242:	2005      	movs	r0, #5
 8001244:	f002 fb72 	bl	800392c <HAL_Delay>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Thermal Shutdown Test
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	2012      	movs	r0, #18
 800124e:	f7ff fc33 	bl	8000ab8 <ltc6811_read>

	// Multiplexer pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e00f      	b.n	8001278 <ltc6811_thermal+0x5c>
	{
		if (tmp_data[i*8 + 5] & (1 << 0))
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	3305      	adds	r3, #5
 800125e:	3310      	adds	r3, #16
 8001260:	443b      	add	r3, r7
 8001262:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <ltc6811_thermal+0x56>
		{
			return 1;														// Thermal Shutdown Test nicht OK
 800126e:	2301      	movs	r3, #1
 8001270:	e006      	b.n	8001280 <ltc6811_thermal+0x64>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3301      	adds	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0ec      	beq.n	8001258 <ltc6811_thermal+0x3c>
		}
	}

	return 0;																// Thermal Shutdown Test OK
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Diagnostic LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[8 * LTC6811_DEVICES] = {0};							// Speicher Registerwerte
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8001296:	f240 7015 	movw	r0, #1813	; 0x715
 800129a:	f7ff fbbd 	bl	8000a18 <ltc6811>

	// Verzoegerungszeit 10ms, DIAG Befehl braucht ca. 400µs bis 4ms
	HAL_Delay(5);
 800129e:	2005      	movs	r0, #5
 80012a0:	f002 fb44 	bl	800392c <HAL_Delay>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	2012      	movs	r0, #18
 80012aa:	f7ff fc05 	bl	8000ab8 <ltc6811_read>

	// Multiplexer pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e00f      	b.n	80012d4 <ltc6811_diagn+0x4c>
	{
		if (tmp_data[i*8 + 5] & (1 << 1))
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	3305      	adds	r3, #5
 80012ba:	3310      	adds	r3, #16
 80012bc:	443b      	add	r3, r7
 80012be:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <ltc6811_diagn+0x46>
		{
			return 1;														// Multiplexertest nicht OK
 80012ca:	2301      	movs	r3, #1
 80012cc:	e006      	b.n	80012dc <ltc6811_diagn+0x54>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0ec      	beq.n	80012b4 <ltc6811_diagn+0x2c>
		}
	}

	return 0;																// Multiplexertest OK
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check (Datasheet ltc6811 Page 29)
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b09d      	sub	sp, #116	; 0x74
 80012e8:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Openwire LTC6811.\n");
#endif

	// Arrays definieren
	uint8_t pulldown[32 * LTC6811_DEVICES] = {0};							// Speicher Registerwerte Pulldown
 80012ea:	2300      	movs	r3, #0
 80012ec:	647b      	str	r3, [r7, #68]	; 0x44
 80012ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	619a      	str	r2, [r3, #24]
	uint8_t pullup[32 * LTC6811_DEVICES] = {0};								// Speicher Registerwerte Pullup
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
 8001306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]
	uint16_t cell[1 * LTC6811_DEVICES] = {0};								// Speicher Zelle
 800131a:	2300      	movs	r3, #0
 800131c:	843b      	strh	r3, [r7, #32]
	uint16_t openwire[13 * LTC6811_DEVICES] = {0};							// Speicher Openwire vergleich Threshold
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	831a      	strh	r2, [r3, #24]

	// Pullup Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8001330:	2300      	movs	r3, #0
 8001332:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001336:	e00c      	b.n	8001352 <ltc6811_openwire+0x6e>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);										// Pullup Current
 8001338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133c:	f7ff fb6c 	bl	8000a18 <ltc6811>
		HAL_Delay(300);
 8001340:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001344:	f002 faf2 	bl	800392c <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8001348:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800134c:	3301      	adds	r3, #1
 800134e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001352:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001356:	2b01      	cmp	r3, #1
 8001358:	d9ee      	bls.n	8001338 <ltc6811_openwire+0x54>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pullup[0]);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff fba9 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDCVB, &pullup[8 * LTC6811_DEVICES]);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	3308      	adds	r3, #8
 800136c:	4619      	mov	r1, r3
 800136e:	2006      	movs	r0, #6
 8001370:	f7ff fba2 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDCVC, &pullup[16 * LTC6811_DEVICES]);
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	3310      	adds	r3, #16
 800137a:	4619      	mov	r1, r3
 800137c:	2008      	movs	r0, #8
 800137e:	f7ff fb9b 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDCVD, &pullup[24 * LTC6811_DEVICES]);
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	3318      	adds	r3, #24
 8001388:	4619      	mov	r1, r3
 800138a:	200a      	movs	r0, #10
 800138c:	f7ff fb94 	bl	8000ab8 <ltc6811_read>

	// Pulldown Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001396:	e00c      	b.n	80013b2 <ltc6811_openwire+0xce>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);										// Pulldown Current
 8001398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139c:	f7ff fb3c 	bl	8000a18 <ltc6811>
		HAL_Delay(300);
 80013a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013a4:	f002 fac2 	bl	800392c <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 80013a8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80013ac:	3301      	adds	r3, #1
 80013ae:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80013b2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d9ee      	bls.n	8001398 <ltc6811_openwire+0xb4>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pulldown[0]);
 80013ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013be:	4619      	mov	r1, r3
 80013c0:	2004      	movs	r0, #4
 80013c2:	f7ff fb79 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDCVB, &pulldown[8 * LTC6811_DEVICES]);
 80013c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013ca:	3308      	adds	r3, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	2006      	movs	r0, #6
 80013d0:	f7ff fb72 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDCVC, &pulldown[16 * LTC6811_DEVICES]);
 80013d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013d8:	3310      	adds	r3, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	2008      	movs	r0, #8
 80013de:	f7ff fb6b 	bl	8000ab8 <ltc6811_read>
	ltc6811_read(RDCVD, &pulldown[24 * LTC6811_DEVICES]);
 80013e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013e6:	3318      	adds	r3, #24
 80013e8:	4619      	mov	r1, r3
 80013ea:	200a      	movs	r0, #10
 80013ec:	f7ff fb64 	bl	8000ab8 <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80013f6:	e20e      	b.n	8001816 <ltc6811_openwire+0x532>
	{
		for (uint8_t i = 0; i < 13; i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 80013fe:	e200      	b.n	8001802 <ltc6811_openwire+0x51e>
		{
			// Auswahl welche Leitung
			switch (i)
 8001400:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001404:	2b0c      	cmp	r3, #12
 8001406:	f200 81f6 	bhi.w	80017f6 <ltc6811_openwire+0x512>
 800140a:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <ltc6811_openwire+0x12c>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	08001445 	.word	0x08001445
 8001414:	0800149f 	.word	0x0800149f
 8001418:	0800149f 	.word	0x0800149f
 800141c:	0800155b 	.word	0x0800155b
 8001420:	0800155b 	.word	0x0800155b
 8001424:	0800155b 	.word	0x0800155b
 8001428:	0800161b 	.word	0x0800161b
 800142c:	0800161b 	.word	0x0800161b
 8001430:	0800161b 	.word	0x0800161b
 8001434:	080016db 	.word	0x080016db
 8001438:	080016db 	.word	0x080016db
 800143c:	080016db 	.word	0x080016db
 8001440:	0800179b 	.word	0x0800179b
			{
				// Leitungen Zelle 1/2 bis 3/4
				case 0:
					openwire[j*13 + i] = ((pulldown[j*13 + 1] << 8) + pulldown[j*13 + 0]);
 8001444:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3301      	adds	r3, #1
 8001454:	3370      	adds	r3, #112	; 0x70
 8001456:	443b      	add	r3, r7
 8001458:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800145c:	b29b      	uxth	r3, r3
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b298      	uxth	r0, r3
 8001462:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3370      	adds	r3, #112	; 0x70
 8001472:	443b      	add	r3, r7
 8001474:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001478:	b299      	uxth	r1, r3
 800147a:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	441a      	add	r2, r3
 8001488:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800148c:	4413      	add	r3, r2
 800148e:	1842      	adds	r2, r0, r1
 8001490:	b292      	uxth	r2, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	3370      	adds	r3, #112	; 0x70
 8001496:	443b      	add	r3, r7
 8001498:	f823 2c6c 	strh.w	r2, [r3, #-108]
					break;
 800149c:	e1ac      	b.n	80017f8 <ltc6811_openwire+0x514>
				case 1:
				case 2:
					openwire[j*13 + i] = getDifference(((pullup[j*13 + i*2+1] << 8) + pullup[j*13 + i*2]), ((pulldown[j*13 + i*2+1] << 8) + pulldown[j*13 + i*2]));
 800149e:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	441a      	add	r2, r3
 80014ac:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	3301      	adds	r3, #1
 80014b6:	3370      	adds	r3, #112	; 0x70
 80014b8:	443b      	add	r3, r7
 80014ba:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b299      	uxth	r1, r3
 80014c4:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	441a      	add	r2, r3
 80014d2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	3370      	adds	r3, #112	; 0x70
 80014dc:	443b      	add	r3, r7
 80014de:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	440b      	add	r3, r1
 80014e6:	b298      	uxth	r0, r3
 80014e8:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	441a      	add	r2, r3
 80014f6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	3301      	adds	r3, #1
 8001500:	3370      	adds	r3, #112	; 0x70
 8001502:	443b      	add	r3, r7
 8001504:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001508:	b29b      	uxth	r3, r3
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b299      	uxth	r1, r3
 800150e:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	441a      	add	r2, r3
 800151c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	3370      	adds	r3, #112	; 0x70
 8001526:	443b      	add	r3, r7
 8001528:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800152c:	b29b      	uxth	r3, r3
 800152e:	440b      	add	r3, r1
 8001530:	b299      	uxth	r1, r3
 8001532:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	441a      	add	r2, r3
 8001540:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001544:	18d4      	adds	r4, r2, r3
 8001546:	f7ff f93d 	bl	80007c4 <getDifference>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	0063      	lsls	r3, r4, #1
 8001550:	3370      	adds	r3, #112	; 0x70
 8001552:	443b      	add	r3, r7
 8001554:	f823 2c6c 	strh.w	r2, [r3, #-108]
					break;
 8001558:	e14e      	b.n	80017f8 <ltc6811_openwire+0x514>
				// Leitungen Zelle 4/5 bis 6/7
				case 3:
				case 4:
				case 5:
					openwire[j*13 + i] = getDifference(((pullup[j*13 + i*2+3] << 8) + pullup[j*13 + i*2+2]), ((pulldown[j*13 + i*2+3] << 8) + pulldown[j*13 + i*2+2]));
 800155a:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	441a      	add	r2, r3
 8001568:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	3303      	adds	r3, #3
 8001572:	3370      	adds	r3, #112	; 0x70
 8001574:	443b      	add	r3, r7
 8001576:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800157a:	b29b      	uxth	r3, r3
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b299      	uxth	r1, r3
 8001580:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	441a      	add	r2, r3
 800158e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	3302      	adds	r3, #2
 8001598:	3370      	adds	r3, #112	; 0x70
 800159a:	443b      	add	r3, r7
 800159c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	440b      	add	r3, r1
 80015a4:	b298      	uxth	r0, r3
 80015a6:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	441a      	add	r2, r3
 80015b4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	3303      	adds	r3, #3
 80015be:	3370      	adds	r3, #112	; 0x70
 80015c0:	443b      	add	r3, r7
 80015c2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b299      	uxth	r1, r3
 80015cc:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	441a      	add	r2, r3
 80015da:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	3302      	adds	r3, #2
 80015e4:	3370      	adds	r3, #112	; 0x70
 80015e6:	443b      	add	r3, r7
 80015e8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	440b      	add	r3, r1
 80015f0:	b299      	uxth	r1, r3
 80015f2:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	441a      	add	r2, r3
 8001600:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001604:	18d4      	adds	r4, r2, r3
 8001606:	f7ff f8dd 	bl	80007c4 <getDifference>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	0063      	lsls	r3, r4, #1
 8001610:	3370      	adds	r3, #112	; 0x70
 8001612:	443b      	add	r3, r7
 8001614:	f823 2c6c 	strh.w	r2, [r3, #-108]
					break;
 8001618:	e0ee      	b.n	80017f8 <ltc6811_openwire+0x514>
				// Leitungen Zelle 7/8 bis 9/10
				case 6:
				case 7:
				case 8:
					openwire[j*13 + i] = getDifference(((pullup[j*13 + i*2+5] << 8) + pullup[j*13 + i*2+4]), ((pulldown[j*13 + i*2+5] << 8) + pulldown[j*13 + i*2+4]));
 800161a:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	441a      	add	r2, r3
 8001628:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	3305      	adds	r3, #5
 8001632:	3370      	adds	r3, #112	; 0x70
 8001634:	443b      	add	r3, r7
 8001636:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800163a:	b29b      	uxth	r3, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b299      	uxth	r1, r3
 8001640:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	441a      	add	r2, r3
 800164e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	3304      	adds	r3, #4
 8001658:	3370      	adds	r3, #112	; 0x70
 800165a:	443b      	add	r3, r7
 800165c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8001660:	b29b      	uxth	r3, r3
 8001662:	440b      	add	r3, r1
 8001664:	b298      	uxth	r0, r3
 8001666:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	441a      	add	r2, r3
 8001674:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	3305      	adds	r3, #5
 800167e:	3370      	adds	r3, #112	; 0x70
 8001680:	443b      	add	r3, r7
 8001682:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001686:	b29b      	uxth	r3, r3
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b299      	uxth	r1, r3
 800168c:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	441a      	add	r2, r3
 800169a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	3304      	adds	r3, #4
 80016a4:	3370      	adds	r3, #112	; 0x70
 80016a6:	443b      	add	r3, r7
 80016a8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	440b      	add	r3, r1
 80016b0:	b299      	uxth	r1, r3
 80016b2:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	441a      	add	r2, r3
 80016c0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80016c4:	18d4      	adds	r4, r2, r3
 80016c6:	f7ff f87d 	bl	80007c4 <getDifference>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	0063      	lsls	r3, r4, #1
 80016d0:	3370      	adds	r3, #112	; 0x70
 80016d2:	443b      	add	r3, r7
 80016d4:	f823 2c6c 	strh.w	r2, [r3, #-108]
					break;
 80016d8:	e08e      	b.n	80017f8 <ltc6811_openwire+0x514>
				// Leitungen Zelle 10/11 und 11/12
				case 9:
				case 10:
				case 11:
					openwire[j*13 + i] = getDifference(((pullup[j*13 + i*2+7] << 8) + pullup[j*13 + i*2+6]), ((pulldown[j*13 + i*2+7] << 8) + pulldown[j*13 + i*2+6]));
 80016da:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	441a      	add	r2, r3
 80016e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	3307      	adds	r3, #7
 80016f2:	3370      	adds	r3, #112	; 0x70
 80016f4:	443b      	add	r3, r7
 80016f6:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b299      	uxth	r1, r3
 8001700:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	441a      	add	r2, r3
 800170e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	3306      	adds	r3, #6
 8001718:	3370      	adds	r3, #112	; 0x70
 800171a:	443b      	add	r3, r7
 800171c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8001720:	b29b      	uxth	r3, r3
 8001722:	440b      	add	r3, r1
 8001724:	b298      	uxth	r0, r3
 8001726:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	441a      	add	r2, r3
 8001734:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	3307      	adds	r3, #7
 800173e:	3370      	adds	r3, #112	; 0x70
 8001740:	443b      	add	r3, r7
 8001742:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001746:	b29b      	uxth	r3, r3
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b299      	uxth	r1, r3
 800174c:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	441a      	add	r2, r3
 800175a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	3306      	adds	r3, #6
 8001764:	3370      	adds	r3, #112	; 0x70
 8001766:	443b      	add	r3, r7
 8001768:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800176c:	b29b      	uxth	r3, r3
 800176e:	440b      	add	r3, r1
 8001770:	b299      	uxth	r1, r3
 8001772:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	441a      	add	r2, r3
 8001780:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001784:	18d4      	adds	r4, r2, r3
 8001786:	f7ff f81d 	bl	80007c4 <getDifference>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	0063      	lsls	r3, r4, #1
 8001790:	3370      	adds	r3, #112	; 0x70
 8001792:	443b      	add	r3, r7
 8001794:	f823 2c6c 	strh.w	r2, [r3, #-108]
					break;
 8001798:	e02e      	b.n	80017f8 <ltc6811_openwire+0x514>
				case 12:
					openwire[j*13 + i] = ((pullup[j*13 + 29] << 8) + pullup[j*13 + 28]);
 800179a:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	331d      	adds	r3, #29
 80017aa:	3370      	adds	r3, #112	; 0x70
 80017ac:	443b      	add	r3, r7
 80017ae:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b298      	uxth	r0, r3
 80017b8:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	331c      	adds	r3, #28
 80017c8:	3370      	adds	r3, #112	; 0x70
 80017ca:	443b      	add	r3, r7
 80017cc:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80017d0:	b299      	uxth	r1, r3
 80017d2:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	441a      	add	r2, r3
 80017e0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80017e4:	4413      	add	r3, r2
 80017e6:	1842      	adds	r2, r0, r1
 80017e8:	b292      	uxth	r2, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	3370      	adds	r3, #112	; 0x70
 80017ee:	443b      	add	r3, r7
 80017f0:	f823 2c6c 	strh.w	r2, [r3, #-108]
					break;
 80017f4:	e000      	b.n	80017f8 <ltc6811_openwire+0x514>
				default:
					break;
 80017f6:	bf00      	nop
		for (uint8_t i = 0; i < 13; i++)
 80017f8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80017fc:	3301      	adds	r3, #1
 80017fe:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001802:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001806:	2b0c      	cmp	r3, #12
 8001808:	f67f adfa 	bls.w	8001400 <ltc6811_openwire+0x11c>
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 800180c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001810:	3301      	adds	r3, #1
 8001812:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001816:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800181a:	2b00      	cmp	r3, #0
 800181c:	f43f adec 	beq.w	80013f8 <ltc6811_openwire+0x114>
			}
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8001820:	2300      	movs	r3, #0
 8001822:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8001826:	e03b      	b.n	80018a0 <ltc6811_openwire+0x5bc>
	{
		for (uint8_t i = 1; i < 12; i++)
 8001828:	2301      	movs	r3, #1
 800182a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800182e:	e02e      	b.n	800188e <ltc6811_openwire+0x5aa>
		{
			// Vergleiche Messdaten mit Threshold
			if (openwire[j*13 + i] > OPENWIRE_THRESHOLD)
 8001830:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	441a      	add	r2, r3
 800183e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	3370      	adds	r3, #112	; 0x70
 8001848:	443b      	add	r3, r7
 800184a:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 800184e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001852:	d917      	bls.n	8001884 <ltc6811_openwire+0x5a0>
			{
				cell[j] |= (1 << i);										// Wenn Threshold ueberschritten, Offene Leitung
 8001854:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	3370      	adds	r3, #112	; 0x70
 800185c:	443b      	add	r3, r7
 800185e:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8001862:	b21a      	sxth	r2, r3
 8001864:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001868:	2101      	movs	r1, #1
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	b21b      	sxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b21a      	sxth	r2, r3
 8001874:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001878:	b292      	uxth	r2, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	3370      	adds	r3, #112	; 0x70
 800187e:	443b      	add	r3, r7
 8001880:	f823 2c50 	strh.w	r2, [r3, #-80]
		for (uint8_t i = 1; i < 12; i++)
 8001884:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001888:	3301      	adds	r3, #1
 800188a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800188e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001892:	2b0b      	cmp	r3, #11
 8001894:	d9cc      	bls.n	8001830 <ltc6811_openwire+0x54c>
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8001896:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800189a:	3301      	adds	r3, #1
 800189c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80018a0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0bf      	beq.n	8001828 <ltc6811_openwire+0x544>
			}
		}
	}

	// Offene Leitung erste Zelle messen
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 80018ae:	e023      	b.n	80018f8 <ltc6811_openwire+0x614>
	{
		if (openwire[j*13] == 0)
 80018b0:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	3370      	adds	r3, #112	; 0x70
 80018c2:	443b      	add	r3, r7
 80018c4:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d110      	bne.n	80018ee <ltc6811_openwire+0x60a>
		{
			cell[j] |= (1 << 0);											// Unterste Leitung Offen
 80018cc:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	3370      	adds	r3, #112	; 0x70
 80018d4:	443b      	add	r3, r7
 80018d6:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 80018da:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	b292      	uxth	r2, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	3370      	adds	r3, #112	; 0x70
 80018e8:	443b      	add	r3, r7
 80018ea:	f823 2c50 	strh.w	r2, [r3, #-80]
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 80018ee:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80018f2:	3301      	adds	r3, #1
 80018f4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 80018f8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0d7      	beq.n	80018b0 <ltc6811_openwire+0x5cc>
		}
	}

	// Offene Leitung letzte Zelle messen
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8001906:	e024      	b.n	8001952 <ltc6811_openwire+0x66e>
	{
		if (openwire[j*13 + 12] == 0)
 8001908:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	330c      	adds	r3, #12
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	3370      	adds	r3, #112	; 0x70
 800191c:	443b      	add	r3, r7
 800191e:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d110      	bne.n	8001948 <ltc6811_openwire+0x664>
		{
			cell[j] |= (1 << 12);											// Oberste Leitung offen
 8001926:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	3370      	adds	r3, #112	; 0x70
 800192e:	443b      	add	r3, r7
 8001930:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8001934:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001938:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800193c:	b292      	uxth	r2, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	3370      	adds	r3, #112	; 0x70
 8001942:	443b      	add	r3, r7
 8001944:	f823 2c50 	strh.w	r2, [r3, #-80]
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8001948:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800194c:	3301      	adds	r3, #1
 800194e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8001952:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0d6      	beq.n	8001908 <ltc6811_openwire+0x624>
		}
	}

	// Wenn offene Leitung vorhanden
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001960:	e00f      	b.n	8001982 <ltc6811_openwire+0x69e>
	{
		if (cell[j] != 0)
 8001962:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	3370      	adds	r3, #112	; 0x70
 800196a:	443b      	add	r3, r7
 800196c:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <ltc6811_openwire+0x694>
		{
			return 1;														// Open Wire nicht OK
 8001974:	2301      	movs	r3, #1
 8001976:	e009      	b.n	800198c <ltc6811_openwire+0x6a8>
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8001978:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800197c:	3301      	adds	r3, #1
 800197e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001982:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0eb      	beq.n	8001962 <ltc6811_openwire+0x67e>
		}
	}

	return 0;																// Open Wire OK
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3774      	adds	r7, #116	; 0x74
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}

08001994 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800199a:	2115      	movs	r1, #21
 800199c:	483b      	ldr	r0, [pc, #236]	; (8001a8c <collectHardwareInfo+0xf8>)
 800199e:	f7fe fdd5 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80019a2:	f001 fffd 	bl	80039a0 <HAL_GetDEVID>
 80019a6:	4603      	mov	r3, r0
 80019a8:	210a      	movs	r1, #10
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fde2 	bl	8000574 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80019b0:	2117      	movs	r1, #23
 80019b2:	4837      	ldr	r0, [pc, #220]	; (8001a90 <collectHardwareInfo+0xfc>)
 80019b4:	f7fe fdca 	bl	800054c <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80019b8:	f001 ffe6 	bl	8003988 <HAL_GetREVID>
 80019bc:	4603      	mov	r3, r0
 80019be:	f242 0201 	movw	r2, #8193	; 0x2001
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d016      	beq.n	80019f4 <collectHardwareInfo+0x60>
 80019c6:	f242 0201 	movw	r2, #8193	; 0x2001
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d817      	bhi.n	80019fe <collectHardwareInfo+0x6a>
 80019ce:	f241 0201 	movw	r2, #4097	; 0x1001
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d004      	beq.n	80019e0 <collectHardwareInfo+0x4c>
 80019d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80019da:	4293      	cmp	r3, r2
 80019dc:	d005      	beq.n	80019ea <collectHardwareInfo+0x56>
 80019de:	e00e      	b.n	80019fe <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80019e0:	2101      	movs	r1, #1
 80019e2:	482c      	ldr	r0, [pc, #176]	; (8001a94 <collectHardwareInfo+0x100>)
 80019e4:	f7fe fdb2 	bl	800054c <uartTransmit>
			break;
 80019e8:	e011      	b.n	8001a0e <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80019ea:	2101      	movs	r1, #1
 80019ec:	482a      	ldr	r0, [pc, #168]	; (8001a98 <collectHardwareInfo+0x104>)
 80019ee:	f7fe fdad 	bl	800054c <uartTransmit>
			break;
 80019f2:	e00c      	b.n	8001a0e <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 80019f4:	2101      	movs	r1, #1
 80019f6:	4829      	ldr	r0, [pc, #164]	; (8001a9c <collectHardwareInfo+0x108>)
 80019f8:	f7fe fda8 	bl	800054c <uartTransmit>
			break;
 80019fc:	e007      	b.n	8001a0e <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80019fe:	f001 ffc3 	bl	8003988 <HAL_GetREVID>
 8001a02:	4603      	mov	r3, r0
 8001a04:	210a      	movs	r1, #10
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fdb4 	bl	8000574 <uartTransmitNumber>
			break;
 8001a0c:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8001a0e:	2115      	movs	r1, #21
 8001a10:	4823      	ldr	r0, [pc, #140]	; (8001aa0 <collectHardwareInfo+0x10c>)
 8001a12:	f7fe fd9b 	bl	800054c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8001a16:	f003 fcab 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8001a1a:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <collectHardwareInfo+0x110>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	0c9b      	lsrs	r3, r3, #18
 8001a26:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8001a28:	210a      	movs	r1, #10
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fda2 	bl	8000574 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8001a30:	2104      	movs	r1, #4
 8001a32:	481d      	ldr	r0, [pc, #116]	; (8001aa8 <collectHardwareInfo+0x114>)
 8001a34:	f7fe fd8a 	bl	800054c <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8001a38:	2111      	movs	r1, #17
 8001a3a:	481c      	ldr	r0, [pc, #112]	; (8001aac <collectHardwareInfo+0x118>)
 8001a3c:	f7fe fd86 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8001a40:	f001 ffbc 	bl	80039bc <HAL_GetUIDw0>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2110      	movs	r1, #16
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd93 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <collectHardwareInfo+0x11c>)
 8001a52:	f7fe fd7b 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8001a56:	f001 ffbd 	bl	80039d4 <HAL_GetUIDw1>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd88 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8001a64:	2101      	movs	r1, #1
 8001a66:	4812      	ldr	r0, [pc, #72]	; (8001ab0 <collectHardwareInfo+0x11c>)
 8001a68:	f7fe fd70 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8001a6c:	f001 ffbe 	bl	80039ec <HAL_GetUIDw2>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2110      	movs	r1, #16
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd7d 	bl	8000574 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <collectHardwareInfo+0x120>)
 8001a7e:	f7fe fd65 	bl	800054c <uartTransmit>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	08008f58 	.word	0x08008f58
 8001a90:	08008f70 	.word	0x08008f70
 8001a94:	08008f88 	.word	0x08008f88
 8001a98:	08008f8c 	.word	0x08008f8c
 8001a9c:	08008f90 	.word	0x08008f90
 8001aa0:	08008f94 	.word	0x08008f94
 8001aa4:	431bde83 	.word	0x431bde83
 8001aa8:	08008fac 	.word	0x08008fac
 8001aac:	08008fb4 	.word	0x08008fb4
 8001ab0:	08008fc8 	.word	0x08008fc8
 8001ab4:	08008fcc 	.word	0x08008fcc

08001ab8 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8001abc:	2114      	movs	r1, #20
 8001abe:	4824      	ldr	r0, [pc, #144]	; (8001b50 <collectMiddlewareInfo+0x98>)
 8001ac0:	f7fe fd44 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8001ac4:	210a      	movs	r1, #10
 8001ac6:	2005      	movs	r0, #5
 8001ac8:	f7fe fd54 	bl	8000574 <uartTransmitNumber>
	uartTransmit(".", 1);
 8001acc:	2101      	movs	r1, #1
 8001ace:	4821      	ldr	r0, [pc, #132]	; (8001b54 <collectMiddlewareInfo+0x9c>)
 8001ad0:	f7fe fd3c 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8001ad4:	210a      	movs	r1, #10
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7fe fd4c 	bl	8000574 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8001adc:	2112      	movs	r1, #18
 8001ade:	481e      	ldr	r0, [pc, #120]	; (8001b58 <collectMiddlewareInfo+0xa0>)
 8001ae0:	f7fe fd34 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8001ae4:	f001 ff46 	bl	8003974 <HAL_GetHalVersion>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	0e1b      	lsrs	r3, r3, #24
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	210a      	movs	r1, #10
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd3f 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001af6:	2101      	movs	r1, #1
 8001af8:	4816      	ldr	r0, [pc, #88]	; (8001b54 <collectMiddlewareInfo+0x9c>)
 8001afa:	f7fe fd27 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8001afe:	f001 ff39 	bl	8003974 <HAL_GetHalVersion>
 8001b02:	4603      	mov	r3, r0
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	210a      	movs	r1, #10
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd32 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001b10:	2101      	movs	r1, #1
 8001b12:	4810      	ldr	r0, [pc, #64]	; (8001b54 <collectMiddlewareInfo+0x9c>)
 8001b14:	f7fe fd1a 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8001b18:	f001 ff2c 	bl	8003974 <HAL_GetHalVersion>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	210a      	movs	r1, #10
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd25 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <collectMiddlewareInfo+0x9c>)
 8001b2e:	f7fe fd0d 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8001b32:	f001 ff1f 	bl	8003974 <HAL_GetHalVersion>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	210a      	movs	r1, #10
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd19 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8001b42:	2101      	movs	r1, #1
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <collectMiddlewareInfo+0xa4>)
 8001b46:	f7fe fd01 	bl	800054c <uartTransmit>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08008fd0 	.word	0x08008fd0
 8001b54:	08008fe4 	.word	0x08008fe4
 8001b58:	08008fe8 	.word	0x08008fe8
 8001b5c:	08008fcc 	.word	0x08008fcc

08001b60 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8001b64:	2111      	movs	r1, #17
 8001b66:	4826      	ldr	r0, [pc, #152]	; (8001c00 <collectSoftwareInfo+0xa0>)
 8001b68:	f7fe fcf0 	bl	800054c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	4825      	ldr	r0, [pc, #148]	; (8001c04 <collectSoftwareInfo+0xa4>)
 8001b70:	f7fe fcec 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8001b74:	2111      	movs	r1, #17
 8001b76:	4824      	ldr	r0, [pc, #144]	; (8001c08 <collectSoftwareInfo+0xa8>)
 8001b78:	f7fe fce8 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	4823      	ldr	r0, [pc, #140]	; (8001c0c <collectSoftwareInfo+0xac>)
 8001b80:	f7fe fce4 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8001b84:	210f      	movs	r1, #15
 8001b86:	4822      	ldr	r0, [pc, #136]	; (8001c10 <collectSoftwareInfo+0xb0>)
 8001b88:	f7fe fce0 	bl	800054c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8001b8c:	2129      	movs	r1, #41	; 0x29
 8001b8e:	4821      	ldr	r0, [pc, #132]	; (8001c14 <collectSoftwareInfo+0xb4>)
 8001b90:	f7fe fcdc 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001b94:	2101      	movs	r1, #1
 8001b96:	4820      	ldr	r0, [pc, #128]	; (8001c18 <collectSoftwareInfo+0xb8>)
 8001b98:	f7fe fcd8 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001b9c:	2116      	movs	r1, #22
 8001b9e:	481f      	ldr	r0, [pc, #124]	; (8001c1c <collectSoftwareInfo+0xbc>)
 8001ba0:	f7fe fcd4 	bl	800054c <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	481e      	ldr	r0, [pc, #120]	; (8001c20 <collectSoftwareInfo+0xc0>)
 8001ba8:	f7fe fcd0 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001bac:	2115      	movs	r1, #21
 8001bae:	481d      	ldr	r0, [pc, #116]	; (8001c24 <collectSoftwareInfo+0xc4>)
 8001bb0:	f7fe fccc 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8001bb4:	2108      	movs	r1, #8
 8001bb6:	481c      	ldr	r0, [pc, #112]	; (8001c28 <collectSoftwareInfo+0xc8>)
 8001bb8:	f7fe fcc8 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8001bbc:	2116      	movs	r1, #22
 8001bbe:	481b      	ldr	r0, [pc, #108]	; (8001c2c <collectSoftwareInfo+0xcc>)
 8001bc0:	f7fe fcc4 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8001bc4:	2111      	movs	r1, #17
 8001bc6:	481a      	ldr	r0, [pc, #104]	; (8001c30 <collectSoftwareInfo+0xd0>)
 8001bc8:	f7fe fcc0 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4812      	ldr	r0, [pc, #72]	; (8001c18 <collectSoftwareInfo+0xb8>)
 8001bd0:	f7fe fcbc 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8001bd4:	2111      	movs	r1, #17
 8001bd6:	4817      	ldr	r0, [pc, #92]	; (8001c34 <collectSoftwareInfo+0xd4>)
 8001bd8:	f7fe fcb8 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8001bdc:	210b      	movs	r1, #11
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <collectSoftwareInfo+0xd8>)
 8001be0:	f7fe fcb4 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8001be4:	2111      	movs	r1, #17
 8001be6:	4815      	ldr	r0, [pc, #84]	; (8001c3c <collectSoftwareInfo+0xdc>)
 8001be8:	f7fe fcb0 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8001bec:	2109      	movs	r1, #9
 8001bee:	4814      	ldr	r0, [pc, #80]	; (8001c40 <collectSoftwareInfo+0xe0>)
 8001bf0:	f7fe fcac 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <collectSoftwareInfo+0xb8>)
 8001bf8:	f7fe fca8 	bl	800054c <uartTransmit>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08008ffc 	.word	0x08008ffc
 8001c04:	08009010 	.word	0x08009010
 8001c08:	08009018 	.word	0x08009018
 8001c0c:	0800902c 	.word	0x0800902c
 8001c10:	08009034 	.word	0x08009034
 8001c14:	08009044 	.word	0x08009044
 8001c18:	08008fcc 	.word	0x08008fcc
 8001c1c:	08009070 	.word	0x08009070
 8001c20:	08009088 	.word	0x08009088
 8001c24:	08009090 	.word	0x08009090
 8001c28:	080090a8 	.word	0x080090a8
 8001c2c:	080090b0 	.word	0x080090b0
 8001c30:	080090c8 	.word	0x080090c8
 8001c34:	080090dc 	.word	0x080090dc
 8001c38:	080090f0 	.word	0x080090f0
 8001c3c:	080090fc 	.word	0x080090fc
 8001c40:	08009110 	.word	0x08009110

08001c44 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8001c48:	2115      	movs	r1, #21
 8001c4a:	4814      	ldr	r0, [pc, #80]	; (8001c9c <collectGitcounts+0x58>)
 8001c4c:	f7fe fc7e 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8001c50:	2103      	movs	r1, #3
 8001c52:	4813      	ldr	r0, [pc, #76]	; (8001ca0 <collectGitcounts+0x5c>)
 8001c54:	f7fe fc7a 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8001c58:	2117      	movs	r1, #23
 8001c5a:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <collectGitcounts+0x60>)
 8001c5c:	f7fe fc76 	bl	800054c <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8001c60:	2103      	movs	r1, #3
 8001c62:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <collectGitcounts+0x64>)
 8001c64:	f7fe fc72 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8001c68:	211c      	movs	r1, #28
 8001c6a:	4810      	ldr	r0, [pc, #64]	; (8001cac <collectGitcounts+0x68>)
 8001c6c:	f7fe fc6e 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8001c70:	2103      	movs	r1, #3
 8001c72:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <collectGitcounts+0x6c>)
 8001c74:	f7fe fc6a 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001c78:	2116      	movs	r1, #22
 8001c7a:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <collectGitcounts+0x70>)
 8001c7c:	f7fe fc66 	bl	800054c <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8001c80:	2102      	movs	r1, #2
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <collectGitcounts+0x74>)
 8001c84:	f7fe fc62 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001c88:	2115      	movs	r1, #21
 8001c8a:	480c      	ldr	r0, [pc, #48]	; (8001cbc <collectGitcounts+0x78>)
 8001c8c:	f7fe fc5e 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8001c90:	2102      	movs	r1, #2
 8001c92:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <collectGitcounts+0x7c>)
 8001c94:	f7fe fc5a 	bl	800054c <uartTransmit>
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0800911c 	.word	0x0800911c
 8001ca0:	08009134 	.word	0x08009134
 8001ca4:	08009138 	.word	0x08009138
 8001ca8:	08009150 	.word	0x08009150
 8001cac:	08009154 	.word	0x08009154
 8001cb0:	08009170 	.word	0x08009170
 8001cb4:	08009070 	.word	0x08009070
 8001cb8:	08009174 	.word	0x08009174
 8001cbc:	08009090 	.word	0x08009090
 8001cc0:	08009178 	.word	0x08009178

08001cc4 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8001cc8:	2111      	movs	r1, #17
 8001cca:	480e      	ldr	r0, [pc, #56]	; (8001d04 <collectSystemInfo+0x40>)
 8001ccc:	f7fe fc3e 	bl	800054c <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8001cd0:	f7ff fe60 	bl	8001994 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8001cd4:	2111      	movs	r1, #17
 8001cd6:	480c      	ldr	r0, [pc, #48]	; (8001d08 <collectSystemInfo+0x44>)
 8001cd8:	f7fe fc38 	bl	800054c <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8001cdc:	f7ff ff40 	bl	8001b60 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8001ce0:	2113      	movs	r1, #19
 8001ce2:	480a      	ldr	r0, [pc, #40]	; (8001d0c <collectSystemInfo+0x48>)
 8001ce4:	f7fe fc32 	bl	800054c <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8001ce8:	f7ff fee6 	bl	8001ab8 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8001cec:	2113      	movs	r1, #19
 8001cee:	4808      	ldr	r0, [pc, #32]	; (8001d10 <collectSystemInfo+0x4c>)
 8001cf0:	f7fe fc2c 	bl	800054c <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8001cf4:	f7ff ffa6 	bl	8001c44 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <collectSystemInfo+0x50>)
 8001cfc:	f7fe fc26 	bl	800054c <uartTransmit>
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	0800917c 	.word	0x0800917c
 8001d08:	08009190 	.word	0x08009190
 8001d0c:	080091a4 	.word	0x080091a4
 8001d10:	080091b8 	.word	0x080091b8
 8001d14:	080091cc 	.word	0x080091cc

08001d18 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <readResetSource+0xa0>)
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	3301      	adds	r3, #1
 8001d32:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <readResetSource+0xa0>)
 8001d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	3302      	adds	r3, #2
 8001d44:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <readResetSource+0xa0>)
 8001d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da02      	bge.n	8001d54 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	3304      	adds	r3, #4
 8001d52:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <readResetSource+0xa0>)
 8001d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	3308      	adds	r3, #8
 8001d64:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <readResetSource+0xa0>)
 8001d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	3310      	adds	r3, #16
 8001d76:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <readResetSource+0xa0>)
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	3320      	adds	r3, #32
 8001d88:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <readResetSource+0xa0>)
 8001d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	3340      	adds	r3, #64	; 0x40
 8001d9a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <readResetSource+0xa0>)
 8001d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da0:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <readResetSource+0xa0>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8001da8:	79fb      	ldrb	r3, [r7, #7]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8001dc6:	2106      	movs	r1, #6
 8001dc8:	482a      	ldr	r0, [pc, #168]	; (8001e74 <printResetSource+0xb8>)
 8001dca:	f7fe fbbf 	bl	800054c <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d104      	bne.n	8001dde <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8001dd4:	210f      	movs	r1, #15
 8001dd6:	4828      	ldr	r0, [pc, #160]	; (8001e78 <printResetSource+0xbc>)
 8001dd8:	f7fe fbb8 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8001ddc:	e046      	b.n	8001e6c <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8001de8:	2118      	movs	r1, #24
 8001dea:	4824      	ldr	r0, [pc, #144]	; (8001e7c <printResetSource+0xc0>)
 8001dec:	f7fe fbae 	bl	800054c <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8001dfa:	2116      	movs	r1, #22
 8001dfc:	4820      	ldr	r0, [pc, #128]	; (8001e80 <printResetSource+0xc4>)
 8001dfe:	f7fe fba5 	bl	800054c <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8001e0c:	210a      	movs	r1, #10
 8001e0e:	481d      	ldr	r0, [pc, #116]	; (8001e84 <printResetSource+0xc8>)
 8001e10:	f7fe fb9c 	bl	800054c <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8001e1e:	2110      	movs	r1, #16
 8001e20:	4819      	ldr	r0, [pc, #100]	; (8001e88 <printResetSource+0xcc>)
 8001e22:	f7fe fb93 	bl	800054c <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8001e30:	210f      	movs	r1, #15
 8001e32:	4816      	ldr	r0, [pc, #88]	; (8001e8c <printResetSource+0xd0>)
 8001e34:	f7fe fb8a 	bl	800054c <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8001e42:	210f      	movs	r1, #15
 8001e44:	4812      	ldr	r0, [pc, #72]	; (8001e90 <printResetSource+0xd4>)
 8001e46:	f7fe fb81 	bl	800054c <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8001e54:	210a      	movs	r1, #10
 8001e56:	480f      	ldr	r0, [pc, #60]	; (8001e94 <printResetSource+0xd8>)
 8001e58:	f7fe fb78 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da03      	bge.n	8001e6c <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8001e64:	2105      	movs	r1, #5
 8001e66:	480c      	ldr	r0, [pc, #48]	; (8001e98 <printResetSource+0xdc>)
 8001e68:	f7fe fb70 	bl	800054c <uartTransmit>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	080091d0 	.word	0x080091d0
 8001e78:	080091d8 	.word	0x080091d8
 8001e7c:	080091e8 	.word	0x080091e8
 8001e80:	08009204 	.word	0x08009204
 8001e84:	0800921c 	.word	0x0800921c
 8001e88:	08009228 	.word	0x08009228
 8001e8c:	0800923c 	.word	0x0800923c
 8001e90:	0800924c 	.word	0x0800924c
 8001e94:	0800925c 	.word	0x0800925c
 8001e98:	08009268 	.word	0x08009268

08001e9c <bms_init>:
//----------------------------------------------------------------------

//
//----------------------------------------------------------------------
void bms_init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
	uint8_t error, count = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	71fb      	strb	r3, [r7, #7]

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eac:	482a      	ldr	r0, [pc, #168]	; (8001f58 <bms_init+0xbc>)
 8001eae:	f002 fe41 	bl	8004b34 <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 8001eb2:	2014      	movs	r0, #20
 8001eb4:	f001 fd3a 	bl	800392c <HAL_Delay>

	uartTransmit("\n", 1);
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4828      	ldr	r0, [pc, #160]	; (8001f5c <bms_init+0xc0>)
 8001ebc:	f7fe fb46 	bl	800054c <uartTransmit>

	#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
	uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 8001ec0:	2122      	movs	r1, #34	; 0x22
 8001ec2:	4827      	ldr	r0, [pc, #156]	; (8001f60 <bms_init+0xc4>)
 8001ec4:	f7fe fb42 	bl	800054c <uartTransmit>

	do
	{
		if ((error = ltc6811_check()) != 0)										// LTC6804 Selftest durchfuehren
 8001ec8:	f7fe ff24 	bl	8000d14 <ltc6811_check>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71bb      	strb	r3, [r7, #6]
 8001ed0:	79bb      	ldrb	r3, [r7, #6]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01d      	beq.n	8001f12 <bms_init+0x76>
		{
			#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
			uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));				// Ausgabe bei Fehlerhaftem Selbsttest
 8001ed6:	211f      	movs	r1, #31
 8001ed8:	4822      	ldr	r0, [pc, #136]	; (8001f64 <bms_init+0xc8>)
 8001eda:	f7fe fb37 	bl	800054c <uartTransmit>
			leuchten_out.RedLed = 1;											// Variable setzen
 8001ede:	4a22      	ldr	r2, [pc, #136]	; (8001f68 <bms_init+0xcc>)
 8001ee0:	7813      	ldrb	r3, [r2, #0]
 8001ee2:	f043 0320 	orr.w	r3, r3, #32
 8001ee6:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <bms_init+0xcc>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ef8:	481c      	ldr	r0, [pc, #112]	; (8001f6c <bms_init+0xd0>)
 8001efa:	f002 fe1b 	bl	8004b34 <HAL_GPIO_WritePin>

			uartTransmitNumber(error, 10);
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	210a      	movs	r1, #10
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb36 	bl	8000574 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4814      	ldr	r0, [pc, #80]	; (8001f5c <bms_init+0xc0>)
 8001f0c:	f7fe fb1e 	bl	800054c <uartTransmit>
 8001f10:	e003      	b.n	8001f1a <bms_init+0x7e>
		}
		else
		{
			#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
			uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));				// Ausgabe bei Erfolgreichem Selbsttest
 8001f12:	2120      	movs	r1, #32
 8001f14:	4816      	ldr	r0, [pc, #88]	; (8001f70 <bms_init+0xd4>)
 8001f16:	f7fe fb19 	bl	800054c <uartTransmit>
		}

		if (count >= 10)
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	d902      	bls.n	8001f26 <bms_init+0x8a>
		{
			software_error(ERROR_LTC6811_INITIALTEST);
 8001f20:	2008      	movs	r0, #8
 8001f22:	f000 f833 	bl	8001f8c <software_error>
		}
	}
	while (error != 0);
 8001f26:	79bb      	ldrb	r3, [r7, #6]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1cd      	bne.n	8001ec8 <bms_init+0x2c>

	// LTC6811 initialisieren
	ltc6811_init();
 8001f2c:	f7fe fe76 	bl	8000c1c <ltc6811_init>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 8001f30:	f240 7011 	movw	r0, #1809	; 0x711
 8001f34:	f7fe fd70 	bl	8000a18 <ltc6811>
	ltc6811(CLRSTAT);
 8001f38:	f240 7013 	movw	r0, #1811	; 0x713
 8001f3c:	f7fe fd6c 	bl	8000a18 <ltc6811>
	ltc6811(CLRAUX);
 8001f40:	f240 7012 	movw	r0, #1810	; 0x712
 8001f44:	f7fe fd68 	bl	8000a18 <ltc6811>

	// Erster ADC Vorgang ist ungueltig
	ltc6811(ADCVAX | MD73 | CELLALL);										// Initial Command Zellen auslesen
 8001f48:	f240 506f 	movw	r0, #1391	; 0x56f
 8001f4c:	f7fe fd64 	bl	8000a18 <ltc6811>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08009270 	.word	0x08009270
 8001f60:	08009274 	.word	0x08009274
 8001f64:	08009298 	.word	0x08009298
 8001f68:	20000054 	.word	0x20000054
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	080092b8 	.word	0x080092b8

08001f74 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Software Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f96:	b672      	cpsid	i
}
 8001f98:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <software_error+0x68>)
 8001f9c:	7813      	ldrb	r3, [r2, #0]
 8001f9e:	f043 0320 	orr.w	r3, r3, #32
 8001fa2:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <software_error+0x68>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fb4:	4810      	ldr	r0, [pc, #64]	; (8001ff8 <software_error+0x6c>)
 8001fb6:	f002 fdbd 	bl	8004b34 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <software_error+0x68>)
 8001fbc:	7813      	ldrb	r3, [r2, #0]
 8001fbe:	f36f 1386 	bfc	r3, #6, #1
 8001fc2:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <software_error+0x68>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <software_error+0x6c>)
 8001fd4:	f002 fdae 	bl	8004b34 <HAL_GPIO_WritePin>

#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8001fd8:	2124      	movs	r1, #36	; 0x24
 8001fda:	4808      	ldr	r0, [pc, #32]	; (8001ffc <software_error+0x70>)
 8001fdc:	f7fe fab6 	bl	800054c <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8001fe0:	210d      	movs	r1, #13
 8001fe2:	4807      	ldr	r0, [pc, #28]	; (8002000 <software_error+0x74>)
 8001fe4:	f7fe fab2 	bl	800054c <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	210a      	movs	r1, #10
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fac1 	bl	8000574 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 8001ff2:	e7fe      	b.n	8001ff2 <software_error+0x66>
 8001ff4:	20000054 	.word	0x20000054
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	080092d8 	.word	0x080092d8
 8002000:	080092fc 	.word	0x080092fc

08002004 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8002008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800200c:	4850      	ldr	r0, [pc, #320]	; (8002150 <readall_inputs+0x14c>)
 800200e:	f002 fd79 	bl	8004b04 <HAL_GPIO_ReadPin>
 8002012:	4603      	mov	r3, r0
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	b2d9      	uxtb	r1, r3
 800201a:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <readall_inputs+0x150>)
 800201c:	7813      	ldrb	r3, [r2, #0]
 800201e:	f361 1304 	bfi	r3, r1, #4, #1
 8002022:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	484b      	ldr	r0, [pc, #300]	; (8002158 <readall_inputs+0x154>)
 800202a:	f002 fd6b 	bl	8004b04 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	b2d9      	uxtb	r1, r3
 8002036:	4a47      	ldr	r2, [pc, #284]	; (8002154 <readall_inputs+0x150>)
 8002038:	7813      	ldrb	r3, [r2, #0]
 800203a:	f361 1345 	bfi	r3, r1, #5, #1
 800203e:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8002040:	2101      	movs	r1, #1
 8002042:	4846      	ldr	r0, [pc, #280]	; (800215c <readall_inputs+0x158>)
 8002044:	f002 fd5e 	bl	8004b04 <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	b2d9      	uxtb	r1, r3
 8002050:	4a40      	ldr	r2, [pc, #256]	; (8002154 <readall_inputs+0x150>)
 8002052:	7813      	ldrb	r3, [r2, #0]
 8002054:	f361 1386 	bfi	r3, r1, #6, #1
 8002058:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 800205a:	2104      	movs	r1, #4
 800205c:	483f      	ldr	r0, [pc, #252]	; (800215c <readall_inputs+0x158>)
 800205e:	f002 fd51 	bl	8004b04 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	b2d9      	uxtb	r1, r3
 800206a:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <readall_inputs+0x150>)
 800206c:	7813      	ldrb	r3, [r2, #0]
 800206e:	f361 13c7 	bfi	r3, r1, #7, #1
 8002072:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8002074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002078:	4835      	ldr	r0, [pc, #212]	; (8002150 <readall_inputs+0x14c>)
 800207a:	f002 fd43 	bl	8004b04 <HAL_GPIO_ReadPin>
 800207e:	4603      	mov	r3, r0
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	4a36      	ldr	r2, [pc, #216]	; (8002160 <readall_inputs+0x15c>)
 8002088:	7813      	ldrb	r3, [r2, #0]
 800208a:	f361 0300 	bfi	r3, r1, #0, #1
 800208e:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8002090:	2108      	movs	r1, #8
 8002092:	482f      	ldr	r0, [pc, #188]	; (8002150 <readall_inputs+0x14c>)
 8002094:	f002 fd36 	bl	8004b04 <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	b2d9      	uxtb	r1, r3
 80020a0:	4a2f      	ldr	r2, [pc, #188]	; (8002160 <readall_inputs+0x15c>)
 80020a2:	7813      	ldrb	r3, [r2, #0]
 80020a4:	f361 0341 	bfi	r3, r1, #1, #1
 80020a8:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 80020aa:	2120      	movs	r1, #32
 80020ac:	4828      	ldr	r0, [pc, #160]	; (8002150 <readall_inputs+0x14c>)
 80020ae:	f002 fd29 	bl	8004b04 <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	b2d9      	uxtb	r1, r3
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <readall_inputs+0x15c>)
 80020bc:	7813      	ldrb	r3, [r2, #0]
 80020be:	f361 0382 	bfi	r3, r1, #2, #1
 80020c2:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80020c4:	2110      	movs	r1, #16
 80020c6:	4822      	ldr	r0, [pc, #136]	; (8002150 <readall_inputs+0x14c>)
 80020c8:	f002 fd1c 	bl	8004b04 <HAL_GPIO_ReadPin>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	b2d9      	uxtb	r1, r3
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <readall_inputs+0x15c>)
 80020d6:	7813      	ldrb	r3, [r2, #0]
 80020d8:	f361 03c3 	bfi	r3, r1, #3, #1
 80020dc:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 80020de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020e2:	4820      	ldr	r0, [pc, #128]	; (8002164 <readall_inputs+0x160>)
 80020e4:	f002 fd0e 	bl	8004b04 <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	b2d9      	uxtb	r1, r3
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <readall_inputs+0x15c>)
 80020f2:	7813      	ldrb	r3, [r2, #0]
 80020f4:	f361 1304 	bfi	r3, r1, #4, #1
 80020f8:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 80020fa:	2104      	movs	r1, #4
 80020fc:	4819      	ldr	r0, [pc, #100]	; (8002164 <readall_inputs+0x160>)
 80020fe:	f002 fd01 	bl	8004b04 <HAL_GPIO_ReadPin>
 8002102:	4603      	mov	r3, r0
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	b2d9      	uxtb	r1, r3
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <readall_inputs+0x164>)
 800210c:	7813      	ldrb	r3, [r2, #0]
 800210e:	f361 0300 	bfi	r3, r1, #0, #1
 8002112:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8002114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002118:	4810      	ldr	r0, [pc, #64]	; (800215c <readall_inputs+0x158>)
 800211a:	f002 fcf3 	bl	8004b04 <HAL_GPIO_ReadPin>
 800211e:	4603      	mov	r3, r0
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	b2d9      	uxtb	r1, r3
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <readall_inputs+0x164>)
 8002128:	7813      	ldrb	r3, [r2, #0]
 800212a:	f361 0341 	bfi	r3, r1, #1, #1
 800212e:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8002130:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002134:	4809      	ldr	r0, [pc, #36]	; (800215c <readall_inputs+0x158>)
 8002136:	f002 fce5 	bl	8004b04 <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	b2d9      	uxtb	r1, r3
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <readall_inputs+0x164>)
 8002144:	7813      	ldrb	r3, [r2, #0]
 8002146:	f361 0382 	bfi	r3, r1, #2, #1
 800214a:	7013      	strb	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	20000040 	.word	0x20000040
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40020000 	.word	0x40020000
 8002160:	20000044 	.word	0x20000044
 8002164:	40021400 	.word	0x40021400
 8002168:	20000048 	.word	0x20000048

0800216c <millis>:
//----------------------------------------------------------------------

// Funktion millis (ms)
//----------------------------------------------------------------------
uint32_t millis(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002170:	f001 fbd0 	bl	8003914 <HAL_GetTick>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8002180:	2201      	movs	r2, #1
 8002182:	2180      	movs	r1, #128	; 0x80
 8002184:	481b      	ldr	r0, [pc, #108]	; (80021f4 <testPCB_Leds+0x78>)
 8002186:	f002 fcd5 	bl	8004b34 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800218a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800218e:	f001 fbcd 	bl	800392c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8002192:	2200      	movs	r2, #0
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	4817      	ldr	r0, [pc, #92]	; (80021f4 <testPCB_Leds+0x78>)
 8002198:	f002 fccc 	bl	8004b34 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800219c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021a0:	f001 fbc4 	bl	800392c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 80021a4:	2201      	movs	r2, #1
 80021a6:	2104      	movs	r1, #4
 80021a8:	4812      	ldr	r0, [pc, #72]	; (80021f4 <testPCB_Leds+0x78>)
 80021aa:	f002 fcc3 	bl	8004b34 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80021ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b2:	f001 fbbb 	bl	800392c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 80021b6:	2200      	movs	r2, #0
 80021b8:	2104      	movs	r1, #4
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <testPCB_Leds+0x78>)
 80021bc:	f002 fcba 	bl	8004b34 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80021c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021c4:	f001 fbb2 	bl	800392c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 80021c8:	2201      	movs	r2, #1
 80021ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ce:	4809      	ldr	r0, [pc, #36]	; (80021f4 <testPCB_Leds+0x78>)
 80021d0:	f002 fcb0 	bl	8004b34 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80021d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d8:	f001 fba8 	bl	800392c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021e2:	4804      	ldr	r0, [pc, #16]	; (80021f4 <testPCB_Leds+0x78>)
 80021e4:	f002 fca6 	bl	8004b34 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80021e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021ec:	f001 fb9e 	bl	800392c <HAL_Delay>
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40020400 	.word	0x40020400

080021f8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021fe:	463b      	mov	r3, r7
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800220a:	4b44      	ldr	r3, [pc, #272]	; (800231c <MX_ADC1_Init+0x124>)
 800220c:	4a44      	ldr	r2, [pc, #272]	; (8002320 <MX_ADC1_Init+0x128>)
 800220e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002210:	4b42      	ldr	r3, [pc, #264]	; (800231c <MX_ADC1_Init+0x124>)
 8002212:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002216:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <MX_ADC1_Init+0x124>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <MX_ADC1_Init+0x124>)
 8002220:	2201      	movs	r2, #1
 8002222:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002224:	4b3d      	ldr	r3, [pc, #244]	; (800231c <MX_ADC1_Init+0x124>)
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <MX_ADC1_Init+0x124>)
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002232:	4b3a      	ldr	r3, [pc, #232]	; (800231c <MX_ADC1_Init+0x124>)
 8002234:	2200      	movs	r2, #0
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002238:	4b38      	ldr	r3, [pc, #224]	; (800231c <MX_ADC1_Init+0x124>)
 800223a:	4a3a      	ldr	r2, [pc, #232]	; (8002324 <MX_ADC1_Init+0x12c>)
 800223c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800223e:	4b37      	ldr	r3, [pc, #220]	; (800231c <MX_ADC1_Init+0x124>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <MX_ADC1_Init+0x124>)
 8002246:	2206      	movs	r2, #6
 8002248:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <MX_ADC1_Init+0x124>)
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002252:	4b32      	ldr	r3, [pc, #200]	; (800231c <MX_ADC1_Init+0x124>)
 8002254:	2201      	movs	r2, #1
 8002256:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002258:	4830      	ldr	r0, [pc, #192]	; (800231c <MX_ADC1_Init+0x124>)
 800225a:	f001 fbd3 	bl	8003a04 <HAL_ADC_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002264:	f000 fef4 	bl	8003050 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002268:	2307      	movs	r3, #7
 800226a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800226c:	2301      	movs	r3, #1
 800226e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002270:	2301      	movs	r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002274:	463b      	mov	r3, r7
 8002276:	4619      	mov	r1, r3
 8002278:	4828      	ldr	r0, [pc, #160]	; (800231c <MX_ADC1_Init+0x124>)
 800227a:	f001 fc07 	bl	8003a8c <HAL_ADC_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002284:	f000 fee4 	bl	8003050 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002288:	2303      	movs	r3, #3
 800228a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800228c:	2302      	movs	r3, #2
 800228e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002290:	463b      	mov	r3, r7
 8002292:	4619      	mov	r1, r3
 8002294:	4821      	ldr	r0, [pc, #132]	; (800231c <MX_ADC1_Init+0x124>)
 8002296:	f001 fbf9 	bl	8003a8c <HAL_ADC_ConfigChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80022a0:	f000 fed6 	bl	8003050 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80022a4:	2304      	movs	r3, #4
 80022a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80022a8:	2303      	movs	r3, #3
 80022aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ac:	463b      	mov	r3, r7
 80022ae:	4619      	mov	r1, r3
 80022b0:	481a      	ldr	r0, [pc, #104]	; (800231c <MX_ADC1_Init+0x124>)
 80022b2:	f001 fbeb 	bl	8003a8c <HAL_ADC_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80022bc:	f000 fec8 	bl	8003050 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80022c0:	2305      	movs	r3, #5
 80022c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022c4:	2304      	movs	r3, #4
 80022c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c8:	463b      	mov	r3, r7
 80022ca:	4619      	mov	r1, r3
 80022cc:	4813      	ldr	r0, [pc, #76]	; (800231c <MX_ADC1_Init+0x124>)
 80022ce:	f001 fbdd 	bl	8003a8c <HAL_ADC_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80022d8:	f000 feba 	bl	8003050 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80022dc:	2306      	movs	r3, #6
 80022de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80022e0:	2305      	movs	r3, #5
 80022e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022e4:	463b      	mov	r3, r7
 80022e6:	4619      	mov	r1, r3
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <MX_ADC1_Init+0x124>)
 80022ea:	f001 fbcf 	bl	8003a8c <HAL_ADC_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80022f4:	f000 feac 	bl	8003050 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <MX_ADC1_Init+0x130>)
 80022fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80022fc:	2306      	movs	r3, #6
 80022fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002300:	463b      	mov	r3, r7
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_ADC1_Init+0x124>)
 8002306:	f001 fbc1 	bl	8003a8c <HAL_ADC_ConfigChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002310:	f000 fe9e 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000005c 	.word	0x2000005c
 8002320:	40012000 	.word	0x40012000
 8002324:	0f000001 	.word	0x0f000001
 8002328:	10000012 	.word	0x10000012

0800232c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <HAL_ADC_MspInit+0x74>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d123      	bne.n	8002396 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_ADC_MspInit+0x78>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <HAL_ADC_MspInit+0x78>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_ADC_MspInit+0x78>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_ADC_MspInit+0x78>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <HAL_ADC_MspInit+0x78>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_ADC_MspInit+0x78>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 800237e:	23f8      	movs	r3, #248	; 0xf8
 8002380:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002382:	2303      	movs	r3, #3
 8002384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <HAL_ADC_MspInit+0x7c>)
 8002392:	f002 fa0b 	bl	80047ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40012000 	.word	0x40012000
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020000 	.word	0x40020000

080023ac <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_CAN1_Init+0x64>)
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <MX_CAN1_Init+0x68>)
 80023b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <MX_CAN1_Init+0x64>)
 80023b8:	2210      	movs	r2, #16
 80023ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_CAN1_Init+0x64>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <MX_CAN1_Init+0x64>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_CAN1_Init+0x64>)
 80023ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023ce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_CAN1_Init+0x64>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <MX_CAN1_Init+0x64>)
 80023d8:	2200      	movs	r2, #0
 80023da:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MX_CAN1_Init+0x64>)
 80023de:	2200      	movs	r2, #0
 80023e0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <MX_CAN1_Init+0x64>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <MX_CAN1_Init+0x64>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <MX_CAN1_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_CAN1_Init+0x64>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_CAN1_Init+0x64>)
 80023fc:	f001 fd96 	bl	8003f2c <HAL_CAN_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002406:	f000 fe23 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200000a4 	.word	0x200000a4
 8002414:	40006400 	.word	0x40006400

08002418 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 800241c:	4b17      	ldr	r3, [pc, #92]	; (800247c <MX_CAN3_Init+0x64>)
 800241e:	4a18      	ldr	r2, [pc, #96]	; (8002480 <MX_CAN3_Init+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <MX_CAN3_Init+0x64>)
 8002424:	2206      	movs	r2, #6
 8002426:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <MX_CAN3_Init+0x64>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <MX_CAN3_Init+0x64>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <MX_CAN3_Init+0x64>)
 8002436:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800243a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <MX_CAN3_Init+0x64>)
 800243e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002442:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <MX_CAN3_Init+0x64>)
 8002446:	2200      	movs	r2, #0
 8002448:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MX_CAN3_Init+0x64>)
 800244c:	2200      	movs	r2, #0
 800244e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <MX_CAN3_Init+0x64>)
 8002452:	2200      	movs	r2, #0
 8002454:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <MX_CAN3_Init+0x64>)
 8002458:	2200      	movs	r2, #0
 800245a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <MX_CAN3_Init+0x64>)
 800245e:	2200      	movs	r2, #0
 8002460:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <MX_CAN3_Init+0x64>)
 8002464:	2200      	movs	r2, #0
 8002466:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <MX_CAN3_Init+0x64>)
 800246a:	f001 fd5f 	bl	8003f2c <HAL_CAN_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8002474:	f000 fdec 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200000cc 	.word	0x200000cc
 8002480:	40003400 	.word	0x40003400

08002484 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 031c 	add.w	r3, r7, #28
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2e      	ldr	r2, [pc, #184]	; (800255c <HAL_CAN_MspInit+0xd8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d128      	bne.n	80024f8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80024a6:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a2d      	ldr	r2, [pc, #180]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 80024ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024be:	4b28      	ldr	r3, [pc, #160]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a27      	ldr	r2, [pc, #156]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024d6:	2303      	movs	r3, #3
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80024e6:	2309      	movs	r3, #9
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	481c      	ldr	r0, [pc, #112]	; (8002564 <HAL_CAN_MspInit+0xe0>)
 80024f2:	f002 f95b 	bl	80047ac <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80024f6:	e02d      	b.n	8002554 <HAL_CAN_MspInit+0xd0>
  else if(canHandle->Instance==CAN3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_CAN_MspInit+0xe4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d128      	bne.n	8002554 <HAL_CAN_MspInit+0xd0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 8002508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_CAN_MspInit+0xdc>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8002532:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8002544:	230b      	movs	r3, #11
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	4807      	ldr	r0, [pc, #28]	; (800256c <HAL_CAN_MspInit+0xe8>)
 8002550:	f002 f92c 	bl	80047ac <HAL_GPIO_Init>
}
 8002554:	bf00      	nop
 8002556:	3730      	adds	r7, #48	; 0x30
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40006400 	.word	0x40006400
 8002560:	40023800 	.word	0x40023800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40003400 	.word	0x40003400
 800256c:	40020000 	.word	0x40020000

08002570 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
 8002584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002586:	4bb7      	ldr	r3, [pc, #732]	; (8002864 <MX_GPIO_Init+0x2f4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4ab6      	ldr	r2, [pc, #728]	; (8002864 <MX_GPIO_Init+0x2f4>)
 800258c:	f043 0310 	orr.w	r3, r3, #16
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4bb4      	ldr	r3, [pc, #720]	; (8002864 <MX_GPIO_Init+0x2f4>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800259e:	4bb1      	ldr	r3, [pc, #708]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4ab0      	ldr	r2, [pc, #704]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4bae      	ldr	r3, [pc, #696]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025b6:	4bab      	ldr	r3, [pc, #684]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4aaa      	ldr	r2, [pc, #680]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025bc:	f043 0320 	orr.w	r3, r3, #32
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4ba8      	ldr	r3, [pc, #672]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ce:	4ba5      	ldr	r3, [pc, #660]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4aa4      	ldr	r2, [pc, #656]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4ba2      	ldr	r3, [pc, #648]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	4b9f      	ldr	r3, [pc, #636]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a9e      	ldr	r2, [pc, #632]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b9c      	ldr	r3, [pc, #624]	; (8002864 <MX_GPIO_Init+0x2f4>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fe:	4b99      	ldr	r3, [pc, #612]	; (8002864 <MX_GPIO_Init+0x2f4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a98      	ldr	r2, [pc, #608]	; (8002864 <MX_GPIO_Init+0x2f4>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b96      	ldr	r3, [pc, #600]	; (8002864 <MX_GPIO_Init+0x2f4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002616:	4b93      	ldr	r3, [pc, #588]	; (8002864 <MX_GPIO_Init+0x2f4>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a92      	ldr	r2, [pc, #584]	; (8002864 <MX_GPIO_Init+0x2f4>)
 800261c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b90      	ldr	r3, [pc, #576]	; (8002864 <MX_GPIO_Init+0x2f4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800262e:	4b8d      	ldr	r3, [pc, #564]	; (8002864 <MX_GPIO_Init+0x2f4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a8c      	ldr	r2, [pc, #560]	; (8002864 <MX_GPIO_Init+0x2f4>)
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b8a      	ldr	r3, [pc, #552]	; (8002864 <MX_GPIO_Init+0x2f4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8002646:	2200      	movs	r2, #0
 8002648:	f248 0187 	movw	r1, #32903	; 0x8087
 800264c:	4886      	ldr	r0, [pc, #536]	; (8002868 <MX_GPIO_Init+0x2f8>)
 800264e:	f002 fa71 	bl	8004b34 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8002652:	2200      	movs	r2, #0
 8002654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002658:	4884      	ldr	r0, [pc, #528]	; (800286c <MX_GPIO_Init+0x2fc>)
 800265a:	f002 fa6b 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	f242 0102 	movw	r1, #8194	; 0x2002
 8002664:	4882      	ldr	r0, [pc, #520]	; (8002870 <MX_GPIO_Init+0x300>)
 8002666:	f002 fa65 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 800266a:	2200      	movs	r2, #0
 800266c:	f240 6102 	movw	r1, #1538	; 0x602
 8002670:	4880      	ldr	r0, [pc, #512]	; (8002874 <MX_GPIO_Init+0x304>)
 8002672:	f002 fa5f 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8002676:	2200      	movs	r2, #0
 8002678:	f244 0184 	movw	r1, #16516	; 0x4084
 800267c:	487e      	ldr	r0, [pc, #504]	; (8002878 <MX_GPIO_Init+0x308>)
 800267e:	f002 fa59 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8002682:	2201      	movs	r2, #1
 8002684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002688:	4877      	ldr	r0, [pc, #476]	; (8002868 <MX_GPIO_Init+0x2f8>)
 800268a:	f002 fa53 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800268e:	2200      	movs	r2, #0
 8002690:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8002694:	4879      	ldr	r0, [pc, #484]	; (800287c <MX_GPIO_Init+0x30c>)
 8002696:	f002 fa4d 	bl	8004b34 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 800269a:	2200      	movs	r2, #0
 800269c:	2118      	movs	r1, #24
 800269e:	4878      	ldr	r0, [pc, #480]	; (8002880 <MX_GPIO_Init+0x310>)
 80026a0:	f002 fa48 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 80026a4:	f648 0387 	movw	r3, #34951	; 0x8887
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026aa:	2301      	movs	r3, #1
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	486a      	ldr	r0, [pc, #424]	; (8002868 <MX_GPIO_Init+0x2f8>)
 80026be:	f002 f875 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 80026c2:	f44f 739c 	mov.w	r3, #312	; 0x138
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d4:	4619      	mov	r1, r3
 80026d6:	4864      	ldr	r0, [pc, #400]	; (8002868 <MX_GPIO_Init+0x2f8>)
 80026d8:	f002 f868 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80026dc:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e2:	2303      	movs	r3, #3
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ee:	4619      	mov	r1, r3
 80026f0:	485d      	ldr	r0, [pc, #372]	; (8002868 <MX_GPIO_Init+0x2f8>)
 80026f2:	f002 f85b 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80026f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	2301      	movs	r3, #1
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8002708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270c:	4619      	mov	r1, r3
 800270e:	4857      	ldr	r0, [pc, #348]	; (800286c <MX_GPIO_Init+0x2fc>)
 8002710:	f002 f84c 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002714:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800271a:	2303      	movs	r3, #3
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002726:	4619      	mov	r1, r3
 8002728:	4850      	ldr	r0, [pc, #320]	; (800286c <MX_GPIO_Init+0x2fc>)
 800272a:	f002 f83f 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800272e:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002734:	2303      	movs	r3, #3
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800273c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002740:	4619      	mov	r1, r3
 8002742:	484b      	ldr	r0, [pc, #300]	; (8002870 <MX_GPIO_Init+0x300>)
 8002744:	f002 f832 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8002748:	f242 0302 	movw	r3, #8194	; 0x2002
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274e:	2301      	movs	r3, #1
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800275a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275e:	4619      	mov	r1, r3
 8002760:	4843      	ldr	r0, [pc, #268]	; (8002870 <MX_GPIO_Init+0x300>)
 8002762:	f002 f823 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8002766:	f248 0304 	movw	r3, #32772	; 0x8004
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	483d      	ldr	r0, [pc, #244]	; (8002870 <MX_GPIO_Init+0x300>)
 800277c:	f002 f816 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8002780:	f641 0305 	movw	r3, #6149	; 0x1805
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	4837      	ldr	r0, [pc, #220]	; (8002874 <MX_GPIO_Init+0x304>)
 8002796:	f002 f809 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 800279a:	f240 6302 	movw	r3, #1538	; 0x602
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a0:	2301      	movs	r3, #1
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b0:	4619      	mov	r1, r3
 80027b2:	4830      	ldr	r0, [pc, #192]	; (8002874 <MX_GPIO_Init+0x304>)
 80027b4:	f001 fffa 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80027b8:	f64b 7373 	movw	r3, #49011	; 0xbf73
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027be:	2303      	movs	r3, #3
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ca:	4619      	mov	r1, r3
 80027cc:	482a      	ldr	r0, [pc, #168]	; (8002878 <MX_GPIO_Init+0x308>)
 80027ce:	f001 ffed 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80027d2:	f244 0384 	movw	r3, #16516	; 0x4084
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d8:	2301      	movs	r3, #1
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	2300      	movs	r3, #0
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	4823      	ldr	r0, [pc, #140]	; (8002878 <MX_GPIO_Init+0x308>)
 80027ec:	f001 ffde 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 80027f0:	f240 1343 	movw	r3, #323	; 0x143
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f6:	2303      	movs	r3, #3
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002802:	4619      	mov	r1, r3
 8002804:	481d      	ldr	r0, [pc, #116]	; (800287c <MX_GPIO_Init+0x30c>)
 8002806:	f001 ffd1 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 800280a:	f240 7304 	movw	r3, #1796	; 0x704
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002810:	2303      	movs	r3, #3
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281c:	4619      	mov	r1, r3
 800281e:	4818      	ldr	r0, [pc, #96]	; (8002880 <MX_GPIO_Init+0x310>)
 8002820:	f001 ffc4 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8002824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002836:	4619      	mov	r1, r3
 8002838:	4811      	ldr	r0, [pc, #68]	; (8002880 <MX_GPIO_Init+0x310>)
 800283a:	f001 ffb7 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800283e:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002844:	2301      	movs	r3, #1
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284c:	2300      	movs	r3, #0
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002854:	4619      	mov	r1, r3
 8002856:	4809      	ldr	r0, [pc, #36]	; (800287c <MX_GPIO_Init+0x30c>)
 8002858:	f001 ffa8 	bl	80047ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 800285c:	2318      	movs	r3, #24
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
 8002860:	e010      	b.n	8002884 <MX_GPIO_Init+0x314>
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40021000 	.word	0x40021000
 800286c:	40020800 	.word	0x40020800
 8002870:	40021400 	.word	0x40021400
 8002874:	40020000 	.word	0x40020000
 8002878:	40020400 	.word	0x40020400
 800287c:	40021800 	.word	0x40021800
 8002880:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002884:	2301      	movs	r3, #1
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002894:	4619      	mov	r1, r3
 8002896:	4803      	ldr	r0, [pc, #12]	; (80028a4 <MX_GPIO_Init+0x334>)
 8002898:	f001 ff88 	bl	80047ac <HAL_GPIO_Init>

}
 800289c:	bf00      	nop
 800289e:	3738      	adds	r7, #56	; 0x38
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40020c00 	.word	0x40020c00

080028a8 <calculateMovingAverage>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
 80028b2:	460b      	mov	r3, r1
 80028b4:	80bb      	strh	r3, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 80028ba:	88ba      	ldrh	r2, [r7, #4]
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	1ad2      	subs	r2, r2, r3
 80028c0:	887b      	ldrh	r3, [r7, #2]
 80028c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	4413      	add	r3, r2
 80028cc:	b29b      	uxth	r3, r3
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b0da      	sub	sp, #360	; 0x168
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e2:	f000 ffc6 	bl	8003872 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t data[36] = {0};
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80028ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80028f0:	2220      	movs	r2, #32
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f006 fad7 	bl	8008ea8 <memset>
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80028fa:	4bbd      	ldr	r3, [pc, #756]	; (8002bf0 <main+0x314>)
 80028fc:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8002900:	461d      	mov	r5, r3
 8002902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002906:	e895 0003 	ldmia.w	r5, {r0, r1}
 800290a:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 800290e:	4bb9      	ldr	r3, [pc, #740]	; (8002bf4 <main+0x318>)
 8002910:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8002914:	461d      	mov	r5, r3
 8002916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800291a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800291e:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8002922:	4bb5      	ldr	r3, [pc, #724]	; (8002bf8 <main+0x31c>)
 8002924:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8002928:	461d      	mov	r5, r3
 800292a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002932:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxVoltage11 = {BMS_CAN_ZELLEN11, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002936:	4bb1      	ldr	r3, [pc, #708]	; (8002bfc <main+0x320>)
 8002938:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800293c:	461d      	mov	r5, r3
 800293e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002942:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002946:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxVoltage12 = {BMS_CAN_ZELLEN12, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800294a:	4bad      	ldr	r3, [pc, #692]	; (8002c00 <main+0x324>)
 800294c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8002950:	461d      	mov	r5, r3
 8002952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002956:	e895 0003 	ldmia.w	r5, {r0, r1}
 800295a:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxVoltage13 = {BMS_CAN_ZELLEN13, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800295e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002966:	4aa7      	ldr	r2, [pc, #668]	; (8002c04 <main+0x328>)
 8002968:	461c      	mov	r4, r3
 800296a:	4615      	mov	r5, r2
 800296c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002970:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002974:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxTemperature11 = {BMS_CAN_TEMPERATUR11, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002978:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800297c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002980:	4aa1      	ldr	r2, [pc, #644]	; (8002c08 <main+0x32c>)
 8002982:	461c      	mov	r4, r3
 8002984:	4615      	mov	r5, r2
 8002986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800298a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800298e:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxTemperature12 = {BMS_CAN_TEMPERATUR12, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002992:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002996:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800299a:	4a9c      	ldr	r2, [pc, #624]	; (8002c0c <main+0x330>)
 800299c:	461c      	mov	r4, r3
 800299e:	4615      	mov	r5, r2
 80029a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029a8:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxTemperature13 = {BMS_CAN_TEMPERATUR13, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80029ac:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80029b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029b4:	4a96      	ldr	r2, [pc, #600]	; (8002c10 <main+0x334>)
 80029b6:	461c      	mov	r4, r3
 80029b8:	4615      	mov	r5, r2
 80029ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029c2:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxTemperature14 = {BMS_CAN_TEMPERATUR14, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80029c6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80029ca:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029ce:	4a91      	ldr	r2, [pc, #580]	; (8002c14 <main+0x338>)
 80029d0:	461c      	mov	r4, r3
 80029d2:	4615      	mov	r5, r2
 80029d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029dc:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029e0:	f000 fa86 	bl	8002ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029e4:	f7ff fdc4 	bl	8002570 <MX_GPIO_Init>
  MX_CAN1_Init();
 80029e8:	f7ff fce0 	bl	80023ac <MX_CAN1_Init>
  MX_SPI4_Init();
 80029ec:	f000 fb9c 	bl	8003128 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80029f0:	f000 fe88 	bl	8003704 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80029f4:	f7ff fc00 	bl	80021f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80029f8:	f000 fcdc 	bl	80033b4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80029fc:	f000 fd62 	bl	80034c4 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002a00:	f000 fb54 	bl	80030ac <MX_SPI1_Init>
  MX_CAN3_Init();
 8002a04:	f7ff fd08 	bl	8002418 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8002a08:	f7ff f986 	bl	8001d18 <readResetSource>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f9d4 	bl	8001dbc <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8002a14:	213a      	movs	r1, #58	; 0x3a
 8002a16:	4880      	ldr	r0, [pc, #512]	; (8002c18 <main+0x33c>)
 8002a18:	f7fd fd98 	bl	800054c <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8002a1c:	f7ff f952 	bl	8001cc4 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8002a20:	f7ff fbac 	bl	800217c <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8002a24:	f7ff faee 	bl	8002004 <readall_inputs>

  	// BMS initialisieren
  	bms_init();
 8002a28:	f7ff fa38 	bl	8001e9c <bms_init>

  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 8002a2c:	487b      	ldr	r0, [pc, #492]	; (8002c1c <main+0x340>)
 8002a2e:	f004 f921 	bl	8006c74 <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 8002a32:	2100      	movs	r1, #0
 8002a34:	4879      	ldr	r0, [pc, #484]	; (8002c1c <main+0x340>)
 8002a36:	f004 fa43 	bl	8006ec0 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	4877      	ldr	r0, [pc, #476]	; (8002c1c <main+0x340>)
 8002a3e:	f004 fa3f 	bl	8006ec0 <HAL_TIM_IC_Start_IT>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 8002a42:	4877      	ldr	r0, [pc, #476]	; (8002c20 <main+0x344>)
 8002a44:	f001 fc5a 	bl	80042fc <HAL_CAN_Start>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
 8002a4e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <main+0x188>
  	{
  		/* Start Error */
  		hal_error(status);
 8002a56:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fa8a 	bl	8001f74 <hal_error>
  		Error_Handler();
 8002a60:	f000 faf6 	bl	8003050 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8002a64:	210a      	movs	r1, #10
 8002a66:	486f      	ldr	r0, [pc, #444]	; (8002c24 <main+0x348>)
 8002a68:	f7fd fd70 	bl	800054c <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	486c      	ldr	r0, [pc, #432]	; (8002c20 <main+0x344>)
 8002a70:	f001 fd63 	bl	800453a <HAL_CAN_ActivateNotification>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
 8002a7a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <main+0x1b4>
  	{
  		/* Notification Error */
  		hal_error(status);
 8002a82:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fa74 	bl	8001f74 <hal_error>
  		Error_Handler();
 8002a8c:	f000 fae0 	bl	8003050 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8002a90:	210d      	movs	r1, #13
 8002a92:	4865      	ldr	r0, [pc, #404]	; (8002c28 <main+0x34c>)
 8002a94:	f7fd fd5a 	bl	800054c <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    sFilterConfig.FilterIdHigh = 0x0000;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    sFilterConfig.FilterIdLow = 0x0000;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    sFilterConfig.FilterFIFOAssignment = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    sFilterConfig.FilterActivation = ENABLE;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8002ace:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4852      	ldr	r0, [pc, #328]	; (8002c20 <main+0x344>)
 8002ad6:	f001 fb25 	bl	8004124 <HAL_CAN_ConfigFilter>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
 8002ae0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <main+0x21a>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8002ae8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fa41 	bl	8001f74 <hal_error>
  		Error_Handler();
 8002af2:	f000 faad 	bl	8003050 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8002afc:	e00f      	b.n	8002b1e <main+0x242>
    {
    	TxData[j] = (j + 1);
 8002afe:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8002b02:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8002b06:	3201      	adds	r2, #1
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b0e:	443b      	add	r3, r7
 8002b10:	f803 2c44 	strb.w	r2, [r3, #-68]
    for (uint8_t j = 0; j < 8; j++)
 8002b14:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8002b1e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8002b22:	2b07      	cmp	r3, #7
 8002b24:	d9eb      	bls.n	8002afe <main+0x222>
    }

	if (!(sdc_in.sdcinput && 0b00001111))										// SDC OK; Motor, BTB, IMD und HVIL OK
 8002b26:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <main+0x350>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 8090 	bne.w	8002c50 <main+0x374>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 8002b30:	211b      	movs	r1, #27
 8002b32:	483f      	ldr	r0, [pc, #252]	; (8002c30 <main+0x354>)
 8002b34:	f7fd fd0a 	bl	800054c <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 8002b38:	4a3e      	ldr	r2, [pc, #248]	; (8002c34 <main+0x358>)
 8002b3a:	7813      	ldrb	r3, [r2, #0]
 8002b3c:	f36f 1386 	bfc	r3, #6, #1
 8002b40:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 8002b42:	4a3c      	ldr	r2, [pc, #240]	; (8002c34 <main+0x358>)
 8002b44:	7813      	ldrb	r3, [r2, #0]
 8002b46:	f043 0320 	orr.w	r3, r3, #32
 8002b4a:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuErrorLed = 0;
 8002b4c:	4a39      	ldr	r2, [pc, #228]	; (8002c34 <main+0x358>)
 8002b4e:	7813      	ldrb	r3, [r2, #0]
 8002b50:	f36f 0382 	bfc	r3, #2, #1
 8002b54:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002b56:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <main+0x358>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	2104      	movs	r1, #4
 8002b64:	4834      	ldr	r0, [pc, #208]	; (8002c38 <main+0x35c>)
 8002b66:	f001 ffe5 	bl	8004b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 8002b6a:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <main+0x358>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b7a:	482f      	ldr	r0, [pc, #188]	; (8002c38 <main+0x35c>)
 8002b7c:	f001 ffda 	bl	8004b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);
 8002b80:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <main+0x358>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	482b      	ldr	r0, [pc, #172]	; (8002c3c <main+0x360>)
 8002b90:	f001 ffd0 	bl	8004b34 <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if(!(sdc_in.MotorSDC == 1))
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <main+0x350>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <main+0x2ce>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 8002ba2:	212a      	movs	r1, #42	; 0x2a
 8002ba4:	4826      	ldr	r0, [pc, #152]	; (8002c40 <main+0x364>)
 8002ba6:	f7fd fcd1 	bl	800054c <uartTransmit>
		}

		// BamoCar Fehler
		if (!(sdc_in.BTB_SDC == 1))
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <main+0x350>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <main+0x2e4>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 8002bb8:	2128      	movs	r1, #40	; 0x28
 8002bba:	4822      	ldr	r0, [pc, #136]	; (8002c44 <main+0x368>)
 8002bbc:	f7fd fcc6 	bl	800054c <uartTransmit>
		}

		// HVIL Fehler
		if (!(sdc_in.HVIL == 1))
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <main+0x350>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <main+0x2fa>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 8002bce:	2120      	movs	r1, #32
 8002bd0:	481d      	ldr	r0, [pc, #116]	; (8002c48 <main+0x36c>)
 8002bd2:	f7fd fcbb 	bl	800054c <uartTransmit>
		}

		// IMD Fehler
		if (!(sdc_in.IMD_OK_IN == 1))
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <main+0x350>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d157      	bne.n	8002c94 <main+0x3b8>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 8002be4:	211a      	movs	r1, #26
 8002be6:	4819      	ldr	r0, [pc, #100]	; (8002c4c <main+0x370>)
 8002be8:	f7fd fcb0 	bl	800054c <uartTransmit>
 8002bec:	e052      	b.n	8002c94 <main+0x3b8>
 8002bee:	bf00      	nop
 8002bf0:	08009428 	.word	0x08009428
 8002bf4:	08009440 	.word	0x08009440
 8002bf8:	08009458 	.word	0x08009458
 8002bfc:	08009470 	.word	0x08009470
 8002c00:	08009488 	.word	0x08009488
 8002c04:	080094a0 	.word	0x080094a0
 8002c08:	080094b8 	.word	0x080094b8
 8002c0c:	080094d0 	.word	0x080094d0
 8002c10:	080094e8 	.word	0x080094e8
 8002c14:	08009500 	.word	0x08009500
 8002c18:	0800930c 	.word	0x0800930c
 8002c1c:	200001c0 	.word	0x200001c0
 8002c20:	200000cc 	.word	0x200000cc
 8002c24:	08009348 	.word	0x08009348
 8002c28:	08009354 	.word	0x08009354
 8002c2c:	20000044 	.word	0x20000044
 8002c30:	08009364 	.word	0x08009364
 8002c34:	20000054 	.word	0x20000054
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	40021800 	.word	0x40021800
 8002c40:	08009380 	.word	0x08009380
 8002c44:	080093ac 	.word	0x080093ac
 8002c48:	080093d4 	.word	0x080093d4
 8002c4c:	080093f4 	.word	0x080093f4
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 8002c50:	4a9c      	ldr	r2, [pc, #624]	; (8002ec4 <main+0x5e8>)
 8002c52:	7813      	ldrb	r3, [r2, #0]
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 8002c5a:	4b9a      	ldr	r3, [pc, #616]	; (8002ec4 <main+0x5e8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	2180      	movs	r1, #128	; 0x80
 8002c68:	4897      	ldr	r0, [pc, #604]	; (8002ec8 <main+0x5ec>)
 8002c6a:	f001 ff63 	bl	8004b34 <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 8002c6e:	4a97      	ldr	r2, [pc, #604]	; (8002ecc <main+0x5f0>)
 8002c70:	7813      	ldrb	r3, [r2, #0]
 8002c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c76:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002c78:	4b94      	ldr	r3, [pc, #592]	; (8002ecc <main+0x5f0>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	2104      	movs	r1, #4
 8002c86:	4892      	ldr	r0, [pc, #584]	; (8002ed0 <main+0x5f4>)
 8002c88:	f001 ff54 	bl	8004b34 <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 8002c8c:	2115      	movs	r1, #21
 8002c8e:	4891      	ldr	r0, [pc, #580]	; (8002ed4 <main+0x5f8>)
 8002c90:	f7fd fc5c 	bl	800054c <uartTransmit>
	}

	uint32_t lasttime100ms = millis();
 8002c94:	f7ff fa6a 	bl	800216c <millis>
 8002c98:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
	uint32_t lasttime200ms = millis();
 8002c9c:	f7ff fa66 	bl	800216c <millis>
 8002ca0:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	uint32_t lasttime500ms = millis();
 8002ca4:	f7ff fa62 	bl	800216c <millis>
 8002ca8:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
	uint32_t lasttime1s = millis();
 8002cac:	f7ff fa5e 	bl	800216c <millis>
 8002cb0:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird alle 100 Millisekunden ausgefuehrt
		if (millis() - 100 > lasttime100ms)
 8002cb4:	f7ff fa5a 	bl	800216c <millis>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	3b64      	subs	r3, #100	; 0x64
 8002cbc:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d205      	bcs.n	8002cd0 <main+0x3f4>
		{
			// Lese alle Eingaenge
			readall_inputs();
 8002cc4:	f7ff f99e 	bl	8002004 <readall_inputs>

			lasttime100ms = millis();
 8002cc8:	f7ff fa50 	bl	800216c <millis>
 8002ccc:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (millis() - 250 > lasttime200ms)
 8002cd0:	f7ff fa4c 	bl	800216c <millis>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	3bfa      	subs	r3, #250	; 0xfa
 8002cd8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d203      	bcs.n	8002ce8 <main+0x40c>
		{
			// Lese IMD ein
			//imd_status();

			lasttime200ms = millis();
 8002ce0:	f7ff fa44 	bl	800216c <millis>
 8002ce4:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
		}

		// Task wird alle 250 Millisekunden ausgefuehrt
		if (millis() - 500 > lasttime500ms)
 8002ce8:	f7ff fa40 	bl	800216c <millis>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002cf2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	f080 80c0 	bcs.w	8002e7c <main+0x5a0>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8002cfc:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <main+0x5e8>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
			OutData[1] = highcurrent_out.high_out;
 8002d04:	4b74      	ldr	r3, [pc, #464]	; (8002ed8 <main+0x5fc>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
			OutData[2] = leuchten_out.ledoutput;
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <main+0x5f0>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			OutData[3] = komfort_out.komfortoutput;
 8002d14:	4b71      	ldr	r3, [pc, #452]	; (8002edc <main+0x600>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8002d1c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002d20:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002d24:	2301      	movs	r3, #1
 8002d26:	486e      	ldr	r0, [pc, #440]	; (8002ee0 <main+0x604>)
 8002d28:	f001 fb2c 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002d32:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f91c 	bl	8001f74 <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8002d3c:	4b69      	ldr	r3, [pc, #420]	; (8002ee4 <main+0x608>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			InData[1] = sdc_in.sdcinput;
 8002d44:	4b68      	ldr	r3, [pc, #416]	; (8002ee8 <main+0x60c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			InData[2] = komfort_in.komfortinput;
 8002d4c:	4b67      	ldr	r3, [pc, #412]	; (8002eec <main+0x610>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX1);
 8002d54:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002d58:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	4860      	ldr	r0, [pc, #384]	; (8002ee0 <main+0x604>)
 8002d60:	f001 fb10 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002d6a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f900 	bl	8001f74 <hal_error>

			// Sende Nachricht Zellspannung 1 - 4
			status = HAL_CAN_AddTxMessage(&hcan3, &TxVoltage11, &data[0], (uint32_t *)CAN_TX_MAILBOX0);
 8002d74:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8002d78:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	4858      	ldr	r0, [pc, #352]	; (8002ee0 <main+0x604>)
 8002d80:	f001 fb00 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002d8a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff f8f0 	bl	8001f74 <hal_error>

			HAL_Delay(1);
 8002d94:	2001      	movs	r0, #1
 8002d96:	f000 fdc9 	bl	800392c <HAL_Delay>

			// Sende Nachricht Zellspannung 5 - 8
			status = HAL_CAN_AddTxMessage(&hcan3, &TxVoltage12, &data[6], (uint32_t *)CAN_TX_MAILBOX1);
 8002d9a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002d9e:	1d9a      	adds	r2, r3, #6
 8002da0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002da4:	2302      	movs	r3, #2
 8002da6:	484e      	ldr	r0, [pc, #312]	; (8002ee0 <main+0x604>)
 8002da8:	f001 faec 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002db2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f8dc 	bl	8001f74 <hal_error>

			// Sende Nachricht Zellspannung 9 - 12
			status = HAL_CAN_AddTxMessage(&hcan3, &TxVoltage13, &data[12], (uint32_t *)CAN_TX_MAILBOX2);
 8002dbc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002dc0:	f103 020c 	add.w	r2, r3, #12
 8002dc4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002dc8:	2304      	movs	r3, #4
 8002dca:	4845      	ldr	r0, [pc, #276]	; (8002ee0 <main+0x604>)
 8002dcc:	f001 fada 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002dd6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f8ca 	bl	8001f74 <hal_error>

			// Sende Nachricht Zelltemperaturen 1 - 4
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperature11, &data[0], (uint32_t *)CAN_TX_MAILBOX0);
 8002de0:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8002de4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002de8:	2301      	movs	r3, #1
 8002dea:	483d      	ldr	r0, [pc, #244]	; (8002ee0 <main+0x604>)
 8002dec:	f001 faca 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002df6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f8ba 	bl	8001f74 <hal_error>

			HAL_Delay(1);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f000 fd93 	bl	800392c <HAL_Delay>

			// Sende Nachricht Zelltemperaturen 5 - 8
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperature12, &data[6], (uint32_t *)CAN_TX_MAILBOX1);
 8002e06:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002e0a:	1d9a      	adds	r2, r3, #6
 8002e0c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002e10:	2302      	movs	r3, #2
 8002e12:	4833      	ldr	r0, [pc, #204]	; (8002ee0 <main+0x604>)
 8002e14:	f001 fab6 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002e1e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f8a6 	bl	8001f74 <hal_error>

			// Sende Nachricht Zelltemperaturen 9 - 12
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperature13, &data[12], (uint32_t *)CAN_TX_MAILBOX2);
 8002e28:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002e2c:	f103 020c 	add.w	r2, r3, #12
 8002e30:	f107 011c 	add.w	r1, r7, #28
 8002e34:	2304      	movs	r3, #4
 8002e36:	482a      	ldr	r0, [pc, #168]	; (8002ee0 <main+0x604>)
 8002e38:	f001 faa4 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002e42:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f894 	bl	8001f74 <hal_error>

			// Sende Nachricht Zelltemperaturen 13 - 16
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperature14, &data[18], (uint32_t *)CAN_TX_MAILBOX2);
 8002e4c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002e50:	f103 0212 	add.w	r2, r3, #18
 8002e54:	1d39      	adds	r1, r7, #4
 8002e56:	2304      	movs	r3, #4
 8002e58:	4821      	ldr	r0, [pc, #132]	; (8002ee0 <main+0x604>)
 8002e5a:	f001 fa93 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002e64:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f883 	bl	8001f74 <hal_error>

			HAL_Delay(1);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f000 fd5c 	bl	800392c <HAL_Delay>

			lasttime500ms = millis();
 8002e74:	f7ff f97a 	bl	800216c <millis>
 8002e78:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (millis() - 1000 > lasttime1s)
 8002e7c:	f7ff f976 	bl	800216c <millis>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002e86:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	f4bf af12 	bcs.w	8002cb4 <main+0x3d8>
		{
			// Sende Nachricht Dummy
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX2);
 8002e90:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8002e94:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8002e98:	2304      	movs	r3, #4
 8002e9a:	4811      	ldr	r0, [pc, #68]	; (8002ee0 <main+0x604>)
 8002e9c:	f001 fa72 	bl	8004384 <HAL_CAN_AddTxMessage>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			hal_error(status);
 8002ea6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff f862 	bl	8001f74 <hal_error>

			HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <main+0x5f4>)
 8002eb4:	f001 fe57 	bl	8004b66 <HAL_GPIO_TogglePin>

			lasttime1s = millis();
 8002eb8:	f7ff f958 	bl	800216c <millis>
 8002ebc:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
		if (millis() - 100 > lasttime100ms)
 8002ec0:	e6f8      	b.n	8002cb4 <main+0x3d8>
 8002ec2:	bf00      	nop
 8002ec4:	2000004c 	.word	0x2000004c
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	20000054 	.word	0x20000054
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	08009410 	.word	0x08009410
 8002ed8:	20000050 	.word	0x20000050
 8002edc:	20000058 	.word	0x20000058
 8002ee0:	200000cc 	.word	0x200000cc
 8002ee4:	20000040 	.word	0x20000040
 8002ee8:	20000044 	.word	0x20000044
 8002eec:	20000048 	.word	0x20000048

08002ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b094      	sub	sp, #80	; 0x50
 8002ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	2234      	movs	r2, #52	; 0x34
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f005 ffd2 	bl	8008ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f04:	f107 0308 	add.w	r3, r7, #8
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <SystemClock_Config+0xd8>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <SystemClock_Config+0xd8>)
 8002f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <SystemClock_Config+0xd8>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <SystemClock_Config+0xdc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a26      	ldr	r2, [pc, #152]	; (8002fcc <SystemClock_Config+0xdc>)
 8002f32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <SystemClock_Config+0xdc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002f58:	2319      	movs	r3, #25
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002f5c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002f60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f62:	2302      	movs	r3, #2
 8002f64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002f66:	2308      	movs	r3, #8
 8002f68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f6e:	f107 031c 	add.w	r3, r7, #28
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fe62 	bl	8004c3c <HAL_RCC_OscConfig>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002f7e:	f000 f867 	bl	8003050 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f82:	f001 fe0b 	bl	8004b9c <HAL_PWREx_EnableOverDrive>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002f8c:	f000 f860 	bl	8003050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f90:	230f      	movs	r3, #15
 8002f92:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f94:	2302      	movs	r3, #2
 8002f96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002fa8:	f107 0308 	add.w	r3, r7, #8
 8002fac:	2107      	movs	r1, #7
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 f8f2 	bl	8005198 <HAL_RCC_ClockConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002fba:	f000 f849 	bl	8003050 <Error_Handler>
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3750      	adds	r7, #80	; 0x50
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000

08002fd0 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	// Timer IMD
	if (htim == &htim1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d12c      	bne.n	800303a <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7f1b      	ldrb	r3, [r3, #28]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d112      	bne.n	800300e <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29c      	uxth	r4, r3
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4814      	ldr	r0, [pc, #80]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002ff2:	f004 fbc7 	bl	8007784 <HAL_TIM_ReadCapturedValue>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff fc52 	bl	80028a8 <calculateMovingAverage>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800300a:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 800300c:	e015      	b.n	800303a <HAL_TIM_PeriodElapsedCallback+0x6a>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7f1b      	ldrb	r3, [r3, #28]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d111      	bne.n	800303a <HAL_TIM_PeriodElapsedCallback+0x6a>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	b29c      	uxth	r4, r3
 800301c:	2104      	movs	r1, #4
 800301e:	4809      	ldr	r0, [pc, #36]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003020:	f004 fbb0 	bl	8007784 <HAL_TIM_ReadCapturedValue>
 8003024:	4603      	mov	r3, r0
 8003026:	b29b      	uxth	r3, r3
 8003028:	2240      	movs	r2, #64	; 0x40
 800302a:	4619      	mov	r1, r3
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff fc3b 	bl	80028a8 <calculateMovingAverage>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003038:	801a      	strh	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}
 8003042:	bf00      	nop
 8003044:	200001c0 	.word	0x200001c0
 8003048:	200000f4 	.word	0x200000f4
 800304c:	200000f6 	.word	0x200000f6

08003050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003054:	b672      	cpsid	i
}
 8003056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <Error_Handler+0x50>)
 800305a:	7813      	ldrb	r3, [r2, #0]
 800305c:	f043 0320 	orr.w	r3, r3, #32
 8003060:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <Error_Handler+0x50>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003072:	480c      	ldr	r0, [pc, #48]	; (80030a4 <Error_Handler+0x54>)
 8003074:	f001 fd5e 	bl	8004b34 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8003078:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <Error_Handler+0x50>)
 800307a:	7813      	ldrb	r3, [r2, #0]
 800307c:	f36f 1386 	bfc	r3, #6, #1
 8003080:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <Error_Handler+0x50>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	2104      	movs	r1, #4
 8003090:	4804      	ldr	r0, [pc, #16]	; (80030a4 <Error_Handler+0x54>)
 8003092:	f001 fd4f 	bl	8004b34 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8003096:	2122      	movs	r1, #34	; 0x22
 8003098:	4803      	ldr	r0, [pc, #12]	; (80030a8 <Error_Handler+0x58>)
 800309a:	f7fd fa57 	bl	800054c <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 800309e:	e7fe      	b.n	800309e <Error_Handler+0x4e>
 80030a0:	20000054 	.word	0x20000054
 80030a4:	40020400 	.word	0x40020400
 80030a8:	08009518 	.word	0x08009518

080030ac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <MX_SPI1_Init+0x74>)
 80030b2:	4a1c      	ldr	r2, [pc, #112]	; (8003124 <MX_SPI1_Init+0x78>)
 80030b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <MX_SPI1_Init+0x74>)
 80030b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <MX_SPI1_Init+0x74>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <MX_SPI1_Init+0x74>)
 80030c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80030ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <MX_SPI1_Init+0x74>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <MX_SPI1_Init+0x74>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <MX_SPI1_Init+0x74>)
 80030da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80030de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <MX_SPI1_Init+0x74>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <MX_SPI1_Init+0x74>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <MX_SPI1_Init+0x74>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <MX_SPI1_Init+0x74>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <MX_SPI1_Init+0x74>)
 80030fa:	2207      	movs	r2, #7
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <MX_SPI1_Init+0x74>)
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <MX_SPI1_Init+0x74>)
 8003106:	2208      	movs	r2, #8
 8003108:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800310a:	4805      	ldr	r0, [pc, #20]	; (8003120 <MX_SPI1_Init+0x74>)
 800310c:	f002 fe52 	bl	8005db4 <HAL_SPI_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003116:	f7ff ff9b 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200000f8 	.word	0x200000f8
 8003124:	40013000 	.word	0x40013000

08003128 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <MX_SPI4_Init+0x74>)
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <MX_SPI4_Init+0x78>)
 8003130:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <MX_SPI4_Init+0x74>)
 8003134:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003138:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <MX_SPI4_Init+0x74>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003140:	4b16      	ldr	r3, [pc, #88]	; (800319c <MX_SPI4_Init+0x74>)
 8003142:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003146:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003148:	4b14      	ldr	r3, [pc, #80]	; (800319c <MX_SPI4_Init+0x74>)
 800314a:	2202      	movs	r2, #2
 800314c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <MX_SPI4_Init+0x74>)
 8003150:	2201      	movs	r2, #1
 8003152:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <MX_SPI4_Init+0x74>)
 8003156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <MX_SPI4_Init+0x74>)
 800315e:	2230      	movs	r2, #48	; 0x30
 8003160:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003162:	4b0e      	ldr	r3, [pc, #56]	; (800319c <MX_SPI4_Init+0x74>)
 8003164:	2200      	movs	r2, #0
 8003166:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <MX_SPI4_Init+0x74>)
 800316a:	2200      	movs	r2, #0
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316e:	4b0b      	ldr	r3, [pc, #44]	; (800319c <MX_SPI4_Init+0x74>)
 8003170:	2200      	movs	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003174:	4b09      	ldr	r3, [pc, #36]	; (800319c <MX_SPI4_Init+0x74>)
 8003176:	2207      	movs	r2, #7
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <MX_SPI4_Init+0x74>)
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <MX_SPI4_Init+0x74>)
 8003182:	2200      	movs	r2, #0
 8003184:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003186:	4805      	ldr	r0, [pc, #20]	; (800319c <MX_SPI4_Init+0x74>)
 8003188:	f002 fe14 	bl	8005db4 <HAL_SPI_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8003192:	f7ff ff5d 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000015c 	.word	0x2000015c
 80031a0:	40013400 	.word	0x40013400

080031a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a3d      	ldr	r2, [pc, #244]	; (80032b8 <HAL_SPI_MspInit+0x114>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d145      	bne.n	8003252 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031c6:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <HAL_SPI_MspInit+0x118>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	4a3c      	ldr	r2, [pc, #240]	; (80032bc <HAL_SPI_MspInit+0x118>)
 80031cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031d0:	6453      	str	r3, [r2, #68]	; 0x44
 80031d2:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <HAL_SPI_MspInit+0x118>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031de:	4b37      	ldr	r3, [pc, #220]	; (80032bc <HAL_SPI_MspInit+0x118>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a36      	ldr	r2, [pc, #216]	; (80032bc <HAL_SPI_MspInit+0x118>)
 80031e4:	f043 0308 	orr.w	r3, r3, #8
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b34      	ldr	r3, [pc, #208]	; (80032bc <HAL_SPI_MspInit+0x118>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_SPI_MspInit+0x118>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a30      	ldr	r2, [pc, #192]	; (80032bc <HAL_SPI_MspInit+0x118>)
 80031fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <HAL_SPI_MspInit+0x118>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321a:	2303      	movs	r3, #3
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800321e:	2305      	movs	r3, #5
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003222:	f107 031c 	add.w	r3, r7, #28
 8003226:	4619      	mov	r1, r3
 8003228:	4825      	ldr	r0, [pc, #148]	; (80032c0 <HAL_SPI_MspInit+0x11c>)
 800322a:	f001 fabf 	bl	80047ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 800322e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003240:	2305      	movs	r3, #5
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	4619      	mov	r1, r3
 800324a:	481e      	ldr	r0, [pc, #120]	; (80032c4 <HAL_SPI_MspInit+0x120>)
 800324c:	f001 faae 	bl	80047ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003250:	e02d      	b.n	80032ae <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_SPI_MspInit+0x124>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d128      	bne.n	80032ae <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800325c:	4b17      	ldr	r3, [pc, #92]	; (80032bc <HAL_SPI_MspInit+0x118>)
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	4a16      	ldr	r2, [pc, #88]	; (80032bc <HAL_SPI_MspInit+0x118>)
 8003262:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003266:	6453      	str	r3, [r2, #68]	; 0x44
 8003268:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_SPI_MspInit+0x118>)
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_SPI_MspInit+0x118>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	4a10      	ldr	r2, [pc, #64]	; (80032bc <HAL_SPI_MspInit+0x118>)
 800327a:	f043 0310 	orr.w	r3, r3, #16
 800327e:	6313      	str	r3, [r2, #48]	; 0x30
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_SPI_MspInit+0x118>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 800328c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329a:	2303      	movs	r3, #3
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800329e:	2305      	movs	r3, #5
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	4808      	ldr	r0, [pc, #32]	; (80032cc <HAL_SPI_MspInit+0x128>)
 80032aa:	f001 fa7f 	bl	80047ac <HAL_GPIO_Init>
}
 80032ae:	bf00      	nop
 80032b0:	3730      	adds	r7, #48	; 0x30
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40013000 	.word	0x40013000
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020c00 	.word	0x40020c00
 80032c4:	40021800 	.word	0x40021800
 80032c8:	40013400 	.word	0x40013400
 80032cc:	40021000 	.word	0x40021000

080032d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_MspInit+0x44>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <HAL_MspInit+0x44>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_MspInit+0x44>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_MspInit+0x44>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <HAL_MspInit+0x44>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_MspInit+0x44>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800

08003318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800332a:	e7fe      	b.n	800332a <HardFault_Handler+0x4>

0800332c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003330:	e7fe      	b.n	8003330 <MemManage_Handler+0x4>

08003332 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003336:	e7fe      	b.n	8003336 <BusFault_Handler+0x4>

08003338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800333c:	e7fe      	b.n	800333c <UsageFault_Handler+0x4>

0800333e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800336c:	f000 fabe 	bl	80038ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}

08003374 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003378:	4802      	ldr	r0, [pc, #8]	; (8003384 <TIM1_CC_IRQHandler+0x10>)
 800337a:	f003 fef1 	bl	8007160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200001c0 	.word	0x200001c0

08003388 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <SystemInit+0x28>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <SystemInit+0x28>)
 8003394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <SystemInit+0x28>)
 800339e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033a2:	609a      	str	r2, [r3, #8]
#endif
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08c      	sub	sp, #48	; 0x30
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80033ba:	f107 031c 	add.w	r3, r7, #28
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	60da      	str	r2, [r3, #12]
 80033c8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80033ca:	f107 030c 	add.w	r3, r7, #12
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d8:	463b      	mov	r3, r7
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033e2:	4b36      	ldr	r3, [pc, #216]	; (80034bc <MX_TIM1_Init+0x108>)
 80033e4:	4a36      	ldr	r2, [pc, #216]	; (80034c0 <MX_TIM1_Init+0x10c>)
 80033e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 80033e8:	4b34      	ldr	r3, [pc, #208]	; (80034bc <MX_TIM1_Init+0x108>)
 80033ea:	f240 22a2 	movw	r2, #674	; 0x2a2
 80033ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f0:	4b32      	ldr	r3, [pc, #200]	; (80034bc <MX_TIM1_Init+0x108>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <MX_TIM1_Init+0x108>)
 80033f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <MX_TIM1_Init+0x108>)
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003404:	4b2d      	ldr	r3, [pc, #180]	; (80034bc <MX_TIM1_Init+0x108>)
 8003406:	2200      	movs	r2, #0
 8003408:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <MX_TIM1_Init+0x108>)
 800340c:	2200      	movs	r2, #0
 800340e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003410:	482a      	ldr	r0, [pc, #168]	; (80034bc <MX_TIM1_Init+0x108>)
 8003412:	f003 fcfe 	bl	8006e12 <HAL_TIM_IC_Init>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800341c:	f7ff fe18 	bl	8003050 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003420:	2304      	movs	r3, #4
 8003422:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003424:	2350      	movs	r3, #80	; 0x50
 8003426:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800342c:	2300      	movs	r3, #0
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003434:	f107 031c 	add.w	r3, r7, #28
 8003438:	4619      	mov	r1, r3
 800343a:	4820      	ldr	r0, [pc, #128]	; (80034bc <MX_TIM1_Init+0x108>)
 800343c:	f004 f960 	bl	8007700 <HAL_TIM_SlaveConfigSynchro>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003446:	f7ff fe03 	bl	8003050 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800344e:	2301      	movs	r3, #1
 8003450:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800345a:	f107 030c 	add.w	r3, r7, #12
 800345e:	2200      	movs	r2, #0
 8003460:	4619      	mov	r1, r3
 8003462:	4816      	ldr	r0, [pc, #88]	; (80034bc <MX_TIM1_Init+0x108>)
 8003464:	f003 ff9b 	bl	800739e <HAL_TIM_IC_ConfigChannel>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800346e:	f7ff fdef 	bl	8003050 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003472:	2302      	movs	r3, #2
 8003474:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003476:	2302      	movs	r3, #2
 8003478:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	2204      	movs	r2, #4
 8003480:	4619      	mov	r1, r3
 8003482:	480e      	ldr	r0, [pc, #56]	; (80034bc <MX_TIM1_Init+0x108>)
 8003484:	f003 ff8b 	bl	800739e <HAL_TIM_IC_ConfigChannel>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800348e:	f7ff fddf 	bl	8003050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800349e:	463b      	mov	r3, r7
 80034a0:	4619      	mov	r1, r3
 80034a2:	4806      	ldr	r0, [pc, #24]	; (80034bc <MX_TIM1_Init+0x108>)
 80034a4:	f004 ff3a 	bl	800831c <HAL_TIMEx_MasterConfigSynchronization>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80034ae:	f7ff fdcf 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80034b2:	bf00      	nop
 80034b4:	3730      	adds	r7, #48	; 0x30
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200001c0 	.word	0x200001c0
 80034c0:	40010000 	.word	0x40010000

080034c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ca:	f107 031c 	add.w	r3, r7, #28
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034d6:	463b      	mov	r3, r7
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	611a      	str	r2, [r3, #16]
 80034e4:	615a      	str	r2, [r3, #20]
 80034e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <MX_TIM4_Init+0xf0>)
 80034ea:	4a33      	ldr	r2, [pc, #204]	; (80035b8 <MX_TIM4_Init+0xf4>)
 80034ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <MX_TIM4_Init+0xf0>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f4:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <MX_TIM4_Init+0xf0>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034fa:	4b2e      	ldr	r3, [pc, #184]	; (80035b4 <MX_TIM4_Init+0xf0>)
 80034fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003500:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003502:	4b2c      	ldr	r3, [pc, #176]	; (80035b4 <MX_TIM4_Init+0xf0>)
 8003504:	2200      	movs	r2, #0
 8003506:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <MX_TIM4_Init+0xf0>)
 800350a:	2200      	movs	r2, #0
 800350c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800350e:	4829      	ldr	r0, [pc, #164]	; (80035b4 <MX_TIM4_Init+0xf0>)
 8003510:	f003 fc28 	bl	8006d64 <HAL_TIM_PWM_Init>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800351a:	f7ff fd99 	bl	8003050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	4821      	ldr	r0, [pc, #132]	; (80035b4 <MX_TIM4_Init+0xf0>)
 800352e:	f004 fef5 	bl	800831c <HAL_TIMEx_MasterConfigSynchronization>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003538:	f7ff fd8a 	bl	8003050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800353c:	2360      	movs	r3, #96	; 0x60
 800353e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800354c:	463b      	mov	r3, r7
 800354e:	2200      	movs	r2, #0
 8003550:	4619      	mov	r1, r3
 8003552:	4818      	ldr	r0, [pc, #96]	; (80035b4 <MX_TIM4_Init+0xf0>)
 8003554:	f003 ffc0 	bl	80074d8 <HAL_TIM_PWM_ConfigChannel>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800355e:	f7ff fd77 	bl	8003050 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003562:	463b      	mov	r3, r7
 8003564:	2204      	movs	r2, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4812      	ldr	r0, [pc, #72]	; (80035b4 <MX_TIM4_Init+0xf0>)
 800356a:	f003 ffb5 	bl	80074d8 <HAL_TIM_PWM_ConfigChannel>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8003574:	f7ff fd6c 	bl	8003050 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003578:	463b      	mov	r3, r7
 800357a:	2208      	movs	r2, #8
 800357c:	4619      	mov	r1, r3
 800357e:	480d      	ldr	r0, [pc, #52]	; (80035b4 <MX_TIM4_Init+0xf0>)
 8003580:	f003 ffaa 	bl	80074d8 <HAL_TIM_PWM_ConfigChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800358a:	f7ff fd61 	bl	8003050 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800358e:	463b      	mov	r3, r7
 8003590:	220c      	movs	r2, #12
 8003592:	4619      	mov	r1, r3
 8003594:	4807      	ldr	r0, [pc, #28]	; (80035b4 <MX_TIM4_Init+0xf0>)
 8003596:	f003 ff9f 	bl	80074d8 <HAL_TIM_PWM_ConfigChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80035a0:	f7ff fd56 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80035a4:	4803      	ldr	r0, [pc, #12]	; (80035b4 <MX_TIM4_Init+0xf0>)
 80035a6:	f000 f875 	bl	8003694 <HAL_TIM_MspPostInit>

}
 80035aa:	bf00      	nop
 80035ac:	3728      	adds	r7, #40	; 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2000020c 	.word	0x2000020c
 80035b8:	40000800 	.word	0x40000800

080035bc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <HAL_TIM_IC_MspInit+0x8c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d130      	bne.n	8003640 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_TIM_IC_MspInit+0x90>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	4a1a      	ldr	r2, [pc, #104]	; (800364c <HAL_TIM_IC_MspInit+0x90>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <HAL_TIM_IC_MspInit+0x90>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_TIM_IC_MspInit+0x90>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a14      	ldr	r2, [pc, #80]	; (800364c <HAL_TIM_IC_MspInit+0x90>)
 80035fc:	f043 0310 	orr.w	r3, r3, #16
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_TIM_IC_MspInit+0x90>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 800360e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003614:	2302      	movs	r3, #2
 8003616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003620:	2301      	movs	r3, #1
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	4619      	mov	r1, r3
 800362a:	4809      	ldr	r0, [pc, #36]	; (8003650 <HAL_TIM_IC_MspInit+0x94>)
 800362c:	f001 f8be 	bl	80047ac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003630:	2200      	movs	r2, #0
 8003632:	2100      	movs	r1, #0
 8003634:	201b      	movs	r0, #27
 8003636:	f001 f882 	bl	800473e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800363a:	201b      	movs	r0, #27
 800363c:	f001 f89b 	bl	8004776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40010000 	.word	0x40010000
 800364c:	40023800 	.word	0x40023800
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <HAL_TIM_PWM_MspInit+0x38>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10b      	bne.n	800367e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_TIM_PWM_MspInit+0x3c>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_TIM_PWM_MspInit+0x3c>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_TIM_PWM_MspInit+0x3c>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40000800 	.word	0x40000800
 8003690:	40023800 	.word	0x40023800

08003694 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 030c 	add.w	r3, r7, #12
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_TIM_MspPostInit+0x64>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d11c      	bne.n	80036f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_TIM_MspPostInit+0x68>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_TIM_MspPostInit+0x68>)
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_TIM_MspPostInit+0x68>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80036ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80036d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036e0:	2302      	movs	r3, #2
 80036e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	4619      	mov	r1, r3
 80036ea:	4805      	ldr	r0, [pc, #20]	; (8003700 <HAL_TIM_MspPostInit+0x6c>)
 80036ec:	f001 f85e 	bl	80047ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40023800 	.word	0x40023800
 8003700:	40020c00 	.word	0x40020c00

08003704 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <MX_USART2_UART_Init+0x58>)
 800370a:	4a15      	ldr	r2, [pc, #84]	; (8003760 <MX_USART2_UART_Init+0x5c>)
 800370c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <MX_USART2_UART_Init+0x58>)
 8003710:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <MX_USART2_UART_Init+0x58>)
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <MX_USART2_UART_Init+0x58>)
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <MX_USART2_UART_Init+0x58>)
 8003724:	2200      	movs	r2, #0
 8003726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <MX_USART2_UART_Init+0x58>)
 800372a:	220c      	movs	r2, #12
 800372c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <MX_USART2_UART_Init+0x58>)
 8003730:	2200      	movs	r2, #0
 8003732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <MX_USART2_UART_Init+0x58>)
 8003736:	2200      	movs	r2, #0
 8003738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <MX_USART2_UART_Init+0x58>)
 800373c:	2200      	movs	r2, #0
 800373e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <MX_USART2_UART_Init+0x58>)
 8003742:	2200      	movs	r2, #0
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003746:	4805      	ldr	r0, [pc, #20]	; (800375c <MX_USART2_UART_Init+0x58>)
 8003748:	f004 fe94 	bl	8008474 <HAL_UART_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003752:	f7ff fc7d 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000258 	.word	0x20000258
 8003760:	40004400 	.word	0x40004400

08003764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b0ae      	sub	sp, #184	; 0xb8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800377c:	f107 0314 	add.w	r3, r7, #20
 8003780:	2290      	movs	r2, #144	; 0x90
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f005 fb8f 	bl	8008ea8 <memset>
  if(uartHandle->Instance==USART2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a21      	ldr	r2, [pc, #132]	; (8003814 <HAL_UART_MspInit+0xb0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d13a      	bne.n	800380a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003798:	2300      	movs	r3, #0
 800379a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fedf 	bl	8005564 <HAL_RCCEx_PeriphCLKConfig>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037ac:	f7ff fc50 	bl	8003050 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_UART_MspInit+0xb4>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_UART_MspInit+0xb4>)
 80037b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ba:	6413      	str	r3, [r2, #64]	; 0x40
 80037bc:	4b16      	ldr	r3, [pc, #88]	; (8003818 <HAL_UART_MspInit+0xb4>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_UART_MspInit+0xb4>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	4a12      	ldr	r2, [pc, #72]	; (8003818 <HAL_UART_MspInit+0xb4>)
 80037ce:	f043 0308 	orr.w	r3, r3, #8
 80037d2:	6313      	str	r3, [r2, #48]	; 0x30
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <HAL_UART_MspInit+0xb4>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80037e0:	2360      	movs	r3, #96	; 0x60
 80037e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f2:	2303      	movs	r3, #3
 80037f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037f8:	2307      	movs	r3, #7
 80037fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003802:	4619      	mov	r1, r3
 8003804:	4805      	ldr	r0, [pc, #20]	; (800381c <HAL_UART_MspInit+0xb8>)
 8003806:	f000 ffd1 	bl	80047ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800380a:	bf00      	nop
 800380c:	37b8      	adds	r7, #184	; 0xb8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40004400 	.word	0x40004400
 8003818:	40023800 	.word	0x40023800
 800381c:	40020c00 	.word	0x40020c00

08003820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003858 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003824:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003826:	e003      	b.n	8003830 <LoopCopyDataInit>

08003828 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800382a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800382c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800382e:	3104      	adds	r1, #4

08003830 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003830:	480b      	ldr	r0, [pc, #44]	; (8003860 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003834:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003836:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003838:	d3f6      	bcc.n	8003828 <CopyDataInit>
  ldr  r2, =_sbss
 800383a:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800383c:	e002      	b.n	8003844 <LoopFillZerobss>

0800383e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800383e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003840:	f842 3b04 	str.w	r3, [r2], #4

08003844 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003846:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003848:	d3f9      	bcc.n	800383e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800384a:	f7ff fd9d 	bl	8003388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800384e:	f005 fb07 	bl	8008e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003852:	f7ff f843 	bl	80028dc <main>
  bx  lr    
 8003856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003858:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800385c:	0800978c 	.word	0x0800978c
  ldr  r0, =_sdata
 8003860:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003864:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003868:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800386c:	200002e0 	.word	0x200002e0

08003870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003870:	e7fe      	b.n	8003870 <ADC_IRQHandler>

08003872 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003876:	2003      	movs	r0, #3
 8003878:	f000 ff56 	bl	8004728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800387c:	2000      	movs	r0, #0
 800387e:	f000 f805 	bl	800388c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003882:	f7ff fd25 	bl	80032d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003894:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_InitTick+0x54>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_InitTick+0x58>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 ff71 	bl	8004792 <HAL_SYSTICK_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00e      	b.n	80038d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b0f      	cmp	r3, #15
 80038be:	d80a      	bhi.n	80038d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038c0:	2200      	movs	r2, #0
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	f000 ff39 	bl	800473e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038cc:	4a06      	ldr	r2, [pc, #24]	; (80038e8 <HAL_InitTick+0x5c>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000008 	.word	0x20000008
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_IncTick+0x20>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_IncTick+0x24>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4413      	add	r3, r2
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <HAL_IncTick+0x24>)
 80038fe:	6013      	str	r3, [r2, #0]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000008 	.word	0x20000008
 8003910:	200002dc 	.word	0x200002dc

08003914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return uwTick;
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <HAL_GetTick+0x14>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	200002dc 	.word	0x200002dc

0800392c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003934:	f7ff ffee 	bl	8003914 <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d005      	beq.n	8003952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003946:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_Delay+0x44>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003952:	bf00      	nop
 8003954:	f7ff ffde 	bl	8003914 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	d8f7      	bhi.n	8003954 <HAL_Delay+0x28>
  {
  }
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000008 	.word	0x20000008

08003974 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <HAL_GetHalVersion+0x10>)
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	01020a00 	.word	0x01020a00

08003988 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_GetREVID+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	0c1b      	lsrs	r3, r3, #16
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e0042000 	.word	0xe0042000

080039a0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <HAL_GetDEVID+0x18>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	e0042000 	.word	0xe0042000

080039bc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_GetUIDw0+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	1ff0f420 	.word	0x1ff0f420

080039d4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_GetUIDw1+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	1ff0f424 	.word	0x1ff0f424

080039ec <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <HAL_GetUIDw2+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	1ff0f428 	.word	0x1ff0f428

08003a04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e031      	b.n	8003a7e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe fc82 	bl	800232c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_ADC_Init+0x84>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	f043 0202 	orr.w	r2, r3, #2
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f970 	bl	8003d38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a6e:	e001      	b.n	8003a74 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	ffffeefd 	.word	0xffffeefd

08003a8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x1c>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e136      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x28a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b09      	cmp	r3, #9
 8003ab6:	d93a      	bls.n	8003b2e <HAL_ADC_ConfigChannel+0xa2>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac0:	d035      	beq.n	8003b2e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68d9      	ldr	r1, [r3, #12]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b1e      	subs	r3, #30
 8003ad8:	2207      	movs	r2, #7
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a8d      	ldr	r2, [pc, #564]	; (8003d24 <HAL_ADC_ConfigChannel+0x298>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10a      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68d9      	ldr	r1, [r3, #12]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	061a      	lsls	r2, r3, #24
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b06:	e035      	b.n	8003b74 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68d9      	ldr	r1, [r3, #12]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4403      	add	r3, r0
 8003b20:	3b1e      	subs	r3, #30
 8003b22:	409a      	lsls	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b2c:	e022      	b.n	8003b74 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6919      	ldr	r1, [r3, #16]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	2207      	movs	r2, #7
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43da      	mvns	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	400a      	ands	r2, r1
 8003b50:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6919      	ldr	r1, [r3, #16]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	4618      	mov	r0, r3
 8003b64:	4603      	mov	r3, r0
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4403      	add	r3, r0
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b06      	cmp	r3, #6
 8003b7a:	d824      	bhi.n	8003bc6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3b05      	subs	r3, #5
 8003b8e:	221f      	movs	r2, #31
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43da      	mvns	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	400a      	ands	r2, r1
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	4618      	mov	r0, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3b05      	subs	r3, #5
 8003bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34
 8003bc4:	e04c      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b0c      	cmp	r3, #12
 8003bcc:	d824      	bhi.n	8003c18 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	3b23      	subs	r3, #35	; 0x23
 8003be0:	221f      	movs	r2, #31
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43da      	mvns	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	400a      	ands	r2, r1
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	3b23      	subs	r3, #35	; 0x23
 8003c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
 8003c16:	e023      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	3b41      	subs	r3, #65	; 0x41
 8003c2a:	221f      	movs	r2, #31
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43da      	mvns	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	400a      	ands	r2, r1
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	4618      	mov	r0, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	3b41      	subs	r3, #65	; 0x41
 8003c54:	fa00 f203 	lsl.w	r2, r0, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a30      	ldr	r2, [pc, #192]	; (8003d28 <HAL_ADC_ConfigChannel+0x29c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10a      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x1f4>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c72:	d105      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003c74:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	4a2c      	ldr	r2, [pc, #176]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003c7a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003c7e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <HAL_ADC_ConfigChannel+0x29c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10f      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x21e>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b12      	cmp	r3, #18
 8003c90:	d10b      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003c98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c9c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003ca4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ca8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <HAL_ADC_ConfigChannel+0x29c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d12b      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x280>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <HAL_ADC_ConfigChannel+0x298>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <HAL_ADC_ConfigChannel+0x23a>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b11      	cmp	r3, #17
 8003cc4:	d122      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003cc6:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003ccc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003cd0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_ADC_ConfigChannel+0x2a0>)
 8003cd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cdc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <HAL_ADC_ConfigChannel+0x298>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d111      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003ce8:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <HAL_ADC_ConfigChannel+0x2a4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <HAL_ADC_ConfigChannel+0x2a8>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0c9a      	lsrs	r2, r3, #18
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003cfe:	e002      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f9      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	10000012 	.word	0x10000012
 8003d28:	40012000 	.word	0x40012000
 8003d2c:	40012300 	.word	0x40012300
 8003d30:	20000000 	.word	0x20000000
 8003d34:	431bde83 	.word	0x431bde83

08003d38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003d40:	4b78      	ldr	r3, [pc, #480]	; (8003f24 <ADC_Init+0x1ec>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a77      	ldr	r2, [pc, #476]	; (8003f24 <ADC_Init+0x1ec>)
 8003d46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d4a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003d4c:	4b75      	ldr	r3, [pc, #468]	; (8003f24 <ADC_Init+0x1ec>)
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4973      	ldr	r1, [pc, #460]	; (8003f24 <ADC_Init+0x1ec>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	021a      	lsls	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	4a58      	ldr	r2, [pc, #352]	; (8003f28 <ADC_Init+0x1f0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	e00f      	b.n	8003e32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0202 	bic.w	r2, r2, #2
 8003e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6899      	ldr	r1, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	005a      	lsls	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01b      	beq.n	8003e98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	035a      	lsls	r2, r3, #13
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	e007      	b.n	8003ea8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	051a      	lsls	r2, r3, #20
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003eea:	025a      	lsls	r2, r3, #9
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6899      	ldr	r1, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	029a      	lsls	r2, r3, #10
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	40012300 	.word	0x40012300
 8003f28:	0f000001 	.word	0x0f000001

08003f2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e0ed      	b.n	800411a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fe fa9a 	bl	8002484 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f60:	f7ff fcd8 	bl	8003914 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f66:	e012      	b.n	8003f8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f68:	f7ff fcd4 	bl	8003914 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b0a      	cmp	r3, #10
 8003f74:	d90b      	bls.n	8003f8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2205      	movs	r2, #5
 8003f86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0c5      	b.n	800411a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0e5      	beq.n	8003f68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0202 	bic.w	r2, r2, #2
 8003faa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fac:	f7ff fcb2 	bl	8003914 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fb2:	e012      	b.n	8003fda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fb4:	f7ff fcae 	bl	8003914 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b0a      	cmp	r3, #10
 8003fc0:	d90b      	bls.n	8003fda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2205      	movs	r2, #5
 8003fd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e09f      	b.n	800411a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7e1b      	ldrb	r3, [r3, #24]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d108      	bne.n	8004002 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e007      	b.n	8004012 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004010:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7e5b      	ldrb	r3, [r3, #25]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d108      	bne.n	800402c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e007      	b.n	800403c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	7e9b      	ldrb	r3, [r3, #26]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d108      	bne.n	8004056 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0220 	orr.w	r2, r2, #32
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e007      	b.n	8004066 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0220 	bic.w	r2, r2, #32
 8004064:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	7edb      	ldrb	r3, [r3, #27]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d108      	bne.n	8004080 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0210 	bic.w	r2, r2, #16
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e007      	b.n	8004090 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0210 	orr.w	r2, r2, #16
 800408e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7f1b      	ldrb	r3, [r3, #28]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d108      	bne.n	80040aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0208 	orr.w	r2, r2, #8
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e007      	b.n	80040ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7f5b      	ldrb	r3, [r3, #29]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d108      	bne.n	80040d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0204 	orr.w	r2, r2, #4
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e007      	b.n	80040e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0204 	bic.w	r2, r2, #4
 80040e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	ea42 0103 	orr.w	r1, r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	1e5a      	subs	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800413a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d003      	beq.n	800414a <HAL_CAN_ConfigFilter+0x26>
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	2b02      	cmp	r3, #2
 8004146:	f040 80c7 	bne.w	80042d8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a69      	ldr	r2, [pc, #420]	; (80042f4 <HAL_CAN_ConfigFilter+0x1d0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d001      	beq.n	8004158 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004154:	4b68      	ldr	r3, [pc, #416]	; (80042f8 <HAL_CAN_ConfigFilter+0x1d4>)
 8004156:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	4a63      	ldr	r2, [pc, #396]	; (80042f8 <HAL_CAN_ConfigFilter+0x1d4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d111      	bne.n	8004194 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004176:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	431a      	orrs	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2201      	movs	r2, #1
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	401a      	ands	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d123      	bne.n	8004206 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	43db      	mvns	r3, r3
 80041c8:	401a      	ands	r2, r3
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	3248      	adds	r2, #72	; 0x48
 80041e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041fc:	6979      	ldr	r1, [r7, #20]
 80041fe:	3348      	adds	r3, #72	; 0x48
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d122      	bne.n	8004254 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	431a      	orrs	r2, r3
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800422e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3248      	adds	r2, #72	; 0x48
 8004234:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004248:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	3348      	adds	r3, #72	; 0x48
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	440b      	add	r3, r1
 8004252:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800426e:	e007      	b.n	8004280 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	431a      	orrs	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800429a:	e007      	b.n	80042ac <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	431a      	orrs	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e006      	b.n	80042e6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40003400 	.word	0x40003400
 80042f8:	40006400 	.word	0x40006400

080042fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d12e      	bne.n	800436e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004328:	f7ff faf4 	bl	8003914 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800432e:	e012      	b.n	8004356 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004330:	f7ff faf0 	bl	8003914 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b0a      	cmp	r3, #10
 800433c:	d90b      	bls.n	8004356 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2205      	movs	r2, #5
 800434e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e012      	b.n	800437c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e5      	bne.n	8004330 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e006      	b.n	800437c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004384:	b480      	push	{r7}
 8004386:	b089      	sub	sp, #36	; 0x24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004398:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80043a2:	7ffb      	ldrb	r3, [r7, #31]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d003      	beq.n	80043b0 <HAL_CAN_AddTxMessage+0x2c>
 80043a8:	7ffb      	ldrb	r3, [r7, #31]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	f040 80b8 	bne.w	8004520 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80a0 	beq.w	8004510 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	0e1b      	lsrs	r3, r3, #24
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d907      	bls.n	80043f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e09e      	b.n	800452e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80043f0:	2201      	movs	r2, #1
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	409a      	lsls	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10d      	bne.n	800441e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	6809      	ldr	r1, [r1, #0]
 8004410:	431a      	orrs	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	3318      	adds	r3, #24
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	440b      	add	r3, r1
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e00f      	b.n	800443e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004428:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004432:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3318      	adds	r3, #24
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	440b      	add	r3, r1
 800443c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6819      	ldr	r1, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	3318      	adds	r3, #24
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	440b      	add	r3, r1
 800444e:	3304      	adds	r3, #4
 8004450:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	7d1b      	ldrb	r3, [r3, #20]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d111      	bne.n	800447e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	3318      	adds	r3, #24
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4413      	add	r3, r2
 8004466:	3304      	adds	r3, #4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	6811      	ldr	r1, [r2, #0]
 800446e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	3318      	adds	r3, #24
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	440b      	add	r3, r1
 800447a:	3304      	adds	r3, #4
 800447c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3307      	adds	r3, #7
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	061a      	lsls	r2, r3, #24
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3306      	adds	r3, #6
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3305      	adds	r3, #5
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	4313      	orrs	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	3204      	adds	r2, #4
 800449e:	7812      	ldrb	r2, [r2, #0]
 80044a0:	4610      	mov	r0, r2
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	6811      	ldr	r1, [r2, #0]
 80044a6:	ea43 0200 	orr.w	r2, r3, r0
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	440b      	add	r3, r1
 80044b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80044b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3303      	adds	r3, #3
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	061a      	lsls	r2, r3, #24
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3302      	adds	r3, #2
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3301      	adds	r3, #1
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	4313      	orrs	r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	4610      	mov	r0, r2
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	6811      	ldr	r1, [r2, #0]
 80044dc:	ea43 0200 	orr.w	r2, r3, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	440b      	add	r3, r1
 80044e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80044ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3318      	adds	r3, #24
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	4413      	add	r3, r2
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	6811      	ldr	r1, [r2, #0]
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	3318      	adds	r3, #24
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	440b      	add	r3, r1
 800450a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e00e      	b.n	800452e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e006      	b.n	800452e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800454a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d002      	beq.n	8004558 <HAL_CAN_ActivateNotification+0x1e>
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d109      	bne.n	800456c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6959      	ldr	r1, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e006      	b.n	800457a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
  }
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <__NVIC_SetPriorityGrouping+0x40>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045a4:	4013      	ands	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <__NVIC_SetPriorityGrouping+0x44>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045b6:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <__NVIC_SetPriorityGrouping+0x40>)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	60d3      	str	r3, [r2, #12]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	e000ed00 	.word	0xe000ed00
 80045cc:	05fa0000 	.word	0x05fa0000

080045d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <__NVIC_GetPriorityGrouping+0x18>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	f003 0307 	and.w	r3, r3, #7
}
 80045de:	4618      	mov	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	db0b      	blt.n	8004616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	f003 021f 	and.w	r2, r3, #31
 8004604:	4907      	ldr	r1, [pc, #28]	; (8004624 <__NVIC_EnableIRQ+0x38>)
 8004606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	2001      	movs	r0, #1
 800460e:	fa00 f202 	lsl.w	r2, r0, r2
 8004612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000e100 	.word	0xe000e100

08004628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	6039      	str	r1, [r7, #0]
 8004632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004638:	2b00      	cmp	r3, #0
 800463a:	db0a      	blt.n	8004652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	490c      	ldr	r1, [pc, #48]	; (8004674 <__NVIC_SetPriority+0x4c>)
 8004642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004646:	0112      	lsls	r2, r2, #4
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	440b      	add	r3, r1
 800464c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004650:	e00a      	b.n	8004668 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	4908      	ldr	r1, [pc, #32]	; (8004678 <__NVIC_SetPriority+0x50>)
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	3b04      	subs	r3, #4
 8004660:	0112      	lsls	r2, r2, #4
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	440b      	add	r3, r1
 8004666:	761a      	strb	r2, [r3, #24]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000e100 	.word	0xe000e100
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f1c3 0307 	rsb	r3, r3, #7
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf28      	it	cs
 800469a:	2304      	movcs	r3, #4
 800469c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d902      	bls.n	80046ac <NVIC_EncodePriority+0x30>
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3b03      	subs	r3, #3
 80046aa:	e000      	b.n	80046ae <NVIC_EncodePriority+0x32>
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43da      	mvns	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	401a      	ands	r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046c4:	f04f 31ff 	mov.w	r1, #4294967295
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	fa01 f303 	lsl.w	r3, r1, r3
 80046ce:	43d9      	mvns	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d4:	4313      	orrs	r3, r2
         );
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3724      	adds	r7, #36	; 0x24
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046f4:	d301      	bcc.n	80046fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046f6:	2301      	movs	r3, #1
 80046f8:	e00f      	b.n	800471a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <SysTick_Config+0x40>)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004702:	210f      	movs	r1, #15
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	f7ff ff8e 	bl	8004628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <SysTick_Config+0x40>)
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004712:	4b04      	ldr	r3, [pc, #16]	; (8004724 <SysTick_Config+0x40>)
 8004714:	2207      	movs	r2, #7
 8004716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	e000e010 	.word	0xe000e010

08004728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ff29 	bl	8004588 <__NVIC_SetPriorityGrouping>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800473e:	b580      	push	{r7, lr}
 8004740:	b086      	sub	sp, #24
 8004742:	af00      	add	r7, sp, #0
 8004744:	4603      	mov	r3, r0
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004750:	f7ff ff3e 	bl	80045d0 <__NVIC_GetPriorityGrouping>
 8004754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	6978      	ldr	r0, [r7, #20]
 800475c:	f7ff ff8e 	bl	800467c <NVIC_EncodePriority>
 8004760:	4602      	mov	r2, r0
 8004762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff ff5d 	bl	8004628 <__NVIC_SetPriority>
}
 800476e:	bf00      	nop
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff ff31 	bl	80045ec <__NVIC_EnableIRQ>
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff ffa2 	bl	80046e4 <SysTick_Config>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b089      	sub	sp, #36	; 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	e175      	b.n	8004ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047cc:	2201      	movs	r2, #1
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	f040 8164 	bne.w	8004ab2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d005      	beq.n	8004802 <HAL_GPIO_Init+0x56>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d130      	bne.n	8004864 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2203      	movs	r2, #3
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004838:	2201      	movs	r2, #1
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 0201 	and.w	r2, r3, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b03      	cmp	r3, #3
 800486e:	d017      	beq.n	80048a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	2203      	movs	r2, #3
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d123      	bne.n	80048f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	08da      	lsrs	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3208      	adds	r2, #8
 80048b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	220f      	movs	r2, #15
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	08da      	lsrs	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3208      	adds	r2, #8
 80048ee:	69b9      	ldr	r1, [r7, #24]
 80048f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0203 	and.w	r2, r3, #3
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80be 	beq.w	8004ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004936:	4b66      	ldr	r3, [pc, #408]	; (8004ad0 <HAL_GPIO_Init+0x324>)
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	4a65      	ldr	r2, [pc, #404]	; (8004ad0 <HAL_GPIO_Init+0x324>)
 800493c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004940:	6453      	str	r3, [r2, #68]	; 0x44
 8004942:	4b63      	ldr	r3, [pc, #396]	; (8004ad0 <HAL_GPIO_Init+0x324>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800494e:	4a61      	ldr	r2, [pc, #388]	; (8004ad4 <HAL_GPIO_Init+0x328>)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	3302      	adds	r3, #2
 8004956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	220f      	movs	r2, #15
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <HAL_GPIO_Init+0x32c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d037      	beq.n	80049ea <HAL_GPIO_Init+0x23e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a57      	ldr	r2, [pc, #348]	; (8004adc <HAL_GPIO_Init+0x330>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d031      	beq.n	80049e6 <HAL_GPIO_Init+0x23a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a56      	ldr	r2, [pc, #344]	; (8004ae0 <HAL_GPIO_Init+0x334>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02b      	beq.n	80049e2 <HAL_GPIO_Init+0x236>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a55      	ldr	r2, [pc, #340]	; (8004ae4 <HAL_GPIO_Init+0x338>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d025      	beq.n	80049de <HAL_GPIO_Init+0x232>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a54      	ldr	r2, [pc, #336]	; (8004ae8 <HAL_GPIO_Init+0x33c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01f      	beq.n	80049da <HAL_GPIO_Init+0x22e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a53      	ldr	r2, [pc, #332]	; (8004aec <HAL_GPIO_Init+0x340>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d019      	beq.n	80049d6 <HAL_GPIO_Init+0x22a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a52      	ldr	r2, [pc, #328]	; (8004af0 <HAL_GPIO_Init+0x344>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_GPIO_Init+0x226>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a51      	ldr	r2, [pc, #324]	; (8004af4 <HAL_GPIO_Init+0x348>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00d      	beq.n	80049ce <HAL_GPIO_Init+0x222>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a50      	ldr	r2, [pc, #320]	; (8004af8 <HAL_GPIO_Init+0x34c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <HAL_GPIO_Init+0x21e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a4f      	ldr	r2, [pc, #316]	; (8004afc <HAL_GPIO_Init+0x350>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d101      	bne.n	80049c6 <HAL_GPIO_Init+0x21a>
 80049c2:	2309      	movs	r3, #9
 80049c4:	e012      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049c6:	230a      	movs	r3, #10
 80049c8:	e010      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049ca:	2308      	movs	r3, #8
 80049cc:	e00e      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049ce:	2307      	movs	r3, #7
 80049d0:	e00c      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049d2:	2306      	movs	r3, #6
 80049d4:	e00a      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049d6:	2305      	movs	r3, #5
 80049d8:	e008      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049da:	2304      	movs	r3, #4
 80049dc:	e006      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049de:	2303      	movs	r3, #3
 80049e0:	e004      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e002      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <HAL_GPIO_Init+0x240>
 80049ea:	2300      	movs	r3, #0
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	f002 0203 	and.w	r2, r2, #3
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	4093      	lsls	r3, r2
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80049fc:	4935      	ldr	r1, [pc, #212]	; (8004ad4 <HAL_GPIO_Init+0x328>)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	3302      	adds	r3, #2
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a0a:	4b3d      	ldr	r3, [pc, #244]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a2e:	4a34      	ldr	r2, [pc, #208]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a34:	4b32      	ldr	r3, [pc, #200]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a58:	4a29      	ldr	r2, [pc, #164]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a88:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aac:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <HAL_GPIO_Init+0x354>)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	f67f ae86 	bls.w	80047cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3724      	adds	r7, #36	; 0x24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40013800 	.word	0x40013800
 8004ad8:	40020000 	.word	0x40020000
 8004adc:	40020400 	.word	0x40020400
 8004ae0:	40020800 	.word	0x40020800
 8004ae4:	40020c00 	.word	0x40020c00
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40021400 	.word	0x40021400
 8004af0:	40021800 	.word	0x40021800
 8004af4:	40021c00 	.word	0x40021c00
 8004af8:	40022000 	.word	0x40022000
 8004afc:	40022400 	.word	0x40022400
 8004b00:	40013c00 	.word	0x40013c00

08004b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	887b      	ldrh	r3, [r7, #2]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
 8004b20:	e001      	b.n	8004b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
 8004b40:	4613      	mov	r3, r2
 8004b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b50:	e003      	b.n	8004b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b78:	887a      	ldrh	r2, [r7, #2]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	041a      	lsls	r2, r3, #16
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	43d9      	mvns	r1, r3
 8004b84:	887b      	ldrh	r3, [r7, #2]
 8004b86:	400b      	ands	r3, r1
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	619a      	str	r2, [r3, #24]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	4a22      	ldr	r2, [pc, #136]	; (8004c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1d      	ldr	r2, [pc, #116]	; (8004c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bca:	f7fe fea3 	bl	8003914 <HAL_GetTick>
 8004bce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bd0:	e009      	b.n	8004be6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bd2:	f7fe fe9f 	bl	8003914 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be0:	d901      	bls.n	8004be6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e022      	b.n	8004c2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf2:	d1ee      	bne.n	8004bd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bf4:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a0f      	ldr	r2, [pc, #60]	; (8004c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c00:	f7fe fe88 	bl	8003914 <HAL_GetTick>
 8004c04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c06:	e009      	b.n	8004c1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c08:	f7fe fe84 	bl	8003914 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c16:	d901      	bls.n	8004c1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e007      	b.n	8004c2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c28:	d1ee      	bne.n	8004c08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40007000 	.word	0x40007000

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e29b      	b.n	800518a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8087 	beq.w	8004d6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c60:	4b96      	ldr	r3, [pc, #600]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d00c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6c:	4b93      	ldr	r3, [pc, #588]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d112      	bne.n	8004c9e <HAL_RCC_OscConfig+0x62>
 8004c78:	4b90      	ldr	r3, [pc, #576]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c84:	d10b      	bne.n	8004c9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c86:	4b8d      	ldr	r3, [pc, #564]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d06c      	beq.n	8004d6c <HAL_RCC_OscConfig+0x130>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d168      	bne.n	8004d6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e275      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca6:	d106      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x7a>
 8004ca8:	4b84      	ldr	r3, [pc, #528]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a83      	ldr	r2, [pc, #524]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	e02e      	b.n	8004d14 <HAL_RCC_OscConfig+0xd8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x9c>
 8004cbe:	4b7f      	ldr	r3, [pc, #508]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a7e      	ldr	r2, [pc, #504]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4b7c      	ldr	r3, [pc, #496]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a7b      	ldr	r2, [pc, #492]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e01d      	b.n	8004d14 <HAL_RCC_OscConfig+0xd8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0xc0>
 8004ce2:	4b76      	ldr	r3, [pc, #472]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a75      	ldr	r2, [pc, #468]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b73      	ldr	r3, [pc, #460]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a72      	ldr	r2, [pc, #456]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCC_OscConfig+0xd8>
 8004cfc:	4b6f      	ldr	r3, [pc, #444]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a6e      	ldr	r2, [pc, #440]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b6c      	ldr	r3, [pc, #432]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6b      	ldr	r2, [pc, #428]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fe fdfa 	bl	8003914 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fe fdf6 	bl	8003914 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e229      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0xe8>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fe fde6 	bl	8003914 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe fde2 	bl	8003914 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e215      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5e:	4b57      	ldr	r3, [pc, #348]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x110>
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d069      	beq.n	8004e4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d7a:	4b50      	ldr	r3, [pc, #320]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d86:	4b4d      	ldr	r3, [pc, #308]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d11c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x190>
 8004d92:	4b4a      	ldr	r3, [pc, #296]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d116      	bne.n	8004dcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_RCC_OscConfig+0x17a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d001      	beq.n	8004db6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e1e9      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db6:	4b41      	ldr	r3, [pc, #260]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	493d      	ldr	r1, [pc, #244]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dca:	e040      	b.n	8004e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d023      	beq.n	8004e1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd4:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a38      	ldr	r2, [pc, #224]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fe fd98 	bl	8003914 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de8:	f7fe fd94 	bl	8003914 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e1c7      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfa:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e06:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4929      	ldr	r1, [pc, #164]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]
 8004e1a:	e018      	b.n	8004e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1c:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fe fd74 	bl	8003914 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e30:	f7fe fd70 	bl	8003914 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e1a3      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e42:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d038      	beq.n	8004ecc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d019      	beq.n	8004e96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e62:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e66:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6e:	f7fe fd51 	bl	8003914 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e76:	f7fe fd4d 	bl	8003914 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e180      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x23a>
 8004e94:	e01a      	b.n	8004ecc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea2:	f7fe fd37 	bl	8003914 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eaa:	f7fe fd33 	bl	8003914 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d903      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e166      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
 8004ebc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec0:	4b92      	ldr	r3, [pc, #584]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1ee      	bne.n	8004eaa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80a4 	beq.w	8005022 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eda:	4b8c      	ldr	r3, [pc, #560]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10d      	bne.n	8004f02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee6:	4b89      	ldr	r3, [pc, #548]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	4a88      	ldr	r2, [pc, #544]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ef2:	4b86      	ldr	r3, [pc, #536]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f02:	4b83      	ldr	r3, [pc, #524]	; (8005110 <HAL_RCC_OscConfig+0x4d4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d118      	bne.n	8004f40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f0e:	4b80      	ldr	r3, [pc, #512]	; (8005110 <HAL_RCC_OscConfig+0x4d4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a7f      	ldr	r2, [pc, #508]	; (8005110 <HAL_RCC_OscConfig+0x4d4>)
 8004f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1a:	f7fe fcfb 	bl	8003914 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f22:	f7fe fcf7 	bl	8003914 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b64      	cmp	r3, #100	; 0x64
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e12a      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f34:	4b76      	ldr	r3, [pc, #472]	; (8005110 <HAL_RCC_OscConfig+0x4d4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f0      	beq.n	8004f22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d106      	bne.n	8004f56 <HAL_RCC_OscConfig+0x31a>
 8004f48:	4b70      	ldr	r3, [pc, #448]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	4a6f      	ldr	r2, [pc, #444]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	; 0x70
 8004f54:	e02d      	b.n	8004fb2 <HAL_RCC_OscConfig+0x376>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x33c>
 8004f5e:	4b6b      	ldr	r3, [pc, #428]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	4a6a      	ldr	r2, [pc, #424]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6a:	4b68      	ldr	r3, [pc, #416]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	4a67      	ldr	r2, [pc, #412]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f70:	f023 0304 	bic.w	r3, r3, #4
 8004f74:	6713      	str	r3, [r2, #112]	; 0x70
 8004f76:	e01c      	b.n	8004fb2 <HAL_RCC_OscConfig+0x376>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b05      	cmp	r3, #5
 8004f7e:	d10c      	bne.n	8004f9a <HAL_RCC_OscConfig+0x35e>
 8004f80:	4b62      	ldr	r3, [pc, #392]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a61      	ldr	r2, [pc, #388]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f86:	f043 0304 	orr.w	r3, r3, #4
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8c:	4b5f      	ldr	r3, [pc, #380]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	4a5e      	ldr	r2, [pc, #376]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	6713      	str	r3, [r2, #112]	; 0x70
 8004f98:	e00b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x376>
 8004f9a:	4b5c      	ldr	r3, [pc, #368]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a5b      	ldr	r2, [pc, #364]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa6:	4b59      	ldr	r3, [pc, #356]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	4a58      	ldr	r2, [pc, #352]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d015      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fba:	f7fe fcab 	bl	8003914 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fe fca7 	bl	8003914 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e0d8      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd8:	4b4c      	ldr	r3, [pc, #304]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ee      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x386>
 8004fe4:	e014      	b.n	8005010 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe6:	f7fe fc95 	bl	8003914 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fe fc91 	bl	8003914 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0c2      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005004:	4b41      	ldr	r3, [pc, #260]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1ee      	bne.n	8004fee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d105      	bne.n	8005022 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005016:	4b3d      	ldr	r3, [pc, #244]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	4a3c      	ldr	r2, [pc, #240]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 800501c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80ae 	beq.w	8005188 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800502c:	4b37      	ldr	r3, [pc, #220]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 030c 	and.w	r3, r3, #12
 8005034:	2b08      	cmp	r3, #8
 8005036:	d06d      	beq.n	8005114 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d14b      	bne.n	80050d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b32      	ldr	r3, [pc, #200]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a31      	ldr	r2, [pc, #196]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800504a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fe fc62 	bl	8003914 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005054:	f7fe fc5e 	bl	8003914 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e091      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	019b      	lsls	r3, r3, #6
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	3b01      	subs	r3, #1
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	071b      	lsls	r3, r3, #28
 800509e:	491b      	ldr	r1, [pc, #108]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a18      	ldr	r2, [pc, #96]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 80050aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fe fc30 	bl	8003914 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fe fc2c 	bl	8003914 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e05f      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x47c>
 80050d6:	e057      	b.n	8005188 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0b      	ldr	r2, [pc, #44]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 80050de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fe fc16 	bl	8003914 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe fc12 	bl	8003914 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e045      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	4b03      	ldr	r3, [pc, #12]	; (800510c <HAL_RCC_OscConfig+0x4d0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x4b0>
 800510a:	e03d      	b.n	8005188 <HAL_RCC_OscConfig+0x54c>
 800510c:	40023800 	.word	0x40023800
 8005110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005114:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <HAL_RCC_OscConfig+0x558>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d030      	beq.n	8005184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d129      	bne.n	8005184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d122      	bne.n	8005184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800514a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800514c:	4293      	cmp	r3, r2
 800514e:	d119      	bne.n	8005184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	3b01      	subs	r3, #1
 800515e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d10f      	bne.n	8005184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d107      	bne.n	8005184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800

08005198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0d0      	b.n	8005352 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b6a      	ldr	r3, [pc, #424]	; (800535c <HAL_RCC_ClockConfig+0x1c4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d910      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b67      	ldr	r3, [pc, #412]	; (800535c <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 020f 	bic.w	r2, r3, #15
 80051c6:	4965      	ldr	r1, [pc, #404]	; (800535c <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b63      	ldr	r3, [pc, #396]	; (800535c <HAL_RCC_ClockConfig+0x1c4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0b8      	b.n	8005352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d020      	beq.n	800522e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f8:	4b59      	ldr	r3, [pc, #356]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	4a58      	ldr	r2, [pc, #352]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 80051fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005202:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005210:	4b53      	ldr	r3, [pc, #332]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	4a52      	ldr	r2, [pc, #328]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 8005216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800521a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800521c:	4b50      	ldr	r3, [pc, #320]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	494d      	ldr	r1, [pc, #308]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d040      	beq.n	80052bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d115      	bne.n	800527a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e07f      	b.n	8005352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	4b41      	ldr	r3, [pc, #260]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e073      	b.n	8005352 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526a:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e06b      	b.n	8005352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800527a:	4b39      	ldr	r3, [pc, #228]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f023 0203 	bic.w	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4936      	ldr	r1, [pc, #216]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528c:	f7fe fb42 	bl	8003914 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fe fb3e 	bl	8003914 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e053      	b.n	8005352 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 020c 	and.w	r2, r3, #12
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1eb      	bne.n	8005294 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052bc:	4b27      	ldr	r3, [pc, #156]	; (800535c <HAL_RCC_ClockConfig+0x1c4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d210      	bcs.n	80052ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b24      	ldr	r3, [pc, #144]	; (800535c <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f023 020f 	bic.w	r2, r3, #15
 80052d2:	4922      	ldr	r1, [pc, #136]	; (800535c <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052da:	4b20      	ldr	r3, [pc, #128]	; (800535c <HAL_RCC_ClockConfig+0x1c4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e032      	b.n	8005352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f8:	4b19      	ldr	r3, [pc, #100]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4916      	ldr	r1, [pc, #88]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005316:	4b12      	ldr	r3, [pc, #72]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	490e      	ldr	r1, [pc, #56]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 8005326:	4313      	orrs	r3, r2
 8005328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800532a:	f000 f821 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 800532e:	4602      	mov	r2, r0
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	490a      	ldr	r1, [pc, #40]	; (8005364 <HAL_RCC_ClockConfig+0x1cc>)
 800533c:	5ccb      	ldrb	r3, [r1, r3]
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <HAL_RCC_ClockConfig+0x1d0>)
 8005344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_RCC_ClockConfig+0x1d4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fa9e 	bl	800388c <HAL_InitTick>

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40023c00 	.word	0x40023c00
 8005360:	40023800 	.word	0x40023800
 8005364:	0800973c 	.word	0x0800973c
 8005368:	20000000 	.word	0x20000000
 800536c:	20000004 	.word	0x20000004

08005370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005374:	b090      	sub	sp, #64	; 0x40
 8005376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
 800537c:	2300      	movs	r3, #0
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005380:	2300      	movs	r3, #0
 8005382:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005388:	4b59      	ldr	r3, [pc, #356]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 030c 	and.w	r3, r3, #12
 8005390:	2b08      	cmp	r3, #8
 8005392:	d00d      	beq.n	80053b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005394:	2b08      	cmp	r3, #8
 8005396:	f200 80a1 	bhi.w	80054dc <HAL_RCC_GetSysClockFreq+0x16c>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x34>
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d003      	beq.n	80053aa <HAL_RCC_GetSysClockFreq+0x3a>
 80053a2:	e09b      	b.n	80054dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053a4:	4b53      	ldr	r3, [pc, #332]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80053a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053a8:	e09b      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053aa:	4b53      	ldr	r3, [pc, #332]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053ae:	e098      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053b0:	4b4f      	ldr	r3, [pc, #316]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053ba:	4b4d      	ldr	r3, [pc, #308]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d028      	beq.n	8005418 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c6:	4b4a      	ldr	r3, [pc, #296]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	099b      	lsrs	r3, r3, #6
 80053cc:	2200      	movs	r2, #0
 80053ce:	623b      	str	r3, [r7, #32]
 80053d0:	627a      	str	r2, [r7, #36]	; 0x24
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053d8:	2100      	movs	r1, #0
 80053da:	4b47      	ldr	r3, [pc, #284]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80053dc:	fb03 f201 	mul.w	r2, r3, r1
 80053e0:	2300      	movs	r3, #0
 80053e2:	fb00 f303 	mul.w	r3, r0, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	4a43      	ldr	r2, [pc, #268]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80053ea:	fba0 1202 	umull	r1, r2, r0, r2
 80053ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f0:	460a      	mov	r2, r1
 80053f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80053f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f6:	4413      	add	r3, r2
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	2200      	movs	r2, #0
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	61fa      	str	r2, [r7, #28]
 8005402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800540a:	f7fa ff1d 	bl	8000248 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4613      	mov	r3, r2
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005416:	e053      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005418:	4b35      	ldr	r3, [pc, #212]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	099b      	lsrs	r3, r3, #6
 800541e:	2200      	movs	r2, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	617a      	str	r2, [r7, #20]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800542a:	f04f 0b00 	mov.w	fp, #0
 800542e:	4652      	mov	r2, sl
 8005430:	465b      	mov	r3, fp
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f04f 0100 	mov.w	r1, #0
 800543a:	0159      	lsls	r1, r3, #5
 800543c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005440:	0150      	lsls	r0, r2, #5
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	ebb2 080a 	subs.w	r8, r2, sl
 800544a:	eb63 090b 	sbc.w	r9, r3, fp
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800545a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800545e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005462:	ebb2 0408 	subs.w	r4, r2, r8
 8005466:	eb63 0509 	sbc.w	r5, r3, r9
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	00eb      	lsls	r3, r5, #3
 8005474:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005478:	00e2      	lsls	r2, r4, #3
 800547a:	4614      	mov	r4, r2
 800547c:	461d      	mov	r5, r3
 800547e:	eb14 030a 	adds.w	r3, r4, sl
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	eb45 030b 	adc.w	r3, r5, fp
 8005488:	607b      	str	r3, [r7, #4]
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005496:	4629      	mov	r1, r5
 8005498:	028b      	lsls	r3, r1, #10
 800549a:	4621      	mov	r1, r4
 800549c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054a0:	4621      	mov	r1, r4
 80054a2:	028a      	lsls	r2, r1, #10
 80054a4:	4610      	mov	r0, r2
 80054a6:	4619      	mov	r1, r3
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	2200      	movs	r2, #0
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	60fa      	str	r2, [r7, #12]
 80054b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054b4:	f7fa fec8 	bl	8000248 <__aeabi_uldivmod>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4613      	mov	r3, r2
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	0c1b      	lsrs	r3, r3, #16
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	3301      	adds	r3, #1
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80054d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054da:	e002      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054dc:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3740      	adds	r7, #64	; 0x40
 80054e8:	46bd      	mov	sp, r7
 80054ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ee:	bf00      	nop
 80054f0:	40023800 	.word	0x40023800
 80054f4:	00f42400 	.word	0x00f42400
 80054f8:	017d7840 	.word	0x017d7840

080054fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005500:	4b03      	ldr	r3, [pc, #12]	; (8005510 <HAL_RCC_GetHCLKFreq+0x14>)
 8005502:	681b      	ldr	r3, [r3, #0]
}
 8005504:	4618      	mov	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000000 	.word	0x20000000

08005514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005518:	f7ff fff0 	bl	80054fc <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	0a9b      	lsrs	r3, r3, #10
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4903      	ldr	r1, [pc, #12]	; (8005538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40023800 	.word	0x40023800
 8005538:	0800974c 	.word	0x0800974c

0800553c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005540:	f7ff ffdc 	bl	80054fc <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0b5b      	lsrs	r3, r3, #13
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4903      	ldr	r1, [pc, #12]	; (8005560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40023800 	.word	0x40023800
 8005560:	0800974c 	.word	0x0800974c

08005564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d012      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800558c:	4b69      	ldr	r3, [pc, #420]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4a68      	ldr	r2, [pc, #416]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005592:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005596:	6093      	str	r3, [r2, #8]
 8005598:	4b66      	ldr	r3, [pc, #408]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	4964      	ldr	r1, [pc, #400]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d017      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055be:	4b5d      	ldr	r3, [pc, #372]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055cc:	4959      	ldr	r1, [pc, #356]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055dc:	d101      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055ea:	2301      	movs	r3, #1
 80055ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d017      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055fa:	4b4e      	ldr	r3, [pc, #312]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005600:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	494a      	ldr	r1, [pc, #296]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005618:	d101      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800561a:	2301      	movs	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005626:	2301      	movs	r3, #1
 8005628:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005636:	2301      	movs	r3, #1
 8005638:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 808b 	beq.w	800575e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005648:	4b3a      	ldr	r3, [pc, #232]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	4a39      	ldr	r2, [pc, #228]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005652:	6413      	str	r3, [r2, #64]	; 0x40
 8005654:	4b37      	ldr	r3, [pc, #220]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005660:	4b35      	ldr	r3, [pc, #212]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a34      	ldr	r2, [pc, #208]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800566c:	f7fe f952 	bl	8003914 <HAL_GetTick>
 8005670:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005674:	f7fe f94e 	bl	8003914 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b64      	cmp	r3, #100	; 0x64
 8005680:	d901      	bls.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e38f      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005686:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005692:	4b28      	ldr	r3, [pc, #160]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d035      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d02e      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056b0:	4b20      	ldr	r3, [pc, #128]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ba:	4b1e      	ldr	r3, [pc, #120]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056c6:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056d2:	4a18      	ldr	r2, [pc, #96]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056d8:	4b16      	ldr	r3, [pc, #88]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d114      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e4:	f7fe f916 	bl	8003914 <HAL_GetTick>
 80056e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ea:	e00a      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ec:	f7fe f912 	bl	8003914 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e351      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0ee      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571a:	d111      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800572a:	400b      	ands	r3, r1
 800572c:	4901      	ldr	r1, [pc, #4]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572e:	4313      	orrs	r3, r2
 8005730:	608b      	str	r3, [r1, #8]
 8005732:	e00b      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005734:	40023800 	.word	0x40023800
 8005738:	40007000 	.word	0x40007000
 800573c:	0ffffcff 	.word	0x0ffffcff
 8005740:	4bac      	ldr	r3, [pc, #688]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4aab      	ldr	r2, [pc, #684]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005746:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800574a:	6093      	str	r3, [r2, #8]
 800574c:	4ba9      	ldr	r3, [pc, #676]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005758:	49a6      	ldr	r1, [pc, #664]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575a:	4313      	orrs	r3, r2
 800575c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b00      	cmp	r3, #0
 8005768:	d010      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800576a:	4ba2      	ldr	r3, [pc, #648]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800576c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005770:	4aa0      	ldr	r2, [pc, #640]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005776:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800577a:	4b9e      	ldr	r3, [pc, #632]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	499b      	ldr	r1, [pc, #620]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005798:	4b96      	ldr	r3, [pc, #600]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a6:	4993      	ldr	r1, [pc, #588]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057ba:	4b8e      	ldr	r3, [pc, #568]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057c8:	498a      	ldr	r1, [pc, #552]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057dc:	4b85      	ldr	r3, [pc, #532]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ea:	4982      	ldr	r1, [pc, #520]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057fe:	4b7d      	ldr	r3, [pc, #500]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005804:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580c:	4979      	ldr	r1, [pc, #484]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005820:	4b74      	ldr	r3, [pc, #464]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005826:	f023 0203 	bic.w	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	4971      	ldr	r1, [pc, #452]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005842:	4b6c      	ldr	r3, [pc, #432]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f023 020c 	bic.w	r2, r3, #12
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005850:	4968      	ldr	r1, [pc, #416]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005864:	4b63      	ldr	r3, [pc, #396]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	4960      	ldr	r1, [pc, #384]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005886:	4b5b      	ldr	r3, [pc, #364]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005894:	4957      	ldr	r1, [pc, #348]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058a8:	4b52      	ldr	r3, [pc, #328]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	494f      	ldr	r1, [pc, #316]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058ca:	4b4a      	ldr	r3, [pc, #296]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	4946      	ldr	r1, [pc, #280]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058ec:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	493e      	ldr	r1, [pc, #248]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800590e:	4b39      	ldr	r3, [pc, #228]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	4935      	ldr	r1, [pc, #212]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005930:	4b30      	ldr	r3, [pc, #192]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593e:	492d      	ldr	r1, [pc, #180]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005952:	4b28      	ldr	r3, [pc, #160]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005960:	4924      	ldr	r1, [pc, #144]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800596c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005970:	d101      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005972:	2301      	movs	r3, #1
 8005974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005982:	2301      	movs	r3, #1
 8005984:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005992:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005998:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a0:	4914      	ldr	r1, [pc, #80]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059b4:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c4:	490b      	ldr	r1, [pc, #44]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00f      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e8:	4902      	ldr	r1, [pc, #8]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059f0:	e002      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80059f2:	bf00      	nop
 80059f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a04:	4b8a      	ldr	r3, [pc, #552]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	4986      	ldr	r1, [pc, #536]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a28:	4b81      	ldr	r3, [pc, #516]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a38:	497d      	ldr	r1, [pc, #500]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d006      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80d6 	beq.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a54:	4b76      	ldr	r3, [pc, #472]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a75      	ldr	r2, [pc, #468]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a60:	f7fd ff58 	bl	8003914 <HAL_GetTick>
 8005a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a68:	f7fd ff54 	bl	8003914 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b64      	cmp	r3, #100	; 0x64
 8005a74:	d901      	bls.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e195      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a7a:	4b6d      	ldr	r3, [pc, #436]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d021      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d11d      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a9a:	4b65      	ldr	r3, [pc, #404]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005aa8:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aae:	0e1b      	lsrs	r3, r3, #24
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	019a      	lsls	r2, r3, #6
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	041b      	lsls	r3, r3, #16
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	061b      	lsls	r3, r3, #24
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	071b      	lsls	r3, r3, #28
 8005ace:	4958      	ldr	r1, [pc, #352]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d02e      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b00:	d129      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b02:	4b4b      	ldr	r3, [pc, #300]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b10:	4b47      	ldr	r3, [pc, #284]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b16:	0f1b      	lsrs	r3, r3, #28
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	019a      	lsls	r2, r3, #6
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	071b      	lsls	r3, r3, #28
 8005b36:	493e      	ldr	r1, [pc, #248]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b3e:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b44:	f023 021f 	bic.w	r2, r3, #31
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	4938      	ldr	r1, [pc, #224]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01d      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b62:	4b33      	ldr	r3, [pc, #204]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b68:	0e1b      	lsrs	r3, r3, #24
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b70:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b76:	0f1b      	lsrs	r3, r3, #28
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	019a      	lsls	r2, r3, #6
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	041b      	lsls	r3, r3, #16
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	061b      	lsls	r3, r3, #24
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	071b      	lsls	r3, r3, #28
 8005b96:	4926      	ldr	r1, [pc, #152]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d011      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	019a      	lsls	r2, r3, #6
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	061b      	lsls	r3, r3, #24
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	071b      	lsls	r3, r3, #28
 8005bc6:	491a      	ldr	r1, [pc, #104]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bce:	4b18      	ldr	r3, [pc, #96]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bda:	f7fd fe9b 	bl	8003914 <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005be2:	f7fd fe97 	bl	8003914 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b64      	cmp	r3, #100	; 0x64
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e0d8      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0f0      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	f040 80ce 	bne.w	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c08:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a08      	ldr	r2, [pc, #32]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c14:	f7fd fe7e 	bl	8003914 <HAL_GetTick>
 8005c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c1a:	e00b      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c1c:	f7fd fe7a 	bl	8003914 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b64      	cmp	r3, #100	; 0x64
 8005c28:	d904      	bls.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e0bb      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c34:	4b5e      	ldr	r3, [pc, #376]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c40:	d0ec      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d02e      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d12a      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c6a:	4b51      	ldr	r3, [pc, #324]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c78:	4b4d      	ldr	r3, [pc, #308]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7e:	0f1b      	lsrs	r3, r3, #28
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	019a      	lsls	r2, r3, #6
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	071b      	lsls	r3, r3, #28
 8005c9e:	4944      	ldr	r1, [pc, #272]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ca6:	4b42      	ldr	r3, [pc, #264]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	493d      	ldr	r1, [pc, #244]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d022      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cd4:	d11d      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cd6:	4b36      	ldr	r3, [pc, #216]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cdc:	0e1b      	lsrs	r3, r3, #24
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ce4:	4b32      	ldr	r3, [pc, #200]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	0f1b      	lsrs	r3, r3, #28
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	019a      	lsls	r2, r3, #6
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	041b      	lsls	r3, r3, #16
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	061b      	lsls	r3, r3, #24
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	071b      	lsls	r3, r3, #28
 8005d0a:	4929      	ldr	r1, [pc, #164]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d028      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d1e:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d24:	0e1b      	lsrs	r3, r3, #24
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d2c:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	0c1b      	lsrs	r3, r3, #16
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	019a      	lsls	r2, r3, #6
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	041b      	lsls	r3, r3, #16
 8005d44:	431a      	orrs	r2, r3
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	061b      	lsls	r3, r3, #24
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	071b      	lsls	r3, r3, #28
 8005d52:	4917      	ldr	r1, [pc, #92]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	4911      	ldr	r1, [pc, #68]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a0e      	ldr	r2, [pc, #56]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7c:	f7fd fdca 	bl	8003914 <HAL_GetTick>
 8005d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d84:	f7fd fdc6 	bl	8003914 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b64      	cmp	r3, #100	; 0x64
 8005d90:	d901      	bls.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e007      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da2:	d1ef      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40023800 	.word	0x40023800

08005db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e09d      	b.n	8005f02 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d108      	bne.n	8005de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd6:	d009      	beq.n	8005dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	61da      	str	r2, [r3, #28]
 8005dde:	e005      	b.n	8005dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fd f9cc 	bl	80031a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e2c:	d902      	bls.n	8005e34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e002      	b.n	8005e3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e42:	d007      	beq.n	8005e54 <HAL_SPI_Init+0xa0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e4c:	d002      	beq.n	8005e54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e96:	ea42 0103 	orr.w	r1, r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	0c1b      	lsrs	r3, r3, #16
 8005eb0:	f003 0204 	and.w	r2, r3, #4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ed0:	ea42 0103 	orr.w	r1, r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b088      	sub	sp, #32
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_SPI_Transmit+0x22>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e158      	b.n	80061de <HAL_SPI_Transmit+0x2d4>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f34:	f7fd fcee 	bl	8003914 <HAL_GetTick>
 8005f38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f4e:	e13d      	b.n	80061cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_Transmit+0x52>
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f60:	e134      	b.n	80061cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2203      	movs	r2, #3
 8005f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	88fa      	ldrh	r2, [r7, #6]
 8005f7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fac:	d10f      	bne.n	8005fce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d007      	beq.n	8005fec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ff4:	d94b      	bls.n	800608e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_SPI_Transmit+0xfa>
 8005ffe:	8afb      	ldrh	r3, [r7, #22]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d13e      	bne.n	8006082 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	881a      	ldrh	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	1c9a      	adds	r2, r3, #2
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006028:	e02b      	b.n	8006082 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b02      	cmp	r3, #2
 8006036:	d112      	bne.n	800605e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	881a      	ldrh	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	1c9a      	adds	r2, r3, #2
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800605c:	e011      	b.n	8006082 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605e:	f7fd fc59 	bl	8003914 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d803      	bhi.n	8006076 <HAL_SPI_Transmit+0x16c>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d102      	bne.n	800607c <HAL_SPI_Transmit+0x172>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006080:	e0a4      	b.n	80061cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1ce      	bne.n	800602a <HAL_SPI_Transmit+0x120>
 800608c:	e07c      	b.n	8006188 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_SPI_Transmit+0x192>
 8006096:	8afb      	ldrh	r3, [r7, #22]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d170      	bne.n	800617e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d912      	bls.n	80060cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	881a      	ldrh	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	1c9a      	adds	r2, r3, #2
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b02      	subs	r3, #2
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ca:	e058      	b.n	800617e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	7812      	ldrb	r2, [r2, #0]
 80060d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80060f2:	e044      	b.n	800617e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d12b      	bne.n	800615a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d912      	bls.n	8006132 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	881a      	ldrh	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	1c9a      	adds	r2, r3, #2
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b02      	subs	r3, #2
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006130:	e025      	b.n	800617e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	7812      	ldrb	r2, [r2, #0]
 800613e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006158:	e011      	b.n	800617e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800615a:	f7fd fbdb 	bl	8003914 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d803      	bhi.n	8006172 <HAL_SPI_Transmit+0x268>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d102      	bne.n	8006178 <HAL_SPI_Transmit+0x26e>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d102      	bne.n	800617e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800617c:	e026      	b.n	80061cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1b5      	bne.n	80060f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fd07 	bl	8006ba0 <SPI_EndRxTxTransaction>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10a      	bne.n	80061bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061a6:	2300      	movs	r3, #0
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	e000      	b.n	80061cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80061ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b088      	sub	sp, #32
 80061ea:	af02      	add	r7, sp, #8
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	4613      	mov	r3, r2
 80061f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006202:	d112      	bne.n	800622a <HAL_SPI_Receive+0x44>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10e      	bne.n	800622a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2204      	movs	r2, #4
 8006210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4613      	mov	r3, r2
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f910 	bl	8006446 <HAL_SPI_TransmitReceive>
 8006226:	4603      	mov	r3, r0
 8006228:	e109      	b.n	800643e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_SPI_Receive+0x52>
 8006234:	2302      	movs	r3, #2
 8006236:	e102      	b.n	800643e <HAL_SPI_Receive+0x258>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006240:	f7fd fb68 	bl	8003914 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	d002      	beq.n	8006258 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006252:	2302      	movs	r3, #2
 8006254:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006256:	e0e9      	b.n	800642c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_SPI_Receive+0x7e>
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006268:	e0e0      	b.n	800642c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2204      	movs	r2, #4
 800626e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062b4:	d908      	bls.n	80062c8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	e007      	b.n	80062d8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e0:	d10f      	bne.n	8006302 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	d007      	beq.n	8006320 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006328:	d867      	bhi.n	80063fa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800632a:	e030      	b.n	800638e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b01      	cmp	r3, #1
 8006338:	d117      	bne.n	800636a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f103 020c 	add.w	r2, r3, #12
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	7812      	ldrb	r2, [r2, #0]
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006368:	e011      	b.n	800638e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800636a:	f7fd fad3 	bl	8003914 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d803      	bhi.n	8006382 <HAL_SPI_Receive+0x19c>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d102      	bne.n	8006388 <HAL_SPI_Receive+0x1a2>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800638c:	e04e      	b.n	800642c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1c8      	bne.n	800632c <HAL_SPI_Receive+0x146>
 800639a:	e034      	b.n	8006406 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d115      	bne.n	80063d6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	b292      	uxth	r2, r2
 80063b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	1c9a      	adds	r2, r3, #2
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063d4:	e011      	b.n	80063fa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d6:	f7fd fa9d 	bl	8003914 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d803      	bhi.n	80063ee <HAL_SPI_Receive+0x208>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d102      	bne.n	80063f4 <HAL_SPI_Receive+0x20e>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063f8:	e018      	b.n	800642c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1ca      	bne.n	800639c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fb4c 	bl	8006aa8 <SPI_EndRxTransaction>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	75fb      	strb	r3, [r7, #23]
 8006428:	e000      	b.n	800642c <HAL_SPI_Receive+0x246>
  }

error :
 800642a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800643c:	7dfb      	ldrb	r3, [r7, #23]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b08a      	sub	sp, #40	; 0x28
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006454:	2301      	movs	r3, #1
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_SPI_TransmitReceive+0x26>
 8006468:	2302      	movs	r3, #2
 800646a:	e1fb      	b.n	8006864 <HAL_SPI_TransmitReceive+0x41e>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006474:	f7fd fa4e 	bl	8003914 <HAL_GetTick>
 8006478:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006480:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006488:	887b      	ldrh	r3, [r7, #2]
 800648a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800648c:	887b      	ldrh	r3, [r7, #2]
 800648e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006490:	7efb      	ldrb	r3, [r7, #27]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d00e      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x6e>
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800649c:	d106      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d102      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x66>
 80064a6:	7efb      	ldrb	r3, [r7, #27]
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d003      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80064b2:	e1cd      	b.n	8006850 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x80>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x80>
 80064c0:	887b      	ldrh	r3, [r7, #2]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80064cc:	e1c0      	b.n	8006850 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d003      	beq.n	80064e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2205      	movs	r2, #5
 80064de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	887a      	ldrh	r2, [r7, #2]
 80064f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	887a      	ldrh	r2, [r7, #2]
 80064fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	887a      	ldrh	r2, [r7, #2]
 8006508:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	887a      	ldrh	r2, [r7, #2]
 800650e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006524:	d802      	bhi.n	800652c <HAL_SPI_TransmitReceive+0xe6>
 8006526:	8a3b      	ldrh	r3, [r7, #16]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d908      	bls.n	800653e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800653a:	605a      	str	r2, [r3, #4]
 800653c:	e007      	b.n	800654e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800654c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d007      	beq.n	800656c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800656a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006574:	d97c      	bls.n	8006670 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_SPI_TransmitReceive+0x13e>
 800657e:	8a7b      	ldrh	r3, [r7, #18]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d169      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	881a      	ldrh	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	1c9a      	adds	r2, r3, #2
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065a8:	e056      	b.n	8006658 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d11b      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x1aa>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d016      	beq.n	80065f0 <HAL_SPI_TransmitReceive+0x1aa>
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d113      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	881a      	ldrh	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d11c      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x1f2>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d016      	beq.n	8006638 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	b292      	uxth	r2, r2
 8006616:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	1c9a      	adds	r2, r3, #2
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006634:	2301      	movs	r3, #1
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006638:	f7fd f96c 	bl	8003914 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006644:	429a      	cmp	r2, r3
 8006646:	d807      	bhi.n	8006658 <HAL_SPI_TransmitReceive+0x212>
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664e:	d003      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006656:	e0fb      	b.n	8006850 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1a3      	bne.n	80065aa <HAL_SPI_TransmitReceive+0x164>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d19d      	bne.n	80065aa <HAL_SPI_TransmitReceive+0x164>
 800666e:	e0df      	b.n	8006830 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_SPI_TransmitReceive+0x23a>
 8006678:	8a7b      	ldrh	r3, [r7, #18]
 800667a:	2b01      	cmp	r3, #1
 800667c:	f040 80cb 	bne.w	8006816 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b01      	cmp	r3, #1
 8006688:	d912      	bls.n	80066b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	881a      	ldrh	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	1c9a      	adds	r2, r3, #2
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b02      	subs	r3, #2
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ae:	e0b2      	b.n	8006816 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	7812      	ldrb	r2, [r2, #0]
 80066bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d6:	e09e      	b.n	8006816 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d134      	bne.n	8006750 <HAL_SPI_TransmitReceive+0x30a>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02f      	beq.n	8006750 <HAL_SPI_TransmitReceive+0x30a>
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d12c      	bne.n	8006750 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d912      	bls.n	8006726 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	881a      	ldrh	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	1c9a      	adds	r2, r3, #2
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b02      	subs	r3, #2
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006724:	e012      	b.n	800674c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	7812      	ldrb	r2, [r2, #0]
 8006732:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b01      	cmp	r3, #1
 800675c:	d148      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x3aa>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d042      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b01      	cmp	r3, #1
 8006774:	d923      	bls.n	80067be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	b292      	uxth	r2, r2
 8006782:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	1c9a      	adds	r2, r3, #2
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b02      	subs	r3, #2
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d81f      	bhi.n	80067ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067ba:	605a      	str	r2, [r3, #4]
 80067bc:	e016      	b.n	80067ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f103 020c 	add.w	r2, r3, #12
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067ec:	2301      	movs	r3, #1
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067f0:	f7fd f890 	bl	8003914 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d803      	bhi.n	8006808 <HAL_SPI_TransmitReceive+0x3c2>
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d102      	bne.n	800680e <HAL_SPI_TransmitReceive+0x3c8>
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006814:	e01c      	b.n	8006850 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	f47f af5b 	bne.w	80066d8 <HAL_SPI_TransmitReceive+0x292>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	f47f af54 	bne.w	80066d8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 f9b3 	bl	8006ba0 <SPI_EndRxTxTransaction>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d006      	beq.n	800684e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2220      	movs	r2, #32
 800684a:	661a      	str	r2, [r3, #96]	; 0x60
 800684c:	e000      	b.n	8006850 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800684e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006864:	4618      	mov	r0, r3
 8006866:	3728      	adds	r7, #40	; 0x28
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800687c:	f7fd f84a 	bl	8003914 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	4413      	add	r3, r2
 800688a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800688c:	f7fd f842 	bl	8003914 <HAL_GetTick>
 8006890:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006892:	4b39      	ldr	r3, [pc, #228]	; (8006978 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	015b      	lsls	r3, r3, #5
 8006898:	0d1b      	lsrs	r3, r3, #20
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	fb02 f303 	mul.w	r3, r2, r3
 80068a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068a2:	e054      	b.n	800694e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d050      	beq.n	800694e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068ac:	f7fd f832 	bl	8003914 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d902      	bls.n	80068c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d13d      	bne.n	800693e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068da:	d111      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e4:	d004      	beq.n	80068f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ee:	d107      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006908:	d10f      	bne.n	800692a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e017      	b.n	800696e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	3b01      	subs	r3, #1
 800694c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4013      	ands	r3, r2
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	429a      	cmp	r2, r3
 800696a:	d19b      	bne.n	80068a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000000 	.word	0x20000000

0800697c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	; 0x28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800698e:	f7fc ffc1 	bl	8003914 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	4413      	add	r3, r2
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800699e:	f7fc ffb9 	bl	8003914 <HAL_GetTick>
 80069a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069ac:	4b3d      	ldr	r3, [pc, #244]	; (8006aa4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	00da      	lsls	r2, r3, #3
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	0d1b      	lsrs	r3, r3, #20
 80069bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069be:	fb02 f303 	mul.w	r3, r2, r3
 80069c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069c4:	e060      	b.n	8006a88 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069cc:	d107      	bne.n	80069de <SPI_WaitFifoStateUntilTimeout+0x62>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d050      	beq.n	8006a88 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069e6:	f7fc ff95 	bl	8003914 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d902      	bls.n	80069fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d13d      	bne.n	8006a78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a14:	d111      	bne.n	8006a3a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1e:	d004      	beq.n	8006a2a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a28:	d107      	bne.n	8006a3a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a42:	d10f      	bne.n	8006a64 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e010      	b.n	8006a9a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	4013      	ands	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d196      	bne.n	80069c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3728      	adds	r7, #40	; 0x28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000000 	.word	0x20000000

08006aa8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006abc:	d111      	bne.n	8006ae2 <SPI_EndRxTransaction+0x3a>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac6:	d004      	beq.n	8006ad2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad0:	d107      	bne.n	8006ae2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aea:	d112      	bne.n	8006b12 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2200      	movs	r2, #0
 8006af4:	2180      	movs	r1, #128	; 0x80
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff feb8 	bl	800686c <SPI_WaitFlagStateUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d021      	beq.n	8006b46 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b06:	f043 0220 	orr.w	r2, r3, #32
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e03d      	b.n	8006b8e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b12:	4b21      	ldr	r3, [pc, #132]	; (8006b98 <SPI_EndRxTransaction+0xf0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a21      	ldr	r2, [pc, #132]	; (8006b9c <SPI_EndRxTransaction+0xf4>)
 8006b18:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1c:	0d5b      	lsrs	r3, r3, #21
 8006b1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3e:	2b80      	cmp	r3, #128	; 0x80
 8006b40:	d0f2      	beq.n	8006b28 <SPI_EndRxTransaction+0x80>
 8006b42:	e000      	b.n	8006b46 <SPI_EndRxTransaction+0x9e>
        break;
 8006b44:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b4e:	d11d      	bne.n	8006b8c <SPI_EndRxTransaction+0xe4>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b58:	d004      	beq.n	8006b64 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b62:	d113      	bne.n	8006b8c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff ff03 	bl	800697c <SPI_WaitFifoStateUntilTimeout>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d007      	beq.n	8006b8c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b80:	f043 0220 	orr.w	r2, r3, #32
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e000      	b.n	8006b8e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000000 	.word	0x20000000
 8006b9c:	165e9f81 	.word	0x165e9f81

08006ba0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff fedf 	bl	800697c <SPI_WaitFifoStateUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc8:	f043 0220 	orr.w	r2, r3, #32
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e046      	b.n	8006c62 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bd4:	4b25      	ldr	r3, [pc, #148]	; (8006c6c <SPI_EndRxTxTransaction+0xcc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a25      	ldr	r2, [pc, #148]	; (8006c70 <SPI_EndRxTxTransaction+0xd0>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	0d5b      	lsrs	r3, r3, #21
 8006be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006be4:	fb02 f303 	mul.w	r3, r2, r3
 8006be8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bf2:	d112      	bne.n	8006c1a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2180      	movs	r1, #128	; 0x80
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fe34 	bl	800686c <SPI_WaitFlagStateUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d016      	beq.n	8006c38 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0e:	f043 0220 	orr.w	r2, r3, #32
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e023      	b.n	8006c62 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c30:	2b80      	cmp	r3, #128	; 0x80
 8006c32:	d0f2      	beq.n	8006c1a <SPI_EndRxTxTransaction+0x7a>
 8006c34:	e000      	b.n	8006c38 <SPI_EndRxTxTransaction+0x98>
        break;
 8006c36:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f7ff fe99 	bl	800697c <SPI_WaitFifoStateUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c54:	f043 0220 	orr.w	r2, r3, #32
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e000      	b.n	8006c62 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000000 	.word	0x20000000
 8006c70:	165e9f81 	.word	0x165e9f81

08006c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d001      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e054      	b.n	8006d36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a26      	ldr	r2, [pc, #152]	; (8006d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d022      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x80>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb6:	d01d      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x80>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d018      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x80>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <HAL_TIM_Base_Start_IT+0xd8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d013      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x80>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00e      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x80>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1e      	ldr	r2, [pc, #120]	; (8006d54 <HAL_TIM_Base_Start_IT+0xe0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d009      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x80>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1c      	ldr	r2, [pc, #112]	; (8006d58 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d004      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x80>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a1b      	ldr	r2, [pc, #108]	; (8006d5c <HAL_TIM_Base_Start_IT+0xe8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d115      	bne.n	8006d20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	4b19      	ldr	r3, [pc, #100]	; (8006d60 <HAL_TIM_Base_Start_IT+0xec>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b06      	cmp	r3, #6
 8006d04:	d015      	beq.n	8006d32 <HAL_TIM_Base_Start_IT+0xbe>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d0c:	d011      	beq.n	8006d32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0201 	orr.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1e:	e008      	b.n	8006d32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	e000      	b.n	8006d34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00
 8006d54:	40010400 	.word	0x40010400
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40001800 	.word	0x40001800
 8006d60:	00010007 	.word	0x00010007

08006d64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e049      	b.n	8006e0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fc fc62 	bl	8003654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f000 fd5a 	bl	800785c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e049      	b.n	8006eb8 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fc fbbf 	bl	80035bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4610      	mov	r0, r2
 8006e52:	f000 fd03 	bl	800785c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d104      	bne.n	8006ede <HAL_TIM_IC_Start_IT+0x1e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e023      	b.n	8006f26 <HAL_TIM_IC_Start_IT+0x66>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d104      	bne.n	8006eee <HAL_TIM_IC_Start_IT+0x2e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	e01b      	b.n	8006f26 <HAL_TIM_IC_Start_IT+0x66>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_IC_Start_IT+0x3e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	e013      	b.n	8006f26 <HAL_TIM_IC_Start_IT+0x66>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b0c      	cmp	r3, #12
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_IC_Start_IT+0x4e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	e00b      	b.n	8006f26 <HAL_TIM_IC_Start_IT+0x66>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b10      	cmp	r3, #16
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_IC_Start_IT+0x5e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	e003      	b.n	8006f26 <HAL_TIM_IC_Start_IT+0x66>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <HAL_TIM_IC_Start_IT+0x78>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	e013      	b.n	8006f60 <HAL_TIM_IC_Start_IT+0xa0>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d104      	bne.n	8006f48 <HAL_TIM_IC_Start_IT+0x88>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	e00b      	b.n	8006f60 <HAL_TIM_IC_Start_IT+0xa0>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d104      	bne.n	8006f58 <HAL_TIM_IC_Start_IT+0x98>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	e003      	b.n	8006f60 <HAL_TIM_IC_Start_IT+0xa0>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d102      	bne.n	8006f6e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f68:	7b7b      	ldrb	r3, [r7, #13]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d001      	beq.n	8006f72 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e0e2      	b.n	8007138 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <HAL_TIM_IC_Start_IT+0xc2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f80:	e023      	b.n	8006fca <HAL_TIM_IC_Start_IT+0x10a>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d104      	bne.n	8006f92 <HAL_TIM_IC_Start_IT+0xd2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f90:	e01b      	b.n	8006fca <HAL_TIM_IC_Start_IT+0x10a>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	d104      	bne.n	8006fa2 <HAL_TIM_IC_Start_IT+0xe2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa0:	e013      	b.n	8006fca <HAL_TIM_IC_Start_IT+0x10a>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_IC_Start_IT+0xf2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fb0:	e00b      	b.n	8006fca <HAL_TIM_IC_Start_IT+0x10a>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_IC_Start_IT+0x102>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fc0:	e003      	b.n	8006fca <HAL_TIM_IC_Start_IT+0x10a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <HAL_TIM_IC_Start_IT+0x11a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd8:	e013      	b.n	8007002 <HAL_TIM_IC_Start_IT+0x142>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d104      	bne.n	8006fea <HAL_TIM_IC_Start_IT+0x12a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fe8:	e00b      	b.n	8007002 <HAL_TIM_IC_Start_IT+0x142>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_IC_Start_IT+0x13a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ff8:	e003      	b.n	8007002 <HAL_TIM_IC_Start_IT+0x142>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b0c      	cmp	r3, #12
 8007006:	d841      	bhi.n	800708c <HAL_TIM_IC_Start_IT+0x1cc>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <HAL_TIM_IC_Start_IT+0x150>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007045 	.word	0x08007045
 8007014:	0800708d 	.word	0x0800708d
 8007018:	0800708d 	.word	0x0800708d
 800701c:	0800708d 	.word	0x0800708d
 8007020:	08007057 	.word	0x08007057
 8007024:	0800708d 	.word	0x0800708d
 8007028:	0800708d 	.word	0x0800708d
 800702c:	0800708d 	.word	0x0800708d
 8007030:	08007069 	.word	0x08007069
 8007034:	0800708d 	.word	0x0800708d
 8007038:	0800708d 	.word	0x0800708d
 800703c:	0800708d 	.word	0x0800708d
 8007040:	0800707b 	.word	0x0800707b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0202 	orr.w	r2, r2, #2
 8007052:	60da      	str	r2, [r3, #12]
      break;
 8007054:	e01d      	b.n	8007092 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0204 	orr.w	r2, r2, #4
 8007064:	60da      	str	r2, [r3, #12]
      break;
 8007066:	e014      	b.n	8007092 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0208 	orr.w	r2, r2, #8
 8007076:	60da      	str	r2, [r3, #12]
      break;
 8007078:	e00b      	b.n	8007092 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0210 	orr.w	r2, r2, #16
 8007088:	60da      	str	r2, [r3, #12]
      break;
 800708a:	e002      	b.n	8007092 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	73fb      	strb	r3, [r7, #15]
      break;
 8007090:	bf00      	nop
  }

  if (status == HAL_OK)
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d14e      	bne.n	8007136 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2201      	movs	r2, #1
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 f916 	bl	80082d2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a25      	ldr	r2, [pc, #148]	; (8007140 <HAL_TIM_IC_Start_IT+0x280>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d022      	beq.n	80070f6 <HAL_TIM_IC_Start_IT+0x236>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b8:	d01d      	beq.n	80070f6 <HAL_TIM_IC_Start_IT+0x236>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a21      	ldr	r2, [pc, #132]	; (8007144 <HAL_TIM_IC_Start_IT+0x284>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d018      	beq.n	80070f6 <HAL_TIM_IC_Start_IT+0x236>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <HAL_TIM_IC_Start_IT+0x288>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <HAL_TIM_IC_Start_IT+0x236>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1e      	ldr	r2, [pc, #120]	; (800714c <HAL_TIM_IC_Start_IT+0x28c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00e      	beq.n	80070f6 <HAL_TIM_IC_Start_IT+0x236>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1c      	ldr	r2, [pc, #112]	; (8007150 <HAL_TIM_IC_Start_IT+0x290>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d009      	beq.n	80070f6 <HAL_TIM_IC_Start_IT+0x236>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1b      	ldr	r2, [pc, #108]	; (8007154 <HAL_TIM_IC_Start_IT+0x294>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_IC_Start_IT+0x236>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a19      	ldr	r2, [pc, #100]	; (8007158 <HAL_TIM_IC_Start_IT+0x298>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d115      	bne.n	8007122 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	4b17      	ldr	r3, [pc, #92]	; (800715c <HAL_TIM_IC_Start_IT+0x29c>)
 80070fe:	4013      	ands	r3, r2
 8007100:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b06      	cmp	r3, #6
 8007106:	d015      	beq.n	8007134 <HAL_TIM_IC_Start_IT+0x274>
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800710e:	d011      	beq.n	8007134 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007120:	e008      	b.n	8007134 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0201 	orr.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	e000      	b.n	8007136 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007134:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40010000 	.word	0x40010000
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40010400 	.word	0x40010400
 8007154:	40014000 	.word	0x40014000
 8007158:	40001800 	.word	0x40001800
 800715c:	00010007 	.word	0x00010007

08007160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b02      	cmp	r3, #2
 8007174:	d122      	bne.n	80071bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b02      	cmp	r3, #2
 8007182:	d11b      	bne.n	80071bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0202 	mvn.w	r2, #2
 800718c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fb3c 	bl	8007820 <HAL_TIM_IC_CaptureCallback>
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fb2e 	bl	800780c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fb3f 	bl	8007834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0204 	mvn.w	r2, #4
 80071e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fb12 	bl	8007820 <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fb04 	bl	800780c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fb15 	bl	8007834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b08      	cmp	r3, #8
 800721c:	d122      	bne.n	8007264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b08      	cmp	r3, #8
 800722a:	d11b      	bne.n	8007264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0208 	mvn.w	r2, #8
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2204      	movs	r2, #4
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fae8 	bl	8007820 <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fada 	bl	800780c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 faeb 	bl	8007834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b10      	cmp	r3, #16
 8007270:	d122      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b10      	cmp	r3, #16
 800727e:	d11b      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0210 	mvn.w	r2, #16
 8007288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2208      	movs	r2, #8
 800728e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fabe 	bl	8007820 <HAL_TIM_IC_CaptureCallback>
 80072a4:	e005      	b.n	80072b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fab0 	bl	800780c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fac1 	bl	8007834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d10e      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d107      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0201 	mvn.w	r2, #1
 80072dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fb fe76 	bl	8002fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ee:	2b80      	cmp	r3, #128	; 0x80
 80072f0:	d10e      	bne.n	8007310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fc:	2b80      	cmp	r3, #128	; 0x80
 80072fe:	d107      	bne.n	8007310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 f89e 	bl	800844c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731e:	d10e      	bne.n	800733e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d107      	bne.n	800733e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f891 	bl	8008460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	d10e      	bne.n	800736a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	d107      	bne.n	800736a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fa6f 	bl	8007848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f003 0320 	and.w	r3, r3, #32
 8007374:	2b20      	cmp	r3, #32
 8007376:	d10e      	bne.n	8007396 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b20      	cmp	r3, #32
 8007384:	d107      	bne.n	8007396 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f06f 0220 	mvn.w	r2, #32
 800738e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 f851 	bl	8008438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007396:	bf00      	nop
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_TIM_IC_ConfigChannel+0x1e>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e088      	b.n	80074ce <HAL_TIM_IC_ConfigChannel+0x130>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d11b      	bne.n	8007402 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f000 fdd1 	bl	8007f80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 020c 	bic.w	r2, r2, #12
 80073ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6999      	ldr	r1, [r3, #24]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	619a      	str	r2, [r3, #24]
 8007400:	e060      	b.n	80074c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b04      	cmp	r3, #4
 8007406:	d11c      	bne.n	8007442 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f000 fe55 	bl	80080c6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699a      	ldr	r2, [r3, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800742a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6999      	ldr	r1, [r3, #24]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	021a      	lsls	r2, r3, #8
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	619a      	str	r2, [r3, #24]
 8007440:	e040      	b.n	80074c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b08      	cmp	r3, #8
 8007446:	d11b      	bne.n	8007480 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f000 fea2 	bl	80081a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69da      	ldr	r2, [r3, #28]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 020c 	bic.w	r2, r2, #12
 800746a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69d9      	ldr	r1, [r3, #28]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	61da      	str	r2, [r3, #28]
 800747e:	e021      	b.n	80074c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b0c      	cmp	r3, #12
 8007484:	d11c      	bne.n	80074c0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f000 febf 	bl	8008218 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80074a8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69d9      	ldr	r1, [r3, #28]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	021a      	lsls	r2, r3, #8
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	61da      	str	r2, [r3, #28]
 80074be:	e001      	b.n	80074c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074f2:	2302      	movs	r3, #2
 80074f4:	e0ff      	b.n	80076f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b14      	cmp	r3, #20
 8007502:	f200 80f0 	bhi.w	80076e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007561 	.word	0x08007561
 8007510:	080076e7 	.word	0x080076e7
 8007514:	080076e7 	.word	0x080076e7
 8007518:	080076e7 	.word	0x080076e7
 800751c:	080075a1 	.word	0x080075a1
 8007520:	080076e7 	.word	0x080076e7
 8007524:	080076e7 	.word	0x080076e7
 8007528:	080076e7 	.word	0x080076e7
 800752c:	080075e3 	.word	0x080075e3
 8007530:	080076e7 	.word	0x080076e7
 8007534:	080076e7 	.word	0x080076e7
 8007538:	080076e7 	.word	0x080076e7
 800753c:	08007623 	.word	0x08007623
 8007540:	080076e7 	.word	0x080076e7
 8007544:	080076e7 	.word	0x080076e7
 8007548:	080076e7 	.word	0x080076e7
 800754c:	08007665 	.word	0x08007665
 8007550:	080076e7 	.word	0x080076e7
 8007554:	080076e7 	.word	0x080076e7
 8007558:	080076e7 	.word	0x080076e7
 800755c:	080076a5 	.word	0x080076a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa18 	bl	800799c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0208 	orr.w	r2, r2, #8
 800757a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0204 	bic.w	r2, r2, #4
 800758a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6999      	ldr	r1, [r3, #24]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	619a      	str	r2, [r3, #24]
      break;
 800759e:	e0a5      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fa6a 	bl	8007a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6999      	ldr	r1, [r3, #24]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	021a      	lsls	r2, r3, #8
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	619a      	str	r2, [r3, #24]
      break;
 80075e0:	e084      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fac1 	bl	8007b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0208 	orr.w	r2, r2, #8
 80075fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0204 	bic.w	r2, r2, #4
 800760c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69d9      	ldr	r1, [r3, #28]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	61da      	str	r2, [r3, #28]
      break;
 8007620:	e064      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fb17 	bl	8007c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800763c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800764c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69d9      	ldr	r1, [r3, #28]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	021a      	lsls	r2, r3, #8
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	61da      	str	r2, [r3, #28]
      break;
 8007662:	e043      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 fb4e 	bl	8007d0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0208 	orr.w	r2, r2, #8
 800767e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0204 	bic.w	r2, r2, #4
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076a2:	e023      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fb80 	bl	8007db0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	021a      	lsls	r2, r3, #8
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076e4:	e002      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	75fb      	strb	r3, [r7, #23]
      break;
 80076ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop

08007700 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007714:	2302      	movs	r3, #2
 8007716:	e031      	b.n	800777c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fb94 	bl	8007e58 <TIM_SlaveTimer_SetConfig>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e018      	b.n	800777c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007758:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007768:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b0c      	cmp	r3, #12
 8007796:	d831      	bhi.n	80077fc <HAL_TIM_ReadCapturedValue+0x78>
 8007798:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	080077d5 	.word	0x080077d5
 80077a4:	080077fd 	.word	0x080077fd
 80077a8:	080077fd 	.word	0x080077fd
 80077ac:	080077fd 	.word	0x080077fd
 80077b0:	080077df 	.word	0x080077df
 80077b4:	080077fd 	.word	0x080077fd
 80077b8:	080077fd 	.word	0x080077fd
 80077bc:	080077fd 	.word	0x080077fd
 80077c0:	080077e9 	.word	0x080077e9
 80077c4:	080077fd 	.word	0x080077fd
 80077c8:	080077fd 	.word	0x080077fd
 80077cc:	080077fd 	.word	0x080077fd
 80077d0:	080077f3 	.word	0x080077f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077da:	60fb      	str	r3, [r7, #12]

      break;
 80077dc:	e00f      	b.n	80077fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	60fb      	str	r3, [r7, #12]

      break;
 80077e6:	e00a      	b.n	80077fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ee:	60fb      	str	r3, [r7, #12]

      break;
 80077f0:	e005      	b.n	80077fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	60fb      	str	r3, [r7, #12]

      break;
 80077fa:	e000      	b.n	80077fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80077fc:	bf00      	nop
  }

  return tmpreg;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a40      	ldr	r2, [pc, #256]	; (8007970 <TIM_Base_SetConfig+0x114>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d013      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787a:	d00f      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a3d      	ldr	r2, [pc, #244]	; (8007974 <TIM_Base_SetConfig+0x118>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00b      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a3c      	ldr	r2, [pc, #240]	; (8007978 <TIM_Base_SetConfig+0x11c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d007      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a3b      	ldr	r2, [pc, #236]	; (800797c <TIM_Base_SetConfig+0x120>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a3a      	ldr	r2, [pc, #232]	; (8007980 <TIM_Base_SetConfig+0x124>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d108      	bne.n	80078ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2f      	ldr	r2, [pc, #188]	; (8007970 <TIM_Base_SetConfig+0x114>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d02b      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078bc:	d027      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2c      	ldr	r2, [pc, #176]	; (8007974 <TIM_Base_SetConfig+0x118>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d023      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2b      	ldr	r2, [pc, #172]	; (8007978 <TIM_Base_SetConfig+0x11c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d01f      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2a      	ldr	r2, [pc, #168]	; (800797c <TIM_Base_SetConfig+0x120>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01b      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a29      	ldr	r2, [pc, #164]	; (8007980 <TIM_Base_SetConfig+0x124>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d017      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a28      	ldr	r2, [pc, #160]	; (8007984 <TIM_Base_SetConfig+0x128>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a27      	ldr	r2, [pc, #156]	; (8007988 <TIM_Base_SetConfig+0x12c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00f      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a26      	ldr	r2, [pc, #152]	; (800798c <TIM_Base_SetConfig+0x130>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00b      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a25      	ldr	r2, [pc, #148]	; (8007990 <TIM_Base_SetConfig+0x134>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d007      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a24      	ldr	r2, [pc, #144]	; (8007994 <TIM_Base_SetConfig+0x138>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d003      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a23      	ldr	r2, [pc, #140]	; (8007998 <TIM_Base_SetConfig+0x13c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d108      	bne.n	8007920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <TIM_Base_SetConfig+0x114>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d003      	beq.n	8007954 <TIM_Base_SetConfig+0xf8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a0c      	ldr	r2, [pc, #48]	; (8007980 <TIM_Base_SetConfig+0x124>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d103      	bne.n	800795c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	615a      	str	r2, [r3, #20]
}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40010000 	.word	0x40010000
 8007974:	40000400 	.word	0x40000400
 8007978:	40000800 	.word	0x40000800
 800797c:	40000c00 	.word	0x40000c00
 8007980:	40010400 	.word	0x40010400
 8007984:	40014000 	.word	0x40014000
 8007988:	40014400 	.word	0x40014400
 800798c:	40014800 	.word	0x40014800
 8007990:	40001800 	.word	0x40001800
 8007994:	40001c00 	.word	0x40001c00
 8007998:	40002000 	.word	0x40002000

0800799c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f023 0201 	bic.w	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4b2b      	ldr	r3, [pc, #172]	; (8007a74 <TIM_OC1_SetConfig+0xd8>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0303 	bic.w	r3, r3, #3
 80079d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f023 0302 	bic.w	r3, r3, #2
 80079e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a21      	ldr	r2, [pc, #132]	; (8007a78 <TIM_OC1_SetConfig+0xdc>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d003      	beq.n	8007a00 <TIM_OC1_SetConfig+0x64>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a20      	ldr	r2, [pc, #128]	; (8007a7c <TIM_OC1_SetConfig+0xe0>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10c      	bne.n	8007a1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f023 0308 	bic.w	r3, r3, #8
 8007a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 0304 	bic.w	r3, r3, #4
 8007a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a16      	ldr	r2, [pc, #88]	; (8007a78 <TIM_OC1_SetConfig+0xdc>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d003      	beq.n	8007a2a <TIM_OC1_SetConfig+0x8e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <TIM_OC1_SetConfig+0xe0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d111      	bne.n	8007a4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	621a      	str	r2, [r3, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	fffeff8f 	.word	0xfffeff8f
 8007a78:	40010000 	.word	0x40010000
 8007a7c:	40010400 	.word	0x40010400

08007a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f023 0210 	bic.w	r2, r3, #16
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4b2e      	ldr	r3, [pc, #184]	; (8007b64 <TIM_OC2_SetConfig+0xe4>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f023 0320 	bic.w	r3, r3, #32
 8007aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a23      	ldr	r2, [pc, #140]	; (8007b68 <TIM_OC2_SetConfig+0xe8>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d003      	beq.n	8007ae8 <TIM_OC2_SetConfig+0x68>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a22      	ldr	r2, [pc, #136]	; (8007b6c <TIM_OC2_SetConfig+0xec>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d10d      	bne.n	8007b04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <TIM_OC2_SetConfig+0xe8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_OC2_SetConfig+0x94>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a17      	ldr	r2, [pc, #92]	; (8007b6c <TIM_OC2_SetConfig+0xec>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d113      	bne.n	8007b3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	621a      	str	r2, [r3, #32]
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	feff8fff 	.word	0xfeff8fff
 8007b68:	40010000 	.word	0x40010000
 8007b6c:	40010400 	.word	0x40010400

08007b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4b2d      	ldr	r3, [pc, #180]	; (8007c50 <TIM_OC3_SetConfig+0xe0>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a22      	ldr	r2, [pc, #136]	; (8007c54 <TIM_OC3_SetConfig+0xe4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <TIM_OC3_SetConfig+0x66>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <TIM_OC3_SetConfig+0xe8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d10d      	bne.n	8007bf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a17      	ldr	r2, [pc, #92]	; (8007c54 <TIM_OC3_SetConfig+0xe4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d003      	beq.n	8007c02 <TIM_OC3_SetConfig+0x92>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a16      	ldr	r2, [pc, #88]	; (8007c58 <TIM_OC3_SetConfig+0xe8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d113      	bne.n	8007c2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	621a      	str	r2, [r3, #32]
}
 8007c44:	bf00      	nop
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	fffeff8f 	.word	0xfffeff8f
 8007c54:	40010000 	.word	0x40010000
 8007c58:	40010400 	.word	0x40010400

08007c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <TIM_OC4_SetConfig+0xa4>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	031b      	lsls	r3, r3, #12
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <TIM_OC4_SetConfig+0xa8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d003      	beq.n	8007cc4 <TIM_OC4_SetConfig+0x68>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a12      	ldr	r2, [pc, #72]	; (8007d08 <TIM_OC4_SetConfig+0xac>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d109      	bne.n	8007cd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	019b      	lsls	r3, r3, #6
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	621a      	str	r2, [r3, #32]
}
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	feff8fff 	.word	0xfeff8fff
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40010400 	.word	0x40010400

08007d0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4b1b      	ldr	r3, [pc, #108]	; (8007da4 <TIM_OC5_SetConfig+0x98>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	041b      	lsls	r3, r3, #16
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a12      	ldr	r2, [pc, #72]	; (8007da8 <TIM_OC5_SetConfig+0x9c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_OC5_SetConfig+0x5e>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a11      	ldr	r2, [pc, #68]	; (8007dac <TIM_OC5_SetConfig+0xa0>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d109      	bne.n	8007d7e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	621a      	str	r2, [r3, #32]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	fffeff8f 	.word	0xfffeff8f
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40010400 	.word	0x40010400

08007db0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <TIM_OC6_SetConfig+0x9c>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	051b      	lsls	r3, r3, #20
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a13      	ldr	r2, [pc, #76]	; (8007e50 <TIM_OC6_SetConfig+0xa0>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_OC6_SetConfig+0x60>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <TIM_OC6_SetConfig+0xa4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d109      	bne.n	8007e24 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	029b      	lsls	r3, r3, #10
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	621a      	str	r2, [r3, #32]
}
 8007e3e:	bf00      	nop
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	feff8fff 	.word	0xfeff8fff
 8007e50:	40010000 	.word	0x40010000
 8007e54:	40010400 	.word	0x40010400

08007e58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4b3e      	ldr	r3, [pc, #248]	; (8007f7c <TIM_SlaveTimer_SetConfig+0x124>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b70      	cmp	r3, #112	; 0x70
 8007ea0:	d01a      	beq.n	8007ed8 <TIM_SlaveTimer_SetConfig+0x80>
 8007ea2:	2b70      	cmp	r3, #112	; 0x70
 8007ea4:	d860      	bhi.n	8007f68 <TIM_SlaveTimer_SetConfig+0x110>
 8007ea6:	2b60      	cmp	r3, #96	; 0x60
 8007ea8:	d054      	beq.n	8007f54 <TIM_SlaveTimer_SetConfig+0xfc>
 8007eaa:	2b60      	cmp	r3, #96	; 0x60
 8007eac:	d85c      	bhi.n	8007f68 <TIM_SlaveTimer_SetConfig+0x110>
 8007eae:	2b50      	cmp	r3, #80	; 0x50
 8007eb0:	d046      	beq.n	8007f40 <TIM_SlaveTimer_SetConfig+0xe8>
 8007eb2:	2b50      	cmp	r3, #80	; 0x50
 8007eb4:	d858      	bhi.n	8007f68 <TIM_SlaveTimer_SetConfig+0x110>
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	d019      	beq.n	8007eee <TIM_SlaveTimer_SetConfig+0x96>
 8007eba:	2b40      	cmp	r3, #64	; 0x40
 8007ebc:	d854      	bhi.n	8007f68 <TIM_SlaveTimer_SetConfig+0x110>
 8007ebe:	2b30      	cmp	r3, #48	; 0x30
 8007ec0:	d055      	beq.n	8007f6e <TIM_SlaveTimer_SetConfig+0x116>
 8007ec2:	2b30      	cmp	r3, #48	; 0x30
 8007ec4:	d850      	bhi.n	8007f68 <TIM_SlaveTimer_SetConfig+0x110>
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d051      	beq.n	8007f6e <TIM_SlaveTimer_SetConfig+0x116>
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d84c      	bhi.n	8007f68 <TIM_SlaveTimer_SetConfig+0x110>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d04d      	beq.n	8007f6e <TIM_SlaveTimer_SetConfig+0x116>
 8007ed2:	2b10      	cmp	r3, #16
 8007ed4:	d04b      	beq.n	8007f6e <TIM_SlaveTimer_SetConfig+0x116>
 8007ed6:	e047      	b.n	8007f68 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68d9      	ldr	r1, [r3, #12]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f000 f9d3 	bl	8008292 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007eec:	e040      	b.n	8007f70 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b05      	cmp	r3, #5
 8007ef4:	d101      	bne.n	8007efa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e03b      	b.n	8007f72 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6a1a      	ldr	r2, [r3, #32]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	011b      	lsls	r3, r3, #4
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	621a      	str	r2, [r3, #32]
      break;
 8007f3e:	e017      	b.n	8007f70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	6899      	ldr	r1, [r3, #8]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f000 f88b 	bl	8008068 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f52:	e00d      	b.n	8007f70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	6899      	ldr	r1, [r3, #8]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	461a      	mov	r2, r3
 8007f62:	f000 f8ed 	bl	8008140 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f66:	e003      	b.n	8007f70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6c:	e000      	b.n	8007f70 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007f6e:	bf00      	nop
  }

  return status;
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	fffefff8 	.word	0xfffefff8

08007f80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f023 0201 	bic.w	r2, r3, #1
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4a28      	ldr	r2, [pc, #160]	; (800804c <TIM_TI1_SetConfig+0xcc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01b      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb4:	d017      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4a25      	ldr	r2, [pc, #148]	; (8008050 <TIM_TI1_SetConfig+0xd0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d013      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4a24      	ldr	r2, [pc, #144]	; (8008054 <TIM_TI1_SetConfig+0xd4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00f      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4a23      	ldr	r2, [pc, #140]	; (8008058 <TIM_TI1_SetConfig+0xd8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00b      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4a22      	ldr	r2, [pc, #136]	; (800805c <TIM_TI1_SetConfig+0xdc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d007      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4a21      	ldr	r2, [pc, #132]	; (8008060 <TIM_TI1_SetConfig+0xe0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d003      	beq.n	8007fe6 <TIM_TI1_SetConfig+0x66>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4a20      	ldr	r2, [pc, #128]	; (8008064 <TIM_TI1_SetConfig+0xe4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d101      	bne.n	8007fea <TIM_TI1_SetConfig+0x6a>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e000      	b.n	8007fec <TIM_TI1_SetConfig+0x6c>
 8007fea:	2300      	movs	r3, #0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f023 0303 	bic.w	r3, r3, #3
 8007ff6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	e003      	b.n	800800a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f043 0301 	orr.w	r3, r3, #1
 8008008:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	b2db      	uxtb	r3, r3
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f023 030a 	bic.w	r3, r3, #10
 8008024:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f003 030a 	and.w	r3, r3, #10
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40010000 	.word	0x40010000
 8008050:	40000400 	.word	0x40000400
 8008054:	40000800 	.word	0x40000800
 8008058:	40000c00 	.word	0x40000c00
 800805c:	40010400 	.word	0x40010400
 8008060:	40014000 	.word	0x40014000
 8008064:	40001800 	.word	0x40001800

08008068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f023 0201 	bic.w	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f023 030a 	bic.w	r3, r3, #10
 80080a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b087      	sub	sp, #28
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f023 0210 	bic.w	r2, r3, #16
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	031b      	lsls	r3, r3, #12
 800810a:	b29b      	uxth	r3, r3
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	4313      	orrs	r3, r2
 8008110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008118:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4313      	orrs	r3, r2
 8008126:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	621a      	str	r2, [r3, #32]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f023 0210 	bic.w	r2, r3, #16
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800816a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	031b      	lsls	r3, r3, #12
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800817c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	621a      	str	r2, [r3, #32]
}
 8008194:	bf00      	nop
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f023 0303 	bic.w	r3, r3, #3
 80081cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80081f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	021b      	lsls	r3, r3, #8
 80081f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	621a      	str	r2, [r3, #32]
}
 800820c:	bf00      	nop
 800820e:	371c      	adds	r7, #28
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008244:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008256:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	031b      	lsls	r3, r3, #12
 800825c:	b29b      	uxth	r3, r3
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800826a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	031b      	lsls	r3, r3, #12
 8008270:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	621a      	str	r2, [r3, #32]
}
 8008286:	bf00      	nop
 8008288:	371c      	adds	r7, #28
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008292:	b480      	push	{r7}
 8008294:	b087      	sub	sp, #28
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	607a      	str	r2, [r7, #4]
 800829e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	021a      	lsls	r2, r3, #8
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	431a      	orrs	r2, r3
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	609a      	str	r2, [r3, #8]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b087      	sub	sp, #28
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f003 031f 	and.w	r3, r3, #31
 80082e4:	2201      	movs	r2, #1
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a1a      	ldr	r2, [r3, #32]
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	43db      	mvns	r3, r3
 80082f4:	401a      	ands	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a1a      	ldr	r2, [r3, #32]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f003 031f 	and.w	r3, r3, #31
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	fa01 f303 	lsl.w	r3, r1, r3
 800830a:	431a      	orrs	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	621a      	str	r2, [r3, #32]
}
 8008310:	bf00      	nop
 8008312:	371c      	adds	r7, #28
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008330:	2302      	movs	r3, #2
 8008332:	e06d      	b.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a30      	ldr	r2, [pc, #192]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d004      	beq.n	8008368 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a2f      	ldr	r2, [pc, #188]	; (8008420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d108      	bne.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800836e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008380:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a20      	ldr	r2, [pc, #128]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d022      	beq.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a6:	d01d      	beq.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d018      	beq.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1c      	ldr	r2, [pc, #112]	; (8008428 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d013      	beq.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1a      	ldr	r2, [pc, #104]	; (800842c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00e      	beq.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a15      	ldr	r2, [pc, #84]	; (8008420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d009      	beq.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a16      	ldr	r2, [pc, #88]	; (8008430 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d004      	beq.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a15      	ldr	r2, [pc, #84]	; (8008434 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d10c      	bne.n	80083fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	40010000 	.word	0x40010000
 8008420:	40010400 	.word	0x40010400
 8008424:	40000400 	.word	0x40000400
 8008428:	40000800 	.word	0x40000800
 800842c:	40000c00 	.word	0x40000c00
 8008430:	40014000 	.word	0x40014000
 8008434:	40001800 	.word	0x40001800

08008438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e040      	b.n	8008508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fb f964 	bl	8003764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2224      	movs	r2, #36	; 0x24
 80084a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0201 	bic.w	r2, r2, #1
 80084b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f8c0 	bl	8008638 <UART_SetConfig>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d101      	bne.n	80084c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e022      	b.n	8008508 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb18 	bl	8008b00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0201 	orr.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fb9f 	bl	8008c44 <UART_CheckIdleState>
 8008506:	4603      	mov	r3, r0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	; 0x28
 8008514:	af02      	add	r7, sp, #8
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008524:	2b20      	cmp	r3, #32
 8008526:	f040 8081 	bne.w	800862c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <HAL_UART_Transmit+0x26>
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e079      	b.n	800862e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008540:	2b01      	cmp	r3, #1
 8008542:	d101      	bne.n	8008548 <HAL_UART_Transmit+0x38>
 8008544:	2302      	movs	r3, #2
 8008546:	e072      	b.n	800862e <HAL_UART_Transmit+0x11e>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2221      	movs	r2, #33	; 0x21
 800855c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800855e:	f7fb f9d9 	bl	8003914 <HAL_GetTick>
 8008562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	88fa      	ldrh	r2, [r7, #6]
 8008568:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	88fa      	ldrh	r2, [r7, #6]
 8008570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800857c:	d108      	bne.n	8008590 <HAL_UART_Transmit+0x80>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d104      	bne.n	8008590 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008586:	2300      	movs	r3, #0
 8008588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	61bb      	str	r3, [r7, #24]
 800858e:	e003      	b.n	8008598 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008594:	2300      	movs	r3, #0
 8008596:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80085a0:	e02c      	b.n	80085fc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2200      	movs	r2, #0
 80085aa:	2180      	movs	r1, #128	; 0x80
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 fb92 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e038      	b.n	800862e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10b      	bne.n	80085da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	3302      	adds	r3, #2
 80085d6:	61bb      	str	r3, [r7, #24]
 80085d8:	e007      	b.n	80085ea <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	781a      	ldrb	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	3301      	adds	r3, #1
 80085e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	3b01      	subs	r3, #1
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008602:	b29b      	uxth	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1cc      	bne.n	80085a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2200      	movs	r2, #0
 8008610:	2140      	movs	r1, #64	; 0x40
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 fb5f 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e005      	b.n	800862e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2220      	movs	r2, #32
 8008626:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	e000      	b.n	800862e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800862c:	2302      	movs	r3, #2
  }
}
 800862e:	4618      	mov	r0, r3
 8008630:	3720      	adds	r7, #32
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	431a      	orrs	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	4313      	orrs	r3, r2
 800865a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	4ba6      	ldr	r3, [pc, #664]	; (80088fc <UART_SetConfig+0x2c4>)
 8008664:	4013      	ands	r3, r2
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6812      	ldr	r2, [r2, #0]
 800866a:	6979      	ldr	r1, [r7, #20]
 800866c:	430b      	orrs	r3, r1
 800866e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a94      	ldr	r2, [pc, #592]	; (8008900 <UART_SetConfig+0x2c8>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d120      	bne.n	80086f6 <UART_SetConfig+0xbe>
 80086b4:	4b93      	ldr	r3, [pc, #588]	; (8008904 <UART_SetConfig+0x2cc>)
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d816      	bhi.n	80086f0 <UART_SetConfig+0xb8>
 80086c2:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <UART_SetConfig+0x90>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	080086d9 	.word	0x080086d9
 80086cc:	080086e5 	.word	0x080086e5
 80086d0:	080086df 	.word	0x080086df
 80086d4:	080086eb 	.word	0x080086eb
 80086d8:	2301      	movs	r3, #1
 80086da:	77fb      	strb	r3, [r7, #31]
 80086dc:	e150      	b.n	8008980 <UART_SetConfig+0x348>
 80086de:	2302      	movs	r3, #2
 80086e0:	77fb      	strb	r3, [r7, #31]
 80086e2:	e14d      	b.n	8008980 <UART_SetConfig+0x348>
 80086e4:	2304      	movs	r3, #4
 80086e6:	77fb      	strb	r3, [r7, #31]
 80086e8:	e14a      	b.n	8008980 <UART_SetConfig+0x348>
 80086ea:	2308      	movs	r3, #8
 80086ec:	77fb      	strb	r3, [r7, #31]
 80086ee:	e147      	b.n	8008980 <UART_SetConfig+0x348>
 80086f0:	2310      	movs	r3, #16
 80086f2:	77fb      	strb	r3, [r7, #31]
 80086f4:	e144      	b.n	8008980 <UART_SetConfig+0x348>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a83      	ldr	r2, [pc, #524]	; (8008908 <UART_SetConfig+0x2d0>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d132      	bne.n	8008766 <UART_SetConfig+0x12e>
 8008700:	4b80      	ldr	r3, [pc, #512]	; (8008904 <UART_SetConfig+0x2cc>)
 8008702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008706:	f003 030c 	and.w	r3, r3, #12
 800870a:	2b0c      	cmp	r3, #12
 800870c:	d828      	bhi.n	8008760 <UART_SetConfig+0x128>
 800870e:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <UART_SetConfig+0xdc>)
 8008710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008714:	08008749 	.word	0x08008749
 8008718:	08008761 	.word	0x08008761
 800871c:	08008761 	.word	0x08008761
 8008720:	08008761 	.word	0x08008761
 8008724:	08008755 	.word	0x08008755
 8008728:	08008761 	.word	0x08008761
 800872c:	08008761 	.word	0x08008761
 8008730:	08008761 	.word	0x08008761
 8008734:	0800874f 	.word	0x0800874f
 8008738:	08008761 	.word	0x08008761
 800873c:	08008761 	.word	0x08008761
 8008740:	08008761 	.word	0x08008761
 8008744:	0800875b 	.word	0x0800875b
 8008748:	2300      	movs	r3, #0
 800874a:	77fb      	strb	r3, [r7, #31]
 800874c:	e118      	b.n	8008980 <UART_SetConfig+0x348>
 800874e:	2302      	movs	r3, #2
 8008750:	77fb      	strb	r3, [r7, #31]
 8008752:	e115      	b.n	8008980 <UART_SetConfig+0x348>
 8008754:	2304      	movs	r3, #4
 8008756:	77fb      	strb	r3, [r7, #31]
 8008758:	e112      	b.n	8008980 <UART_SetConfig+0x348>
 800875a:	2308      	movs	r3, #8
 800875c:	77fb      	strb	r3, [r7, #31]
 800875e:	e10f      	b.n	8008980 <UART_SetConfig+0x348>
 8008760:	2310      	movs	r3, #16
 8008762:	77fb      	strb	r3, [r7, #31]
 8008764:	e10c      	b.n	8008980 <UART_SetConfig+0x348>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a68      	ldr	r2, [pc, #416]	; (800890c <UART_SetConfig+0x2d4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d120      	bne.n	80087b2 <UART_SetConfig+0x17a>
 8008770:	4b64      	ldr	r3, [pc, #400]	; (8008904 <UART_SetConfig+0x2cc>)
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008776:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800877a:	2b30      	cmp	r3, #48	; 0x30
 800877c:	d013      	beq.n	80087a6 <UART_SetConfig+0x16e>
 800877e:	2b30      	cmp	r3, #48	; 0x30
 8008780:	d814      	bhi.n	80087ac <UART_SetConfig+0x174>
 8008782:	2b20      	cmp	r3, #32
 8008784:	d009      	beq.n	800879a <UART_SetConfig+0x162>
 8008786:	2b20      	cmp	r3, #32
 8008788:	d810      	bhi.n	80087ac <UART_SetConfig+0x174>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <UART_SetConfig+0x15c>
 800878e:	2b10      	cmp	r3, #16
 8008790:	d006      	beq.n	80087a0 <UART_SetConfig+0x168>
 8008792:	e00b      	b.n	80087ac <UART_SetConfig+0x174>
 8008794:	2300      	movs	r3, #0
 8008796:	77fb      	strb	r3, [r7, #31]
 8008798:	e0f2      	b.n	8008980 <UART_SetConfig+0x348>
 800879a:	2302      	movs	r3, #2
 800879c:	77fb      	strb	r3, [r7, #31]
 800879e:	e0ef      	b.n	8008980 <UART_SetConfig+0x348>
 80087a0:	2304      	movs	r3, #4
 80087a2:	77fb      	strb	r3, [r7, #31]
 80087a4:	e0ec      	b.n	8008980 <UART_SetConfig+0x348>
 80087a6:	2308      	movs	r3, #8
 80087a8:	77fb      	strb	r3, [r7, #31]
 80087aa:	e0e9      	b.n	8008980 <UART_SetConfig+0x348>
 80087ac:	2310      	movs	r3, #16
 80087ae:	77fb      	strb	r3, [r7, #31]
 80087b0:	e0e6      	b.n	8008980 <UART_SetConfig+0x348>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a56      	ldr	r2, [pc, #344]	; (8008910 <UART_SetConfig+0x2d8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d120      	bne.n	80087fe <UART_SetConfig+0x1c6>
 80087bc:	4b51      	ldr	r3, [pc, #324]	; (8008904 <UART_SetConfig+0x2cc>)
 80087be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80087c6:	2bc0      	cmp	r3, #192	; 0xc0
 80087c8:	d013      	beq.n	80087f2 <UART_SetConfig+0x1ba>
 80087ca:	2bc0      	cmp	r3, #192	; 0xc0
 80087cc:	d814      	bhi.n	80087f8 <UART_SetConfig+0x1c0>
 80087ce:	2b80      	cmp	r3, #128	; 0x80
 80087d0:	d009      	beq.n	80087e6 <UART_SetConfig+0x1ae>
 80087d2:	2b80      	cmp	r3, #128	; 0x80
 80087d4:	d810      	bhi.n	80087f8 <UART_SetConfig+0x1c0>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <UART_SetConfig+0x1a8>
 80087da:	2b40      	cmp	r3, #64	; 0x40
 80087dc:	d006      	beq.n	80087ec <UART_SetConfig+0x1b4>
 80087de:	e00b      	b.n	80087f8 <UART_SetConfig+0x1c0>
 80087e0:	2300      	movs	r3, #0
 80087e2:	77fb      	strb	r3, [r7, #31]
 80087e4:	e0cc      	b.n	8008980 <UART_SetConfig+0x348>
 80087e6:	2302      	movs	r3, #2
 80087e8:	77fb      	strb	r3, [r7, #31]
 80087ea:	e0c9      	b.n	8008980 <UART_SetConfig+0x348>
 80087ec:	2304      	movs	r3, #4
 80087ee:	77fb      	strb	r3, [r7, #31]
 80087f0:	e0c6      	b.n	8008980 <UART_SetConfig+0x348>
 80087f2:	2308      	movs	r3, #8
 80087f4:	77fb      	strb	r3, [r7, #31]
 80087f6:	e0c3      	b.n	8008980 <UART_SetConfig+0x348>
 80087f8:	2310      	movs	r3, #16
 80087fa:	77fb      	strb	r3, [r7, #31]
 80087fc:	e0c0      	b.n	8008980 <UART_SetConfig+0x348>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a44      	ldr	r2, [pc, #272]	; (8008914 <UART_SetConfig+0x2dc>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d125      	bne.n	8008854 <UART_SetConfig+0x21c>
 8008808:	4b3e      	ldr	r3, [pc, #248]	; (8008904 <UART_SetConfig+0x2cc>)
 800880a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800880e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008816:	d017      	beq.n	8008848 <UART_SetConfig+0x210>
 8008818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800881c:	d817      	bhi.n	800884e <UART_SetConfig+0x216>
 800881e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008822:	d00b      	beq.n	800883c <UART_SetConfig+0x204>
 8008824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008828:	d811      	bhi.n	800884e <UART_SetConfig+0x216>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <UART_SetConfig+0x1fe>
 800882e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008832:	d006      	beq.n	8008842 <UART_SetConfig+0x20a>
 8008834:	e00b      	b.n	800884e <UART_SetConfig+0x216>
 8008836:	2300      	movs	r3, #0
 8008838:	77fb      	strb	r3, [r7, #31]
 800883a:	e0a1      	b.n	8008980 <UART_SetConfig+0x348>
 800883c:	2302      	movs	r3, #2
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e09e      	b.n	8008980 <UART_SetConfig+0x348>
 8008842:	2304      	movs	r3, #4
 8008844:	77fb      	strb	r3, [r7, #31]
 8008846:	e09b      	b.n	8008980 <UART_SetConfig+0x348>
 8008848:	2308      	movs	r3, #8
 800884a:	77fb      	strb	r3, [r7, #31]
 800884c:	e098      	b.n	8008980 <UART_SetConfig+0x348>
 800884e:	2310      	movs	r3, #16
 8008850:	77fb      	strb	r3, [r7, #31]
 8008852:	e095      	b.n	8008980 <UART_SetConfig+0x348>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a2f      	ldr	r2, [pc, #188]	; (8008918 <UART_SetConfig+0x2e0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d125      	bne.n	80088aa <UART_SetConfig+0x272>
 800885e:	4b29      	ldr	r3, [pc, #164]	; (8008904 <UART_SetConfig+0x2cc>)
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800886c:	d017      	beq.n	800889e <UART_SetConfig+0x266>
 800886e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008872:	d817      	bhi.n	80088a4 <UART_SetConfig+0x26c>
 8008874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008878:	d00b      	beq.n	8008892 <UART_SetConfig+0x25a>
 800887a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800887e:	d811      	bhi.n	80088a4 <UART_SetConfig+0x26c>
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <UART_SetConfig+0x254>
 8008884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008888:	d006      	beq.n	8008898 <UART_SetConfig+0x260>
 800888a:	e00b      	b.n	80088a4 <UART_SetConfig+0x26c>
 800888c:	2301      	movs	r3, #1
 800888e:	77fb      	strb	r3, [r7, #31]
 8008890:	e076      	b.n	8008980 <UART_SetConfig+0x348>
 8008892:	2302      	movs	r3, #2
 8008894:	77fb      	strb	r3, [r7, #31]
 8008896:	e073      	b.n	8008980 <UART_SetConfig+0x348>
 8008898:	2304      	movs	r3, #4
 800889a:	77fb      	strb	r3, [r7, #31]
 800889c:	e070      	b.n	8008980 <UART_SetConfig+0x348>
 800889e:	2308      	movs	r3, #8
 80088a0:	77fb      	strb	r3, [r7, #31]
 80088a2:	e06d      	b.n	8008980 <UART_SetConfig+0x348>
 80088a4:	2310      	movs	r3, #16
 80088a6:	77fb      	strb	r3, [r7, #31]
 80088a8:	e06a      	b.n	8008980 <UART_SetConfig+0x348>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a1b      	ldr	r2, [pc, #108]	; (800891c <UART_SetConfig+0x2e4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d138      	bne.n	8008926 <UART_SetConfig+0x2ee>
 80088b4:	4b13      	ldr	r3, [pc, #76]	; (8008904 <UART_SetConfig+0x2cc>)
 80088b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80088be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088c2:	d017      	beq.n	80088f4 <UART_SetConfig+0x2bc>
 80088c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088c8:	d82a      	bhi.n	8008920 <UART_SetConfig+0x2e8>
 80088ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ce:	d00b      	beq.n	80088e8 <UART_SetConfig+0x2b0>
 80088d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d4:	d824      	bhi.n	8008920 <UART_SetConfig+0x2e8>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <UART_SetConfig+0x2aa>
 80088da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088de:	d006      	beq.n	80088ee <UART_SetConfig+0x2b6>
 80088e0:	e01e      	b.n	8008920 <UART_SetConfig+0x2e8>
 80088e2:	2300      	movs	r3, #0
 80088e4:	77fb      	strb	r3, [r7, #31]
 80088e6:	e04b      	b.n	8008980 <UART_SetConfig+0x348>
 80088e8:	2302      	movs	r3, #2
 80088ea:	77fb      	strb	r3, [r7, #31]
 80088ec:	e048      	b.n	8008980 <UART_SetConfig+0x348>
 80088ee:	2304      	movs	r3, #4
 80088f0:	77fb      	strb	r3, [r7, #31]
 80088f2:	e045      	b.n	8008980 <UART_SetConfig+0x348>
 80088f4:	2308      	movs	r3, #8
 80088f6:	77fb      	strb	r3, [r7, #31]
 80088f8:	e042      	b.n	8008980 <UART_SetConfig+0x348>
 80088fa:	bf00      	nop
 80088fc:	efff69f3 	.word	0xefff69f3
 8008900:	40011000 	.word	0x40011000
 8008904:	40023800 	.word	0x40023800
 8008908:	40004400 	.word	0x40004400
 800890c:	40004800 	.word	0x40004800
 8008910:	40004c00 	.word	0x40004c00
 8008914:	40005000 	.word	0x40005000
 8008918:	40011400 	.word	0x40011400
 800891c:	40007800 	.word	0x40007800
 8008920:	2310      	movs	r3, #16
 8008922:	77fb      	strb	r3, [r7, #31]
 8008924:	e02c      	b.n	8008980 <UART_SetConfig+0x348>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a72      	ldr	r2, [pc, #456]	; (8008af4 <UART_SetConfig+0x4bc>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d125      	bne.n	800897c <UART_SetConfig+0x344>
 8008930:	4b71      	ldr	r3, [pc, #452]	; (8008af8 <UART_SetConfig+0x4c0>)
 8008932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008936:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800893a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800893e:	d017      	beq.n	8008970 <UART_SetConfig+0x338>
 8008940:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008944:	d817      	bhi.n	8008976 <UART_SetConfig+0x33e>
 8008946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800894a:	d00b      	beq.n	8008964 <UART_SetConfig+0x32c>
 800894c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008950:	d811      	bhi.n	8008976 <UART_SetConfig+0x33e>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <UART_SetConfig+0x326>
 8008956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800895a:	d006      	beq.n	800896a <UART_SetConfig+0x332>
 800895c:	e00b      	b.n	8008976 <UART_SetConfig+0x33e>
 800895e:	2300      	movs	r3, #0
 8008960:	77fb      	strb	r3, [r7, #31]
 8008962:	e00d      	b.n	8008980 <UART_SetConfig+0x348>
 8008964:	2302      	movs	r3, #2
 8008966:	77fb      	strb	r3, [r7, #31]
 8008968:	e00a      	b.n	8008980 <UART_SetConfig+0x348>
 800896a:	2304      	movs	r3, #4
 800896c:	77fb      	strb	r3, [r7, #31]
 800896e:	e007      	b.n	8008980 <UART_SetConfig+0x348>
 8008970:	2308      	movs	r3, #8
 8008972:	77fb      	strb	r3, [r7, #31]
 8008974:	e004      	b.n	8008980 <UART_SetConfig+0x348>
 8008976:	2310      	movs	r3, #16
 8008978:	77fb      	strb	r3, [r7, #31]
 800897a:	e001      	b.n	8008980 <UART_SetConfig+0x348>
 800897c:	2310      	movs	r3, #16
 800897e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	69db      	ldr	r3, [r3, #28]
 8008984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008988:	d15b      	bne.n	8008a42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800898a:	7ffb      	ldrb	r3, [r7, #31]
 800898c:	2b08      	cmp	r3, #8
 800898e:	d828      	bhi.n	80089e2 <UART_SetConfig+0x3aa>
 8008990:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <UART_SetConfig+0x360>)
 8008992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008996:	bf00      	nop
 8008998:	080089bd 	.word	0x080089bd
 800899c:	080089c5 	.word	0x080089c5
 80089a0:	080089cd 	.word	0x080089cd
 80089a4:	080089e3 	.word	0x080089e3
 80089a8:	080089d3 	.word	0x080089d3
 80089ac:	080089e3 	.word	0x080089e3
 80089b0:	080089e3 	.word	0x080089e3
 80089b4:	080089e3 	.word	0x080089e3
 80089b8:	080089db 	.word	0x080089db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089bc:	f7fc fdaa 	bl	8005514 <HAL_RCC_GetPCLK1Freq>
 80089c0:	61b8      	str	r0, [r7, #24]
        break;
 80089c2:	e013      	b.n	80089ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089c4:	f7fc fdba 	bl	800553c <HAL_RCC_GetPCLK2Freq>
 80089c8:	61b8      	str	r0, [r7, #24]
        break;
 80089ca:	e00f      	b.n	80089ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089cc:	4b4b      	ldr	r3, [pc, #300]	; (8008afc <UART_SetConfig+0x4c4>)
 80089ce:	61bb      	str	r3, [r7, #24]
        break;
 80089d0:	e00c      	b.n	80089ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089d2:	f7fc fccd 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 80089d6:	61b8      	str	r0, [r7, #24]
        break;
 80089d8:	e008      	b.n	80089ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089de:	61bb      	str	r3, [r7, #24]
        break;
 80089e0:	e004      	b.n	80089ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	77bb      	strb	r3, [r7, #30]
        break;
 80089ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d074      	beq.n	8008adc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	005a      	lsls	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	085b      	lsrs	r3, r3, #1
 80089fc:	441a      	add	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	d916      	bls.n	8008a3c <UART_SetConfig+0x404>
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a14:	d212      	bcs.n	8008a3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f023 030f 	bic.w	r3, r3, #15
 8008a1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	89fb      	ldrh	r3, [r7, #14]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	89fa      	ldrh	r2, [r7, #14]
 8008a38:	60da      	str	r2, [r3, #12]
 8008a3a:	e04f      	b.n	8008adc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	77bb      	strb	r3, [r7, #30]
 8008a40:	e04c      	b.n	8008adc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a42:	7ffb      	ldrb	r3, [r7, #31]
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d828      	bhi.n	8008a9a <UART_SetConfig+0x462>
 8008a48:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <UART_SetConfig+0x418>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008a75 	.word	0x08008a75
 8008a54:	08008a7d 	.word	0x08008a7d
 8008a58:	08008a85 	.word	0x08008a85
 8008a5c:	08008a9b 	.word	0x08008a9b
 8008a60:	08008a8b 	.word	0x08008a8b
 8008a64:	08008a9b 	.word	0x08008a9b
 8008a68:	08008a9b 	.word	0x08008a9b
 8008a6c:	08008a9b 	.word	0x08008a9b
 8008a70:	08008a93 	.word	0x08008a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a74:	f7fc fd4e 	bl	8005514 <HAL_RCC_GetPCLK1Freq>
 8008a78:	61b8      	str	r0, [r7, #24]
        break;
 8008a7a:	e013      	b.n	8008aa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a7c:	f7fc fd5e 	bl	800553c <HAL_RCC_GetPCLK2Freq>
 8008a80:	61b8      	str	r0, [r7, #24]
        break;
 8008a82:	e00f      	b.n	8008aa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a84:	4b1d      	ldr	r3, [pc, #116]	; (8008afc <UART_SetConfig+0x4c4>)
 8008a86:	61bb      	str	r3, [r7, #24]
        break;
 8008a88:	e00c      	b.n	8008aa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a8a:	f7fc fc71 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8008a8e:	61b8      	str	r0, [r7, #24]
        break;
 8008a90:	e008      	b.n	8008aa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a96:	61bb      	str	r3, [r7, #24]
        break;
 8008a98:	e004      	b.n	8008aa4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8008aa2:	bf00      	nop
    }

    if (pclk != 0U)
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d018      	beq.n	8008adc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	085a      	lsrs	r2, r3, #1
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	441a      	add	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2b0f      	cmp	r3, #15
 8008ac2:	d909      	bls.n	8008ad8 <UART_SetConfig+0x4a0>
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aca:	d205      	bcs.n	8008ad8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60da      	str	r2, [r3, #12]
 8008ad6:	e001      	b.n	8008adc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008ae8:	7fbb      	ldrb	r3, [r7, #30]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3720      	adds	r7, #32
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	40007c00 	.word	0x40007c00
 8008af8:	40023800 	.word	0x40023800
 8008afc:	00f42400 	.word	0x00f42400

08008b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	f003 0302 	and.w	r3, r3, #2
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01a      	beq.n	8008c16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bfe:	d10a      	bne.n	8008c16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00a      	beq.n	8008c38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	605a      	str	r2, [r3, #4]
  }
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af02      	add	r7, sp, #8
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c54:	f7fa fe5e 	bl	8003914 <HAL_GetTick>
 8008c58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d10e      	bne.n	8008c86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f82d 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e023      	b.n	8008cce <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d10e      	bne.n	8008cb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f817 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e00d      	b.n	8008cce <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b09c      	sub	sp, #112	; 0x70
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce6:	e0a5      	b.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	f000 80a1 	beq.w	8008e34 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf2:	f7fa fe0f 	bl	8003914 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d302      	bcc.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d13e      	bne.n	8008d86 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e6      	bne.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	663b      	str	r3, [r7, #96]	; 0x60
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e5      	bne.n	8008d3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2220      	movs	r2, #32
 8008d78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e067      	b.n	8008e56 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0304 	and.w	r3, r3, #4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d04f      	beq.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da2:	d147      	bne.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8008dce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd4:	e841 2300 	strex	r3, r2, [r1]
 8008dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1e6      	bne.n	8008dae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3308      	adds	r3, #8
 8008de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	613b      	str	r3, [r7, #16]
   return(result);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e00:	623a      	str	r2, [r7, #32]
 8008e02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e04:	69f9      	ldr	r1, [r7, #28]
 8008e06:	6a3a      	ldr	r2, [r7, #32]
 8008e08:	e841 2300 	strex	r3, r2, [r1]
 8008e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e5      	bne.n	8008de0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2220      	movs	r2, #32
 8008e18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e010      	b.n	8008e56 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69da      	ldr	r2, [r3, #28]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	bf0c      	ite	eq
 8008e44:	2301      	moveq	r3, #1
 8008e46:	2300      	movne	r3, #0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	f43f af4a 	beq.w	8008ce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3770      	adds	r7, #112	; 0x70
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <__libc_init_array>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	4d0d      	ldr	r5, [pc, #52]	; (8008e98 <__libc_init_array+0x38>)
 8008e64:	4c0d      	ldr	r4, [pc, #52]	; (8008e9c <__libc_init_array+0x3c>)
 8008e66:	1b64      	subs	r4, r4, r5
 8008e68:	10a4      	asrs	r4, r4, #2
 8008e6a:	2600      	movs	r6, #0
 8008e6c:	42a6      	cmp	r6, r4
 8008e6e:	d109      	bne.n	8008e84 <__libc_init_array+0x24>
 8008e70:	4d0b      	ldr	r5, [pc, #44]	; (8008ea0 <__libc_init_array+0x40>)
 8008e72:	4c0c      	ldr	r4, [pc, #48]	; (8008ea4 <__libc_init_array+0x44>)
 8008e74:	f000 f864 	bl	8008f40 <_init>
 8008e78:	1b64      	subs	r4, r4, r5
 8008e7a:	10a4      	asrs	r4, r4, #2
 8008e7c:	2600      	movs	r6, #0
 8008e7e:	42a6      	cmp	r6, r4
 8008e80:	d105      	bne.n	8008e8e <__libc_init_array+0x2e>
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e88:	4798      	blx	r3
 8008e8a:	3601      	adds	r6, #1
 8008e8c:	e7ee      	b.n	8008e6c <__libc_init_array+0xc>
 8008e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e92:	4798      	blx	r3
 8008e94:	3601      	adds	r6, #1
 8008e96:	e7f2      	b.n	8008e7e <__libc_init_array+0x1e>
 8008e98:	08009784 	.word	0x08009784
 8008e9c:	08009784 	.word	0x08009784
 8008ea0:	08009784 	.word	0x08009784
 8008ea4:	08009788 	.word	0x08009788

08008ea8 <memset>:
 8008ea8:	4402      	add	r2, r0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d100      	bne.n	8008eb2 <memset+0xa>
 8008eb0:	4770      	bx	lr
 8008eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb6:	e7f9      	b.n	8008eac <memset+0x4>

08008eb8 <__utoa>:
 8008eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eba:	4c1f      	ldr	r4, [pc, #124]	; (8008f38 <__utoa+0x80>)
 8008ebc:	b08b      	sub	sp, #44	; 0x2c
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	466e      	mov	r6, sp
 8008ec4:	f104 0c20 	add.w	ip, r4, #32
 8008ec8:	6820      	ldr	r0, [r4, #0]
 8008eca:	6861      	ldr	r1, [r4, #4]
 8008ecc:	4637      	mov	r7, r6
 8008ece:	c703      	stmia	r7!, {r0, r1}
 8008ed0:	3408      	adds	r4, #8
 8008ed2:	4564      	cmp	r4, ip
 8008ed4:	463e      	mov	r6, r7
 8008ed6:	d1f7      	bne.n	8008ec8 <__utoa+0x10>
 8008ed8:	7921      	ldrb	r1, [r4, #4]
 8008eda:	7139      	strb	r1, [r7, #4]
 8008edc:	1e91      	subs	r1, r2, #2
 8008ede:	6820      	ldr	r0, [r4, #0]
 8008ee0:	6038      	str	r0, [r7, #0]
 8008ee2:	2922      	cmp	r1, #34	; 0x22
 8008ee4:	f04f 0100 	mov.w	r1, #0
 8008ee8:	d904      	bls.n	8008ef4 <__utoa+0x3c>
 8008eea:	7019      	strb	r1, [r3, #0]
 8008eec:	460b      	mov	r3, r1
 8008eee:	4618      	mov	r0, r3
 8008ef0:	b00b      	add	sp, #44	; 0x2c
 8008ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef4:	1e58      	subs	r0, r3, #1
 8008ef6:	4684      	mov	ip, r0
 8008ef8:	fbb5 f7f2 	udiv	r7, r5, r2
 8008efc:	fb02 5617 	mls	r6, r2, r7, r5
 8008f00:	3628      	adds	r6, #40	; 0x28
 8008f02:	446e      	add	r6, sp
 8008f04:	460c      	mov	r4, r1
 8008f06:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008f0a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008f0e:	462e      	mov	r6, r5
 8008f10:	42b2      	cmp	r2, r6
 8008f12:	f101 0101 	add.w	r1, r1, #1
 8008f16:	463d      	mov	r5, r7
 8008f18:	d9ee      	bls.n	8008ef8 <__utoa+0x40>
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	545a      	strb	r2, [r3, r1]
 8008f1e:	1919      	adds	r1, r3, r4
 8008f20:	1aa5      	subs	r5, r4, r2
 8008f22:	42aa      	cmp	r2, r5
 8008f24:	dae3      	bge.n	8008eee <__utoa+0x36>
 8008f26:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008f2a:	780e      	ldrb	r6, [r1, #0]
 8008f2c:	7006      	strb	r6, [r0, #0]
 8008f2e:	3201      	adds	r2, #1
 8008f30:	f801 5901 	strb.w	r5, [r1], #-1
 8008f34:	e7f4      	b.n	8008f20 <__utoa+0x68>
 8008f36:	bf00      	nop
 8008f38:	08009754 	.word	0x08009754

08008f3c <utoa>:
 8008f3c:	f7ff bfbc 	b.w	8008eb8 <__utoa>

08008f40 <_init>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	bf00      	nop
 8008f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f46:	bc08      	pop	{r3}
 8008f48:	469e      	mov	lr, r3
 8008f4a:	4770      	bx	lr

08008f4c <_fini>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	bf00      	nop
 8008f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f52:	bc08      	pop	{r3}
 8008f54:	469e      	mov	lr, r3
 8008f56:	4770      	bx	lr
