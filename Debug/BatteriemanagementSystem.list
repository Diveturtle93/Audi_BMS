
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c00  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800967c  0800967c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800967c  0800967c  0001967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009684  08009684  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009684  08009684  00019684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009688  08009688  00019688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800968c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000000c  08009698  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08009698  00020328  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d5e  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003df6  00000000  00000000  00039d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003eff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d247  00000000  00000000  00040298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfef  00000000  00000000  0006d4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109f02  00000000  00000000  0008a4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001943d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052cc  00000000  00000000  00194420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08008de0 	.word	0x08008de0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08008de0 	.word	0x08008de0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <uartTransmit+0x24>)
 8000562:	f007 ff25 	bl	80083b0 <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200002a0 	.word	0x200002a0

08000574 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f008 fc28 	bl	8008ddc <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartTransmitNumber+0x3c>)
 80005a4:	f007 ff04 	bl	80083b0 <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200002a0 	.word	0x200002a0

080005b4 <set_IsoSpiState>:
//----------------------------------------------------------------------

// Setze Statemaschine IsoSPI
//----------------------------------------------------------------------
void set_IsoSpiState(IsoSpi_State newState)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	IsoSpiState = newState;													// Neuen Status setzen
 80005be:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <set_IsoSpiState+0x24>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	7013      	strb	r3, [r2, #0]
	timeIsoSpiState = millis();												// Zeit speichern
 80005c4:	f001 fa90 	bl	8001ae8 <millis>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <set_IsoSpiState+0x28>)
 80005cc:	6013      	str	r3, [r2, #0]
		default:
			ITM_SendString("#RED#FEHLER\n");
			break;
	}
#endif
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	2000002c 	.word	0x2000002c

080005e0 <IsoSPI_statemaschine>:
//----------------------------------------------------------------------

// Setze Statemaschine ISOSpi
//----------------------------------------------------------------------
void IsoSPI_statemaschine(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	switch (IsoSpiState)
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <IsoSPI_statemaschine+0x68>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d825      	bhi.n	8000638 <IsoSPI_statemaschine+0x58>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <IsoSPI_statemaschine+0x14>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000639 	.word	0x08000639
 80005f8:	08000621 	.word	0x08000621
 80005fc:	08000639 	.word	0x08000639
 8000600:	08000609 	.word	0x08000609
 8000604:	08000639 	.word	0x08000639
	{
		case IsoIdle:
			break;

		case IsoGetReady:
			if (millis() - timeIsoSpiState > 2)
 8000608:	f001 fa6e 	bl	8001ae8 <millis>
 800060c:	4602      	mov	r2, r0
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <IsoSPI_statemaschine+0x6c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	2b02      	cmp	r3, #2
 8000616:	d911      	bls.n	800063c <IsoSPI_statemaschine+0x5c>
			{
				IsoSpiState = IsoReady;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <IsoSPI_statemaschine+0x68>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800061e:	e00d      	b.n	800063c <IsoSPI_statemaschine+0x5c>

		case IsoReady:
			if (millis() - timeIsoSpiState > 4)
 8000620:	f001 fa62 	bl	8001ae8 <millis>
 8000624:	4602      	mov	r2, r0
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <IsoSPI_statemaschine+0x6c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	2b04      	cmp	r3, #4
 800062e:	d907      	bls.n	8000640 <IsoSPI_statemaschine+0x60>
			{
				IsoSpiState = IsoIdle;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <IsoSPI_statemaschine+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000636:	e003      	b.n	8000640 <IsoSPI_statemaschine+0x60>

		case IsoSleep:
			break;

		default:
			break;
 8000638:	bf00      	nop
 800063a:	e002      	b.n	8000642 <IsoSPI_statemaschine+0x62>
			break;
 800063c:	bf00      	nop
 800063e:	e000      	b.n	8000642 <IsoSPI_statemaschine+0x62>
			break;
 8000640:	bf00      	nop
	}
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	2000002c 	.word	0x2000002c

08000650 <get_IsoSpiState>:
//----------------------------------------------------------------------

// Bekomme aktuellen State ISOSpi
//----------------------------------------------------------------------
IsoSpi_State get_IsoSpiState(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	// Statemaschine abfragen
	IsoSPI_statemaschine();
 8000654:	f7ff ffc4 	bl	80005e0 <IsoSPI_statemaschine>

	// Aktuellen State ausgeben
	return IsoSpiState;
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <get_IsoSpiState+0x10>)
 800065a:	781b      	ldrb	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000028 	.word	0x20000028

08000664 <IsoSPI_wakeup>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void IsoSPI_wakeup(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
#ifdef DEBUG_ISOSPI
	ITM_SendString("IsoSPI wird geweckt.\n");
#endif

	// Wenn Statemaschine Idle ist, dann IsoSPI wecken
	if (get_IsoSpiState() == IsoIdle)
 800066a:	f7ff fff1 	bl	8000650 <get_IsoSpiState>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d123      	bne.n	80006bc <IsoSPI_wakeup+0x58>
	{
		for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000674:	2300      	movs	r3, #0
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	e014      	b.n	80006a4 <IsoSPI_wakeup+0x40>
		{
			// ISOCS einschalten
			ISOCS_ENABLE();														// Chip-Select einschalten
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <IsoSPI_wakeup+0x60>)
 8000682:	f004 f969 	bl	8004958 <HAL_GPIO_WritePin>

			// Dummy Paket senden
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken, isoSPI braucht Zeit bis ready
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	2201      	movs	r2, #1
 800068a:	21aa      	movs	r1, #170	; 0xaa
 800068c:	480e      	ldr	r0, [pc, #56]	; (80006c8 <IsoSPI_wakeup+0x64>)
 800068e:	f005 fb34 	bl	8005cfa <HAL_SPI_Transmit>

			// ISOCS ausschalten
			ISOCS_DISABLE();													// Chip-Select ausschalten
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <IsoSPI_wakeup+0x60>)
 800069a:	f004 f95d 	bl	8004958 <HAL_GPIO_WritePin>
		for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	3301      	adds	r3, #1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0e7      	beq.n	800067a <IsoSPI_wakeup+0x16>
		}

		// Setze Statemaschine auf GetReady
		set_IsoSpiState(IsoGetReady);
 80006aa:	2003      	movs	r0, #3
 80006ac:	f7ff ff82 	bl	80005b4 <set_IsoSpiState>

		// Warten das bis Ready
		while(get_IsoSpiState() == IsoGetReady);
 80006b0:	bf00      	nop
 80006b2:	f7ff ffcd 	bl	8000650 <get_IsoSpiState>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d0fa      	beq.n	80006b2 <IsoSPI_wakeup+0x4e>
	}
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	20000158 	.word	0x20000158

080006cc <IsoSPI_cmd>:
//----------------------------------------------------------------------

// Sende Command
//----------------------------------------------------------------------
void IsoSPI_cmd(uint8_t* command)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von IsoSPI_cmd\n");
#endif

	// Verzoegerungszeit zum wecken des LTC6811
	IsoSPI_wakeup();
 80006d4:	f7ff ffc6 	bl	8000664 <IsoSPI_wakeup>

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <IsoSPI_cmd+0x7c>)
 80006e0:	f004 f93a 	bl	8004958 <HAL_GPIO_WritePin>

	// Setze State auf Aktiv
	set_IsoSpiState(IsoActive);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f7ff ff65 	bl	80005b4 <set_IsoSpiState>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, command, 4, 100);
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2204      	movs	r2, #4
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	4816      	ldr	r0, [pc, #88]	; (800074c <IsoSPI_cmd+0x80>)
 80006f2:	f005 fb02 	bl	8005cfa <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (((command[0] << 8) | command[1]) == STCOMM)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	3201      	adds	r2, #1
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	4313      	orrs	r3, r2
 8000704:	f240 7223 	movw	r2, #1827	; 0x723
 8000708:	4293      	cmp	r3, r2
 800070a:	d10f      	bne.n	800072c <IsoSPI_cmd+0x60>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	e009      	b.n	8000726 <IsoSPI_cmd+0x5a>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2201      	movs	r2, #1
 8000718:	21aa      	movs	r1, #170	; 0xaa
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <IsoSPI_cmd+0x80>)
 800071c:	f005 faed 	bl	8005cfa <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	3301      	adds	r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	2b08      	cmp	r3, #8
 800072a:	d9f2      	bls.n	8000712 <IsoSPI_cmd+0x46>
		}
	}

	// ISOCS ausschalten
	ISOCS_DISABLE();
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <IsoSPI_cmd+0x7c>)
 8000734:	f004 f910 	bl	8004958 <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Setze State auf Ready
	set_IsoSpiState(IsoReady);
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff3b 	bl	80005b4 <set_IsoSpiState>
		ITM_SendChar(' ');
		ITM_SendNumber(command[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000
 800074c:	20000158 	.word	0x20000158

08000750 <IsoSPI_transmit>:
//----------------------------------------------------------------------

// Sende Daten
//----------------------------------------------------------------------
void IsoSPI_transmit(uint8_t* command, uint8_t* data)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von IsoSPI Datentransmit\n");
#endif

	// Verzoegerungszeit zum wecken des IsoSPI
	IsoSPI_wakeup();
 800075a:	f7ff ff83 	bl	8000664 <IsoSPI_wakeup>

	// ISOCS einschalten
	ISOCS_ENABLE();
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	480f      	ldr	r0, [pc, #60]	; (80007a4 <IsoSPI_transmit+0x54>)
 8000766:	f004 f8f7 	bl	8004958 <HAL_GPIO_WritePin>

	// Setze State auf Aktiv
	set_IsoSpiState(IsoActive);
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ff22 	bl	80005b4 <set_IsoSpiState>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, command, 4, 100);
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	2204      	movs	r2, #4
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <IsoSPI_transmit+0x58>)
 8000778:	f005 fabf 	bl	8005cfa <HAL_SPI_Transmit>

	// Data senden
	HAL_SPI_Transmit(&hspi4, data, (8 * LTC6811_DEVICES), 100);
 800077c:	2364      	movs	r3, #100	; 0x64
 800077e:	2208      	movs	r2, #8
 8000780:	6839      	ldr	r1, [r7, #0]
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <IsoSPI_transmit+0x58>)
 8000784:	f005 fab9 	bl	8005cfa <HAL_SPI_Transmit>

	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <IsoSPI_transmit+0x54>)
 8000790:	f004 f8e2 	bl	8004958 <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Setze Statemaschine auf Ready;
	set_IsoSpiState(IsoReady);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ff0d 	bl	80005b4 <set_IsoSpiState>
		ITM_SendChar(' ');
		ITM_SendNumber(command[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	20000158 	.word	0x20000158

080007ac <IsoSPI_read>:
//----------------------------------------------------------------------

// Lese Daten
//----------------------------------------------------------------------
void IsoSPI_read(uint8_t* command, uint8_t* data)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von Receive LTC6811.\n");
#endif

	// Verzoegerungszeit zum wecken des IsoSPI
	IsoSPI_wakeup();
 80007b6:	f7ff ff55 	bl	8000664 <IsoSPI_wakeup>

	// ISOCS einschalten
	ISOCS_ENABLE();
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c0:	4815      	ldr	r0, [pc, #84]	; (8000818 <IsoSPI_read+0x6c>)
 80007c2:	f004 f8c9 	bl	8004958 <HAL_GPIO_WritePin>

	// Setze State auf Aktiv
	set_IsoSpiState(IsoActive);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f7ff fef4 	bl	80005b4 <set_IsoSpiState>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, command, 4, 100);
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2204      	movs	r2, #4
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <IsoSPI_read+0x70>)
 80007d4:	f005 fa91 	bl	8005cfa <HAL_SPI_Transmit>

	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e00c      	b.n	80007f8 <IsoSPI_read+0x4c>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	461a      	mov	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	1899      	adds	r1, r3, r2
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	2208      	movs	r2, #8
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <IsoSPI_read+0x70>)
 80007ee:	f005 fbf2 	bl	8005fd6 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	3301      	adds	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0ef      	beq.n	80007de <IsoSPI_read+0x32>
	}

	// ISOCS ausschalten
	ISOCS_DISABLE();
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <IsoSPI_read+0x6c>)
 8000806:	f004 f8a7 	bl	8004958 <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Setze Statemaschine auf Ready;
	set_IsoSpiState(IsoReady);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fed2 	bl	80005b4 <set_IsoSpiState>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	20000158 	.word	0x20000158

08000820 <ltc1380_write>:
//----------------------------------------------------------------------

// Kanal auswaehlen
//----------------------------------------------------------------------
void ltc1380_write(uint8_t Address, uint8_t Channel)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
	ITM_SendNumber(Channel);
	ITM_SendChar('\n');
#endif

	// Definiere Array fuer Channel auswaehlen
	uint8_t off[6] = {0x69, 0x08, 0x00, 0x89, 0x7F, 0xF9};					// Daten-Bytes fuer LTC6811 mit Daten fuer LTC1380
 8000830:	4a14      	ldr	r2, [pc, #80]	; (8000884 <ltc1380_write+0x64>)
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800083a:	6018      	str	r0, [r3, #0]
 800083c:	3304      	adds	r3, #4
 800083e:	8019      	strh	r1, [r3, #0]
	
	// Addresse und Channel waehlen
	off[1] |= ((Address & 0x0F) << 4);										// Address in Array uebertragen
 8000840:	7a7b      	ldrb	r3, [r7, #9]
 8000842:	b25a      	sxtb	r2, r3
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	b25b      	sxtb	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b25b      	sxtb	r3, r3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	727b      	strb	r3, [r7, #9]
	off[3] |= ((Channel & 0x0F) << 4);										// Channel in Array uebertragen
 8000852:	7afb      	ldrb	r3, [r7, #11]
 8000854:	b25a      	sxtb	r2, r3
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	b25b      	sxtb	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b25b      	sxtb	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	72fb      	strb	r3, [r7, #11]
	
	// LTC6811 beschreiben und ueber I2C uebertragen
	ltc6811_write(WRCOMM, &off[0]);												// Daten in LTC6811 schreiben
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	4619      	mov	r1, r3
 800086a:	f240 7021 	movw	r0, #1825	; 0x721
 800086e:	f000 f856 	bl	800091e <ltc6811_write>
	ltc6811(STCOMM);														// Daten von LTC6811 an LTC1380 senden
 8000872:	f240 7023 	movw	r0, #1827	; 0x723
 8000876:	f000 f828 	bl	80008ca <ltc6811>
		ITM_SendChar(' ');
		ITM_SendNumber(off[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08008df8 	.word	0x08008df8

08000888 <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	460a      	mov	r2, r1
 8000892:	80fb      	strh	r3, [r7, #6]
 8000894:	4613      	mov	r3, r2
 8000896:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 8000898:	88fa      	ldrh	r2, [r7, #6]
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	d904      	bls.n	80008aa <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	88bb      	ldrh	r3, [r7, #4]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	e009      	b.n	80008be <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 80008aa:	88fa      	ldrh	r2, [r7, #6]
 80008ac:	88bb      	ldrh	r3, [r7, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d204      	bcs.n	80008bc <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 80008b2:	88ba      	ldrh	r2, [r7, #4]
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	e000      	b.n	80008be <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 80008bc:	2300      	movs	r3, #0
	}
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b084      	sub	sp, #16
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);												// CRC berechnen
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f8d0 	bl	8000a7c <peccommand>
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	0a1b      	lsrs	r3, r3, #8
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 80008f6:	89fb      	ldrh	r3, [r7, #14]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000900:	89fb      	ldrh	r3, [r7, #14]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f023 0301 	bic.w	r3, r3, #1
 8000908:	b2db      	uxtb	r3, r3
 800090a:	72fb      	strb	r3, [r7, #11]
	
	// Befehl ueber IsoSPI senden
	IsoSPI_cmd(&cmd[0]);														// Sende Befehl
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fedb 	bl	80006cc <IsoSPI_cmd>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <ltc6811_write>:
//----------------------------------------------------------------------

// Broadcast Write Command
//----------------------------------------------------------------------
void ltc6811_write(uint16_t command, uint8_t* data)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b088      	sub	sp, #32
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	6039      	str	r1, [r7, #0]
 8000928:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, fuer Data Funktion nur bei einem Device gegeben
	uint16_t pec_c, pec_d;													// pec_c = Zwischenspeicher 16-Bit Command, pec_d = Zwischenspeicher 16-Bit Data
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	uint8_t tmp_data[8 * LTC6811_DEVICES];									// Zwischenspeicher Daten + Pec CRC
	pec_c = peccommand(command);											// Pec Command berechnen
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f8a5 	bl	8000a7c <peccommand>
 8000932:	4603      	mov	r3, r0
 8000934:	83bb      	strh	r3, [r7, #28]

	// Command in cmd abspeichern
	cmd[0] = ((command  >> 8) & 0x07);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	b29b      	uxth	r3, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	b2db      	uxtb	r3, r3
 8000944:	753b      	strb	r3, [r7, #20]
	cmd[1] = (command & 0xFF);
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	757b      	strb	r3, [r7, #21]
	cmd[2] = ((pec_c >> 8) & 0xFF);
 800094c:	8bbb      	ldrh	r3, [r7, #28]
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	b29b      	uxth	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (pec_c & 0xFE);
 8000956:	8bbb      	ldrh	r3, [r7, #28]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	f023 0301 	bic.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	75fb      	strb	r3, [r7, #23]

	// Daten in tmp_data abspeichern zum Senden
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8000962:	2300      	movs	r3, #0
 8000964:	77fb      	strb	r3, [r7, #31]
 8000966:	e035      	b.n	80009d4 <ltc6811_write+0xb6>
	{
		// Schleife um Daten fuer einen IC abzuspeichern
		for (uint8_t i = 0; i < 6; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	77bb      	strb	r3, [r7, #30]
 800096c:	e016      	b.n	800099c <ltc6811_write+0x7e>
		{
			tmp_data[j*8+i] = data[j*6+i];
 800096e:	7ffa      	ldrb	r2, [r7, #31]
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	461a      	mov	r2, r3
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	4413      	add	r3, r2
 800097e:	461a      	mov	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	441a      	add	r2, r3
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	00d9      	lsls	r1, r3, #3
 8000988:	7fbb      	ldrb	r3, [r7, #30]
 800098a:	440b      	add	r3, r1
 800098c:	7812      	ldrb	r2, [r2, #0]
 800098e:	3320      	adds	r3, #32
 8000990:	443b      	add	r3, r7
 8000992:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i = 0; i < 6; i++)
 8000996:	7fbb      	ldrb	r3, [r7, #30]
 8000998:	3301      	adds	r3, #1
 800099a:	77bb      	strb	r3, [r7, #30]
 800099c:	7fbb      	ldrb	r3, [r7, #30]
 800099e:	2b05      	cmp	r3, #5
 80009a0:	d9e5      	bls.n	800096e <ltc6811_write+0x50>
		}

		// Pec berechnen pro IC einmal
		pec_d = peclookup(6, &tmp_data[j*8]);								// Pec Daten berechnen
 80009a2:	7ffb      	ldrb	r3, [r7, #31]
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	f107 020c 	add.w	r2, r7, #12
 80009aa:	4413      	add	r3, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	2006      	movs	r0, #6
 80009b0:	f000 f880 	bl	8000ab4 <peclookup>
 80009b4:	4603      	mov	r3, r0
 80009b6:	837b      	strh	r3, [r7, #26]

		// Pec abspeichern fuer einen IC
		tmp_data[6] = ((pec_d >> 8) & 0xFF);
 80009b8:	8b7b      	ldrh	r3, [r7, #26]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	74bb      	strb	r3, [r7, #18]
		tmp_data[7] = (pec_d & 0xFE);
 80009c2:	8b7b      	ldrh	r3, [r7, #26]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f023 0301 	bic.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	74fb      	strb	r3, [r7, #19]
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 80009ce:	7ffb      	ldrb	r3, [r7, #31]
 80009d0:	3301      	adds	r3, #1
 80009d2:	77fb      	strb	r3, [r7, #31]
 80009d4:	7ffb      	ldrb	r3, [r7, #31]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0c6      	beq.n	8000968 <ltc6811_write+0x4a>
	}

	// Befehl ueber IsoSPI senden
	IsoSPI_transmit(&cmd[0], &tmp_data[0]);									// Sende Daten
 80009da:	f107 020c 	add.w	r2, r7, #12
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff feb3 	bl	8000750 <IsoSPI_transmit>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	6039      	str	r1, [r7, #0]
 80009fc:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
//	uint16_t tmp;															// Zwischenspeicher fuer Pruefung CRC
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f83b 	bl	8000a7c <peccommand>
 8000a06:	4603      	mov	r3, r0
 8000a08:	81bb      	strh	r3, [r7, #12]

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000a20:	89bb      	ldrh	r3, [r7, #12]
 8000a22:	0a1b      	lsrs	r3, r3, #8
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000a2a:	89bb      	ldrh	r3, [r7, #12]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f023 0301 	bic.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	72fb      	strb	r3, [r7, #11]

	// Befehl ueber IsoSPI senden
	IsoSPI_read(&cmd[0], &data[0]);											// Sende Daten
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	6839      	ldr	r1, [r7, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff feb5 	bl	80007ac <IsoSPI_read>

	// Pec zuruecksetzen
	pec = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	81bb      	strh	r3, [r7, #12]

	// Pec pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]
 8000a4a:	e00f      	b.n	8000a6c <ltc6811_read+0x7a>
			uartTransmit("\n", 1);
		}
#endif

		// Pec zuruecksetzen
		pec = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	81bb      	strh	r3, [r7, #12]

		// Variante 2, Daten inklusive Pec mit durch Peccheck pruefen, ob Ergebnis gleich 0 ist
		pec = peccheck(8, &data[i*8]);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	461a      	mov	r2, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	2008      	movs	r0, #8
 8000a5e:	f000 f85d 	bl	8000b1c <peccheck>
 8000a62:	4603      	mov	r3, r0
 8000a64:	81bb      	strh	r3, [r7, #12]
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0ec      	beq.n	8000a4c <ltc6811_read+0x5a>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f000 f806 	bl	8000ab4 <peclookup>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	737b      	strb	r3, [r7, #13]
 8000ac8:	e019      	b.n	8000afe <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 8000aca:	89fb      	ldrh	r3, [r7, #14]
 8000acc:	09db      	lsrs	r3, r3, #7
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	7b7b      	ldrb	r3, [r7, #13]
 8000ad2:	6839      	ldr	r1, [r7, #0]
 8000ad4:	440b      	add	r3, r1
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	4053      	eors	r3, r2
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	897b      	ldrh	r3, [r7, #10]
 8000aea:	490b      	ldr	r1, [pc, #44]	; (8000b18 <peclookup+0x64>)
 8000aec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	4053      	eors	r3, r2
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 8000af8:	7b7b      	ldrb	r3, [r7, #13]
 8000afa:	3301      	adds	r3, #1
 8000afc:	737b      	strb	r3, [r7, #13]
 8000afe:	7b7a      	ldrb	r2, [r7, #13]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3e1      	bcc.n	8000aca <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	b29b      	uxth	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	0800943c 	.word	0x0800943c

08000b1c <peccheck>:
//----------------------------------------------------------------------*/

// Validiere Pec von Daten
//----------------------------------------------------------------------
uint8_t peccheck(uint8_t len, uint8_t *data)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t pec = peclookup(len, data);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	6839      	ldr	r1, [r7, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ffc1 	bl	8000ab4 <peclookup>
 8000b32:	4603      	mov	r3, r0
 8000b34:	81fb      	strh	r3, [r7, #14]

	// Wenn Ergebnis 0, ist Pec OK
	if (pec == 0)
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <peccheck+0x24>
	{
		return 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e000      	b.n	8000b42 <peccheck+0x26>
	}
	// Wenn Ergebnis 1, ist Pec nicht OK
	else
	{
		return 1;
 8000b40:	2301      	movs	r3, #1
	}
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <ltc6811_check>:
//----------------------------------------------------------------------

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b092      	sub	sp, #72	; 0x48
 8000b4e:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Check LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	223c      	movs	r2, #60	; 0x3c
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f008 f8f3 	bl	8008d48 <memset>
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 8000b68:	f240 7011 	movw	r0, #1809	; 0x711
 8000b6c:	f7ff fead 	bl	80008ca <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 8000b70:	f240 7012 	movw	r0, #1810	; 0x712
 8000b74:	f7ff fea9 	bl	80008ca <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 8000b78:	f240 7013 	movw	r0, #1811	; 0x713
 8000b7c:	f7ff fea5 	bl	80008ca <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	2012      	movs	r0, #18
 8000b86:	f7ff ff34 	bl	80009f2 <ltc6811_read>
		ITM_SendChar('\n');
#endif
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 8000b8a:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000b8e:	f000 f83f 	bl	8000c10 <ltc6811_test>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <ltc6811_check+0x5a>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 8000b98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 1 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000ba4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ba8:	f002 fdd2 	bl	8003750 <HAL_Delay>

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000bac:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000bb0:	f000 f82e 	bl	8000c10 <ltc6811_test>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d105      	bne.n	8000bc6 <ltc6811_check+0x7c>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 8000bba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 2 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000bc6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bca:	f002 fdc1 	bl	8003750 <HAL_Delay>

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 8000bce:	f000 fa09 	bl	8000fe4 <ltc6811_diagn>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d105      	bne.n	8000be4 <ltc6811_check+0x9a>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 8000bd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Multiplexer Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000be4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000be8:	f002 fdb2 	bl	8003750 <HAL_Delay>

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 8000bec:	f000 fa1a 	bl	8001024 <ltc6811_openwire>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d105      	bne.n	8000c02 <ltc6811_check+0xb8>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 8000bf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ITM_SendNumber(error);
	ITM_SendChar('\n');
#endif

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000c02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3748      	adds	r7, #72	; 0x48
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	; 0x50
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Test LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	223c      	movs	r2, #60	; 0x3c
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 f88e 	bl	8008d48 <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000c3e:	f043 0303 	orr.w	r3, r3, #3
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fe40 	bl	80008ca <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000c4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c4e:	f002 fd7f 	bl	8003750 <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c58:	f043 0307 	orr.w	r3, r3, #7
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe33 	bl	80008ca <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000c64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c68:	f002 fd72 	bl	8003750 <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000c72:	f043 0307 	orr.w	r3, r3, #7
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fe26 	bl	80008ca <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000c7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c82:	f002 fd65 	bl	8003750 <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	2004      	movs	r0, #4
 8000c8e:	f7ff feb0 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	3308      	adds	r3, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2006      	movs	r0, #6
 8000c9c:	f7ff fea9 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	2008      	movs	r0, #8
 8000caa:	f7ff fea2 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f7ff fe9b 	bl	80009f2 <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	3320      	adds	r3, #32
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	200c      	movs	r0, #12
 8000cc6:	f7ff fe94 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	3328      	adds	r3, #40	; 0x28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	200e      	movs	r0, #14
 8000cd4:	f7ff fe8d 	bl	80009f2 <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	3330      	adds	r3, #48	; 0x30
 8000cde:	4619      	mov	r1, r3
 8000ce0:	2010      	movs	r0, #16
 8000ce2:	f7ff fe86 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	3338      	adds	r3, #56	; 0x38
 8000cec:	4619      	mov	r1, r3
 8000cee:	2012      	movs	r0, #18
 8000cf0:	f7ff fe7f 	bl	80009f2 <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command & MD2714)													// Wenn Sampling Frequenz = MD2714
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d032      	beq.n	8000d64 <ltc6811_test+0x154>
	{
		// Wenn ADCOPT gesetzt
		if (ltc6811_Conf.ADCOPT == 1)
 8000cfe:	4bb8      	ldr	r3, [pc, #736]	; (8000fe0 <ltc6811_test+0x3d0>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d013      	beq.n	8000d34 <ltc6811_test+0x124>
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	2b20      	cmp	r3, #32
 8000d10:	d104      	bne.n	8000d1c <ltc6811_test+0x10c>
			{
				test_pattern = 0x9553;										// Registerwert bei 14kHz
 8000d12:	f249 5353 	movw	r3, #38227	; 0x9553
 8000d16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d1a:	e03a      	b.n	8000d92 <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	2b40      	cmp	r3, #64	; 0x40
 8000d20:	d104      	bne.n	8000d2c <ltc6811_test+0x11c>
			{
				test_pattern = 0x6AAC;										// Registerwert bei 14kHz
 8000d22:	f646 23ac 	movw	r3, #27308	; 0x6aac
 8000d26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d2a:	e032      	b.n	8000d92 <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d32:	e02e      	b.n	8000d92 <ltc6811_test+0x182>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command & ST1)
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <ltc6811_test+0x138>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000d3e:	f249 5365 	movw	r3, #38245	; 0x9565
 8000d42:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d46:	e024      	b.n	8000d92 <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command & ST2)
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <ltc6811_test+0x14c>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000d52:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000d56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d5a:	e01a      	b.n	8000d92 <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d62:	e016      	b.n	8000d92 <ltc6811_test+0x182>
		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command & ST1)
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	f003 0320 	and.w	r3, r3, #32
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d004      	beq.n	8000d78 <ltc6811_test+0x168>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000d6e:	f249 5355 	movw	r3, #38229	; 0x9555
 8000d72:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d76:	e00c      	b.n	8000d92 <ltc6811_test+0x182>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command & ST2)
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <ltc6811_test+0x17c>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000d82:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000d86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000d8a:	e002      	b.n	8000d92 <ltc6811_test+0x182>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000d98:	e117      	b.n	8000fca <ltc6811_test+0x3ba>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 8000d9a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d9e:	2b1d      	cmp	r3, #29
 8000da0:	f200 8105 	bhi.w	8000fae <ltc6811_test+0x39e>
 8000da4:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <ltc6811_test+0x19c>)
 8000da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000daa:	bf00      	nop
 8000dac:	08000e25 	.word	0x08000e25
 8000db0:	08000e25 	.word	0x08000e25
 8000db4:	08000e25 	.word	0x08000e25
 8000db8:	08000e53 	.word	0x08000e53
 8000dbc:	08000e53 	.word	0x08000e53
 8000dc0:	08000e53 	.word	0x08000e53
 8000dc4:	08000e83 	.word	0x08000e83
 8000dc8:	08000e83 	.word	0x08000e83
 8000dcc:	08000e83 	.word	0x08000e83
 8000dd0:	08000eb5 	.word	0x08000eb5
 8000dd4:	08000eb5 	.word	0x08000eb5
 8000dd8:	08000eb5 	.word	0x08000eb5
 8000ddc:	08000ee7 	.word	0x08000ee7
 8000de0:	08000ee7 	.word	0x08000ee7
 8000de4:	08000ee7 	.word	0x08000ee7
 8000de8:	08000f19 	.word	0x08000f19
 8000dec:	08000f19 	.word	0x08000f19
 8000df0:	08000f19 	.word	0x08000f19
 8000df4:	08000f4b 	.word	0x08000f4b
 8000df8:	08000faf 	.word	0x08000faf
 8000dfc:	08000f4b 	.word	0x08000f4b
 8000e00:	08000f7d 	.word	0x08000f7d
 8000e04:	08000faf 	.word	0x08000faf
 8000e08:	08000faf 	.word	0x08000faf
 8000e0c:	08000faf 	.word	0x08000faf
 8000e10:	08000faf 	.word	0x08000faf
 8000e14:	08000faf 	.word	0x08000faf
 8000e18:	08000faf 	.word	0x08000faf
 8000e1c:	08000faf 	.word	0x08000faf
 8000e20:	08000f4b 	.word	0x08000f4b
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000e24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	3350      	adds	r3, #80	; 0x50
 8000e2e:	443b      	add	r3, r7
 8000e30:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	3350      	adds	r3, #80	; 0x50
 8000e40:	443b      	add	r3, r7
 8000e42:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e50:	e0ae      	b.n	8000fb0 <ltc6811_test+0x3a0>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3] << 8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000e52:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	3303      	adds	r3, #3
 8000e5a:	3350      	adds	r3, #80	; 0x50
 8000e5c:	443b      	add	r3, r7
 8000e5e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	3350      	adds	r3, #80	; 0x50
 8000e70:	443b      	add	r3, r7
 8000e72:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e80:	e096      	b.n	8000fb0 <ltc6811_test+0x3a0>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1] << 8)|tmp_data[(i+2)*2]);		// Register CVC umwandeln
 8000e82:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e86:	3302      	adds	r3, #2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	3350      	adds	r3, #80	; 0x50
 8000e8e:	443b      	add	r3, r7
 8000e90:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	3350      	adds	r3, #80	; 0x50
 8000ea2:	443b      	add	r3, r7
 8000ea4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000eb2:	e07d      	b.n	8000fb0 <ltc6811_test+0x3a0>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3] << 8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000eb4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000eb8:	3302      	adds	r3, #2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	3303      	adds	r3, #3
 8000ebe:	3350      	adds	r3, #80	; 0x50
 8000ec0:	443b      	add	r3, r7
 8000ec2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ece:	3303      	adds	r3, #3
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	3350      	adds	r3, #80	; 0x50
 8000ed4:	443b      	add	r3, r7
 8000ed6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000ee4:	e064      	b.n	8000fb0 <ltc6811_test+0x3a0>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1] << 8)|tmp_data[(i+4)*2]);		// Register AUXA umwandeln
 8000ee6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000eea:	3304      	adds	r3, #4
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	3301      	adds	r3, #1
 8000ef0:	3350      	adds	r3, #80	; 0x50
 8000ef2:	443b      	add	r3, r7
 8000ef4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f00:	3304      	adds	r3, #4
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	3350      	adds	r3, #80	; 0x50
 8000f06:	443b      	add	r3, r7
 8000f08:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000f16:	e04b      	b.n	8000fb0 <ltc6811_test+0x3a0>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3] << 8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000f18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	3303      	adds	r3, #3
 8000f22:	3350      	adds	r3, #80	; 0x50
 8000f24:	443b      	add	r3, r7
 8000f26:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f32:	3305      	adds	r3, #5
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	3350      	adds	r3, #80	; 0x50
 8000f38:	443b      	add	r3, r7
 8000f3a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000f48:	e032      	b.n	8000fb0 <ltc6811_test+0x3a0>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+1] << 8)|tmp_data[(i+6)*2]);		// Register STATA umwandeln
 8000f4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f4e:	3306      	adds	r3, #6
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	3301      	adds	r3, #1
 8000f54:	3350      	adds	r3, #80	; 0x50
 8000f56:	443b      	add	r3, r7
 8000f58:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f64:	3306      	adds	r3, #6
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	3350      	adds	r3, #80	; 0x50
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000f7a:	e019      	b.n	8000fb0 <ltc6811_test+0x3a0>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000f7c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f80:	3306      	adds	r3, #6
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	3303      	adds	r3, #3
 8000f86:	3350      	adds	r3, #80	; 0x50
 8000f88:	443b      	add	r3, r7
 8000f8a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f96:	3307      	adds	r3, #7
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	3350      	adds	r3, #80	; 0x50
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000fac:	e000      	b.n	8000fb0 <ltc6811_test+0x3a0>
			// Kein Register
			default:
				break;
 8000fae:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000fb0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000fb4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d001      	beq.n	8000fc0 <ltc6811_test+0x3b0>
#ifdef DEBUG_LTC6811
			ITM_SendString("Test failed: ");
			ITM_SendNumber(i);
			ITM_SendChar('\n');
#endif
			return 1;														// Selbsttest 1 nicht OK
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e00a      	b.n	8000fd6 <ltc6811_test+0x3c6>
	for (uint8_t i=0; i<22; i++)
 8000fc0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000fca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000fce:	2b15      	cmp	r3, #21
 8000fd0:	f67f aee3 	bls.w	8000d9a <ltc6811_test+0x18a>
		}
	}
#ifdef DEBUG_LTC6811
	ITM_SendString("Test passed\n");
#endif
	return 0;																// Selbsttest 1 OK
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3750      	adds	r7, #80	; 0x50
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000030 	.word	0x20000030

08000fe4 <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Diagnostic LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000ff2:	f240 7015 	movw	r0, #1813	; 0x715
 8000ff6:	f7ff fc68 	bl	80008ca <ltc6811>

	// Verzoegerungszeit 10ms, DIAG Befehl braucht ca. 400µs bis 4ms
	HAL_Delay(10);
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f002 fba8 	bl	8003750 <HAL_Delay>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	2012      	movs	r0, #18
 8001006:	f7ff fcf4 	bl	80009f2 <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1 << 1))
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <ltc6811_diagn+0x34>
	{
		return 1;															// Multiplexertest nicht OK
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <ltc6811_diagn+0x36>
	}

	return 0;																// Multiplexertest OK
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b09b      	sub	sp, #108	; 0x6c
 8001028:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Openwire LTC6811.\n");
#endif

	// Arrays definieren
	uint8_t pulldown[32] = {0}, pullup[32] = {0};							// Speicher Registerwerte
 800102a:	2300      	movs	r3, #0
 800102c:	647b      	str	r3, [r7, #68]	; 0x44
 800102e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	619a      	str	r2, [r3, #24]
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
 8001046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	619a      	str	r2, [r3, #24]
	uint16_t cell[1] = {0}, openwire[13] = {0};								// Speicher Zelle, Openwire vergleic Threshold
 800105a:	2300      	movs	r3, #0
 800105c:	843b      	strh	r3, [r7, #32]
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	831a      	strh	r2, [r3, #24]

	// Pullup Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8001070:	2300      	movs	r3, #0
 8001072:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001076:	e00c      	b.n	8001092 <ltc6811_openwire+0x6e>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);										// Pullup Current
 8001078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107c:	f7ff fc25 	bl	80008ca <ltc6811>
		HAL_Delay(300);
 8001080:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001084:	f002 fb64 	bl	8003750 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8001088:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800108c:	3301      	adds	r3, #1
 800108e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001092:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001096:	2b01      	cmp	r3, #1
 8001098:	d9ee      	bls.n	8001078 <ltc6811_openwire+0x54>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pullup[0]);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	2004      	movs	r0, #4
 80010a2:	f7ff fca6 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDCVB, &pullup[8]);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	3308      	adds	r3, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	2006      	movs	r0, #6
 80010b0:	f7ff fc9f 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDCVC, &pullup[16]);
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	3310      	adds	r3, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	2008      	movs	r0, #8
 80010be:	f7ff fc98 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDCVD, &pullup[24]);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	3318      	adds	r3, #24
 80010c8:	4619      	mov	r1, r3
 80010ca:	200a      	movs	r0, #10
 80010cc:	f7ff fc91 	bl	80009f2 <ltc6811_read>

	// Pulldown Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80010d6:	e00c      	b.n	80010f2 <ltc6811_openwire+0xce>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);											// Pulldown Current
 80010d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010dc:	f7ff fbf5 	bl	80008ca <ltc6811>
		HAL_Delay(300);
 80010e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010e4:	f002 fb34 	bl	8003750 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 80010e8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80010ec:	3301      	adds	r3, #1
 80010ee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80010f2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d9ee      	bls.n	80010d8 <ltc6811_openwire+0xb4>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pulldown[0]);
 80010fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010fe:	4619      	mov	r1, r3
 8001100:	2004      	movs	r0, #4
 8001102:	f7ff fc76 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDCVB, &pulldown[8]);
 8001106:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800110a:	3308      	adds	r3, #8
 800110c:	4619      	mov	r1, r3
 800110e:	2006      	movs	r0, #6
 8001110:	f7ff fc6f 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDCVC, &pulldown[16]);
 8001114:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001118:	3310      	adds	r3, #16
 800111a:	4619      	mov	r1, r3
 800111c:	2008      	movs	r0, #8
 800111e:	f7ff fc68 	bl	80009f2 <ltc6811_read>
	ltc6811_read(RDCVD, &pulldown[24]);
 8001122:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001126:	3318      	adds	r3, #24
 8001128:	4619      	mov	r1, r3
 800112a:	200a      	movs	r0, #10
 800112c:	f7ff fc61 	bl	80009f2 <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t i = 0; i < 13; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001136:	e12d      	b.n	8001394 <ltc6811_openwire+0x370>
	{
		// Auswahl welche Leitung
		switch (i)
 8001138:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800113c:	2b0c      	cmp	r3, #12
 800113e:	f200 8123 	bhi.w	8001388 <ltc6811_openwire+0x364>
 8001142:	a201      	add	r2, pc, #4	; (adr r2, 8001148 <ltc6811_openwire+0x124>)
 8001144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001148:	0800117d 	.word	0x0800117d
 800114c:	080011a1 	.word	0x080011a1
 8001150:	080011a1 	.word	0x080011a1
 8001154:	0800120f 	.word	0x0800120f
 8001158:	0800120f 	.word	0x0800120f
 800115c:	0800120f 	.word	0x0800120f
 8001160:	08001281 	.word	0x08001281
 8001164:	08001281 	.word	0x08001281
 8001168:	08001281 	.word	0x08001281
 800116c:	080012f3 	.word	0x080012f3
 8001170:	080012f3 	.word	0x080012f3
 8001174:	080012f3 	.word	0x080012f3
 8001178:	08001365 	.word	0x08001365
		{
			// Leitungen Zelle 1/2 bis 3/4
			case 0:
				openwire[i] = ((pulldown[1] << 8) + pulldown[0]);
 800117c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001180:	b29b      	uxth	r3, r3
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b299      	uxth	r1, r3
 8001186:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800118a:	b29a      	uxth	r2, r3
 800118c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001190:	440a      	add	r2, r1
 8001192:	b292      	uxth	r2, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	3368      	adds	r3, #104	; 0x68
 8001198:	443b      	add	r3, r7
 800119a:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800119e:	e0f4      	b.n	800138a <ltc6811_openwire+0x366>
			case 1:
			case 2:
				openwire[i] = getDifference(((pullup[i*2+1] << 8) + pullup[i*2]), ((pulldown[i*2+1] << 8) + pulldown[i*2]));
 80011a0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	3301      	adds	r3, #1
 80011a8:	3368      	adds	r3, #104	; 0x68
 80011aa:	443b      	add	r3, r7
 80011ac:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	3368      	adds	r3, #104	; 0x68
 80011be:	443b      	add	r3, r7
 80011c0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	b298      	uxth	r0, r3
 80011ca:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	3301      	adds	r3, #1
 80011d2:	3368      	adds	r3, #104	; 0x68
 80011d4:	443b      	add	r3, r7
 80011d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	3368      	adds	r3, #104	; 0x68
 80011e8:	443b      	add	r3, r7
 80011ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fb45 	bl	8000888 <getDifference>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	0063      	lsls	r3, r4, #1
 8001204:	3368      	adds	r3, #104	; 0x68
 8001206:	443b      	add	r3, r7
 8001208:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800120c:	e0bd      	b.n	800138a <ltc6811_openwire+0x366>
			// Leitungen Zelle 4/5 bis 6/7
			case 3:
			case 4:
			case 5:
				openwire[i] = getDifference(((pullup[i*2+3] << 8) + pullup[i*2+2]), ((pulldown[i*2+3] << 8) + pulldown[i*2+2]));
 800120e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	3303      	adds	r3, #3
 8001216:	3368      	adds	r3, #104	; 0x68
 8001218:	443b      	add	r3, r7
 800121a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800121e:	b29b      	uxth	r3, r3
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29a      	uxth	r2, r3
 8001224:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001228:	3301      	adds	r3, #1
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	3368      	adds	r3, #104	; 0x68
 800122e:	443b      	add	r3, r7
 8001230:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001234:	b29b      	uxth	r3, r3
 8001236:	4413      	add	r3, r2
 8001238:	b298      	uxth	r0, r3
 800123a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	3303      	adds	r3, #3
 8001242:	3368      	adds	r3, #104	; 0x68
 8001244:	443b      	add	r3, r7
 8001246:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800124a:	b29b      	uxth	r3, r3
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b29a      	uxth	r2, r3
 8001250:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001254:	3301      	adds	r3, #1
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	3368      	adds	r3, #104	; 0x68
 800125a:	443b      	add	r3, r7
 800125c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4413      	add	r3, r2
 8001264:	b29b      	uxth	r3, r3
 8001266:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fb0c 	bl	8000888 <getDifference>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	0063      	lsls	r3, r4, #1
 8001276:	3368      	adds	r3, #104	; 0x68
 8001278:	443b      	add	r3, r7
 800127a:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800127e:	e084      	b.n	800138a <ltc6811_openwire+0x366>
			// Leitungen Zelle 7/8 bis 9/10
			case 6:
			case 7:
			case 8:
				openwire[i] = getDifference(((pullup[i*2+5] << 8) + pullup[i*2+4]), ((pulldown[i*2+5] << 8) + pulldown[i*2+4]));
 8001280:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	3305      	adds	r3, #5
 8001288:	3368      	adds	r3, #104	; 0x68
 800128a:	443b      	add	r3, r7
 800128c:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001290:	b29b      	uxth	r3, r3
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b29a      	uxth	r2, r3
 8001296:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800129a:	3302      	adds	r3, #2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	3368      	adds	r3, #104	; 0x68
 80012a0:	443b      	add	r3, r7
 80012a2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b298      	uxth	r0, r3
 80012ac:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	3305      	adds	r3, #5
 80012b4:	3368      	adds	r3, #104	; 0x68
 80012b6:	443b      	add	r3, r7
 80012b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012c6:	3302      	adds	r3, #2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	3368      	adds	r3, #104	; 0x68
 80012cc:	443b      	add	r3, r7
 80012ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fad3 	bl	8000888 <getDifference>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	0063      	lsls	r3, r4, #1
 80012e8:	3368      	adds	r3, #104	; 0x68
 80012ea:	443b      	add	r3, r7
 80012ec:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80012f0:	e04b      	b.n	800138a <ltc6811_openwire+0x366>
			// Leitungen Zelle 10/11 und 11/12
			case 9:
			case 10:
			case 11:
				openwire[i] = getDifference(((pullup[i*2+7] << 8) + pullup[i*2+6]), ((pulldown[i*2+7] << 8) + pulldown[i*2+6]));
 80012f2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	3307      	adds	r3, #7
 80012fa:	3368      	adds	r3, #104	; 0x68
 80012fc:	443b      	add	r3, r7
 80012fe:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001302:	b29b      	uxth	r3, r3
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b29a      	uxth	r2, r3
 8001308:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800130c:	3303      	adds	r3, #3
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	3368      	adds	r3, #104	; 0x68
 8001312:	443b      	add	r3, r7
 8001314:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001318:	b29b      	uxth	r3, r3
 800131a:	4413      	add	r3, r2
 800131c:	b298      	uxth	r0, r3
 800131e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	3307      	adds	r3, #7
 8001326:	3368      	adds	r3, #104	; 0x68
 8001328:	443b      	add	r3, r7
 800132a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800132e:	b29b      	uxth	r3, r3
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b29a      	uxth	r2, r3
 8001334:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001338:	3303      	adds	r3, #3
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	3368      	adds	r3, #104	; 0x68
 800133e:	443b      	add	r3, r7
 8001340:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fa9a 	bl	8000888 <getDifference>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	0063      	lsls	r3, r4, #1
 800135a:	3368      	adds	r3, #104	; 0x68
 800135c:	443b      	add	r3, r7
 800135e:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001362:	e012      	b.n	800138a <ltc6811_openwire+0x366>
			case 12:
				openwire[i] = ((pullup[29] << 8) + pullup[28]);
 8001364:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001368:	b29b      	uxth	r3, r3
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b299      	uxth	r1, r3
 800136e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001372:	b29a      	uxth	r2, r3
 8001374:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001378:	440a      	add	r2, r1
 800137a:	b292      	uxth	r2, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	3368      	adds	r3, #104	; 0x68
 8001380:	443b      	add	r3, r7
 8001382:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001386:	e000      	b.n	800138a <ltc6811_openwire+0x366>
			default:
				break;
 8001388:	bf00      	nop
	for (uint8_t i = 0; i < 13; i++)
 800138a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800138e:	3301      	adds	r3, #1
 8001390:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001394:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001398:	2b0c      	cmp	r3, #12
 800139a:	f67f aecd 	bls.w	8001138 <ltc6811_openwire+0x114>
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t i = 1; i < 12; i++)
 800139e:	2301      	movs	r3, #1
 80013a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80013a4:	e01a      	b.n	80013dc <ltc6811_openwire+0x3b8>
	{
		// Vergleiche Messdaten mit Threshold
		if (openwire[i] > OPENWIRE_THRESHOLD)
 80013a6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	3368      	adds	r3, #104	; 0x68
 80013ae:	443b      	add	r3, r7
 80013b0:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 80013b4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013b8:	d90b      	bls.n	80013d2 <ltc6811_openwire+0x3ae>
		{
			cell[0] |= (1 << i);											// Wenn Threshold ueberschritten, Offene Leitung
 80013ba:	8c3b      	ldrh	r3, [r7, #32]
 80013bc:	b21a      	sxth	r2, r3
 80013be:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	843b      	strh	r3, [r7, #32]
	for (uint8_t i = 1; i < 12; i++)
 80013d2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80013d6:	3301      	adds	r3, #1
 80013d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80013dc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80013e0:	2b0b      	cmp	r3, #11
 80013e2:	d9e0      	bls.n	80013a6 <ltc6811_openwire+0x382>
		}
	}

	// Offene Leitung erste Zelle messen
	if (openwire[0] == 0)
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d104      	bne.n	80013f4 <ltc6811_openwire+0x3d0>
	{
		cell[0] |= (1 << 0);												// Unterste Leitung Offen
 80013ea:	8c3b      	ldrh	r3, [r7, #32]
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	843b      	strh	r3, [r7, #32]
	}

	// Offene Leitung letzte Zelle messen
	if (openwire[12] == 0)
 80013f4:	8bbb      	ldrh	r3, [r7, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d104      	bne.n	8001404 <ltc6811_openwire+0x3e0>
	{
		cell[0] |= (1 << 12);												// Oberste Leitung offen
 80013fa:	8c3b      	ldrh	r3, [r7, #32]
 80013fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001400:	b29b      	uxth	r3, r3
 8001402:	843b      	strh	r3, [r7, #32]
	}

	// Wenn offene Leitung vorhanden
	if (cell[0] != 0)
 8001404:	8c3b      	ldrh	r3, [r7, #32]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <ltc6811_openwire+0x3ea>
	{
		return 1;															// Open Wire nicht OK
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <ltc6811_openwire+0x3ec>
	}

	return 0;																// Open Wire OK
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	376c      	adds	r7, #108	; 0x6c
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}

08001418 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800141e:	2115      	movs	r1, #21
 8001420:	483b      	ldr	r0, [pc, #236]	; (8001510 <collectHardwareInfo+0xf8>)
 8001422:	f7ff f893 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8001426:	f002 f9cd 	bl	80037c4 <HAL_GetDEVID>
 800142a:	4603      	mov	r3, r0
 800142c:	210a      	movs	r1, #10
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f8a0 	bl	8000574 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8001434:	2117      	movs	r1, #23
 8001436:	4837      	ldr	r0, [pc, #220]	; (8001514 <collectHardwareInfo+0xfc>)
 8001438:	f7ff f888 	bl	800054c <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 800143c:	f002 f9b6 	bl	80037ac <HAL_GetREVID>
 8001440:	4603      	mov	r3, r0
 8001442:	f242 0201 	movw	r2, #8193	; 0x2001
 8001446:	4293      	cmp	r3, r2
 8001448:	d016      	beq.n	8001478 <collectHardwareInfo+0x60>
 800144a:	f242 0201 	movw	r2, #8193	; 0x2001
 800144e:	4293      	cmp	r3, r2
 8001450:	d817      	bhi.n	8001482 <collectHardwareInfo+0x6a>
 8001452:	f241 0201 	movw	r2, #4097	; 0x1001
 8001456:	4293      	cmp	r3, r2
 8001458:	d004      	beq.n	8001464 <collectHardwareInfo+0x4c>
 800145a:	f241 0203 	movw	r2, #4099	; 0x1003
 800145e:	4293      	cmp	r3, r2
 8001460:	d005      	beq.n	800146e <collectHardwareInfo+0x56>
 8001462:	e00e      	b.n	8001482 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8001464:	2101      	movs	r1, #1
 8001466:	482c      	ldr	r0, [pc, #176]	; (8001518 <collectHardwareInfo+0x100>)
 8001468:	f7ff f870 	bl	800054c <uartTransmit>
			break;
 800146c:	e011      	b.n	8001492 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800146e:	2101      	movs	r1, #1
 8001470:	482a      	ldr	r0, [pc, #168]	; (800151c <collectHardwareInfo+0x104>)
 8001472:	f7ff f86b 	bl	800054c <uartTransmit>
			break;
 8001476:	e00c      	b.n	8001492 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8001478:	2101      	movs	r1, #1
 800147a:	4829      	ldr	r0, [pc, #164]	; (8001520 <collectHardwareInfo+0x108>)
 800147c:	f7ff f866 	bl	800054c <uartTransmit>
			break;
 8001480:	e007      	b.n	8001492 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8001482:	f002 f993 	bl	80037ac <HAL_GetREVID>
 8001486:	4603      	mov	r3, r0
 8001488:	210a      	movs	r1, #10
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f872 	bl	8000574 <uartTransmitNumber>
			break;
 8001490:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8001492:	2115      	movs	r1, #21
 8001494:	4823      	ldr	r0, [pc, #140]	; (8001524 <collectHardwareInfo+0x10c>)
 8001496:	f7ff f859 	bl	800054c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800149a:	f003 fe61 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 800149e:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a21      	ldr	r2, [pc, #132]	; (8001528 <collectHardwareInfo+0x110>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9b      	lsrs	r3, r3, #18
 80014aa:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80014ac:	210a      	movs	r1, #10
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff f860 	bl	8000574 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80014b4:	2104      	movs	r1, #4
 80014b6:	481d      	ldr	r0, [pc, #116]	; (800152c <collectHardwareInfo+0x114>)
 80014b8:	f7ff f848 	bl	800054c <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80014bc:	2111      	movs	r1, #17
 80014be:	481c      	ldr	r0, [pc, #112]	; (8001530 <collectHardwareInfo+0x118>)
 80014c0:	f7ff f844 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80014c4:	f002 f98c 	bl	80037e0 <HAL_GetUIDw0>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2110      	movs	r1, #16
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f851 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80014d2:	2101      	movs	r1, #1
 80014d4:	4817      	ldr	r0, [pc, #92]	; (8001534 <collectHardwareInfo+0x11c>)
 80014d6:	f7ff f839 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80014da:	f002 f98d 	bl	80037f8 <HAL_GetUIDw1>
 80014de:	4603      	mov	r3, r0
 80014e0:	2110      	movs	r1, #16
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f846 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80014e8:	2101      	movs	r1, #1
 80014ea:	4812      	ldr	r0, [pc, #72]	; (8001534 <collectHardwareInfo+0x11c>)
 80014ec:	f7ff f82e 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 80014f0:	f002 f98e 	bl	8003810 <HAL_GetUIDw2>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2110      	movs	r1, #16
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f83b 	bl	8000574 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80014fe:	2101      	movs	r1, #1
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <collectHardwareInfo+0x120>)
 8001502:	f7ff f823 	bl	800054c <uartTransmit>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	08008e08 	.word	0x08008e08
 8001514:	08008e20 	.word	0x08008e20
 8001518:	08008e38 	.word	0x08008e38
 800151c:	08008e3c 	.word	0x08008e3c
 8001520:	08008e40 	.word	0x08008e40
 8001524:	08008e44 	.word	0x08008e44
 8001528:	431bde83 	.word	0x431bde83
 800152c:	08008e5c 	.word	0x08008e5c
 8001530:	08008e64 	.word	0x08008e64
 8001534:	08008e78 	.word	0x08008e78
 8001538:	08008e7c 	.word	0x08008e7c

0800153c <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8001540:	2114      	movs	r1, #20
 8001542:	4824      	ldr	r0, [pc, #144]	; (80015d4 <collectMiddlewareInfo+0x98>)
 8001544:	f7ff f802 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8001548:	210a      	movs	r1, #10
 800154a:	2005      	movs	r0, #5
 800154c:	f7ff f812 	bl	8000574 <uartTransmitNumber>
	uartTransmit(".", 1);
 8001550:	2101      	movs	r1, #1
 8001552:	4821      	ldr	r0, [pc, #132]	; (80015d8 <collectMiddlewareInfo+0x9c>)
 8001554:	f7fe fffa 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8001558:	210a      	movs	r1, #10
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff f80a 	bl	8000574 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8001560:	2112      	movs	r1, #18
 8001562:	481e      	ldr	r0, [pc, #120]	; (80015dc <collectMiddlewareInfo+0xa0>)
 8001564:	f7fe fff2 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8001568:	f002 f916 	bl	8003798 <HAL_GetHalVersion>
 800156c:	4603      	mov	r3, r0
 800156e:	0e1b      	lsrs	r3, r3, #24
 8001570:	b2db      	uxtb	r3, r3
 8001572:	210a      	movs	r1, #10
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fffd 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800157a:	2101      	movs	r1, #1
 800157c:	4816      	ldr	r0, [pc, #88]	; (80015d8 <collectMiddlewareInfo+0x9c>)
 800157e:	f7fe ffe5 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8001582:	f002 f909 	bl	8003798 <HAL_GetHalVersion>
 8001586:	4603      	mov	r3, r0
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	b2db      	uxtb	r3, r3
 800158c:	210a      	movs	r1, #10
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fff0 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001594:	2101      	movs	r1, #1
 8001596:	4810      	ldr	r0, [pc, #64]	; (80015d8 <collectMiddlewareInfo+0x9c>)
 8001598:	f7fe ffd8 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 800159c:	f002 f8fc 	bl	8003798 <HAL_GetHalVersion>
 80015a0:	4603      	mov	r3, r0
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	210a      	movs	r1, #10
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffe3 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80015ae:	2101      	movs	r1, #1
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <collectMiddlewareInfo+0x9c>)
 80015b2:	f7fe ffcb 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80015b6:	f002 f8ef 	bl	8003798 <HAL_GetHalVersion>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	210a      	movs	r1, #10
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffd7 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 80015c6:	2101      	movs	r1, #1
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <collectMiddlewareInfo+0xa4>)
 80015ca:	f7fe ffbf 	bl	800054c <uartTransmit>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08008e80 	.word	0x08008e80
 80015d8:	08008e94 	.word	0x08008e94
 80015dc:	08008e98 	.word	0x08008e98
 80015e0:	08008e7c 	.word	0x08008e7c

080015e4 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 80015e8:	2111      	movs	r1, #17
 80015ea:	4826      	ldr	r0, [pc, #152]	; (8001684 <collectSoftwareInfo+0xa0>)
 80015ec:	f7fe ffae 	bl	800054c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 80015f0:	2108      	movs	r1, #8
 80015f2:	4825      	ldr	r0, [pc, #148]	; (8001688 <collectSoftwareInfo+0xa4>)
 80015f4:	f7fe ffaa 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80015f8:	2111      	movs	r1, #17
 80015fa:	4824      	ldr	r0, [pc, #144]	; (800168c <collectSoftwareInfo+0xa8>)
 80015fc:	f7fe ffa6 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8001600:	2108      	movs	r1, #8
 8001602:	4823      	ldr	r0, [pc, #140]	; (8001690 <collectSoftwareInfo+0xac>)
 8001604:	f7fe ffa2 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8001608:	210f      	movs	r1, #15
 800160a:	4822      	ldr	r0, [pc, #136]	; (8001694 <collectSoftwareInfo+0xb0>)
 800160c:	f7fe ff9e 	bl	800054c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8001610:	2129      	movs	r1, #41	; 0x29
 8001612:	4821      	ldr	r0, [pc, #132]	; (8001698 <collectSoftwareInfo+0xb4>)
 8001614:	f7fe ff9a 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001618:	2101      	movs	r1, #1
 800161a:	4820      	ldr	r0, [pc, #128]	; (800169c <collectSoftwareInfo+0xb8>)
 800161c:	f7fe ff96 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001620:	2116      	movs	r1, #22
 8001622:	481f      	ldr	r0, [pc, #124]	; (80016a0 <collectSoftwareInfo+0xbc>)
 8001624:	f7fe ff92 	bl	800054c <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8001628:	2105      	movs	r1, #5
 800162a:	481e      	ldr	r0, [pc, #120]	; (80016a4 <collectSoftwareInfo+0xc0>)
 800162c:	f7fe ff8e 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001630:	2115      	movs	r1, #21
 8001632:	481d      	ldr	r0, [pc, #116]	; (80016a8 <collectSoftwareInfo+0xc4>)
 8001634:	f7fe ff8a 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8001638:	2108      	movs	r1, #8
 800163a:	481c      	ldr	r0, [pc, #112]	; (80016ac <collectSoftwareInfo+0xc8>)
 800163c:	f7fe ff86 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8001640:	2116      	movs	r1, #22
 8001642:	481b      	ldr	r0, [pc, #108]	; (80016b0 <collectSoftwareInfo+0xcc>)
 8001644:	f7fe ff82 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8001648:	2111      	movs	r1, #17
 800164a:	481a      	ldr	r0, [pc, #104]	; (80016b4 <collectSoftwareInfo+0xd0>)
 800164c:	f7fe ff7e 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001650:	2101      	movs	r1, #1
 8001652:	4812      	ldr	r0, [pc, #72]	; (800169c <collectSoftwareInfo+0xb8>)
 8001654:	f7fe ff7a 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8001658:	2111      	movs	r1, #17
 800165a:	4817      	ldr	r0, [pc, #92]	; (80016b8 <collectSoftwareInfo+0xd4>)
 800165c:	f7fe ff76 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8001660:	210b      	movs	r1, #11
 8001662:	4816      	ldr	r0, [pc, #88]	; (80016bc <collectSoftwareInfo+0xd8>)
 8001664:	f7fe ff72 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8001668:	2111      	movs	r1, #17
 800166a:	4815      	ldr	r0, [pc, #84]	; (80016c0 <collectSoftwareInfo+0xdc>)
 800166c:	f7fe ff6e 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8001670:	2109      	movs	r1, #9
 8001672:	4814      	ldr	r0, [pc, #80]	; (80016c4 <collectSoftwareInfo+0xe0>)
 8001674:	f7fe ff6a 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001678:	2101      	movs	r1, #1
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <collectSoftwareInfo+0xb8>)
 800167c:	f7fe ff66 	bl	800054c <uartTransmit>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	08008eac 	.word	0x08008eac
 8001688:	08008ec0 	.word	0x08008ec0
 800168c:	08008ec8 	.word	0x08008ec8
 8001690:	08008edc 	.word	0x08008edc
 8001694:	08008ee4 	.word	0x08008ee4
 8001698:	08008ef4 	.word	0x08008ef4
 800169c:	08008e7c 	.word	0x08008e7c
 80016a0:	08008f20 	.word	0x08008f20
 80016a4:	08008f38 	.word	0x08008f38
 80016a8:	08008f40 	.word	0x08008f40
 80016ac:	08008f58 	.word	0x08008f58
 80016b0:	08008f60 	.word	0x08008f60
 80016b4:	08008f78 	.word	0x08008f78
 80016b8:	08008f8c 	.word	0x08008f8c
 80016bc:	08008fa0 	.word	0x08008fa0
 80016c0:	08008fac 	.word	0x08008fac
 80016c4:	08008fc0 	.word	0x08008fc0

080016c8 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 80016cc:	2115      	movs	r1, #21
 80016ce:	4814      	ldr	r0, [pc, #80]	; (8001720 <collectGitcounts+0x58>)
 80016d0:	f7fe ff3c 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 80016d4:	2103      	movs	r1, #3
 80016d6:	4813      	ldr	r0, [pc, #76]	; (8001724 <collectGitcounts+0x5c>)
 80016d8:	f7fe ff38 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 80016dc:	2117      	movs	r1, #23
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <collectGitcounts+0x60>)
 80016e0:	f7fe ff34 	bl	800054c <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 80016e4:	2103      	movs	r1, #3
 80016e6:	4811      	ldr	r0, [pc, #68]	; (800172c <collectGitcounts+0x64>)
 80016e8:	f7fe ff30 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 80016ec:	211c      	movs	r1, #28
 80016ee:	4810      	ldr	r0, [pc, #64]	; (8001730 <collectGitcounts+0x68>)
 80016f0:	f7fe ff2c 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 80016f4:	2103      	movs	r1, #3
 80016f6:	480f      	ldr	r0, [pc, #60]	; (8001734 <collectGitcounts+0x6c>)
 80016f8:	f7fe ff28 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80016fc:	2116      	movs	r1, #22
 80016fe:	480e      	ldr	r0, [pc, #56]	; (8001738 <collectGitcounts+0x70>)
 8001700:	f7fe ff24 	bl	800054c <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8001704:	2102      	movs	r1, #2
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <collectGitcounts+0x74>)
 8001708:	f7fe ff20 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800170c:	2115      	movs	r1, #21
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <collectGitcounts+0x78>)
 8001710:	f7fe ff1c 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8001714:	2102      	movs	r1, #2
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <collectGitcounts+0x7c>)
 8001718:	f7fe ff18 	bl	800054c <uartTransmit>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	08008fcc 	.word	0x08008fcc
 8001724:	08008fe4 	.word	0x08008fe4
 8001728:	08008fe8 	.word	0x08008fe8
 800172c:	08009000 	.word	0x08009000
 8001730:	08009004 	.word	0x08009004
 8001734:	08009020 	.word	0x08009020
 8001738:	08008f20 	.word	0x08008f20
 800173c:	08009024 	.word	0x08009024
 8001740:	08008f40 	.word	0x08008f40
 8001744:	08009028 	.word	0x08009028

08001748 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 800174c:	2111      	movs	r1, #17
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <collectSystemInfo+0x40>)
 8001750:	f7fe fefc 	bl	800054c <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8001754:	f7ff fe60 	bl	8001418 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8001758:	2111      	movs	r1, #17
 800175a:	480c      	ldr	r0, [pc, #48]	; (800178c <collectSystemInfo+0x44>)
 800175c:	f7fe fef6 	bl	800054c <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8001760:	f7ff ff40 	bl	80015e4 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8001764:	2113      	movs	r1, #19
 8001766:	480a      	ldr	r0, [pc, #40]	; (8001790 <collectSystemInfo+0x48>)
 8001768:	f7fe fef0 	bl	800054c <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 800176c:	f7ff fee6 	bl	800153c <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8001770:	2113      	movs	r1, #19
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <collectSystemInfo+0x4c>)
 8001774:	f7fe feea 	bl	800054c <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8001778:	f7ff ffa6 	bl	80016c8 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 800177c:	2103      	movs	r1, #3
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <collectSystemInfo+0x50>)
 8001780:	f7fe fee4 	bl	800054c <uartTransmit>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	0800902c 	.word	0x0800902c
 800178c:	08009040 	.word	0x08009040
 8001790:	08009054 	.word	0x08009054
 8001794:	08009068 	.word	0x08009068
 8001798:	0800907c 	.word	0x0800907c

0800179c <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 80017a2:	2300      	movs	r3, #0
 80017a4:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80017a6:	4b25      	ldr	r3, [pc, #148]	; (800183c <readResetSource+0xa0>)
 80017a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	3301      	adds	r3, #1
 80017b6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <readResetSource+0xa0>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	3302      	adds	r3, #2
 80017c8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <readResetSource+0xa0>)
 80017cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da02      	bge.n	80017d8 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	3304      	adds	r3, #4
 80017d6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <readResetSource+0xa0>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	3308      	adds	r3, #8
 80017e8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <readResetSource+0xa0>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <readResetSource+0x60>
	{
		reset_flags += PORST1;
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	3310      	adds	r3, #16
 80017fa:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <readResetSource+0xa0>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	3320      	adds	r3, #32
 800180c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <readResetSource+0xa0>)
 8001810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	3340      	adds	r3, #64	; 0x40
 800181e:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <readResetSource+0xa0>)
 8001822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <readResetSource+0xa0>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800182a:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 800184a:	2106      	movs	r1, #6
 800184c:	482a      	ldr	r0, [pc, #168]	; (80018f8 <printResetSource+0xb8>)
 800184e:	f7fe fe7d 	bl	800054c <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d104      	bne.n	8001862 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8001858:	210f      	movs	r1, #15
 800185a:	4828      	ldr	r0, [pc, #160]	; (80018fc <printResetSource+0xbc>)
 800185c:	f7fe fe76 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8001860:	e046      	b.n	80018f0 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 800186c:	2118      	movs	r1, #24
 800186e:	4824      	ldr	r0, [pc, #144]	; (8001900 <printResetSource+0xc0>)
 8001870:	f7fe fe6c 	bl	800054c <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 800187e:	2116      	movs	r1, #22
 8001880:	4820      	ldr	r0, [pc, #128]	; (8001904 <printResetSource+0xc4>)
 8001882:	f7fe fe63 	bl	800054c <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8001890:	210a      	movs	r1, #10
 8001892:	481d      	ldr	r0, [pc, #116]	; (8001908 <printResetSource+0xc8>)
 8001894:	f7fe fe5a 	bl	800054c <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 80018a2:	2110      	movs	r1, #16
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <printResetSource+0xcc>)
 80018a6:	f7fe fe51 	bl	800054c <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80018b4:	210f      	movs	r1, #15
 80018b6:	4816      	ldr	r0, [pc, #88]	; (8001910 <printResetSource+0xd0>)
 80018b8:	f7fe fe48 	bl	800054c <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80018c6:	210f      	movs	r1, #15
 80018c8:	4812      	ldr	r0, [pc, #72]	; (8001914 <printResetSource+0xd4>)
 80018ca:	f7fe fe3f 	bl	800054c <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 80018d8:	210a      	movs	r1, #10
 80018da:	480f      	ldr	r0, [pc, #60]	; (8001918 <printResetSource+0xd8>)
 80018dc:	f7fe fe36 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da03      	bge.n	80018f0 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 80018e8:	2105      	movs	r1, #5
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <printResetSource+0xdc>)
 80018ec:	f7fe fe2e 	bl	800054c <uartTransmit>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	08009080 	.word	0x08009080
 80018fc:	08009088 	.word	0x08009088
 8001900:	08009098 	.word	0x08009098
 8001904:	080090b4 	.word	0x080090b4
 8001908:	080090cc 	.word	0x080090cc
 800190c:	080090d8 	.word	0x080090d8
 8001910:	080090ec 	.word	0x080090ec
 8001914:	080090fc 	.word	0x080090fc
 8001918:	0800910c 	.word	0x0800910c
 800191c:	08009118 	.word	0x08009118

08001920 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d104      	bne.n	800193a <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8001930:	2107      	movs	r1, #7
 8001932:	480f      	ldr	r0, [pc, #60]	; (8001970 <hal_error+0x50>)
 8001934:	f7fe fe0a 	bl	800054c <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8001938:	e016      	b.n	8001968 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d104      	bne.n	800194a <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8001940:	210a      	movs	r1, #10
 8001942:	480c      	ldr	r0, [pc, #48]	; (8001974 <hal_error+0x54>)
 8001944:	f7fe fe02 	bl	800054c <uartTransmit>
}
 8001948:	e00e      	b.n	8001968 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d104      	bne.n	800195a <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8001950:	2109      	movs	r1, #9
 8001952:	4809      	ldr	r0, [pc, #36]	; (8001978 <hal_error+0x58>)
 8001954:	f7fe fdfa 	bl	800054c <uartTransmit>
}
 8001958:	e006      	b.n	8001968 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d103      	bne.n	8001968 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8001960:	210c      	movs	r1, #12
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <hal_error+0x5c>)
 8001964:	f7fe fdf2 	bl	800054c <uartTransmit>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	08009120 	.word	0x08009120
 8001974:	08009128 	.word	0x08009128
 8001978:	08009134 	.word	0x08009134
 800197c:	08009140 	.word	0x08009140

08001980 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8001984:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001988:	4850      	ldr	r0, [pc, #320]	; (8001acc <readall_inputs+0x14c>)
 800198a:	f002 ffcd 	bl	8004928 <HAL_GPIO_ReadPin>
 800198e:	4603      	mov	r3, r0
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	b2d9      	uxtb	r1, r3
 8001996:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <readall_inputs+0x150>)
 8001998:	7813      	ldrb	r3, [r2, #0]
 800199a:	f361 03c3 	bfi	r3, r1, #3, #1
 800199e:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80019a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019a4:	484b      	ldr	r0, [pc, #300]	; (8001ad4 <readall_inputs+0x154>)
 80019a6:	f002 ffbf 	bl	8004928 <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	b2d9      	uxtb	r1, r3
 80019b2:	4a47      	ldr	r2, [pc, #284]	; (8001ad0 <readall_inputs+0x150>)
 80019b4:	7813      	ldrb	r3, [r2, #0]
 80019b6:	f361 1304 	bfi	r3, r1, #4, #1
 80019ba:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 80019bc:	2101      	movs	r1, #1
 80019be:	4846      	ldr	r0, [pc, #280]	; (8001ad8 <readall_inputs+0x158>)
 80019c0:	f002 ffb2 	bl	8004928 <HAL_GPIO_ReadPin>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	b2d9      	uxtb	r1, r3
 80019cc:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <readall_inputs+0x150>)
 80019ce:	7813      	ldrb	r3, [r2, #0]
 80019d0:	f361 1345 	bfi	r3, r1, #5, #1
 80019d4:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 80019d6:	2104      	movs	r1, #4
 80019d8:	483f      	ldr	r0, [pc, #252]	; (8001ad8 <readall_inputs+0x158>)
 80019da:	f002 ffa5 	bl	8004928 <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	b2d9      	uxtb	r1, r3
 80019e6:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <readall_inputs+0x150>)
 80019e8:	7813      	ldrb	r3, [r2, #0]
 80019ea:	f361 1386 	bfi	r3, r1, #6, #1
 80019ee:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 80019f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f4:	4835      	ldr	r0, [pc, #212]	; (8001acc <readall_inputs+0x14c>)
 80019f6:	f002 ff97 	bl	8004928 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	b2d9      	uxtb	r1, r3
 8001a02:	4a36      	ldr	r2, [pc, #216]	; (8001adc <readall_inputs+0x15c>)
 8001a04:	7813      	ldrb	r3, [r2, #0]
 8001a06:	f361 0300 	bfi	r3, r1, #0, #1
 8001a0a:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	482f      	ldr	r0, [pc, #188]	; (8001acc <readall_inputs+0x14c>)
 8001a10:	f002 ff8a 	bl	8004928 <HAL_GPIO_ReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	b2d9      	uxtb	r1, r3
 8001a1c:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <readall_inputs+0x15c>)
 8001a1e:	7813      	ldrb	r3, [r2, #0]
 8001a20:	f361 0341 	bfi	r3, r1, #1, #1
 8001a24:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8001a26:	2120      	movs	r1, #32
 8001a28:	4828      	ldr	r0, [pc, #160]	; (8001acc <readall_inputs+0x14c>)
 8001a2a:	f002 ff7d 	bl	8004928 <HAL_GPIO_ReadPin>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	b2d9      	uxtb	r1, r3
 8001a36:	4a29      	ldr	r2, [pc, #164]	; (8001adc <readall_inputs+0x15c>)
 8001a38:	7813      	ldrb	r3, [r2, #0]
 8001a3a:	f361 0382 	bfi	r3, r1, #2, #1
 8001a3e:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001a40:	2110      	movs	r1, #16
 8001a42:	4822      	ldr	r0, [pc, #136]	; (8001acc <readall_inputs+0x14c>)
 8001a44:	f002 ff70 	bl	8004928 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	b2d9      	uxtb	r1, r3
 8001a50:	4a22      	ldr	r2, [pc, #136]	; (8001adc <readall_inputs+0x15c>)
 8001a52:	7813      	ldrb	r3, [r2, #0]
 8001a54:	f361 03c3 	bfi	r3, r1, #3, #1
 8001a58:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8001a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5e:	4820      	ldr	r0, [pc, #128]	; (8001ae0 <readall_inputs+0x160>)
 8001a60:	f002 ff62 	bl	8004928 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	b2d9      	uxtb	r1, r3
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <readall_inputs+0x15c>)
 8001a6e:	7813      	ldrb	r3, [r2, #0]
 8001a70:	f361 1304 	bfi	r3, r1, #4, #1
 8001a74:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8001a76:	2104      	movs	r1, #4
 8001a78:	4819      	ldr	r0, [pc, #100]	; (8001ae0 <readall_inputs+0x160>)
 8001a7a:	f002 ff55 	bl	8004928 <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	b2d9      	uxtb	r1, r3
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <readall_inputs+0x164>)
 8001a88:	7813      	ldrb	r3, [r2, #0]
 8001a8a:	f361 0300 	bfi	r3, r1, #0, #1
 8001a8e:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a94:	4810      	ldr	r0, [pc, #64]	; (8001ad8 <readall_inputs+0x158>)
 8001a96:	f002 ff47 	bl	8004928 <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	b2d9      	uxtb	r1, r3
 8001aa2:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <readall_inputs+0x164>)
 8001aa4:	7813      	ldrb	r3, [r2, #0]
 8001aa6:	f361 0341 	bfi	r3, r1, #1, #1
 8001aaa:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <readall_inputs+0x158>)
 8001ab2:	f002 ff39 	bl	8004928 <HAL_GPIO_ReadPin>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	b2d9      	uxtb	r1, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <readall_inputs+0x164>)
 8001ac0:	7813      	ldrb	r3, [r2, #0]
 8001ac2:	f361 0382 	bfi	r3, r1, #2, #1
 8001ac6:	7013      	strb	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	20000038 	.word	0x20000038
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	2000003c 	.word	0x2000003c
 8001ae0:	40021400 	.word	0x40021400
 8001ae4:	20000040 	.word	0x20000040

08001ae8 <millis>:
//----------------------------------------------------------------------

// Function millis erstellt
//----------------------------------------------------------------------
uint32_t millis(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001aec:	f001 fe24 	bl	8003738 <HAL_GetTick>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8001afc:	2201      	movs	r2, #1
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	481b      	ldr	r0, [pc, #108]	; (8001b70 <testPCB_Leds+0x78>)
 8001b02:	f002 ff29 	bl	8004958 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001b06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b0a:	f001 fe21 	bl	8003750 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	4817      	ldr	r0, [pc, #92]	; (8001b70 <testPCB_Leds+0x78>)
 8001b14:	f002 ff20 	bl	8004958 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b1c:	f001 fe18 	bl	8003750 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8001b20:	2201      	movs	r2, #1
 8001b22:	2104      	movs	r1, #4
 8001b24:	4812      	ldr	r0, [pc, #72]	; (8001b70 <testPCB_Leds+0x78>)
 8001b26:	f002 ff17 	bl	8004958 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2e:	f001 fe0f 	bl	8003750 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8001b32:	2200      	movs	r2, #0
 8001b34:	2104      	movs	r1, #4
 8001b36:	480e      	ldr	r0, [pc, #56]	; (8001b70 <testPCB_Leds+0x78>)
 8001b38:	f002 ff0e 	bl	8004958 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b40:	f001 fe06 	bl	8003750 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b4a:	4809      	ldr	r0, [pc, #36]	; (8001b70 <testPCB_Leds+0x78>)
 8001b4c:	f002 ff04 	bl	8004958 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b54:	f001 fdfc 	bl	8003750 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5e:	4804      	ldr	r0, [pc, #16]	; (8001b70 <testPCB_Leds+0x78>)
 8001b60:	f002 fefa 	bl	8004958 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b68:	f001 fdf2 	bl	8003750 <HAL_Delay>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40020400 	.word	0x40020400

08001b74 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001b88:	4a44      	ldr	r2, [pc, #272]	; (8001c9c <MX_ADC1_Init+0x128>)
 8001b8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b8c:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b94:	4b40      	ldr	r3, [pc, #256]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ba0:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bae:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001bb6:	4a3a      	ldr	r2, [pc, #232]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001bc0:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001bc2:	2206      	movs	r2, #6
 8001bc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bc6:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bce:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bd4:	4830      	ldr	r0, [pc, #192]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001bd6:	f001 fe27 	bl	8003828 <HAL_ADC_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001be0:	f001 f8e2 	bl	8002da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001be4:	2307      	movs	r3, #7
 8001be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001bec:	2301      	movs	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4828      	ldr	r0, [pc, #160]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001bf6:	f001 fe5b 	bl	80038b0 <HAL_ADC_ConfigChannel>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c00:	f001 f8d2 	bl	8002da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c04:	2303      	movs	r3, #3
 8001c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4821      	ldr	r0, [pc, #132]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001c12:	f001 fe4d 	bl	80038b0 <HAL_ADC_ConfigChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001c1c:	f001 f8c4 	bl	8002da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c20:	2304      	movs	r3, #4
 8001c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c24:	2303      	movs	r3, #3
 8001c26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c28:	463b      	mov	r3, r7
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	481a      	ldr	r0, [pc, #104]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001c2e:	f001 fe3f 	bl	80038b0 <HAL_ADC_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001c38:	f001 f8b6 	bl	8002da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c40:	2304      	movs	r3, #4
 8001c42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c44:	463b      	mov	r3, r7
 8001c46:	4619      	mov	r1, r3
 8001c48:	4813      	ldr	r0, [pc, #76]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001c4a:	f001 fe31 	bl	80038b0 <HAL_ADC_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001c54:	f001 f8a8 	bl	8002da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c58:	2306      	movs	r3, #6
 8001c5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c60:	463b      	mov	r3, r7
 8001c62:	4619      	mov	r1, r3
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001c66:	f001 fe23 	bl	80038b0 <HAL_ADC_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001c70:	f001 f89a 	bl	8002da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_ADC1_Init+0x130>)
 8001c76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001c78:	2306      	movs	r3, #6
 8001c7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_ADC1_Init+0x124>)
 8001c82:	f001 fe15 	bl	80038b0 <HAL_ADC_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001c8c:	f001 f88c 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000054 	.word	0x20000054
 8001c9c:	40012000 	.word	0x40012000
 8001ca0:	0f000001 	.word	0x0f000001
 8001ca4:	10000012 	.word	0x10000012

08001ca8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <HAL_ADC_MspInit+0x74>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d123      	bne.n	8001d12 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_ADC_MspInit+0x78>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_ADC_MspInit+0x78>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_ADC_MspInit+0x78>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_ADC_MspInit+0x78>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_ADC_MspInit+0x78>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_ADC_MspInit+0x78>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001cfa:	23f8      	movs	r3, #248	; 0xf8
 8001cfc:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_ADC_MspInit+0x7c>)
 8001d0e:	f002 fc5f 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40012000 	.word	0x40012000
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <MX_CAN1_Init+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d34:	2210      	movs	r2, #16
 8001d36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d4a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_CAN1_Init+0x64>)
 8001d78:	f001 ffea 	bl	8003d50 <HAL_CAN_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001d82:	f001 f811 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000009c 	.word	0x2000009c
 8001d90:	40006400 	.word	0x40006400

08001d94 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <MX_CAN3_Init+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001da0:	2206      	movs	r2, #6
 8001da2:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001db2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001db6:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001dba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dbe:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_CAN3_Init+0x64>)
 8001de6:	f001 ffb3 	bl	8003d50 <HAL_CAN_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001df0:	f000 ffda 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200000c4 	.word	0x200000c4
 8001dfc:	40003400 	.word	0x40003400

08001e00 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ed8 <HAL_CAN_MspInit+0xd8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d128      	bne.n	8001e74 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a27      	ldr	r2, [pc, #156]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e40:	f043 0308 	orr.w	r3, r3, #8
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e52:	2303      	movs	r3, #3
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e62:	2309      	movs	r3, #9
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	481c      	ldr	r0, [pc, #112]	; (8001ee0 <HAL_CAN_MspInit+0xe0>)
 8001e6e:	f002 fbaf 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001e72:	e02d      	b.n	8001ed0 <HAL_CAN_MspInit+0xd0>
  else if(canHandle->Instance==CAN3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <HAL_CAN_MspInit+0xe4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d128      	bne.n	8001ed0 <HAL_CAN_MspInit+0xd0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a16      	ldr	r2, [pc, #88]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_CAN_MspInit+0xdc>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001eae:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001ec0:	230b      	movs	r3, #11
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <HAL_CAN_MspInit+0xe8>)
 8001ecc:	f002 fb80 	bl	80045d0 <HAL_GPIO_Init>
}
 8001ed0:	bf00      	nop
 8001ed2:	3730      	adds	r7, #48	; 0x30
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40006400 	.word	0x40006400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40003400 	.word	0x40003400
 8001ee8:	40020000 	.word	0x40020000

08001eec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08e      	sub	sp, #56	; 0x38
 8001ef0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f02:	4bb7      	ldr	r3, [pc, #732]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4ab6      	ldr	r2, [pc, #728]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f08:	f043 0310 	orr.w	r3, r3, #16
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4bb4      	ldr	r3, [pc, #720]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	4bb1      	ldr	r3, [pc, #708]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4ab0      	ldr	r2, [pc, #704]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4bae      	ldr	r3, [pc, #696]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f32:	4bab      	ldr	r3, [pc, #684]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4aaa      	ldr	r2, [pc, #680]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4ba8      	ldr	r3, [pc, #672]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	4ba5      	ldr	r3, [pc, #660]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4aa4      	ldr	r2, [pc, #656]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4ba2      	ldr	r3, [pc, #648]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b9f      	ldr	r3, [pc, #636]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a9e      	ldr	r2, [pc, #632]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b9c      	ldr	r3, [pc, #624]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	4b99      	ldr	r3, [pc, #612]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a98      	ldr	r2, [pc, #608]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b96      	ldr	r3, [pc, #600]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f92:	4b93      	ldr	r3, [pc, #588]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a92      	ldr	r2, [pc, #584]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b90      	ldr	r3, [pc, #576]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001faa:	4b8d      	ldr	r3, [pc, #564]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a8c      	ldr	r2, [pc, #560]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b8a      	ldr	r3, [pc, #552]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f248 0187 	movw	r1, #32903	; 0x8087
 8001fc8:	4886      	ldr	r0, [pc, #536]	; (80021e4 <MX_GPIO_Init+0x2f8>)
 8001fca:	f002 fcc5 	bl	8004958 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd4:	4884      	ldr	r0, [pc, #528]	; (80021e8 <MX_GPIO_Init+0x2fc>)
 8001fd6:	f002 fcbf 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f242 0102 	movw	r1, #8194	; 0x2002
 8001fe0:	4882      	ldr	r0, [pc, #520]	; (80021ec <MX_GPIO_Init+0x300>)
 8001fe2:	f002 fcb9 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f240 6102 	movw	r1, #1538	; 0x602
 8001fec:	4880      	ldr	r0, [pc, #512]	; (80021f0 <MX_GPIO_Init+0x304>)
 8001fee:	f002 fcb3 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f244 0184 	movw	r1, #16516	; 0x4084
 8001ff8:	487e      	ldr	r0, [pc, #504]	; (80021f4 <MX_GPIO_Init+0x308>)
 8001ffa:	f002 fcad 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002004:	4877      	ldr	r0, [pc, #476]	; (80021e4 <MX_GPIO_Init+0x2f8>)
 8002006:	f002 fca7 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800200a:	2200      	movs	r2, #0
 800200c:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8002010:	4879      	ldr	r0, [pc, #484]	; (80021f8 <MX_GPIO_Init+0x30c>)
 8002012:	f002 fca1 	bl	8004958 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2118      	movs	r1, #24
 800201a:	4878      	ldr	r0, [pc, #480]	; (80021fc <MX_GPIO_Init+0x310>)
 800201c:	f002 fc9c 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8002020:	f648 0387 	movw	r3, #34951	; 0x8887
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	4619      	mov	r1, r3
 8002038:	486a      	ldr	r0, [pc, #424]	; (80021e4 <MX_GPIO_Init+0x2f8>)
 800203a:	f002 fac9 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 800203e:	f44f 739c 	mov.w	r3, #312	; 0x138
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002044:	2300      	movs	r3, #0
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	4619      	mov	r1, r3
 8002052:	4864      	ldr	r0, [pc, #400]	; (80021e4 <MX_GPIO_Init+0x2f8>)
 8002054:	f002 fabc 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8002058:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205e:	2303      	movs	r3, #3
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206a:	4619      	mov	r1, r3
 800206c:	485d      	ldr	r0, [pc, #372]	; (80021e4 <MX_GPIO_Init+0x2f8>)
 800206e:	f002 faaf 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8002072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002088:	4619      	mov	r1, r3
 800208a:	4857      	ldr	r0, [pc, #348]	; (80021e8 <MX_GPIO_Init+0x2fc>)
 800208c:	f002 faa0 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002090:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002096:	2303      	movs	r3, #3
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a2:	4619      	mov	r1, r3
 80020a4:	4850      	ldr	r0, [pc, #320]	; (80021e8 <MX_GPIO_Init+0x2fc>)
 80020a6:	f002 fa93 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80020aa:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b0:	2303      	movs	r3, #3
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	4619      	mov	r1, r3
 80020be:	484b      	ldr	r0, [pc, #300]	; (80021ec <MX_GPIO_Init+0x300>)
 80020c0:	f002 fa86 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80020c4:	f242 0302 	movw	r3, #8194	; 0x2002
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	4619      	mov	r1, r3
 80020dc:	4843      	ldr	r0, [pc, #268]	; (80021ec <MX_GPIO_Init+0x300>)
 80020de:	f002 fa77 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 80020e2:	f248 0304 	movw	r3, #32772	; 0x8004
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f4:	4619      	mov	r1, r3
 80020f6:	483d      	ldr	r0, [pc, #244]	; (80021ec <MX_GPIO_Init+0x300>)
 80020f8:	f002 fa6a 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80020fc:	f641 0305 	movw	r3, #6149	; 0x1805
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210e:	4619      	mov	r1, r3
 8002110:	4837      	ldr	r0, [pc, #220]	; (80021f0 <MX_GPIO_Init+0x304>)
 8002112:	f002 fa5d 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8002116:	f240 6302 	movw	r3, #1538	; 0x602
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	4619      	mov	r1, r3
 800212e:	4830      	ldr	r0, [pc, #192]	; (80021f0 <MX_GPIO_Init+0x304>)
 8002130:	f002 fa4e 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002134:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213a:	2303      	movs	r3, #3
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	482a      	ldr	r0, [pc, #168]	; (80021f4 <MX_GPIO_Init+0x308>)
 800214a:	f002 fa41 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800214e:	f244 0384 	movw	r3, #16516	; 0x4084
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002154:	2301      	movs	r3, #1
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002164:	4619      	mov	r1, r3
 8002166:	4823      	ldr	r0, [pc, #140]	; (80021f4 <MX_GPIO_Init+0x308>)
 8002168:	f002 fa32 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 800216c:	f240 1343 	movw	r3, #323	; 0x143
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002172:	2303      	movs	r3, #3
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800217a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217e:	4619      	mov	r1, r3
 8002180:	481d      	ldr	r0, [pc, #116]	; (80021f8 <MX_GPIO_Init+0x30c>)
 8002182:	f002 fa25 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8002186:	f240 7304 	movw	r3, #1796	; 0x704
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218c:	2303      	movs	r3, #3
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002198:	4619      	mov	r1, r3
 800219a:	4818      	ldr	r0, [pc, #96]	; (80021fc <MX_GPIO_Init+0x310>)
 800219c:	f002 fa18 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 80021a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b2:	4619      	mov	r1, r3
 80021b4:	4811      	ldr	r0, [pc, #68]	; (80021fc <MX_GPIO_Init+0x310>)
 80021b6:	f002 fa0b 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80021ba:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4809      	ldr	r0, [pc, #36]	; (80021f8 <MX_GPIO_Init+0x30c>)
 80021d4:	f002 f9fc 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80021d8:	2318      	movs	r3, #24
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
 80021dc:	e010      	b.n	8002200 <MX_GPIO_Init+0x314>
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40021400 	.word	0x40021400
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40021800 	.word	0x40021800
 80021fc:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	4619      	mov	r1, r3
 8002212:	4803      	ldr	r0, [pc, #12]	; (8002220 <MX_GPIO_Init+0x334>)
 8002214:	f002 f9dc 	bl	80045d0 <HAL_GPIO_Init>

}
 8002218:	bf00      	nop
 800221a:	3738      	adds	r7, #56	; 0x38
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40020c00 	.word	0x40020c00

08002224 <calculateMovingAverage>:
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
 800222e:	460b      	mov	r3, r1
 8002230:	80bb      	strh	r3, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 8002236:	88ba      	ldrh	r2, [r7, #4]
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	1ad2      	subs	r2, r2, r3
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002242:	b29a      	uxth	r2, r3
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	4413      	add	r3, r2
 8002248:	b29b      	uxth	r3, r3
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	b0e2      	sub	sp, #392	; 0x188
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800225e:	f001 fa1a 	bl	8003696 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t data[36] = {0}, temp, CFG[6] = {0};
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002268:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800226c:	2220      	movs	r2, #32
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f006 fd69 	bl	8008d48 <memset>
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800227c:	2300      	movs	r3, #0
 800227e:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
  uint32_t tmp;
  uint16_t spannungen[12] = {0}, temperatur[2] = {0}, tmp_mean;
 8002282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]
 8002292:	615a      	str	r2, [r3, #20]
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	// Definiere Variablen fuer Main-Funktion
	uint16_t timerPeriod, count = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
	uint8_t start_flag = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80022a6:	4bbd      	ldr	r3, [pc, #756]	; (800259c <main+0x344>)
 80022a8:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 80022ac:	461d      	mov	r5, r3
 80022ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022b6:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 80022ba:	4bb9      	ldr	r3, [pc, #740]	; (80025a0 <main+0x348>)
 80022bc:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80022c0:	461d      	mov	r5, r3
 80022c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ca:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80022ce:	4bb5      	ldr	r3, [pc, #724]	; (80025a4 <main+0x34c>)
 80022d0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80022d4:	461d      	mov	r5, r3
 80022d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022de:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxVoltage11 = {BMS_CAN_ZELLEN11, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80022e2:	4bb1      	ldr	r3, [pc, #708]	; (80025a8 <main+0x350>)
 80022e4:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80022e8:	461d      	mov	r5, r3
 80022ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022f2:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxVoltage12 = {BMS_CAN_ZELLEN12, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80022f6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80022fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022fe:	4aab      	ldr	r2, [pc, #684]	; (80025ac <main+0x354>)
 8002300:	461c      	mov	r4, r3
 8002302:	4615      	mov	r5, r2
 8002304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002308:	e895 0003 	ldmia.w	r5, {r0, r1}
 800230c:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxVoltage13 = {BMS_CAN_ZELLEN13, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002310:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002314:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002318:	4aa5      	ldr	r2, [pc, #660]	; (80025b0 <main+0x358>)
 800231a:	461c      	mov	r4, r3
 800231c:	4615      	mov	r5, r2
 800231e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002322:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002326:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxTemperature11 = {BMS_CAN_TEMPERATUR11, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800232a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800232e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002332:	4aa0      	ldr	r2, [pc, #640]	; (80025b4 <main+0x35c>)
 8002334:	461c      	mov	r4, r3
 8002336:	4615      	mov	r5, r2
 8002338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800233a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800233c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002340:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxTemperature12 = {BMS_CAN_TEMPERATUR12, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002344:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002348:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800234c:	4a9a      	ldr	r2, [pc, #616]	; (80025b8 <main+0x360>)
 800234e:	461c      	mov	r4, r3
 8002350:	4615      	mov	r5, r2
 8002352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002356:	e895 0003 	ldmia.w	r5, {r0, r1}
 800235a:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxTemperature13 = {BMS_CAN_TEMPERATUR13, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800235e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002362:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002366:	4a95      	ldr	r2, [pc, #596]	; (80025bc <main+0x364>)
 8002368:	461c      	mov	r4, r3
 800236a:	4615      	mov	r5, r2
 800236c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800236e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002370:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002374:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxTemperature14 = {BMS_CAN_TEMPERATUR14, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002378:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800237c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002380:	4a8f      	ldr	r2, [pc, #572]	; (80025c0 <main+0x368>)
 8002382:	461c      	mov	r4, r3
 8002384:	4615      	mov	r5, r2
 8002386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800238a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800238e:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002392:	f000 fc4f 	bl	8002c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002396:	f7ff fda9 	bl	8001eec <MX_GPIO_Init>
  MX_CAN1_Init();
 800239a:	f7ff fcc5 	bl	8001d28 <MX_CAN1_Init>
  MX_SPI4_Init();
 800239e:	f000 fd6f 	bl	8002e80 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80023a2:	f001 f8c1 	bl	8003528 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80023a6:	f7ff fbe5 	bl	8001b74 <MX_ADC1_Init>
  MX_TIM1_Init();
 80023aa:	f000 feb9 	bl	8003120 <MX_TIM1_Init>
  MX_TIM4_Init();
 80023ae:	f000 ff3f 	bl	8003230 <MX_TIM4_Init>
  MX_SPI1_Init();
 80023b2:	f000 fd27 	bl	8002e04 <MX_SPI1_Init>
  MX_CAN3_Init();
 80023b6:	f7ff fced 	bl	8001d94 <MX_CAN3_Init>
  MX_TIM6_Init();
 80023ba:	f000 ffb5 	bl	8003328 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80023be:	f7ff f9ed 	bl	800179c <readResetSource>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fa3b 	bl	8001840 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80023ca:	213a      	movs	r1, #58	; 0x3a
 80023cc:	487d      	ldr	r0, [pc, #500]	; (80025c4 <main+0x36c>)
 80023ce:	f7fe f8bd 	bl	800054c <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80023d2:	f7ff f9b9 	bl	8001748 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 80023d6:	f7ff fb8f 	bl	8001af8 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 80023da:	f7ff fad1 	bl	8001980 <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023e4:	4878      	ldr	r0, [pc, #480]	; (80025c8 <main+0x370>)
 80023e6:	f002 fab7 	bl	8004958 <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 80023ea:	2014      	movs	r0, #20
 80023ec:	f001 f9b0 	bl	8003750 <HAL_Delay>

    uartTransmit("\n", 1);
 80023f0:	2101      	movs	r1, #1
 80023f2:	4876      	ldr	r0, [pc, #472]	; (80025cc <main+0x374>)
 80023f4:	f7fe f8aa 	bl	800054c <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 80023f8:	2122      	movs	r1, #34	; 0x22
 80023fa:	4875      	ldr	r0, [pc, #468]	; (80025d0 <main+0x378>)
 80023fc:	f7fe f8a6 	bl	800054c <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 8002400:	f7fe fba3 	bl	8000b4a <ltc6811_check>
 8002404:	4603      	mov	r3, r0
 8002406:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 800240a:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01f      	beq.n	8002452 <main+0x1fa>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 8002412:	211f      	movs	r1, #31
 8002414:	486f      	ldr	r0, [pc, #444]	; (80025d4 <main+0x37c>)
 8002416:	f7fe f899 	bl	800054c <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 800241a:	4a6f      	ldr	r2, [pc, #444]	; (80025d8 <main+0x380>)
 800241c:	7813      	ldrb	r3, [r2, #0]
 800241e:	f043 0320 	orr.w	r3, r3, #32
 8002422:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 8002424:	4b6c      	ldr	r3, [pc, #432]	; (80025d8 <main+0x380>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002434:	4869      	ldr	r0, [pc, #420]	; (80025dc <main+0x384>)
 8002436:	f002 fa8f 	bl	8004958 <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 800243a:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 800243e:	210a      	movs	r1, #10
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f897 	bl	8000574 <uartTransmitNumber>
		uartTransmit("\n", 1);
 8002446:	2101      	movs	r1, #1
 8002448:	4860      	ldr	r0, [pc, #384]	; (80025cc <main+0x374>)
 800244a:	f7fe f87f 	bl	800054c <uartTransmit>

		return 0;														// Programm abbrechen
 800244e:	2300      	movs	r3, #0
 8002450:	e3d5      	b.n	8002bfe <main+0x9a6>
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 8002452:	2120      	movs	r1, #32
 8002454:	4862      	ldr	r0, [pc, #392]	; (80025e0 <main+0x388>)
 8002456:	f7fe f879 	bl	800054c <uartTransmit>
	}

    // LTC6811 initialisieren
	CFG[0] = 0xF8;
 800245a:	23f8      	movs	r3, #248	; 0xf8
 800245c:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
	CFG[1] = 0xCF;
 8002460:	23cf      	movs	r3, #207	; 0xcf
 8002462:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
	CFG[2] = 0x17;
 8002466:	2317      	movs	r3, #23
 8002468:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
	CFG[3] = 0xA4;
 800246c:	23a4      	movs	r3, #164	; 0xa4
 800246e:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	CFG[4] = 0x00;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
	CFG[5] = 0x00;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
	ltc6811_write(WRCFG, &CFG[0]);
 800247e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002482:	4619      	mov	r1, r3
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe fa4a 	bl	800091e <ltc6811_write>
		uartTransmitNumber(data[10+i], 10);
	}
	uartTransmit(";", 1);*/

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 800248a:	f240 7011 	movw	r0, #1809	; 0x711
 800248e:	f7fe fa1c 	bl	80008ca <ltc6811>
	ltc6811(CLRSTAT);
 8002492:	f240 7013 	movw	r0, #1811	; 0x713
 8002496:	f7fe fa18 	bl	80008ca <ltc6811>
	ltc6811(CLRAUX);
 800249a:	f240 7012 	movw	r0, #1810	; 0x712
 800249e:	f7fe fa14 	bl	80008ca <ltc6811>

	// Erster ADC Vorgang ist ungueltig
	ltc6811(ADCVAX | MD73 | CELLALL);									// Initial Command Zellen auslesen
 80024a2:	f240 506f 	movw	r0, #1391	; 0x56f
 80024a6:	f7fe fa10 	bl	80008ca <ltc6811>

	tmp_mean = 65535;
 80024aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ae:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
	timerPeriod = (HAL_RCC_GetPCLK2Freq() / htim1.Init.Prescaler);
 80024b2:	f002 ff3b 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <main+0x38c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 80024c4:	4847      	ldr	r0, [pc, #284]	; (80025e4 <main+0x38c>)
 80024c6:	f004 fb25 	bl	8006b14 <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 80024ca:	2100      	movs	r1, #0
 80024cc:	4845      	ldr	r0, [pc, #276]	; (80025e4 <main+0x38c>)
 80024ce:	f004 fc47 	bl	8006d60 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 80024d2:	2104      	movs	r1, #4
 80024d4:	4843      	ldr	r0, [pc, #268]	; (80025e4 <main+0x38c>)
 80024d6:	f004 fc43 	bl	8006d60 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim6);
 80024da:	4843      	ldr	r0, [pc, #268]	; (80025e8 <main+0x390>)
 80024dc:	f004 fb1a 	bl	8006b14 <HAL_TIM_Base_Start_IT>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 80024e0:	4842      	ldr	r0, [pc, #264]	; (80025ec <main+0x394>)
 80024e2:	f001 fe1d 	bl	8004120 <HAL_CAN_Start>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 80024ec:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <main+0x2aa>
  	{
  		/* Start Error */
  		hal_error(status);
 80024f4:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fa11 	bl	8001920 <hal_error>
  		Error_Handler();
 80024fe:	f000 fc53 	bl	8002da8 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8002502:	210a      	movs	r1, #10
 8002504:	483a      	ldr	r0, [pc, #232]	; (80025f0 <main+0x398>)
 8002506:	f7fe f821 	bl	800054c <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 800250a:	2102      	movs	r1, #2
 800250c:	4837      	ldr	r0, [pc, #220]	; (80025ec <main+0x394>)
 800250e:	f001 ff26 	bl	800435e <HAL_CAN_ActivateNotification>
 8002512:	4603      	mov	r3, r0
 8002514:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8002518:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <main+0x2d6>
  	{
  		/* Notification Error */
  		hal_error(status);
 8002520:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff f9fb 	bl	8001920 <hal_error>
  		Error_Handler();
 800252a:	f000 fc3d 	bl	8002da8 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 800252e:	210d      	movs	r1, #13
 8002530:	4830      	ldr	r0, [pc, #192]	; (80025f4 <main+0x39c>)
 8002532:	f7fe f80b 	bl	800054c <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002542:	2301      	movs	r3, #1
 8002544:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    sFilterConfig.FilterIdHigh = 0x0000;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    sFilterConfig.FilterIdLow = 0x0000;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    sFilterConfig.FilterFIFOAssignment = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    sFilterConfig.FilterActivation = ENABLE;
 8002566:	2301      	movs	r3, #1
 8002568:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 800256c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002570:	4619      	mov	r1, r3
 8002572:	481e      	ldr	r0, [pc, #120]	; (80025ec <main+0x394>)
 8002574:	f001 fce8 	bl	8003f48 <HAL_CAN_ConfigFilter>
 8002578:	4603      	mov	r3, r0
 800257a:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 800257e:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <main+0x33c>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8002586:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f9c8 	bl	8001920 <hal_error>
  		Error_Handler();
 8002590:	f000 fc0a 	bl	8002da8 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 8002594:	2300      	movs	r3, #0
 8002596:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800259a:	e03d      	b.n	8002618 <main+0x3c0>
 800259c:	08009328 	.word	0x08009328
 80025a0:	08009340 	.word	0x08009340
 80025a4:	08009358 	.word	0x08009358
 80025a8:	08009370 	.word	0x08009370
 80025ac:	08009388 	.word	0x08009388
 80025b0:	080093a0 	.word	0x080093a0
 80025b4:	080093b8 	.word	0x080093b8
 80025b8:	080093d0 	.word	0x080093d0
 80025bc:	080093e8 	.word	0x080093e8
 80025c0:	08009400 	.word	0x08009400
 80025c4:	08009184 	.word	0x08009184
 80025c8:	40021000 	.word	0x40021000
 80025cc:	080091c0 	.word	0x080091c0
 80025d0:	080091c4 	.word	0x080091c4
 80025d4:	080091e8 	.word	0x080091e8
 80025d8:	2000004c 	.word	0x2000004c
 80025dc:	40020400 	.word	0x40020400
 80025e0:	08009208 	.word	0x08009208
 80025e4:	200001bc 	.word	0x200001bc
 80025e8:	20000254 	.word	0x20000254
 80025ec:	200000c4 	.word	0x200000c4
 80025f0:	08009228 	.word	0x08009228
 80025f4:	08009234 	.word	0x08009234
    {
    	TxData[j] = (j + 1);
 80025f8:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80025fc:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8002600:	3201      	adds	r2, #1
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002608:	443b      	add	r3, r7
 800260a:	f803 2c64 	strb.w	r2, [r3, #-100]
    for (uint8_t j = 0; j < 8; j++)
 800260e:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8002612:	3301      	adds	r3, #1
 8002614:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8002618:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800261c:	2b07      	cmp	r3, #7
 800261e:	d9eb      	bls.n	80025f8 <main+0x3a0>
    }

	if (!(sdc_in.sdcinput && 0b00001111))										// SDC OK; Motor, BTB, IMD und HVIL OK
 8002620:	4bc0      	ldr	r3, [pc, #768]	; (8002924 <main+0x6cc>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d15e      	bne.n	80026e6 <main+0x48e>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 8002628:	211b      	movs	r1, #27
 800262a:	48bf      	ldr	r0, [pc, #764]	; (8002928 <main+0x6d0>)
 800262c:	f7fd ff8e 	bl	800054c <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 8002630:	4abe      	ldr	r2, [pc, #760]	; (800292c <main+0x6d4>)
 8002632:	7813      	ldrb	r3, [r2, #0]
 8002634:	f36f 1386 	bfc	r3, #6, #1
 8002638:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 800263a:	4abc      	ldr	r2, [pc, #752]	; (800292c <main+0x6d4>)
 800263c:	7813      	ldrb	r3, [r2, #0]
 800263e:	f043 0320 	orr.w	r3, r3, #32
 8002642:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuErrorLed = 0;
 8002644:	4ab9      	ldr	r2, [pc, #740]	; (800292c <main+0x6d4>)
 8002646:	7813      	ldrb	r3, [r2, #0]
 8002648:	f36f 0382 	bfc	r3, #2, #1
 800264c:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 800264e:	4bb7      	ldr	r3, [pc, #732]	; (800292c <main+0x6d4>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	2104      	movs	r1, #4
 800265c:	48b4      	ldr	r0, [pc, #720]	; (8002930 <main+0x6d8>)
 800265e:	f002 f97b 	bl	8004958 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 8002662:	4bb2      	ldr	r3, [pc, #712]	; (800292c <main+0x6d4>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002672:	48af      	ldr	r0, [pc, #700]	; (8002930 <main+0x6d8>)
 8002674:	f002 f970 	bl	8004958 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);
 8002678:	4bac      	ldr	r3, [pc, #688]	; (800292c <main+0x6d4>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	48ab      	ldr	r0, [pc, #684]	; (8002934 <main+0x6dc>)
 8002688:	f002 f966 	bl	8004958 <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if(!(sdc_in.MotorSDC == 1))
 800268c:	4ba5      	ldr	r3, [pc, #660]	; (8002924 <main+0x6cc>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <main+0x44a>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 800269a:	212a      	movs	r1, #42	; 0x2a
 800269c:	48a6      	ldr	r0, [pc, #664]	; (8002938 <main+0x6e0>)
 800269e:	f7fd ff55 	bl	800054c <uartTransmit>
		}

		// BamoCar Fehler
		if (!(sdc_in.BTB_SDC == 1))
 80026a2:	4ba0      	ldr	r3, [pc, #640]	; (8002924 <main+0x6cc>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <main+0x460>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 80026b0:	2128      	movs	r1, #40	; 0x28
 80026b2:	48a2      	ldr	r0, [pc, #648]	; (800293c <main+0x6e4>)
 80026b4:	f7fd ff4a 	bl	800054c <uartTransmit>
		}

		// HVIL Fehler
		if (!(sdc_in.HVIL == 1))
 80026b8:	4b9a      	ldr	r3, [pc, #616]	; (8002924 <main+0x6cc>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <main+0x476>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 80026c6:	2120      	movs	r1, #32
 80026c8:	489d      	ldr	r0, [pc, #628]	; (8002940 <main+0x6e8>)
 80026ca:	f7fd ff3f 	bl	800054c <uartTransmit>
		}

		// IMD Fehler
		if (!(sdc_in.IMD_OK_IN == 1))
 80026ce:	4b95      	ldr	r3, [pc, #596]	; (8002924 <main+0x6cc>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d126      	bne.n	800272a <main+0x4d2>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 80026dc:	211a      	movs	r1, #26
 80026de:	4899      	ldr	r0, [pc, #612]	; (8002944 <main+0x6ec>)
 80026e0:	f7fd ff34 	bl	800054c <uartTransmit>
 80026e4:	e021      	b.n	800272a <main+0x4d2>
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 80026e6:	4a98      	ldr	r2, [pc, #608]	; (8002948 <main+0x6f0>)
 80026e8:	7813      	ldrb	r3, [r2, #0]
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 80026f0:	4b95      	ldr	r3, [pc, #596]	; (8002948 <main+0x6f0>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	4893      	ldr	r0, [pc, #588]	; (800294c <main+0x6f4>)
 8002700:	f002 f92a 	bl	8004958 <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 8002704:	4a89      	ldr	r2, [pc, #548]	; (800292c <main+0x6d4>)
 8002706:	7813      	ldrb	r3, [r2, #0]
 8002708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800270c:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 800270e:	4b87      	ldr	r3, [pc, #540]	; (800292c <main+0x6d4>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	2104      	movs	r1, #4
 800271c:	4884      	ldr	r0, [pc, #528]	; (8002930 <main+0x6d8>)
 800271e:	f002 f91b 	bl	8004958 <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 8002722:	2115      	movs	r1, #21
 8002724:	488a      	ldr	r0, [pc, #552]	; (8002950 <main+0x6f8>)
 8002726:	f7fd ff11 	bl	800054c <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 800272a:	4b8a      	ldr	r3, [pc, #552]	; (8002954 <main+0x6fc>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10a      	bne.n	800274a <main+0x4f2>
		{
			count++;													// Zaehler count hochzaehlen
 8002734:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8002738:	3301      	adds	r3, #1
 800273a:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 800273e:	4b85      	ldr	r3, [pc, #532]	; (8002954 <main+0x6fc>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]

			// Setzen des Start Flags, damit Tasks nur einmal pro ms aufgerufen werden kann
			start_flag = 1;												// Setze Start Flag
 8002744:	2301      	movs	r3, #1
 8002746:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (start_flag == 1))
 800274a:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800274e:	4a82      	ldr	r2, [pc, #520]	; (8002958 <main+0x700>)
 8002750:	fba2 1203 	umull	r1, r2, r2, r3
 8002754:	0992      	lsrs	r2, r2, #6
 8002756:	21c8      	movs	r1, #200	; 0xc8
 8002758:	fb01 f202 	mul.w	r2, r1, r2
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 815d 	bne.w	8002a20 <main+0x7c8>
 8002766:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800276a:	2b01      	cmp	r3, #1
 800276c:	f040 8158 	bne.w	8002a20 <main+0x7c8>
		{
			ltc6811(ADCVC | MD73 | CELLALL);
 8002770:	f44f 7058 	mov.w	r0, #864	; 0x360
 8002774:	f7fe f8a9 	bl	80008ca <ltc6811>
			HAL_Delay(10);
 8002778:	200a      	movs	r0, #10
 800277a:	f000 ffe9 	bl	8003750 <HAL_Delay>
			ltc6811_read(RDCVA, &data[0]);
 800277e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002782:	4619      	mov	r1, r3
 8002784:	2004      	movs	r0, #4
 8002786:	f7fe f934 	bl	80009f2 <ltc6811_read>
			ltc6811_read(RDCVB, &data[6]);
 800278a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800278e:	3306      	adds	r3, #6
 8002790:	4619      	mov	r1, r3
 8002792:	2006      	movs	r0, #6
 8002794:	f7fe f92d 	bl	80009f2 <ltc6811_read>
			ltc6811_read(RDCVC, &data[12]);
 8002798:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800279c:	330c      	adds	r3, #12
 800279e:	4619      	mov	r1, r3
 80027a0:	2008      	movs	r0, #8
 80027a2:	f7fe f926 	bl	80009f2 <ltc6811_read>
			ltc6811_read(RDCVD, &data[18]);
 80027a6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80027aa:	3312      	adds	r3, #18
 80027ac:	4619      	mov	r1, r3
 80027ae:	200a      	movs	r0, #10
 80027b0:	f7fe f91f 	bl	80009f2 <ltc6811_read>

			uartTransmit("Spannungen\n", 11);
 80027b4:	210b      	movs	r1, #11
 80027b6:	4869      	ldr	r0, [pc, #420]	; (800295c <main+0x704>)
 80027b8:	f7fd fec8 	bl	800054c <uartTransmit>

			for (uint8_t i = 0; i < 12; i++)
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80027c2:	e023      	b.n	800280c <main+0x5b4>
			{
				spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 80027c4:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	3301      	adds	r3, #1
 80027cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027d0:	443b      	add	r3, r7
 80027d2:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	b21a      	sxth	r2, r3
 80027da:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027e4:	443b      	add	r3, r7
 80027e6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80027f4:	b292      	uxth	r2, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027fc:	443b      	add	r3, r7
 80027fe:	f823 2c58 	strh.w	r2, [r3, #-88]
			for (uint8_t i = 0; i < 12; i++)
 8002802:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8002806:	3301      	adds	r3, #1
 8002808:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800280c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8002810:	2b0b      	cmp	r3, #11
 8002812:	d9d7      	bls.n	80027c4 <main+0x56c>
			}

			for (uint8_t i = 0; i < 12; i++)
 8002814:	2300      	movs	r3, #0
 8002816:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800281a:	e014      	b.n	8002846 <main+0x5ee>
			{
				uartTransmitNumber(spannungen[i], 10);
 800281c:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002826:	443b      	add	r3, r7
 8002828:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 800282c:	210a      	movs	r1, #10
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fea0 	bl	8000574 <uartTransmitNumber>
				uartTransmit(";", 1);
 8002834:	2101      	movs	r1, #1
 8002836:	484a      	ldr	r0, [pc, #296]	; (8002960 <main+0x708>)
 8002838:	f7fd fe88 	bl	800054c <uartTransmit>
			for (uint8_t i = 0; i < 12; i++)
 800283c:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8002840:	3301      	adds	r3, #1
 8002842:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8002846:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800284a:	2b0b      	cmp	r3, #11
 800284c:	d9e6      	bls.n	800281c <main+0x5c4>
			}

			tmp = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
			for (uint8_t i = 0; i < 12; i++)
 8002854:	2300      	movs	r3, #0
 8002856:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 800285a:	e012      	b.n	8002882 <main+0x62a>
			{
				tmp += spannungen[i];
 800285c:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002866:	443b      	add	r3, r7
 8002868:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 800286c:	461a      	mov	r2, r3
 800286e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002872:	4413      	add	r3, r2
 8002874:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
			for (uint8_t i = 0; i < 12; i++)
 8002878:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 800287c:	3301      	adds	r3, #1
 800287e:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8002882:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8002886:	2b0b      	cmp	r3, #11
 8002888:	d9e8      	bls.n	800285c <main+0x604>
			}
			tmp /= 12;
 800288a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800288e:	4a35      	ldr	r2, [pc, #212]	; (8002964 <main+0x70c>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
			uartTransmitNumber(tmp, 10);
 800289a:	210a      	movs	r1, #10
 800289c:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 80028a0:	f7fd fe68 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 80028a4:	2101      	movs	r1, #1
 80028a6:	482e      	ldr	r0, [pc, #184]	; (8002960 <main+0x708>)
 80028a8:	f7fd fe50 	bl	800054c <uartTransmit>

			tmp_mean = calculateMovingAverage(tmp_mean, tmp, 10);
 80028ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80028b0:	b299      	uxth	r1, r3
 80028b2:	f8b7 3182 	ldrh.w	r3, [r7, #386]	; 0x182
 80028b6:	220a      	movs	r2, #10
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fcb3 	bl	8002224 <calculateMovingAverage>
 80028be:	4603      	mov	r3, r0
 80028c0:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
			uartTransmitNumber(tmp_mean, 10);
 80028c4:	f8b7 3182 	ldrh.w	r3, [r7, #386]	; 0x182
 80028c8:	210a      	movs	r1, #10
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe52 	bl	8000574 <uartTransmitNumber>

			uartTransmit("\n", 1);
 80028d0:	2101      	movs	r1, #1
 80028d2:	4825      	ldr	r0, [pc, #148]	; (8002968 <main+0x710>)
 80028d4:	f7fd fe3a 	bl	800054c <uartTransmit>

			uartTransmit("Temperaturen\n", 13);
 80028d8:	210d      	movs	r1, #13
 80028da:	4824      	ldr	r0, [pc, #144]	; (800296c <main+0x714>)
 80028dc:	f7fd fe36 	bl	800054c <uartTransmit>

			for (uint8_t j = 0; j < 8; j++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 80028e6:	e092      	b.n	8002a0e <main+0x7b6>
			{
				ltc1380_write(LTC1380_MUX0, j);									// Multiplexer 0 einstellen
 80028e8:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 80028ec:	4619      	mov	r1, r3
 80028ee:	2090      	movs	r0, #144	; 0x90
 80028f0:	f7fd ff96 	bl	8000820 <ltc1380_write>
				ltc1380_write(LTC1380_MUX2, j);									// Multiplexer 1 einstellen
 80028f4:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 80028f8:	4619      	mov	r1, r3
 80028fa:	2094      	movs	r0, #148	; 0x94
 80028fc:	f7fd ff90 	bl	8000820 <ltc1380_write>
				ltc6811(ADAX | MD73 | GPIOALL);									// Initial Command Zellen auslesen
 8002900:	f44f 60ac 	mov.w	r0, #1376	; 0x560
 8002904:	f7fd ffe1 	bl	80008ca <ltc6811>
				HAL_Delay(10);
 8002908:	200a      	movs	r0, #10
 800290a:	f000 ff21 	bl	8003750 <HAL_Delay>
				ltc6811_read(RDAUXA, &data[0]);
 800290e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002912:	4619      	mov	r1, r3
 8002914:	200c      	movs	r0, #12
 8002916:	f7fe f86c 	bl	80009f2 <ltc6811_read>

				for (uint8_t i = 0; i < 3; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8002920:	e04a      	b.n	80029b8 <main+0x760>
 8002922:	bf00      	nop
 8002924:	2000003c 	.word	0x2000003c
 8002928:	08009244 	.word	0x08009244
 800292c:	2000004c 	.word	0x2000004c
 8002930:	40020400 	.word	0x40020400
 8002934:	40021800 	.word	0x40021800
 8002938:	08009260 	.word	0x08009260
 800293c:	0800928c 	.word	0x0800928c
 8002940:	080092b4 	.word	0x080092b4
 8002944:	080092d4 	.word	0x080092d4
 8002948:	20000044 	.word	0x20000044
 800294c:	40021000 	.word	0x40021000
 8002950:	080092f0 	.word	0x080092f0
 8002954:	200000f0 	.word	0x200000f0
 8002958:	51eb851f 	.word	0x51eb851f
 800295c:	08009308 	.word	0x08009308
 8002960:	08009314 	.word	0x08009314
 8002964:	aaaaaaab 	.word	0xaaaaaaab
 8002968:	080091c0 	.word	0x080091c0
 800296c:	08009318 	.word	0x08009318
				{
					temperatur[i] = ((data[i*2+1]<<8) | data[i*2]);
 8002970:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	3301      	adds	r3, #1
 8002978:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800297c:	443b      	add	r3, r7
 800297e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	b21a      	sxth	r2, r3
 8002986:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002990:	443b      	add	r3, r7
 8002992:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002996:	b21b      	sxth	r3, r3
 8002998:	4313      	orrs	r3, r2
 800299a:	b21a      	sxth	r2, r3
 800299c:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80029a0:	b292      	uxth	r2, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029a8:	443b      	add	r3, r7
 80029aa:	f823 2c5c 	strh.w	r2, [r3, #-92]
				for (uint8_t i = 0; i < 3; i++)
 80029ae:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80029b2:	3301      	adds	r3, #1
 80029b4:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 80029b8:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d9d7      	bls.n	8002970 <main+0x718>
				}
					uartTransmitNumber(temperatur[0], 10);
 80029c0:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80029c4:	210a      	movs	r1, #10
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fdd4 	bl	8000574 <uartTransmitNumber>
					uartTransmit(";", 1);
 80029cc:	2101      	movs	r1, #1
 80029ce:	488e      	ldr	r0, [pc, #568]	; (8002c08 <main+0x9b0>)
 80029d0:	f7fd fdbc 	bl	800054c <uartTransmit>
					uartTransmitNumber(temperatur[1], 10);
 80029d4:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80029d8:	210a      	movs	r1, #10
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdca 	bl	8000574 <uartTransmitNumber>
					uartTransmit(";", 1);
 80029e0:	2101      	movs	r1, #1
 80029e2:	4889      	ldr	r0, [pc, #548]	; (8002c08 <main+0x9b0>)
 80029e4:	f7fd fdb2 	bl	800054c <uartTransmit>

				if (j == 7)
 80029e8:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 80029ec:	2b07      	cmp	r3, #7
 80029ee:	d109      	bne.n	8002a04 <main+0x7ac>
				{
					uartTransmitNumber(temperatur[2], 10);
 80029f0:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80029f4:	210a      	movs	r1, #10
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fdbc 	bl	8000574 <uartTransmitNumber>
					uartTransmit(";", 1);
 80029fc:	2101      	movs	r1, #1
 80029fe:	4882      	ldr	r0, [pc, #520]	; (8002c08 <main+0x9b0>)
 8002a00:	f7fd fda4 	bl	800054c <uartTransmit>
			for (uint8_t j = 0; j < 8; j++)
 8002a04:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8002a0e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002a12:	2b07      	cmp	r3, #7
 8002a14:	f67f af68 	bls.w	80028e8 <main+0x690>
				}
			}

			uartTransmit("\n", 1);
 8002a18:	2101      	movs	r1, #1
 8002a1a:	487c      	ldr	r0, [pc, #496]	; (8002c0c <main+0x9b4>)
 8002a1c:	f7fd fd96 	bl	800054c <uartTransmit>
		}

		// Task wird alle 250 Millisekunden ausgefuehrt
		if (((count % 250) == 0) && (start_flag == 1))
 8002a20:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8002a24:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <main+0x9b8>)
 8002a26:	fba2 1203 	umull	r1, r2, r2, r3
 8002a2a:	0912      	lsrs	r2, r2, #4
 8002a2c:	21fa      	movs	r1, #250	; 0xfa
 8002a2e:	fb01 f202 	mul.w	r2, r1, r2
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 80b7 	bne.w	8002baa <main+0x952>
 8002a3c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	f040 80b2 	bne.w	8002baa <main+0x952>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8002a46:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <main+0x9bc>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
			OutData[1] = highcurrent_out.high_out;
 8002a4e:	4b72      	ldr	r3, [pc, #456]	; (8002c18 <main+0x9c0>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
			OutData[2] = leuchten_out.ledoutput;
 8002a56:	4b71      	ldr	r3, [pc, #452]	; (8002c1c <main+0x9c4>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			OutData[3] = komfort_out.komfortoutput;
 8002a5e:	4b70      	ldr	r3, [pc, #448]	; (8002c20 <main+0x9c8>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8002a66:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002a6a:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002a6e:	2301      	movs	r3, #1
 8002a70:	486c      	ldr	r0, [pc, #432]	; (8002c24 <main+0x9cc>)
 8002a72:	f001 fb99 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002a7c:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe ff4d 	bl	8001920 <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8002a86:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <main+0x9d0>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			InData[1] = sdc_in.sdcinput;
 8002a8e:	4b67      	ldr	r3, [pc, #412]	; (8002c2c <main+0x9d4>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			InData[2] = komfort_in.komfortinput;
 8002a96:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <main+0x9d8>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8002a9e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002aa2:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	485e      	ldr	r0, [pc, #376]	; (8002c24 <main+0x9cc>)
 8002aaa:	f001 fb7d 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002ab4:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe ff31 	bl	8001920 <hal_error>
	
			// Sende Nachricht Dummy
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8002abe:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8002ac2:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	4856      	ldr	r0, [pc, #344]	; (8002c24 <main+0x9cc>)
 8002aca:	f001 fb6d 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002ad4:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe ff21 	bl	8001920 <hal_error>

			// Sende Nachricht Zellspannung 1 - 4
			status = HAL_CAN_AddTxMessage(&hcan3, &TxVoltage11, &data[0], (uint32_t *)CAN_TX_MAILBOX1);
 8002ade:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8002ae2:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	484e      	ldr	r0, [pc, #312]	; (8002c24 <main+0x9cc>)
 8002aea:	f001 fb5d 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002af4:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe ff11 	bl	8001920 <hal_error>

			// Sende Nachricht Zellspannung 5 - 8
			status = HAL_CAN_AddTxMessage(&hcan3, &TxVoltage12, &data[6], (uint32_t *)CAN_TX_MAILBOX2);
 8002afe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002b02:	1d9a      	adds	r2, r3, #6
 8002b04:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002b08:	2304      	movs	r3, #4
 8002b0a:	4846      	ldr	r0, [pc, #280]	; (8002c24 <main+0x9cc>)
 8002b0c:	f001 fb4c 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002b16:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe ff00 	bl	8001920 <hal_error>

			// Sende Nachricht Zellspannung 9 - 12
			status = HAL_CAN_AddTxMessage(&hcan3, &TxVoltage13, &data[12], (uint32_t *)CAN_TX_MAILBOX0);
 8002b20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002b24:	f103 020c 	add.w	r2, r3, #12
 8002b28:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	483d      	ldr	r0, [pc, #244]	; (8002c24 <main+0x9cc>)
 8002b30:	f001 fb3a 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002b3a:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe feee 	bl	8001920 <hal_error>

			// Sende Nachricht Zelltemperaturen 1 - 4
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperature11, &data[0], (uint32_t *)CAN_TX_MAILBOX1);
 8002b44:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8002b48:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	4835      	ldr	r0, [pc, #212]	; (8002c24 <main+0x9cc>)
 8002b50:	f001 fb2a 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002b5a:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fede 	bl	8001920 <hal_error>

			// Sende Nachricht Zelltemperaturen 5 - 8
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperature12, &data[6], (uint32_t *)CAN_TX_MAILBOX2);
 8002b64:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002b68:	1d9a      	adds	r2, r3, #6
 8002b6a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002b6e:	2304      	movs	r3, #4
 8002b70:	482c      	ldr	r0, [pc, #176]	; (8002c24 <main+0x9cc>)
 8002b72:	f001 fb19 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002b7c:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fecd 	bl	8001920 <hal_error>

			// Sende Nachricht Zelltemperaturen 9 - 12
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperature13, &data[12], (uint32_t *)CAN_TX_MAILBOX1);
 8002b86:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002b8a:	f103 020c 	add.w	r2, r3, #12
 8002b8e:	f107 011c 	add.w	r1, r7, #28
 8002b92:	2302      	movs	r3, #2
 8002b94:	4823      	ldr	r0, [pc, #140]	; (8002c24 <main+0x9cc>)
 8002b96:	f001 fb07 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002ba0:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe febb 	bl	8001920 <hal_error>
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (((count % 500) == 0) && (start_flag == 1))
 8002baa:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <main+0x9b8>)
 8002bb0:	fba2 1203 	umull	r1, r2, r2, r3
 8002bb4:	0952      	lsrs	r2, r2, #5
 8002bb6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bba:	fb01 f202 	mul.w	r2, r1, r2
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d117      	bne.n	8002bf6 <main+0x99e>
 8002bc6:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d113      	bne.n	8002bf6 <main+0x99e>
		{
			// Sende Nachricht Zelltemperaturen 13 - 16
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperature14, &data[18], (uint32_t *)CAN_TX_MAILBOX2);
 8002bce:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002bd2:	f103 0212 	add.w	r2, r3, #18
 8002bd6:	1d39      	adds	r1, r7, #4
 8002bd8:	2304      	movs	r3, #4
 8002bda:	4812      	ldr	r0, [pc, #72]	; (8002c24 <main+0x9cc>)
 8002bdc:	f001 fae4 	bl	80041a8 <HAL_CAN_AddTxMessage>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
			hal_error(status);
 8002be6:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fe98 	bl	8001920 <hal_error>

			count = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
		}

		// Zuruecksetzen des Start Flags, damit Tasks erst nach einer ms wieder aufgerufen werden kann
		start_flag = 0;																		// Zuruecksetzen Start Flag
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		if (millisekunden_flag_1 == 1)
 8002bfc:	e595      	b.n	800272a <main+0x4d2>
  }
  /* USER CODE END 3 */
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bdb0      	pop	{r4, r5, r7, pc}
 8002c08:	08009314 	.word	0x08009314
 8002c0c:	080091c0 	.word	0x080091c0
 8002c10:	10624dd3 	.word	0x10624dd3
 8002c14:	20000044 	.word	0x20000044
 8002c18:	20000048 	.word	0x20000048
 8002c1c:	2000004c 	.word	0x2000004c
 8002c20:	20000050 	.word	0x20000050
 8002c24:	200000c4 	.word	0x200000c4
 8002c28:	20000038 	.word	0x20000038
 8002c2c:	2000003c 	.word	0x2000003c
 8002c30:	20000040 	.word	0x20000040

08002c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b094      	sub	sp, #80	; 0x50
 8002c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	2234      	movs	r2, #52	; 0x34
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f006 f880 	bl	8008d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c48:	f107 0308 	add.w	r3, r7, #8
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <SystemClock_Config+0xd8>)
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	4a2b      	ldr	r2, [pc, #172]	; (8002d0c <SystemClock_Config+0xd8>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c62:	6413      	str	r3, [r2, #64]	; 0x40
 8002c64:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <SystemClock_Config+0xd8>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <SystemClock_Config+0xdc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <SystemClock_Config+0xdc>)
 8002c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <SystemClock_Config+0xdc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c92:	2302      	movs	r3, #2
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002c9c:	2319      	movs	r3, #25
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002ca0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002ca4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002caa:	2308      	movs	r3, #8
 8002cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 feb8 	bl	8004a2c <HAL_RCC_OscConfig>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002cc2:	f000 f871 	bl	8002da8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002cc6:	f001 fe61 	bl	800498c <HAL_PWREx_EnableOverDrive>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002cd0:	f000 f86a 	bl	8002da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd4:	230f      	movs	r3, #15
 8002cd6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ce0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ce4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	2107      	movs	r1, #7
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 f948 	bl	8004f88 <HAL_RCC_ClockConfig>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002cfe:	f000 f853 	bl	8002da8 <Error_Handler>
  }
}
 8002d02:	bf00      	nop
 8002d04:	3750      	adds	r7, #80	; 0x50
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40007000 	.word	0x40007000

08002d14 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d102      	bne.n	8002d2a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d12c      	bne.n	8002d8c <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7f1b      	ldrb	r3, [r3, #28]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d112      	bne.n	8002d60 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29c      	uxth	r4, r3
 8002d40:	2100      	movs	r1, #0
 8002d42:	4816      	ldr	r0, [pc, #88]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002d44:	f004 fc6e 	bl	8007624 <HAL_TIM_ReadCapturedValue>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2240      	movs	r2, #64	; 0x40
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4620      	mov	r0, r4
 8002d52:	f7ff fa67 	bl	8002224 <calculateMovingAverage>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002d5c:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 8002d5e:	e015      	b.n	8002d8c <HAL_TIM_PeriodElapsedCallback+0x78>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7f1b      	ldrb	r3, [r3, #28]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d111      	bne.n	8002d8c <HAL_TIM_PeriodElapsedCallback+0x78>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29c      	uxth	r4, r3
 8002d6e:	2104      	movs	r1, #4
 8002d70:	480a      	ldr	r0, [pc, #40]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002d72:	f004 fc57 	bl	8007624 <HAL_TIM_ReadCapturedValue>
 8002d76:	4603      	mov	r3, r0
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f7ff fa50 	bl	8002224 <calculateMovingAverage>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002d8a:	801a      	strh	r2, [r3, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	20000254 	.word	0x20000254
 8002d98:	200000f0 	.word	0x200000f0
 8002d9c:	200001bc 	.word	0x200001bc
 8002da0:	200000ec 	.word	0x200000ec
 8002da4:	200000ee 	.word	0x200000ee

08002da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dac:	b672      	cpsid	i
}
 8002dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002db0:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <Error_Handler+0x50>)
 8002db2:	7813      	ldrb	r3, [r2, #0]
 8002db4:	f043 0320 	orr.w	r3, r3, #32
 8002db8:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <Error_Handler+0x50>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dca:	480c      	ldr	r0, [pc, #48]	; (8002dfc <Error_Handler+0x54>)
 8002dcc:	f001 fdc4 	bl	8004958 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002dd0:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <Error_Handler+0x50>)
 8002dd2:	7813      	ldrb	r3, [r2, #0]
 8002dd4:	f36f 1386 	bfc	r3, #6, #1
 8002dd8:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <Error_Handler+0x50>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	2104      	movs	r1, #4
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <Error_Handler+0x54>)
 8002dea:	f001 fdb5 	bl	8004958 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002dee:	2122      	movs	r1, #34	; 0x22
 8002df0:	4803      	ldr	r0, [pc, #12]	; (8002e00 <Error_Handler+0x58>)
 8002df2:	f7fd fbab 	bl	800054c <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 8002df6:	e7fe      	b.n	8002df6 <Error_Handler+0x4e>
 8002df8:	2000004c 	.word	0x2000004c
 8002dfc:	40020400 	.word	0x40020400
 8002e00:	08009418 	.word	0x08009418

08002e04 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <MX_SPI1_Init+0x78>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e16:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002e36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e52:	2207      	movs	r2, #7
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e5e:	2208      	movs	r2, #8
 8002e60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e62:	4805      	ldr	r0, [pc, #20]	; (8002e78 <MX_SPI1_Init+0x74>)
 8002e64:	f002 fe9e 	bl	8005ba4 <HAL_SPI_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002e6e:	f7ff ff9b 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200000f4 	.word	0x200000f4
 8002e7c:	40013000 	.word	0x40013000

08002e80 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002e86:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <MX_SPI4_Init+0x78>)
 8002e88:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e90:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002e9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e9e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002eb6:	2230      	movs	r2, #48	; 0x30
 8002eb8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002ece:	2207      	movs	r2, #7
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002ede:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <MX_SPI4_Init+0x74>)
 8002ee0:	f002 fe60 	bl	8005ba4 <HAL_SPI_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002eea:	f7ff ff5d 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000158 	.word	0x20000158
 8002ef8:	40013400 	.word	0x40013400

08002efc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	; 0x30
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a3d      	ldr	r2, [pc, #244]	; (8003010 <HAL_SPI_MspInit+0x114>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d145      	bne.n	8002faa <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a3c      	ldr	r2, [pc, #240]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002f24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f36:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a36      	ldr	r2, [pc, #216]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a30      	ldr	r2, [pc, #192]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f72:	2303      	movs	r3, #3
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f76:	2305      	movs	r3, #5
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4825      	ldr	r0, [pc, #148]	; (8003018 <HAL_SPI_MspInit+0x11c>)
 8002f82:	f001 fb25 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8002f86:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f98:	2305      	movs	r3, #5
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f9c:	f107 031c 	add.w	r3, r7, #28
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	481e      	ldr	r0, [pc, #120]	; (800301c <HAL_SPI_MspInit+0x120>)
 8002fa4:	f001 fb14 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002fa8:	e02d      	b.n	8003006 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_SPI_MspInit+0x124>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d128      	bne.n	8003006 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002fba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	4a10      	ldr	r2, [pc, #64]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002fd2:	f043 0310 	orr.w	r3, r3, #16
 8002fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_SPI_MspInit+0x118>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8002fe4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002ff6:	2305      	movs	r3, #5
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ffa:	f107 031c 	add.w	r3, r7, #28
 8002ffe:	4619      	mov	r1, r3
 8003000:	4808      	ldr	r0, [pc, #32]	; (8003024 <HAL_SPI_MspInit+0x128>)
 8003002:	f001 fae5 	bl	80045d0 <HAL_GPIO_Init>
}
 8003006:	bf00      	nop
 8003008:	3730      	adds	r7, #48	; 0x30
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40013000 	.word	0x40013000
 8003014:	40023800 	.word	0x40023800
 8003018:	40020c00 	.word	0x40020c00
 800301c:	40021800 	.word	0x40021800
 8003020:	40013400 	.word	0x40013400
 8003024:	40021000 	.word	0x40021000

08003028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_MspInit+0x44>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	4a0e      	ldr	r2, [pc, #56]	; (800306c <HAL_MspInit+0x44>)
 8003034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003038:	6413      	str	r3, [r2, #64]	; 0x40
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_MspInit+0x44>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_MspInit+0x44>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	4a08      	ldr	r2, [pc, #32]	; (800306c <HAL_MspInit+0x44>)
 800304c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003050:	6453      	str	r3, [r2, #68]	; 0x44
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_MspInit+0x44>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003082:	e7fe      	b.n	8003082 <HardFault_Handler+0x4>

08003084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003088:	e7fe      	b.n	8003088 <MemManage_Handler+0x4>

0800308a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308e:	e7fe      	b.n	800308e <BusFault_Handler+0x4>

08003090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003094:	e7fe      	b.n	8003094 <UsageFault_Handler+0x4>

08003096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c4:	f000 fb24 	bl	8003710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}

080030cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <TIM1_CC_IRQHandler+0x10>)
 80030d2:	f003 ff95 	bl	8007000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200001bc 	.word	0x200001bc

080030e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <TIM6_DAC_IRQHandler+0x10>)
 80030e6:	f003 ff8b 	bl	8007000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000254 	.word	0x20000254

080030f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <SystemInit+0x28>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	4a07      	ldr	r2, [pc, #28]	; (800311c <SystemInit+0x28>)
 8003100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <SystemInit+0x28>)
 800310a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800310e:	609a      	str	r2, [r3, #8]
#endif
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	; 0x30
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	60da      	str	r2, [r3, #12]
 8003134:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003144:	463b      	mov	r3, r7
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800314e:	4b36      	ldr	r3, [pc, #216]	; (8003228 <MX_TIM1_Init+0x108>)
 8003150:	4a36      	ldr	r2, [pc, #216]	; (800322c <MX_TIM1_Init+0x10c>)
 8003152:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 8003154:	4b34      	ldr	r3, [pc, #208]	; (8003228 <MX_TIM1_Init+0x108>)
 8003156:	f240 22a2 	movw	r2, #674	; 0x2a2
 800315a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315c:	4b32      	ldr	r3, [pc, #200]	; (8003228 <MX_TIM1_Init+0x108>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <MX_TIM1_Init+0x108>)
 8003164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003168:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800316a:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <MX_TIM1_Init+0x108>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <MX_TIM1_Init+0x108>)
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003176:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <MX_TIM1_Init+0x108>)
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800317c:	482a      	ldr	r0, [pc, #168]	; (8003228 <MX_TIM1_Init+0x108>)
 800317e:	f003 fd98 	bl	8006cb2 <HAL_TIM_IC_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003188:	f7ff fe0e 	bl	8002da8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800318c:	2304      	movs	r3, #4
 800318e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003190:	2350      	movs	r3, #80	; 0x50
 8003192:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003198:	2300      	movs	r3, #0
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80031a0:	f107 031c 	add.w	r3, r7, #28
 80031a4:	4619      	mov	r1, r3
 80031a6:	4820      	ldr	r0, [pc, #128]	; (8003228 <MX_TIM1_Init+0x108>)
 80031a8:	f004 f9fa 	bl	80075a0 <HAL_TIM_SlaveConfigSynchro>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80031b2:	f7ff fdf9 	bl	8002da8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031ba:	2301      	movs	r3, #1
 80031bc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	2200      	movs	r2, #0
 80031cc:	4619      	mov	r1, r3
 80031ce:	4816      	ldr	r0, [pc, #88]	; (8003228 <MX_TIM1_Init+0x108>)
 80031d0:	f004 f835 	bl	800723e <HAL_TIM_IC_ConfigChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80031da:	f7ff fde5 	bl	8002da8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80031de:	2302      	movs	r3, #2
 80031e0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80031e2:	2302      	movs	r3, #2
 80031e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80031e6:	f107 030c 	add.w	r3, r7, #12
 80031ea:	2204      	movs	r2, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	480e      	ldr	r0, [pc, #56]	; (8003228 <MX_TIM1_Init+0x108>)
 80031f0:	f004 f825 	bl	800723e <HAL_TIM_IC_ConfigChannel>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80031fa:	f7ff fdd5 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800320a:	463b      	mov	r3, r7
 800320c:	4619      	mov	r1, r3
 800320e:	4806      	ldr	r0, [pc, #24]	; (8003228 <MX_TIM1_Init+0x108>)
 8003210:	f004 ffd4 	bl	80081bc <HAL_TIMEx_MasterConfigSynchronization>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800321a:	f7ff fdc5 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	3730      	adds	r7, #48	; 0x30
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200001bc 	.word	0x200001bc
 800322c:	40010000 	.word	0x40010000

08003230 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003242:	463b      	mov	r3, r7
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
 8003250:	615a      	str	r2, [r3, #20]
 8003252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <MX_TIM4_Init+0xf0>)
 8003256:	4a33      	ldr	r2, [pc, #204]	; (8003324 <MX_TIM4_Init+0xf4>)
 8003258:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <MX_TIM4_Init+0xf0>)
 800325c:	2200      	movs	r2, #0
 800325e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003260:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <MX_TIM4_Init+0xf0>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <MX_TIM4_Init+0xf0>)
 8003268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800326c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800326e:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <MX_TIM4_Init+0xf0>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <MX_TIM4_Init+0xf0>)
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800327a:	4829      	ldr	r0, [pc, #164]	; (8003320 <MX_TIM4_Init+0xf0>)
 800327c:	f003 fcc2 	bl	8006c04 <HAL_TIM_PWM_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003286:	f7ff fd8f 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	4619      	mov	r1, r3
 8003298:	4821      	ldr	r0, [pc, #132]	; (8003320 <MX_TIM4_Init+0xf0>)
 800329a:	f004 ff8f 	bl	80081bc <HAL_TIMEx_MasterConfigSynchronization>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80032a4:	f7ff fd80 	bl	8002da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032a8:	2360      	movs	r3, #96	; 0x60
 80032aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032b8:	463b      	mov	r3, r7
 80032ba:	2200      	movs	r2, #0
 80032bc:	4619      	mov	r1, r3
 80032be:	4818      	ldr	r0, [pc, #96]	; (8003320 <MX_TIM4_Init+0xf0>)
 80032c0:	f004 f85a 	bl	8007378 <HAL_TIM_PWM_ConfigChannel>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80032ca:	f7ff fd6d 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032ce:	463b      	mov	r3, r7
 80032d0:	2204      	movs	r2, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	4812      	ldr	r0, [pc, #72]	; (8003320 <MX_TIM4_Init+0xf0>)
 80032d6:	f004 f84f 	bl	8007378 <HAL_TIM_PWM_ConfigChannel>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80032e0:	f7ff fd62 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032e4:	463b      	mov	r3, r7
 80032e6:	2208      	movs	r2, #8
 80032e8:	4619      	mov	r1, r3
 80032ea:	480d      	ldr	r0, [pc, #52]	; (8003320 <MX_TIM4_Init+0xf0>)
 80032ec:	f004 f844 	bl	8007378 <HAL_TIM_PWM_ConfigChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80032f6:	f7ff fd57 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032fa:	463b      	mov	r3, r7
 80032fc:	220c      	movs	r2, #12
 80032fe:	4619      	mov	r1, r3
 8003300:	4807      	ldr	r0, [pc, #28]	; (8003320 <MX_TIM4_Init+0xf0>)
 8003302:	f004 f839 	bl	8007378 <HAL_TIM_PWM_ConfigChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800330c:	f7ff fd4c 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003310:	4803      	ldr	r0, [pc, #12]	; (8003320 <MX_TIM4_Init+0xf0>)
 8003312:	f000 f8d1 	bl	80034b8 <HAL_TIM_MspPostInit>

}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	; 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000208 	.word	0x20000208
 8003324:	40000800 	.word	0x40000800

08003328 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <MX_TIM6_Init+0x64>)
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <MX_TIM6_Init+0x68>)
 800333c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <MX_TIM6_Init+0x64>)
 8003340:	221b      	movs	r2, #27
 8003342:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <MX_TIM6_Init+0x64>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <MX_TIM6_Init+0x64>)
 800334c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003350:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <MX_TIM6_Init+0x64>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003358:	480c      	ldr	r0, [pc, #48]	; (800338c <MX_TIM6_Init+0x64>)
 800335a:	f003 fb83 	bl	8006a64 <HAL_TIM_Base_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003364:	f7ff fd20 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003368:	2300      	movs	r3, #0
 800336a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	4619      	mov	r1, r3
 8003374:	4805      	ldr	r0, [pc, #20]	; (800338c <MX_TIM6_Init+0x64>)
 8003376:	f004 ff21 	bl	80081bc <HAL_TIMEx_MasterConfigSynchronization>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003380:	f7ff fd12 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000254 	.word	0x20000254
 8003390:	40001000 	.word	0x40001000

08003394 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_TIM_IC_MspInit+0x8c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d130      	bne.n	8003418 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_TIM_IC_MspInit+0x90>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	4a1a      	ldr	r2, [pc, #104]	; (8003424 <HAL_TIM_IC_MspInit+0x90>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6453      	str	r3, [r2, #68]	; 0x44
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_TIM_IC_MspInit+0x90>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_TIM_IC_MspInit+0x90>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a14      	ldr	r2, [pc, #80]	; (8003424 <HAL_TIM_IC_MspInit+0x90>)
 80033d4:	f043 0310 	orr.w	r3, r3, #16
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_TIM_IC_MspInit+0x90>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80033e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f4:	2300      	movs	r3, #0
 80033f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033f8:	2301      	movs	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	4619      	mov	r1, r3
 8003402:	4809      	ldr	r0, [pc, #36]	; (8003428 <HAL_TIM_IC_MspInit+0x94>)
 8003404:	f001 f8e4 	bl	80045d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003408:	2200      	movs	r2, #0
 800340a:	2100      	movs	r1, #0
 800340c:	201b      	movs	r0, #27
 800340e:	f001 f8a8 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003412:	201b      	movs	r0, #27
 8003414:	f001 f8c1 	bl	800459a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003418:	bf00      	nop
 800341a:	3728      	adds	r7, #40	; 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40010000 	.word	0x40010000
 8003424:	40023800 	.word	0x40023800
 8003428:	40021000 	.word	0x40021000

0800342c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <HAL_TIM_PWM_MspInit+0x38>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10b      	bne.n	8003456 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_TIM_PWM_MspInit+0x3c>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <HAL_TIM_PWM_MspInit+0x3c>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <HAL_TIM_PWM_MspInit+0x3c>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40000800 	.word	0x40000800
 8003468:	40023800 	.word	0x40023800

0800346c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <HAL_TIM_Base_MspInit+0x44>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d113      	bne.n	80034a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <HAL_TIM_Base_MspInit+0x48>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <HAL_TIM_Base_MspInit+0x48>)
 8003484:	f043 0310 	orr.w	r3, r3, #16
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_TIM_Base_MspInit+0x48>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	2036      	movs	r0, #54	; 0x36
 800349c:	f001 f861 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034a0:	2036      	movs	r0, #54	; 0x36
 80034a2:	f001 f87a 	bl	800459a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40001000 	.word	0x40001000
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a11      	ldr	r2, [pc, #68]	; (800351c <HAL_TIM_MspPostInit+0x64>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d11c      	bne.n	8003514 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <HAL_TIM_MspPostInit+0x68>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	4a10      	ldr	r2, [pc, #64]	; (8003520 <HAL_TIM_MspPostInit+0x68>)
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	6313      	str	r3, [r2, #48]	; 0x30
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_TIM_MspPostInit+0x68>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80034f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80034f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	2302      	movs	r3, #2
 80034fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003504:	2302      	movs	r3, #2
 8003506:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003508:	f107 030c 	add.w	r3, r7, #12
 800350c:	4619      	mov	r1, r3
 800350e:	4805      	ldr	r0, [pc, #20]	; (8003524 <HAL_TIM_MspPostInit+0x6c>)
 8003510:	f001 f85e 	bl	80045d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003514:	bf00      	nop
 8003516:	3720      	adds	r7, #32
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40000800 	.word	0x40000800
 8003520:	40023800 	.word	0x40023800
 8003524:	40020c00 	.word	0x40020c00

08003528 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <MX_USART2_UART_Init+0x58>)
 800352e:	4a15      	ldr	r2, [pc, #84]	; (8003584 <MX_USART2_UART_Init+0x5c>)
 8003530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <MX_USART2_UART_Init+0x58>)
 8003534:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <MX_USART2_UART_Init+0x58>)
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <MX_USART2_UART_Init+0x58>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_USART2_UART_Init+0x58>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <MX_USART2_UART_Init+0x58>)
 800354e:	220c      	movs	r2, #12
 8003550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <MX_USART2_UART_Init+0x58>)
 8003554:	2200      	movs	r2, #0
 8003556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <MX_USART2_UART_Init+0x58>)
 800355a:	2200      	movs	r2, #0
 800355c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <MX_USART2_UART_Init+0x58>)
 8003560:	2200      	movs	r2, #0
 8003562:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MX_USART2_UART_Init+0x58>)
 8003566:	2200      	movs	r2, #0
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <MX_USART2_UART_Init+0x58>)
 800356c:	f004 fed2 	bl	8008314 <HAL_UART_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003576:	f7ff fc17 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200002a0 	.word	0x200002a0
 8003584:	40004400 	.word	0x40004400

08003588 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b0ae      	sub	sp, #184	; 0xb8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	2290      	movs	r2, #144	; 0x90
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f005 fbcd 	bl	8008d48 <memset>
  if(uartHandle->Instance==USART2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a21      	ldr	r2, [pc, #132]	; (8003638 <HAL_UART_MspInit+0xb0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d13a      	bne.n	800362e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035bc:	2300      	movs	r3, #0
 80035be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fec5 	bl	8005354 <HAL_RCCEx_PeriphCLKConfig>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035d0:	f7ff fbea 	bl	8002da8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_UART_MspInit+0xb4>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_UART_MspInit+0xb4>)
 80035da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035de:	6413      	str	r3, [r2, #64]	; 0x40
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_UART_MspInit+0xb4>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_UART_MspInit+0xb4>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	4a12      	ldr	r2, [pc, #72]	; (800363c <HAL_UART_MspInit+0xb4>)
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	6313      	str	r3, [r2, #48]	; 0x30
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_UART_MspInit+0xb4>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003604:	2360      	movs	r3, #96	; 0x60
 8003606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800361c:	2307      	movs	r3, #7
 800361e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003622:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003626:	4619      	mov	r1, r3
 8003628:	4805      	ldr	r0, [pc, #20]	; (8003640 <HAL_UART_MspInit+0xb8>)
 800362a:	f000 ffd1 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800362e:	bf00      	nop
 8003630:	37b8      	adds	r7, #184	; 0xb8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40004400 	.word	0x40004400
 800363c:	40023800 	.word	0x40023800
 8003640:	40020c00 	.word	0x40020c00

08003644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800367c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003648:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800364a:	e003      	b.n	8003654 <LoopCopyDataInit>

0800364c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800364e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003650:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003652:	3104      	adds	r1, #4

08003654 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003654:	480b      	ldr	r0, [pc, #44]	; (8003684 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003658:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800365a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800365c:	d3f6      	bcc.n	800364c <CopyDataInit>
  ldr  r2, =_sbss
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003660:	e002      	b.n	8003668 <LoopFillZerobss>

08003662 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003662:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003664:	f842 3b04 	str.w	r3, [r2], #4

08003668 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800366a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800366c:	d3f9      	bcc.n	8003662 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800366e:	f7ff fd41 	bl	80030f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003672:	f005 fb45 	bl	8008d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003676:	f7fe fdef 	bl	8002258 <main>
  bx  lr    
 800367a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800367c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003680:	0800968c 	.word	0x0800968c
  ldr  r0, =_sdata
 8003684:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003688:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800368c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003690:	20000328 	.word	0x20000328

08003694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003694:	e7fe      	b.n	8003694 <ADC_IRQHandler>

08003696 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800369a:	2003      	movs	r0, #3
 800369c:	f000 ff56 	bl	800454c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036a0:	2000      	movs	r0, #0
 80036a2:	f000 f805 	bl	80036b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a6:	f7ff fcbf 	bl	8003028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_InitTick+0x54>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_InitTick+0x58>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 ff71 	bl	80045b6 <HAL_SYSTICK_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e00e      	b.n	80036fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b0f      	cmp	r3, #15
 80036e2:	d80a      	bhi.n	80036fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e4:	2200      	movs	r2, #0
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	f000 ff39 	bl	8004562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f0:	4a06      	ldr	r2, [pc, #24]	; (800370c <HAL_InitTick+0x5c>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e000      	b.n	80036fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000000 	.word	0x20000000
 8003708:	20000008 	.word	0x20000008
 800370c:	20000004 	.word	0x20000004

08003710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_IncTick+0x20>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_IncTick+0x24>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4413      	add	r3, r2
 8003720:	4a04      	ldr	r2, [pc, #16]	; (8003734 <HAL_IncTick+0x24>)
 8003722:	6013      	str	r3, [r2, #0]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000008 	.word	0x20000008
 8003734:	20000324 	.word	0x20000324

08003738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return uwTick;
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <HAL_GetTick+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000324 	.word	0x20000324

08003750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7ff ffee 	bl	8003738 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d005      	beq.n	8003776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_Delay+0x44>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003776:	bf00      	nop
 8003778:	f7ff ffde 	bl	8003738 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	429a      	cmp	r2, r3
 8003786:	d8f7      	bhi.n	8003778 <HAL_Delay+0x28>
  {
  }
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000008 	.word	0x20000008

08003798 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 800379c:	4b02      	ldr	r3, [pc, #8]	; (80037a8 <HAL_GetHalVersion+0x10>)
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	01020a00 	.word	0x01020a00

080037ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_GetREVID+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0c1b      	lsrs	r3, r3, #16
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e0042000 	.word	0xe0042000

080037c4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_GetDEVID+0x18>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	e0042000 	.word	0xe0042000

080037e0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_GetUIDw0+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	1ff0f420 	.word	0x1ff0f420

080037f8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_GetUIDw1+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	1ff0f424 	.word	0x1ff0f424

08003810 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_GetUIDw2+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	1ff0f428 	.word	0x1ff0f428

08003828 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e031      	b.n	80038a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fa2e 	bl	8001ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_ADC_Init+0x84>)
 800386c:	4013      	ands	r3, r2
 800386e:	f043 0202 	orr.w	r2, r3, #2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f970 	bl	8003b5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
 8003892:	e001      	b.n	8003898 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	ffffeefd 	.word	0xffffeefd

080038b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x1c>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e136      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x28a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b09      	cmp	r3, #9
 80038da:	d93a      	bls.n	8003952 <HAL_ADC_ConfigChannel+0xa2>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038e4:	d035      	beq.n	8003952 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68d9      	ldr	r1, [r3, #12]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	4613      	mov	r3, r2
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4413      	add	r3, r2
 80038fa:	3b1e      	subs	r3, #30
 80038fc:	2207      	movs	r2, #7
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	400a      	ands	r2, r1
 800390a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a8d      	ldr	r2, [pc, #564]	; (8003b48 <HAL_ADC_ConfigChannel+0x298>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d10a      	bne.n	800392c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68d9      	ldr	r1, [r3, #12]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	061a      	lsls	r2, r3, #24
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800392a:	e035      	b.n	8003998 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68d9      	ldr	r1, [r3, #12]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	4618      	mov	r0, r3
 800393e:	4603      	mov	r3, r0
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4403      	add	r3, r0
 8003944:	3b1e      	subs	r3, #30
 8003946:	409a      	lsls	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003950:	e022      	b.n	8003998 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6919      	ldr	r1, [r3, #16]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	2207      	movs	r2, #7
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43da      	mvns	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	400a      	ands	r2, r1
 8003974:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6919      	ldr	r1, [r3, #16]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	4618      	mov	r0, r3
 8003988:	4603      	mov	r3, r0
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4403      	add	r3, r0
 800398e:	409a      	lsls	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b06      	cmp	r3, #6
 800399e:	d824      	bhi.n	80039ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	3b05      	subs	r3, #5
 80039b2:	221f      	movs	r2, #31
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43da      	mvns	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	400a      	ands	r2, r1
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	3b05      	subs	r3, #5
 80039dc:	fa00 f203 	lsl.w	r2, r0, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	635a      	str	r2, [r3, #52]	; 0x34
 80039e8:	e04c      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d824      	bhi.n	8003a3c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	3b23      	subs	r3, #35	; 0x23
 8003a04:	221f      	movs	r2, #31
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43da      	mvns	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	400a      	ands	r2, r1
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	4618      	mov	r0, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3b23      	subs	r3, #35	; 0x23
 8003a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3a:	e023      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3b41      	subs	r3, #65	; 0x41
 8003a4e:	221f      	movs	r2, #31
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43da      	mvns	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	3b41      	subs	r3, #65	; 0x41
 8003a78:	fa00 f203 	lsl.w	r2, r0, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a30      	ldr	r2, [pc, #192]	; (8003b4c <HAL_ADC_ConfigChannel+0x29c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x1f4>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a96:	d105      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003a98:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a2c      	ldr	r2, [pc, #176]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a9e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003aa2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a28      	ldr	r2, [pc, #160]	; (8003b4c <HAL_ADC_ConfigChannel+0x29c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d10f      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x21e>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b12      	cmp	r3, #18
 8003ab4:	d10b      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a25      	ldr	r2, [pc, #148]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003abc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ac0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003ac2:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003acc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_ADC_ConfigChannel+0x29c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d12b      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x280>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_ADC_ConfigChannel+0x298>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <HAL_ADC_ConfigChannel+0x23a>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b11      	cmp	r3, #17
 8003ae8:	d122      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003aea:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003af0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003af4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8003afc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b00:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <HAL_ADC_ConfigChannel+0x298>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d111      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_ADC_ConfigChannel+0x2a4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a11      	ldr	r2, [pc, #68]	; (8003b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0c9a      	lsrs	r2, r3, #18
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b22:	e002      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f9      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	10000012 	.word	0x10000012
 8003b4c:	40012000 	.word	0x40012000
 8003b50:	40012300 	.word	0x40012300
 8003b54:	20000000 	.word	0x20000000
 8003b58:	431bde83 	.word	0x431bde83

08003b5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b64:	4b78      	ldr	r3, [pc, #480]	; (8003d48 <ADC_Init+0x1ec>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a77      	ldr	r2, [pc, #476]	; (8003d48 <ADC_Init+0x1ec>)
 8003b6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b6e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003b70:	4b75      	ldr	r3, [pc, #468]	; (8003d48 <ADC_Init+0x1ec>)
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4973      	ldr	r1, [pc, #460]	; (8003d48 <ADC_Init+0x1ec>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	021a      	lsls	r2, r3, #8
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6899      	ldr	r1, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	4a58      	ldr	r2, [pc, #352]	; (8003d4c <ADC_Init+0x1f0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d022      	beq.n	8003c36 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6899      	ldr	r1, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	e00f      	b.n	8003c56 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0202 	bic.w	r2, r2, #2
 8003c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6899      	ldr	r1, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	005a      	lsls	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01b      	beq.n	8003cbc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ca2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	035a      	lsls	r2, r3, #13
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	e007      	b.n	8003ccc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	051a      	lsls	r2, r3, #20
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6899      	ldr	r1, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d0e:	025a      	lsls	r2, r3, #9
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6899      	ldr	r1, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	029a      	lsls	r2, r3, #10
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	609a      	str	r2, [r3, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40012300 	.word	0x40012300
 8003d4c:	0f000001 	.word	0x0f000001

08003d50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0ed      	b.n	8003f3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe f846 	bl	8001e00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d84:	f7ff fcd8 	bl	8003738 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d8a:	e012      	b.n	8003db2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d8c:	f7ff fcd4 	bl	8003738 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b0a      	cmp	r3, #10
 8003d98:	d90b      	bls.n	8003db2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2205      	movs	r2, #5
 8003daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0c5      	b.n	8003f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0e5      	beq.n	8003d8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0202 	bic.w	r2, r2, #2
 8003dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd0:	f7ff fcb2 	bl	8003738 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dd6:	e012      	b.n	8003dfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dd8:	f7ff fcae 	bl	8003738 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b0a      	cmp	r3, #10
 8003de4:	d90b      	bls.n	8003dfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2205      	movs	r2, #5
 8003df6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e09f      	b.n	8003f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e5      	bne.n	8003dd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7e1b      	ldrb	r3, [r3, #24]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d108      	bne.n	8003e26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e007      	b.n	8003e36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7e5b      	ldrb	r3, [r3, #25]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d108      	bne.n	8003e50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e007      	b.n	8003e60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7e9b      	ldrb	r3, [r3, #26]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d108      	bne.n	8003e7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0220 	orr.w	r2, r2, #32
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	e007      	b.n	8003e8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0220 	bic.w	r2, r2, #32
 8003e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	7edb      	ldrb	r3, [r3, #27]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d108      	bne.n	8003ea4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0210 	bic.w	r2, r2, #16
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e007      	b.n	8003eb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0210 	orr.w	r2, r2, #16
 8003eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7f1b      	ldrb	r3, [r3, #28]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d108      	bne.n	8003ece <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0208 	orr.w	r2, r2, #8
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e007      	b.n	8003ede <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0208 	bic.w	r2, r2, #8
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7f5b      	ldrb	r3, [r3, #29]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d108      	bne.n	8003ef8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0204 	orr.w	r2, r2, #4
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e007      	b.n	8003f08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0204 	bic.w	r2, r2, #4
 8003f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	ea42 0103 	orr.w	r1, r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	1e5a      	subs	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d003      	beq.n	8003f6e <HAL_CAN_ConfigFilter+0x26>
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	f040 80c7 	bne.w	80040fc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a69      	ldr	r2, [pc, #420]	; (8004118 <HAL_CAN_ConfigFilter+0x1d0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d001      	beq.n	8003f7c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003f78:	4b68      	ldr	r3, [pc, #416]	; (800411c <HAL_CAN_ConfigFilter+0x1d4>)
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	4a63      	ldr	r2, [pc, #396]	; (800411c <HAL_CAN_ConfigFilter+0x1d4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d111      	bne.n	8003fb8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f9a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d123      	bne.n	800402a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	401a      	ands	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004004:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	3248      	adds	r2, #72	; 0x48
 800400a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800401e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004020:	6979      	ldr	r1, [r7, #20]
 8004022:	3348      	adds	r3, #72	; 0x48
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	440b      	add	r3, r1
 8004028:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d122      	bne.n	8004078 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	431a      	orrs	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004052:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	3248      	adds	r2, #72	; 0x48
 8004058:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800406c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800406e:	6979      	ldr	r1, [r7, #20]
 8004070:	3348      	adds	r3, #72	; 0x48
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	440b      	add	r3, r1
 8004076:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	43db      	mvns	r3, r3
 800408a:	401a      	ands	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004092:	e007      	b.n	80040a4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	431a      	orrs	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	401a      	ands	r2, r3
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040be:	e007      	b.n	80040d0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040ee:	f023 0201 	bic.w	r2, r3, #1
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e006      	b.n	800410a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40003400 	.word	0x40003400
 800411c:	40006400 	.word	0x40006400

08004120 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d12e      	bne.n	8004192 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800414c:	f7ff faf4 	bl	8003738 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004152:	e012      	b.n	800417a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004154:	f7ff faf0 	bl	8003738 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b0a      	cmp	r3, #10
 8004160:	d90b      	bls.n	800417a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2205      	movs	r2, #5
 8004172:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e012      	b.n	80041a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e5      	bne.n	8004154 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e006      	b.n	80041a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	; 0x24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80041c6:	7ffb      	ldrb	r3, [r7, #31]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d003      	beq.n	80041d4 <HAL_CAN_AddTxMessage+0x2c>
 80041cc:	7ffb      	ldrb	r3, [r7, #31]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	f040 80b8 	bne.w	8004344 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d105      	bne.n	80041f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80a0 	beq.w	8004334 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	0e1b      	lsrs	r3, r3, #24
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d907      	bls.n	8004214 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e09e      	b.n	8004352 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004214:	2201      	movs	r2, #1
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	409a      	lsls	r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004230:	68f9      	ldr	r1, [r7, #12]
 8004232:	6809      	ldr	r1, [r1, #0]
 8004234:	431a      	orrs	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	3318      	adds	r3, #24
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	440b      	add	r3, r1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e00f      	b.n	8004262 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800424c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004252:	68f9      	ldr	r1, [r7, #12]
 8004254:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004256:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3318      	adds	r3, #24
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	440b      	add	r3, r1
 8004260:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6819      	ldr	r1, [r3, #0]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	3318      	adds	r3, #24
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	440b      	add	r3, r1
 8004272:	3304      	adds	r3, #4
 8004274:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	7d1b      	ldrb	r3, [r3, #20]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d111      	bne.n	80042a2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3318      	adds	r3, #24
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	4413      	add	r3, r2
 800428a:	3304      	adds	r3, #4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	6811      	ldr	r1, [r2, #0]
 8004292:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	3318      	adds	r3, #24
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	440b      	add	r3, r1
 800429e:	3304      	adds	r3, #4
 80042a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3307      	adds	r3, #7
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	061a      	lsls	r2, r3, #24
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3306      	adds	r3, #6
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	041b      	lsls	r3, r3, #16
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3305      	adds	r3, #5
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	4313      	orrs	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	3204      	adds	r2, #4
 80042c2:	7812      	ldrb	r2, [r2, #0]
 80042c4:	4610      	mov	r0, r2
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6811      	ldr	r1, [r2, #0]
 80042ca:	ea43 0200 	orr.w	r2, r3, r0
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	440b      	add	r3, r1
 80042d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80042d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3303      	adds	r3, #3
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	061a      	lsls	r2, r3, #24
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3302      	adds	r3, #2
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3301      	adds	r3, #1
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	4313      	orrs	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	7812      	ldrb	r2, [r2, #0]
 80042fa:	4610      	mov	r0, r2
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	6811      	ldr	r1, [r2, #0]
 8004300:	ea43 0200 	orr.w	r2, r3, r0
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	440b      	add	r3, r1
 800430a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800430e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	3318      	adds	r3, #24
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	4413      	add	r3, r2
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	6811      	ldr	r1, [r2, #0]
 8004322:	f043 0201 	orr.w	r2, r3, #1
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3318      	adds	r3, #24
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	440b      	add	r3, r1
 800432e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e00e      	b.n	8004352 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e006      	b.n	8004352 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
  }
}
 8004352:	4618      	mov	r0, r3
 8004354:	3724      	adds	r7, #36	; 0x24
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800436e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d002      	beq.n	800437c <HAL_CAN_ActivateNotification+0x1e>
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d109      	bne.n	8004390 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6959      	ldr	r1, [r3, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e006      	b.n	800439e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <__NVIC_SetPriorityGrouping+0x40>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043da:	4a04      	ldr	r2, [pc, #16]	; (80043ec <__NVIC_SetPriorityGrouping+0x40>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	60d3      	str	r3, [r2, #12]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00
 80043f0:	05fa0000 	.word	0x05fa0000

080043f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <__NVIC_GetPriorityGrouping+0x18>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	f003 0307 	and.w	r3, r3, #7
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441e:	2b00      	cmp	r3, #0
 8004420:	db0b      	blt.n	800443a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	f003 021f 	and.w	r2, r3, #31
 8004428:	4907      	ldr	r1, [pc, #28]	; (8004448 <__NVIC_EnableIRQ+0x38>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	2001      	movs	r0, #1
 8004432:	fa00 f202 	lsl.w	r2, r0, r2
 8004436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000e100 	.word	0xe000e100

0800444c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	6039      	str	r1, [r7, #0]
 8004456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	2b00      	cmp	r3, #0
 800445e:	db0a      	blt.n	8004476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	490c      	ldr	r1, [pc, #48]	; (8004498 <__NVIC_SetPriority+0x4c>)
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	0112      	lsls	r2, r2, #4
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	440b      	add	r3, r1
 8004470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004474:	e00a      	b.n	800448c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4908      	ldr	r1, [pc, #32]	; (800449c <__NVIC_SetPriority+0x50>)
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	3b04      	subs	r3, #4
 8004484:	0112      	lsls	r2, r2, #4
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	440b      	add	r3, r1
 800448a:	761a      	strb	r2, [r3, #24]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	e000e100 	.word	0xe000e100
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f1c3 0307 	rsb	r3, r3, #7
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	bf28      	it	cs
 80044be:	2304      	movcs	r3, #4
 80044c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d902      	bls.n	80044d0 <NVIC_EncodePriority+0x30>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3b03      	subs	r3, #3
 80044ce:	e000      	b.n	80044d2 <NVIC_EncodePriority+0x32>
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43da      	mvns	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	401a      	ands	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	43d9      	mvns	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	4313      	orrs	r3, r2
         );
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3724      	adds	r7, #36	; 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3b01      	subs	r3, #1
 8004514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004518:	d301      	bcc.n	800451e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800451a:	2301      	movs	r3, #1
 800451c:	e00f      	b.n	800453e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <SysTick_Config+0x40>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3b01      	subs	r3, #1
 8004524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004526:	210f      	movs	r1, #15
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	f7ff ff8e 	bl	800444c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <SysTick_Config+0x40>)
 8004532:	2200      	movs	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004536:	4b04      	ldr	r3, [pc, #16]	; (8004548 <SysTick_Config+0x40>)
 8004538:	2207      	movs	r2, #7
 800453a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	e000e010 	.word	0xe000e010

0800454c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ff29 	bl	80043ac <__NVIC_SetPriorityGrouping>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	4603      	mov	r3, r0
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004574:	f7ff ff3e 	bl	80043f4 <__NVIC_GetPriorityGrouping>
 8004578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7ff ff8e 	bl	80044a0 <NVIC_EncodePriority>
 8004584:	4602      	mov	r2, r0
 8004586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ff5d 	bl	800444c <__NVIC_SetPriority>
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4603      	mov	r3, r0
 80045a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff ff31 	bl	8004410 <__NVIC_EnableIRQ>
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff ffa2 	bl	8004508 <SysTick_Config>
 80045c4:	4603      	mov	r3, r0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e175      	b.n	80048dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045f0:	2201      	movs	r2, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	429a      	cmp	r2, r3
 800460a:	f040 8164 	bne.w	80048d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d005      	beq.n	8004626 <HAL_GPIO_Init+0x56>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d130      	bne.n	8004688 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	2203      	movs	r2, #3
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800465c:	2201      	movs	r2, #1
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 0201 	and.w	r2, r3, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b03      	cmp	r3, #3
 8004692:	d017      	beq.n	80046c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	2203      	movs	r2, #3
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d123      	bne.n	8004718 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	08da      	lsrs	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3208      	adds	r2, #8
 80046d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	220f      	movs	r2, #15
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	08da      	lsrs	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3208      	adds	r2, #8
 8004712:	69b9      	ldr	r1, [r7, #24]
 8004714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	2203      	movs	r2, #3
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0203 	and.w	r2, r3, #3
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80be 	beq.w	80048d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800475a:	4b66      	ldr	r3, [pc, #408]	; (80048f4 <HAL_GPIO_Init+0x324>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	4a65      	ldr	r2, [pc, #404]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004764:	6453      	str	r3, [r2, #68]	; 0x44
 8004766:	4b63      	ldr	r3, [pc, #396]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004772:	4a61      	ldr	r2, [pc, #388]	; (80048f8 <HAL_GPIO_Init+0x328>)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	3302      	adds	r3, #2
 800477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a58      	ldr	r2, [pc, #352]	; (80048fc <HAL_GPIO_Init+0x32c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d037      	beq.n	800480e <HAL_GPIO_Init+0x23e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a57      	ldr	r2, [pc, #348]	; (8004900 <HAL_GPIO_Init+0x330>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d031      	beq.n	800480a <HAL_GPIO_Init+0x23a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a56      	ldr	r2, [pc, #344]	; (8004904 <HAL_GPIO_Init+0x334>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <HAL_GPIO_Init+0x236>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a55      	ldr	r2, [pc, #340]	; (8004908 <HAL_GPIO_Init+0x338>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d025      	beq.n	8004802 <HAL_GPIO_Init+0x232>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a54      	ldr	r2, [pc, #336]	; (800490c <HAL_GPIO_Init+0x33c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01f      	beq.n	80047fe <HAL_GPIO_Init+0x22e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a53      	ldr	r2, [pc, #332]	; (8004910 <HAL_GPIO_Init+0x340>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d019      	beq.n	80047fa <HAL_GPIO_Init+0x22a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a52      	ldr	r2, [pc, #328]	; (8004914 <HAL_GPIO_Init+0x344>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_GPIO_Init+0x226>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a51      	ldr	r2, [pc, #324]	; (8004918 <HAL_GPIO_Init+0x348>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00d      	beq.n	80047f2 <HAL_GPIO_Init+0x222>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a50      	ldr	r2, [pc, #320]	; (800491c <HAL_GPIO_Init+0x34c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <HAL_GPIO_Init+0x21e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a4f      	ldr	r2, [pc, #316]	; (8004920 <HAL_GPIO_Init+0x350>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_GPIO_Init+0x21a>
 80047e6:	2309      	movs	r3, #9
 80047e8:	e012      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047ea:	230a      	movs	r3, #10
 80047ec:	e010      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047ee:	2308      	movs	r3, #8
 80047f0:	e00e      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047f2:	2307      	movs	r3, #7
 80047f4:	e00c      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047f6:	2306      	movs	r3, #6
 80047f8:	e00a      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047fa:	2305      	movs	r3, #5
 80047fc:	e008      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047fe:	2304      	movs	r3, #4
 8004800:	e006      	b.n	8004810 <HAL_GPIO_Init+0x240>
 8004802:	2303      	movs	r3, #3
 8004804:	e004      	b.n	8004810 <HAL_GPIO_Init+0x240>
 8004806:	2302      	movs	r3, #2
 8004808:	e002      	b.n	8004810 <HAL_GPIO_Init+0x240>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_GPIO_Init+0x240>
 800480e:	2300      	movs	r3, #0
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	f002 0203 	and.w	r2, r2, #3
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	4093      	lsls	r3, r2
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004820:	4935      	ldr	r1, [pc, #212]	; (80048f8 <HAL_GPIO_Init+0x328>)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	3302      	adds	r3, #2
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800482e:	4b3d      	ldr	r3, [pc, #244]	; (8004924 <HAL_GPIO_Init+0x354>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004852:	4a34      	ldr	r2, [pc, #208]	; (8004924 <HAL_GPIO_Init+0x354>)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004858:	4b32      	ldr	r3, [pc, #200]	; (8004924 <HAL_GPIO_Init+0x354>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800487c:	4a29      	ldr	r2, [pc, #164]	; (8004924 <HAL_GPIO_Init+0x354>)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004882:	4b28      	ldr	r3, [pc, #160]	; (8004924 <HAL_GPIO_Init+0x354>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048a6:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <HAL_GPIO_Init+0x354>)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ac:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_GPIO_Init+0x354>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048d0:	4a14      	ldr	r2, [pc, #80]	; (8004924 <HAL_GPIO_Init+0x354>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3301      	adds	r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	f67f ae86 	bls.w	80045f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3724      	adds	r7, #36	; 0x24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40013800 	.word	0x40013800
 80048fc:	40020000 	.word	0x40020000
 8004900:	40020400 	.word	0x40020400
 8004904:	40020800 	.word	0x40020800
 8004908:	40020c00 	.word	0x40020c00
 800490c:	40021000 	.word	0x40021000
 8004910:	40021400 	.word	0x40021400
 8004914:	40021800 	.word	0x40021800
 8004918:	40021c00 	.word	0x40021c00
 800491c:	40022000 	.word	0x40022000
 8004920:	40022400 	.word	0x40022400
 8004924:	40013c00 	.word	0x40013c00

08004928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	887b      	ldrh	r3, [r7, #2]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
 8004944:	e001      	b.n	800494a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004974:	e003      	b.n	800497e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004996:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <HAL_PWREx_EnableOverDrive+0x98>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a0:	6413      	str	r3, [r2, #64]	; 0x40
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_PWREx_EnableOverDrive+0x98>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80049ae:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ba:	f7fe febd 	bl	8003738 <HAL_GetTick>
 80049be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049c0:	e009      	b.n	80049d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049c2:	f7fe feb9 	bl	8003738 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049d0:	d901      	bls.n	80049d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e022      	b.n	8004a1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e2:	d1ee      	bne.n	80049c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049e4:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049f0:	f7fe fea2 	bl	8003738 <HAL_GetTick>
 80049f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049f6:	e009      	b.n	8004a0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049f8:	f7fe fe9e 	bl	8003738 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a06:	d901      	bls.n	8004a0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e007      	b.n	8004a1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a18:	d1ee      	bne.n	80049f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40007000 	.word	0x40007000

08004a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e29b      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8087 	beq.w	8004b5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a50:	4b96      	ldr	r3, [pc, #600]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d00c      	beq.n	8004a76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a5c:	4b93      	ldr	r3, [pc, #588]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d112      	bne.n	8004a8e <HAL_RCC_OscConfig+0x62>
 8004a68:	4b90      	ldr	r3, [pc, #576]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a74:	d10b      	bne.n	8004a8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a76:	4b8d      	ldr	r3, [pc, #564]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d06c      	beq.n	8004b5c <HAL_RCC_OscConfig+0x130>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d168      	bne.n	8004b5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e275      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x7a>
 8004a98:	4b84      	ldr	r3, [pc, #528]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a83      	ldr	r2, [pc, #524]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e02e      	b.n	8004b04 <HAL_RCC_OscConfig+0xd8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10c      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x9c>
 8004aae:	4b7f      	ldr	r3, [pc, #508]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a7e      	ldr	r2, [pc, #504]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	4b7c      	ldr	r3, [pc, #496]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a7b      	ldr	r2, [pc, #492]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e01d      	b.n	8004b04 <HAL_RCC_OscConfig+0xd8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0xc0>
 8004ad2:	4b76      	ldr	r3, [pc, #472]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a75      	ldr	r2, [pc, #468]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b73      	ldr	r3, [pc, #460]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a72      	ldr	r2, [pc, #456]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e00b      	b.n	8004b04 <HAL_RCC_OscConfig+0xd8>
 8004aec:	4b6f      	ldr	r3, [pc, #444]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6e      	ldr	r2, [pc, #440]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b6c      	ldr	r3, [pc, #432]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a6b      	ldr	r2, [pc, #428]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0c:	f7fe fe14 	bl	8003738 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b14:	f7fe fe10 	bl	8003738 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e229      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	4b61      	ldr	r3, [pc, #388]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0xe8>
 8004b32:	e014      	b.n	8004b5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fe fe00 	bl	8003738 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7fe fdfc 	bl	8003738 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e215      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	4b57      	ldr	r3, [pc, #348]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x110>
 8004b5a:	e000      	b.n	8004b5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d069      	beq.n	8004c3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b6a:	4b50      	ldr	r3, [pc, #320]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b76:	4b4d      	ldr	r3, [pc, #308]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d11c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x190>
 8004b82:	4b4a      	ldr	r3, [pc, #296]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	4b47      	ldr	r3, [pc, #284]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x17a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e1e9      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba6:	4b41      	ldr	r3, [pc, #260]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	493d      	ldr	r1, [pc, #244]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	e040      	b.n	8004c3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d023      	beq.n	8004c0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc4:	4b39      	ldr	r3, [pc, #228]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a38      	ldr	r2, [pc, #224]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fe fdb2 	bl	8003738 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd8:	f7fe fdae 	bl	8003738 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e1c7      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	4b30      	ldr	r3, [pc, #192]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf6:	4b2d      	ldr	r3, [pc, #180]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4929      	ldr	r1, [pc, #164]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]
 8004c0a:	e018      	b.n	8004c3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c0c:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a26      	ldr	r2, [pc, #152]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fe fd8e 	bl	8003738 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c20:	f7fe fd8a 	bl	8003738 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e1a3      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	4b1e      	ldr	r3, [pc, #120]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d038      	beq.n	8004cbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d019      	beq.n	8004c86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c52:	4b16      	ldr	r3, [pc, #88]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c56:	4a15      	ldr	r2, [pc, #84]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5e:	f7fe fd6b 	bl	8003738 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c66:	f7fe fd67 	bl	8003738 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e180      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x23a>
 8004c84:	e01a      	b.n	8004cbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c8a:	4a08      	ldr	r2, [pc, #32]	; (8004cac <HAL_RCC_OscConfig+0x280>)
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c92:	f7fe fd51 	bl	8003738 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9a:	f7fe fd4d 	bl	8003738 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d903      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e166      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
 8004cac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb0:	4b92      	ldr	r3, [pc, #584]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ee      	bne.n	8004c9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 80a4 	beq.w	8004e12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cca:	4b8c      	ldr	r3, [pc, #560]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10d      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	4b89      	ldr	r3, [pc, #548]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	4a88      	ldr	r2, [pc, #544]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce2:	4b86      	ldr	r3, [pc, #536]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cea:	60bb      	str	r3, [r7, #8]
 8004cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf2:	4b83      	ldr	r3, [pc, #524]	; (8004f00 <HAL_RCC_OscConfig+0x4d4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d118      	bne.n	8004d30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004cfe:	4b80      	ldr	r3, [pc, #512]	; (8004f00 <HAL_RCC_OscConfig+0x4d4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a7f      	ldr	r2, [pc, #508]	; (8004f00 <HAL_RCC_OscConfig+0x4d4>)
 8004d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0a:	f7fe fd15 	bl	8003738 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d12:	f7fe fd11 	bl	8003738 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b64      	cmp	r3, #100	; 0x64
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e12a      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d24:	4b76      	ldr	r3, [pc, #472]	; (8004f00 <HAL_RCC_OscConfig+0x4d4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d106      	bne.n	8004d46 <HAL_RCC_OscConfig+0x31a>
 8004d38:	4b70      	ldr	r3, [pc, #448]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	4a6f      	ldr	r2, [pc, #444]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	6713      	str	r3, [r2, #112]	; 0x70
 8004d44:	e02d      	b.n	8004da2 <HAL_RCC_OscConfig+0x376>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10c      	bne.n	8004d68 <HAL_RCC_OscConfig+0x33c>
 8004d4e:	4b6b      	ldr	r3, [pc, #428]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	4a6a      	ldr	r2, [pc, #424]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5a:	4b68      	ldr	r3, [pc, #416]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	4a67      	ldr	r2, [pc, #412]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d60:	f023 0304 	bic.w	r3, r3, #4
 8004d64:	6713      	str	r3, [r2, #112]	; 0x70
 8004d66:	e01c      	b.n	8004da2 <HAL_RCC_OscConfig+0x376>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b05      	cmp	r3, #5
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCC_OscConfig+0x35e>
 8004d70:	4b62      	ldr	r3, [pc, #392]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	4a61      	ldr	r2, [pc, #388]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d76:	f043 0304 	orr.w	r3, r3, #4
 8004d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7c:	4b5f      	ldr	r3, [pc, #380]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	4a5e      	ldr	r2, [pc, #376]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	6713      	str	r3, [r2, #112]	; 0x70
 8004d88:	e00b      	b.n	8004da2 <HAL_RCC_OscConfig+0x376>
 8004d8a:	4b5c      	ldr	r3, [pc, #368]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a5b      	ldr	r2, [pc, #364]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
 8004d96:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	4a58      	ldr	r2, [pc, #352]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004d9c:	f023 0304 	bic.w	r3, r3, #4
 8004da0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d015      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004daa:	f7fe fcc5 	bl	8003738 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fe fcc1 	bl	8003738 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e0d8      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc8:	4b4c      	ldr	r3, [pc, #304]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ee      	beq.n	8004db2 <HAL_RCC_OscConfig+0x386>
 8004dd4:	e014      	b.n	8004e00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fe fcaf 	bl	8003738 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fe fcab 	bl	8003738 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e0c2      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df4:	4b41      	ldr	r3, [pc, #260]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1ee      	bne.n	8004dde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d105      	bne.n	8004e12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e06:	4b3d      	ldr	r3, [pc, #244]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	4a3c      	ldr	r2, [pc, #240]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80ae 	beq.w	8004f78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e1c:	4b37      	ldr	r3, [pc, #220]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 030c 	and.w	r3, r3, #12
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d06d      	beq.n	8004f04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d14b      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e30:	4b32      	ldr	r3, [pc, #200]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a31      	ldr	r2, [pc, #196]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fe fc7c 	bl	8003738 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e44:	f7fe fc78 	bl	8003738 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e091      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	4b29      	ldr	r3, [pc, #164]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	019b      	lsls	r3, r3, #6
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	085b      	lsrs	r3, r3, #1
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	061b      	lsls	r3, r3, #24
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	071b      	lsls	r3, r3, #28
 8004e8e:	491b      	ldr	r1, [pc, #108]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a18      	ldr	r2, [pc, #96]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fe fc4a 	bl	8003738 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7fe fc46 	bl	8003738 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e05f      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x47c>
 8004ec6:	e057      	b.n	8004f78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a0b      	ldr	r2, [pc, #44]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fc30 	bl	8003738 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fe fc2c 	bl	8003738 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e045      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	4b03      	ldr	r3, [pc, #12]	; (8004efc <HAL_RCC_OscConfig+0x4d0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x4b0>
 8004efa:	e03d      	b.n	8004f78 <HAL_RCC_OscConfig+0x54c>
 8004efc:	40023800 	.word	0x40023800
 8004f00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f04:	4b1f      	ldr	r3, [pc, #124]	; (8004f84 <HAL_RCC_OscConfig+0x558>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d030      	beq.n	8004f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d129      	bne.n	8004f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d122      	bne.n	8004f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d119      	bne.n	8004f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d10f      	bne.n	8004f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40023800 	.word	0x40023800

08004f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0d0      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b6a      	ldr	r3, [pc, #424]	; (800514c <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d910      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b67      	ldr	r3, [pc, #412]	; (800514c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 020f 	bic.w	r2, r3, #15
 8004fb6:	4965      	ldr	r1, [pc, #404]	; (800514c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	4b63      	ldr	r3, [pc, #396]	; (800514c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d001      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0b8      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d020      	beq.n	800501e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe8:	4b59      	ldr	r3, [pc, #356]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	4a58      	ldr	r2, [pc, #352]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 8004fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ff2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005000:	4b53      	ldr	r3, [pc, #332]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a52      	ldr	r2, [pc, #328]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 8005006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800500a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800500c:	4b50      	ldr	r3, [pc, #320]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	494d      	ldr	r1, [pc, #308]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d040      	beq.n	80050ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005032:	4b47      	ldr	r3, [pc, #284]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d115      	bne.n	800506a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e07f      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	4b41      	ldr	r3, [pc, #260]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e073      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b3d      	ldr	r3, [pc, #244]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e06b      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800506a:	4b39      	ldr	r3, [pc, #228]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4936      	ldr	r1, [pc, #216]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507c:	f7fe fb5c 	bl	8003738 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	e00a      	b.n	800509a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005084:	f7fe fb58 	bl	8003738 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e053      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 020c 	and.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1eb      	bne.n	8005084 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ac:	4b27      	ldr	r3, [pc, #156]	; (800514c <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d210      	bcs.n	80050dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b24      	ldr	r3, [pc, #144]	; (800514c <HAL_RCC_ClockConfig+0x1c4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 020f 	bic.w	r2, r3, #15
 80050c2:	4922      	ldr	r1, [pc, #136]	; (800514c <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ca:	4b20      	ldr	r3, [pc, #128]	; (800514c <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e032      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e8:	4b19      	ldr	r3, [pc, #100]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4916      	ldr	r1, [pc, #88]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	490e      	ldr	r1, [pc, #56]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800511a:	f000 f821 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 800511e:	4602      	mov	r2, r0
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_ClockConfig+0x1c8>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	490a      	ldr	r1, [pc, #40]	; (8005154 <HAL_RCC_ClockConfig+0x1cc>)
 800512c:	5ccb      	ldrb	r3, [r1, r3]
 800512e:	fa22 f303 	lsr.w	r3, r2, r3
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <HAL_RCC_ClockConfig+0x1d0>)
 8005134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_RCC_ClockConfig+0x1d4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe fab8 	bl	80036b0 <HAL_InitTick>

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40023c00 	.word	0x40023c00
 8005150:	40023800 	.word	0x40023800
 8005154:	0800963c 	.word	0x0800963c
 8005158:	20000000 	.word	0x20000000
 800515c:	20000004 	.word	0x20000004

08005160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005164:	b090      	sub	sp, #64	; 0x40
 8005166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
 800516c:	2300      	movs	r3, #0
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005170:	2300      	movs	r3, #0
 8005172:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005178:	4b59      	ldr	r3, [pc, #356]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 030c 	and.w	r3, r3, #12
 8005180:	2b08      	cmp	r3, #8
 8005182:	d00d      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005184:	2b08      	cmp	r3, #8
 8005186:	f200 80a1 	bhi.w	80052cc <HAL_RCC_GetSysClockFreq+0x16c>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_RCC_GetSysClockFreq+0x34>
 800518e:	2b04      	cmp	r3, #4
 8005190:	d003      	beq.n	800519a <HAL_RCC_GetSysClockFreq+0x3a>
 8005192:	e09b      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005194:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005196:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005198:	e09b      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800519a:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800519c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800519e:	e098      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a0:	4b4f      	ldr	r3, [pc, #316]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051aa:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d028      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b6:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	099b      	lsrs	r3, r3, #6
 80051bc:	2200      	movs	r2, #0
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	627a      	str	r2, [r7, #36]	; 0x24
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80051c8:	2100      	movs	r1, #0
 80051ca:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051cc:	fb03 f201 	mul.w	r2, r3, r1
 80051d0:	2300      	movs	r3, #0
 80051d2:	fb00 f303 	mul.w	r3, r0, r3
 80051d6:	4413      	add	r3, r2
 80051d8:	4a43      	ldr	r2, [pc, #268]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051da:	fba0 1202 	umull	r1, r2, r0, r2
 80051de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051e0:	460a      	mov	r2, r1
 80051e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80051e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e6:	4413      	add	r3, r2
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ec:	2200      	movs	r2, #0
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	61fa      	str	r2, [r7, #28]
 80051f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80051fa:	f7fb f825 	bl	8000248 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4613      	mov	r3, r2
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005206:	e053      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005208:	4b35      	ldr	r3, [pc, #212]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	099b      	lsrs	r3, r3, #6
 800520e:	2200      	movs	r2, #0
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	617a      	str	r2, [r7, #20]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800521a:	f04f 0b00 	mov.w	fp, #0
 800521e:	4652      	mov	r2, sl
 8005220:	465b      	mov	r3, fp
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f04f 0100 	mov.w	r1, #0
 800522a:	0159      	lsls	r1, r3, #5
 800522c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005230:	0150      	lsls	r0, r2, #5
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	ebb2 080a 	subs.w	r8, r2, sl
 800523a:	eb63 090b 	sbc.w	r9, r3, fp
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800524a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800524e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005252:	ebb2 0408 	subs.w	r4, r2, r8
 8005256:	eb63 0509 	sbc.w	r5, r3, r9
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	00eb      	lsls	r3, r5, #3
 8005264:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005268:	00e2      	lsls	r2, r4, #3
 800526a:	4614      	mov	r4, r2
 800526c:	461d      	mov	r5, r3
 800526e:	eb14 030a 	adds.w	r3, r4, sl
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	eb45 030b 	adc.w	r3, r5, fp
 8005278:	607b      	str	r3, [r7, #4]
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005286:	4629      	mov	r1, r5
 8005288:	028b      	lsls	r3, r1, #10
 800528a:	4621      	mov	r1, r4
 800528c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005290:	4621      	mov	r1, r4
 8005292:	028a      	lsls	r2, r1, #10
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	2200      	movs	r2, #0
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	60fa      	str	r2, [r7, #12]
 80052a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052a4:	f7fa ffd0 	bl	8000248 <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4613      	mov	r3, r2
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	0c1b      	lsrs	r3, r3, #16
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	3301      	adds	r3, #1
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80052c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052ca:	e002      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80052ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3740      	adds	r7, #64	; 0x40
 80052d8:	46bd      	mov	sp, r7
 80052da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800
 80052e4:	00f42400 	.word	0x00f42400
 80052e8:	017d7840 	.word	0x017d7840

080052ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052f0:	4b03      	ldr	r3, [pc, #12]	; (8005300 <HAL_RCC_GetHCLKFreq+0x14>)
 80052f2:	681b      	ldr	r3, [r3, #0]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000000 	.word	0x20000000

08005304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005308:	f7ff fff0 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 800530c:	4602      	mov	r2, r0
 800530e:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	0a9b      	lsrs	r3, r3, #10
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	4903      	ldr	r1, [pc, #12]	; (8005328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800531a:	5ccb      	ldrb	r3, [r1, r3]
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40023800 	.word	0x40023800
 8005328:	0800964c 	.word	0x0800964c

0800532c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005330:	f7ff ffdc 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0b5b      	lsrs	r3, r3, #13
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	; (8005350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	0800964c 	.word	0x0800964c

08005354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d012      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800537c:	4b69      	ldr	r3, [pc, #420]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4a68      	ldr	r2, [pc, #416]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005382:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005386:	6093      	str	r3, [r2, #8]
 8005388:	4b66      	ldr	r3, [pc, #408]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	4964      	ldr	r1, [pc, #400]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800539e:	2301      	movs	r3, #1
 80053a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d017      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053ae:	4b5d      	ldr	r3, [pc, #372]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053bc:	4959      	ldr	r1, [pc, #356]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053cc:	d101      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80053ce:	2301      	movs	r3, #1
 80053d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80053da:	2301      	movs	r3, #1
 80053dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d017      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053ea:	4b4e      	ldr	r3, [pc, #312]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	494a      	ldr	r1, [pc, #296]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005408:	d101      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800540a:	2301      	movs	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005416:	2301      	movs	r3, #1
 8005418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005426:	2301      	movs	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 808b 	beq.w	800554e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005438:	4b3a      	ldr	r3, [pc, #232]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	4a39      	ldr	r2, [pc, #228]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005442:	6413      	str	r3, [r2, #64]	; 0x40
 8005444:	4b37      	ldr	r3, [pc, #220]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005450:	4b35      	ldr	r3, [pc, #212]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a34      	ldr	r2, [pc, #208]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545c:	f7fe f96c 	bl	8003738 <HAL_GetTick>
 8005460:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005464:	f7fe f968 	bl	8003738 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	; 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e38f      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005476:	4b2c      	ldr	r3, [pc, #176]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005482:	4b28      	ldr	r3, [pc, #160]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d035      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d02e      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054a0:	4b20      	ldr	r3, [pc, #128]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054aa:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054b6:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054c8:	4b16      	ldr	r3, [pc, #88]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d114      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fe f930 	bl	8003738 <HAL_GetTick>
 80054d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054da:	e00a      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054dc:	f7fe f92c 	bl	8003738 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e351      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f2:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0ee      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800550a:	d111      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005518:	4b04      	ldr	r3, [pc, #16]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800551a:	400b      	ands	r3, r1
 800551c:	4901      	ldr	r1, [pc, #4]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
 8005522:	e00b      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005524:	40023800 	.word	0x40023800
 8005528:	40007000 	.word	0x40007000
 800552c:	0ffffcff 	.word	0x0ffffcff
 8005530:	4bac      	ldr	r3, [pc, #688]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	4aab      	ldr	r2, [pc, #684]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005536:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800553a:	6093      	str	r3, [r2, #8]
 800553c:	4ba9      	ldr	r3, [pc, #676]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005548:	49a6      	ldr	r1, [pc, #664]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800554a:	4313      	orrs	r3, r2
 800554c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	2b00      	cmp	r3, #0
 8005558:	d010      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800555a:	4ba2      	ldr	r3, [pc, #648]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800555c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005560:	4aa0      	ldr	r2, [pc, #640]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005566:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800556a:	4b9e      	ldr	r3, [pc, #632]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	499b      	ldr	r1, [pc, #620]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005588:	4b96      	ldr	r3, [pc, #600]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005596:	4993      	ldr	r1, [pc, #588]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055aa:	4b8e      	ldr	r3, [pc, #568]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b8:	498a      	ldr	r1, [pc, #552]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055cc:	4b85      	ldr	r3, [pc, #532]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055da:	4982      	ldr	r1, [pc, #520]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055ee:	4b7d      	ldr	r3, [pc, #500]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	4979      	ldr	r1, [pc, #484]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005610:	4b74      	ldr	r3, [pc, #464]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	4971      	ldr	r1, [pc, #452]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005632:	4b6c      	ldr	r3, [pc, #432]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005638:	f023 020c 	bic.w	r2, r3, #12
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005640:	4968      	ldr	r1, [pc, #416]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005654:	4b63      	ldr	r3, [pc, #396]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	4960      	ldr	r1, [pc, #384]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005676:	4b5b      	ldr	r3, [pc, #364]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	4957      	ldr	r1, [pc, #348]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005698:	4b52      	ldr	r3, [pc, #328]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	494f      	ldr	r1, [pc, #316]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80056ba:	4b4a      	ldr	r3, [pc, #296]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	4946      	ldr	r1, [pc, #280]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80056dc:	4b41      	ldr	r3, [pc, #260]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ea:	493e      	ldr	r1, [pc, #248]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80056fe:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005704:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570c:	4935      	ldr	r1, [pc, #212]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005720:	4b30      	ldr	r3, [pc, #192]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800572e:	492d      	ldr	r1, [pc, #180]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d011      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005742:	4b28      	ldr	r3, [pc, #160]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005748:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005750:	4924      	ldr	r1, [pc, #144]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005760:	d101      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005762:	2301      	movs	r3, #1
 8005764:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005772:	2301      	movs	r3, #1
 8005774:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005782:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005788:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005790:	4914      	ldr	r1, [pc, #80]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00b      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057a4:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b4:	490b      	ldr	r1, [pc, #44]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00f      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d8:	4902      	ldr	r1, [pc, #8]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057e0:	e002      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057f4:	4b8a      	ldr	r3, [pc, #552]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005804:	4986      	ldr	r1, [pc, #536]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005818:	4b81      	ldr	r3, [pc, #516]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800581a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005828:	497d      	ldr	r1, [pc, #500]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d006      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80d6 	beq.w	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005844:	4b76      	ldr	r3, [pc, #472]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a75      	ldr	r2, [pc, #468]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800584a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800584e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005850:	f7fd ff72 	bl	8003738 <HAL_GetTick>
 8005854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005856:	e008      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005858:	f7fd ff6e 	bl	8003738 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	; 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e195      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800586a:	4b6d      	ldr	r3, [pc, #436]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d021      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005886:	2b00      	cmp	r3, #0
 8005888:	d11d      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800588a:	4b65      	ldr	r3, [pc, #404]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800588c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005898:	4b61      	ldr	r3, [pc, #388]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800589a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800589e:	0e1b      	lsrs	r3, r3, #24
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	019a      	lsls	r2, r3, #6
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	061b      	lsls	r3, r3, #24
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	071b      	lsls	r3, r3, #28
 80058be:	4958      	ldr	r1, [pc, #352]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058da:	d00a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d02e      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f0:	d129      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058f2:	4b4b      	ldr	r3, [pc, #300]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f8:	0c1b      	lsrs	r3, r3, #16
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005900:	4b47      	ldr	r3, [pc, #284]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005906:	0f1b      	lsrs	r3, r3, #28
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	019a      	lsls	r2, r3, #6
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	061b      	lsls	r3, r3, #24
 8005920:	431a      	orrs	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	071b      	lsls	r3, r3, #28
 8005926:	493e      	ldr	r1, [pc, #248]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800592e:	4b3c      	ldr	r3, [pc, #240]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005934:	f023 021f 	bic.w	r2, r3, #31
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	3b01      	subs	r3, #1
 800593e:	4938      	ldr	r1, [pc, #224]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01d      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005952:	4b33      	ldr	r3, [pc, #204]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005958:	0e1b      	lsrs	r3, r3, #24
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005960:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005966:	0f1b      	lsrs	r3, r3, #28
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	019a      	lsls	r2, r3, #6
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	041b      	lsls	r3, r3, #16
 800597a:	431a      	orrs	r2, r3
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	061b      	lsls	r3, r3, #24
 8005980:	431a      	orrs	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	071b      	lsls	r3, r3, #28
 8005986:	4926      	ldr	r1, [pc, #152]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d011      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	019a      	lsls	r2, r3, #6
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	041b      	lsls	r3, r3, #16
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	061b      	lsls	r3, r3, #24
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	071b      	lsls	r3, r3, #28
 80059b6:	491a      	ldr	r1, [pc, #104]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059be:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ca:	f7fd feb5 	bl	8003738 <HAL_GetTick>
 80059ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d0:	e008      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059d2:	f7fd feb1 	bl	8003738 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b64      	cmp	r3, #100	; 0x64
 80059de:	d901      	bls.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e0d8      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0f0      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	f040 80ce 	bne.w	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a04:	f7fd fe98 	bl	8003738 <HAL_GetTick>
 8005a08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a0a:	e00b      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a0c:	f7fd fe94 	bl	8003738 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b64      	cmp	r3, #100	; 0x64
 8005a18:	d904      	bls.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e0bb      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a1e:	bf00      	nop
 8005a20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a24:	4b5e      	ldr	r3, [pc, #376]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a30:	d0ec      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d02e      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d12a      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a5a:	4b51      	ldr	r3, [pc, #324]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a68:	4b4d      	ldr	r3, [pc, #308]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6e:	0f1b      	lsrs	r3, r3, #28
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	019a      	lsls	r2, r3, #6
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	041b      	lsls	r3, r3, #16
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	061b      	lsls	r3, r3, #24
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	071b      	lsls	r3, r3, #28
 8005a8e:	4944      	ldr	r1, [pc, #272]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a96:	4b42      	ldr	r3, [pc, #264]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	493d      	ldr	r1, [pc, #244]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d022      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac4:	d11d      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ac6:	4b36      	ldr	r3, [pc, #216]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	0e1b      	lsrs	r3, r3, #24
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ad4:	4b32      	ldr	r3, [pc, #200]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	0f1b      	lsrs	r3, r3, #28
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	019a      	lsls	r2, r3, #6
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	431a      	orrs	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	071b      	lsls	r3, r3, #28
 8005afa:	4929      	ldr	r1, [pc, #164]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d028      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b0e:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	0e1b      	lsrs	r3, r3, #24
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b1c:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	019a      	lsls	r2, r3, #6
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	431a      	orrs	r2, r3
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	061b      	lsls	r3, r3, #24
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	071b      	lsls	r3, r3, #28
 8005b42:	4917      	ldr	r1, [pc, #92]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	4911      	ldr	r1, [pc, #68]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b60:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a0e      	ldr	r2, [pc, #56]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b6c:	f7fd fde4 	bl	8003738 <HAL_GetTick>
 8005b70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b74:	f7fd fde0 	bl	8003738 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b64      	cmp	r3, #100	; 0x64
 8005b80:	d901      	bls.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e007      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b86:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b92:	d1ef      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800

08005ba4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e09d      	b.n	8005cf2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d108      	bne.n	8005bd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc6:	d009      	beq.n	8005bdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	61da      	str	r2, [r3, #28]
 8005bce:	e005      	b.n	8005bdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fd f980 	bl	8002efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c1c:	d902      	bls.n	8005c24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e002      	b.n	8005c2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c32:	d007      	beq.n	8005c44 <HAL_SPI_Init+0xa0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	ea42 0103 	orr.w	r1, r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	0c1b      	lsrs	r3, r3, #16
 8005ca0:	f003 0204 	and.w	r2, r3, #4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005cc0:	ea42 0103 	orr.w	r1, r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69da      	ldr	r2, [r3, #28]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b088      	sub	sp, #32
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	603b      	str	r3, [r7, #0]
 8005d06:	4613      	mov	r3, r2
 8005d08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_SPI_Transmit+0x22>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e158      	b.n	8005fce <HAL_SPI_Transmit+0x2d4>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d24:	f7fd fd08 	bl	8003738 <HAL_GetTick>
 8005d28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d002      	beq.n	8005d40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d3e:	e13d      	b.n	8005fbc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_SPI_Transmit+0x52>
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d50:	e134      	b.n	8005fbc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2203      	movs	r2, #3
 8005d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	88fa      	ldrh	r2, [r7, #6]
 8005d6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	88fa      	ldrh	r2, [r7, #6]
 8005d70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9c:	d10f      	bne.n	8005dbe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d007      	beq.n	8005ddc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005de4:	d94b      	bls.n	8005e7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_SPI_Transmit+0xfa>
 8005dee:	8afb      	ldrh	r3, [r7, #22]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d13e      	bne.n	8005e72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	881a      	ldrh	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	1c9a      	adds	r2, r3, #2
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e18:	e02b      	b.n	8005e72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d112      	bne.n	8005e4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	881a      	ldrh	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	1c9a      	adds	r2, r3, #2
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e4c:	e011      	b.n	8005e72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e4e:	f7fd fc73 	bl	8003738 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d803      	bhi.n	8005e66 <HAL_SPI_Transmit+0x16c>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d102      	bne.n	8005e6c <HAL_SPI_Transmit+0x172>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e70:	e0a4      	b.n	8005fbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1ce      	bne.n	8005e1a <HAL_SPI_Transmit+0x120>
 8005e7c:	e07c      	b.n	8005f78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_SPI_Transmit+0x192>
 8005e86:	8afb      	ldrh	r3, [r7, #22]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d170      	bne.n	8005f6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d912      	bls.n	8005ebc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	881a      	ldrh	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	1c9a      	adds	r2, r3, #2
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b02      	subs	r3, #2
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005eba:	e058      	b.n	8005f6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	7812      	ldrb	r2, [r2, #0]
 8005ec8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ee2:	e044      	b.n	8005f6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d12b      	bne.n	8005f4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d912      	bls.n	8005f22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	1c9a      	adds	r2, r3, #2
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b02      	subs	r3, #2
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f20:	e025      	b.n	8005f6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	7812      	ldrb	r2, [r2, #0]
 8005f2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f48:	e011      	b.n	8005f6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f4a:	f7fd fbf5 	bl	8003738 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d803      	bhi.n	8005f62 <HAL_SPI_Transmit+0x268>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d102      	bne.n	8005f68 <HAL_SPI_Transmit+0x26e>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f6c:	e026      	b.n	8005fbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1b5      	bne.n	8005ee4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 fd07 	bl	8006990 <SPI_EndRxTxTransaction>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e000      	b.n	8005fbc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005fba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b088      	sub	sp, #32
 8005fda:	af02      	add	r7, sp, #8
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	603b      	str	r3, [r7, #0]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff2:	d112      	bne.n	800601a <HAL_SPI_Receive+0x44>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10e      	bne.n	800601a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2204      	movs	r2, #4
 8006000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	4613      	mov	r3, r2
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f910 	bl	8006236 <HAL_SPI_TransmitReceive>
 8006016:	4603      	mov	r3, r0
 8006018:	e109      	b.n	800622e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_SPI_Receive+0x52>
 8006024:	2302      	movs	r3, #2
 8006026:	e102      	b.n	800622e <HAL_SPI_Receive+0x258>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006030:	f7fd fb82 	bl	8003738 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b01      	cmp	r3, #1
 8006040:	d002      	beq.n	8006048 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006042:	2302      	movs	r3, #2
 8006044:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006046:	e0e9      	b.n	800621c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_SPI_Receive+0x7e>
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006058:	e0e0      	b.n	800621c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2204      	movs	r2, #4
 800605e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	88fa      	ldrh	r2, [r7, #6]
 8006072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	88fa      	ldrh	r2, [r7, #6]
 800607a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060a4:	d908      	bls.n	80060b8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	e007      	b.n	80060c8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060c6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d0:	d10f      	bne.n	80060f2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	d007      	beq.n	8006110 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800610e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006118:	d867      	bhi.n	80061ea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800611a:	e030      	b.n	800617e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b01      	cmp	r3, #1
 8006128:	d117      	bne.n	800615a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f103 020c 	add.w	r2, r3, #12
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006158:	e011      	b.n	800617e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800615a:	f7fd faed 	bl	8003738 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d803      	bhi.n	8006172 <HAL_SPI_Receive+0x19c>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d102      	bne.n	8006178 <HAL_SPI_Receive+0x1a2>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d102      	bne.n	800617e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800617c:	e04e      	b.n	800621c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1c8      	bne.n	800611c <HAL_SPI_Receive+0x146>
 800618a:	e034      	b.n	80061f6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b01      	cmp	r3, #1
 8006198:	d115      	bne.n	80061c6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	b292      	uxth	r2, r2
 80061a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	1c9a      	adds	r2, r3, #2
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80061c4:	e011      	b.n	80061ea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061c6:	f7fd fab7 	bl	8003738 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d803      	bhi.n	80061de <HAL_SPI_Receive+0x208>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d102      	bne.n	80061e4 <HAL_SPI_Receive+0x20e>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061e8:	e018      	b.n	800621c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1ca      	bne.n	800618c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fb4c 	bl	8006898 <SPI_EndRxTransaction>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	75fb      	strb	r3, [r7, #23]
 8006218:	e000      	b.n	800621c <HAL_SPI_Receive+0x246>
  }

error :
 800621a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800622c:	7dfb      	ldrb	r3, [r7, #23]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b08a      	sub	sp, #40	; 0x28
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006244:	2301      	movs	r3, #1
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_SPI_TransmitReceive+0x26>
 8006258:	2302      	movs	r3, #2
 800625a:	e1fb      	b.n	8006654 <HAL_SPI_TransmitReceive+0x41e>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006264:	f7fd fa68 	bl	8003738 <HAL_GetTick>
 8006268:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006270:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006278:	887b      	ldrh	r3, [r7, #2]
 800627a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800627c:	887b      	ldrh	r3, [r7, #2]
 800627e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006280:	7efb      	ldrb	r3, [r7, #27]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d00e      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x6e>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800628c:	d106      	bne.n	800629c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d102      	bne.n	800629c <HAL_SPI_TransmitReceive+0x66>
 8006296:	7efb      	ldrb	r3, [r7, #27]
 8006298:	2b04      	cmp	r3, #4
 800629a:	d003      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800629c:	2302      	movs	r3, #2
 800629e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80062a2:	e1cd      	b.n	8006640 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x80>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x80>
 80062b0:	887b      	ldrh	r3, [r7, #2]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80062bc:	e1c0      	b.n	8006640 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d003      	beq.n	80062d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2205      	movs	r2, #5
 80062ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	887a      	ldrh	r2, [r7, #2]
 80062e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	887a      	ldrh	r2, [r7, #2]
 80062ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	887a      	ldrh	r2, [r7, #2]
 80062fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006314:	d802      	bhi.n	800631c <HAL_SPI_TransmitReceive+0xe6>
 8006316:	8a3b      	ldrh	r3, [r7, #16]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d908      	bls.n	800632e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800632a:	605a      	str	r2, [r3, #4]
 800632c:	e007      	b.n	800633e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800633c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	d007      	beq.n	800635c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800635a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006364:	d97c      	bls.n	8006460 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x13e>
 800636e:	8a7b      	ldrh	r3, [r7, #18]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d169      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	881a      	ldrh	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	1c9a      	adds	r2, r3, #2
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006398:	e056      	b.n	8006448 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d11b      	bne.n	80063e0 <HAL_SPI_TransmitReceive+0x1aa>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d016      	beq.n	80063e0 <HAL_SPI_TransmitReceive+0x1aa>
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d113      	bne.n	80063e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	881a      	ldrh	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	1c9a      	adds	r2, r3, #2
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d11c      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x1f2>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d016      	beq.n	8006428 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	b292      	uxth	r2, r2
 8006406:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	1c9a      	adds	r2, r3, #2
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006424:	2301      	movs	r3, #1
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006428:	f7fd f986 	bl	8003738 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006434:	429a      	cmp	r2, r3
 8006436:	d807      	bhi.n	8006448 <HAL_SPI_TransmitReceive+0x212>
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d003      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006446:	e0fb      	b.n	8006640 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1a3      	bne.n	800639a <HAL_SPI_TransmitReceive+0x164>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d19d      	bne.n	800639a <HAL_SPI_TransmitReceive+0x164>
 800645e:	e0df      	b.n	8006620 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_SPI_TransmitReceive+0x23a>
 8006468:	8a7b      	ldrh	r3, [r7, #18]
 800646a:	2b01      	cmp	r3, #1
 800646c:	f040 80cb 	bne.w	8006606 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b01      	cmp	r3, #1
 8006478:	d912      	bls.n	80064a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	881a      	ldrh	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	1c9a      	adds	r2, r3, #2
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b02      	subs	r3, #2
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800649e:	e0b2      	b.n	8006606 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	330c      	adds	r3, #12
 80064aa:	7812      	ldrb	r2, [r2, #0]
 80064ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c6:	e09e      	b.n	8006606 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d134      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x30a>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d02f      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x30a>
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d12c      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d912      	bls.n	8006516 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	881a      	ldrh	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	1c9a      	adds	r2, r3, #2
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b02      	subs	r3, #2
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006514:	e012      	b.n	800653c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	7812      	ldrb	r2, [r2, #0]
 8006522:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	d148      	bne.n	80065e0 <HAL_SPI_TransmitReceive+0x3aa>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d042      	beq.n	80065e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b01      	cmp	r3, #1
 8006564:	d923      	bls.n	80065ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	b292      	uxth	r2, r2
 8006572:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	1c9a      	adds	r2, r3, #2
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b02      	subs	r3, #2
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d81f      	bhi.n	80065dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065aa:	605a      	str	r2, [r3, #4]
 80065ac:	e016      	b.n	80065dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f103 020c 	add.w	r2, r3, #12
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065dc:	2301      	movs	r3, #1
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065e0:	f7fd f8aa 	bl	8003738 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d803      	bhi.n	80065f8 <HAL_SPI_TransmitReceive+0x3c2>
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d102      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x3c8>
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006604:	e01c      	b.n	8006640 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	f47f af5b 	bne.w	80064c8 <HAL_SPI_TransmitReceive+0x292>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	f47f af54 	bne.w	80064c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f9b3 	bl	8006990 <SPI_EndRxTxTransaction>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d006      	beq.n	800663e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	661a      	str	r2, [r3, #96]	; 0x60
 800663c:	e000      	b.n	8006640 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800663e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006654:	4618      	mov	r0, r3
 8006656:	3728      	adds	r7, #40	; 0x28
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	4613      	mov	r3, r2
 800666a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800666c:	f7fd f864 	bl	8003738 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	4413      	add	r3, r2
 800667a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800667c:	f7fd f85c 	bl	8003738 <HAL_GetTick>
 8006680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006682:	4b39      	ldr	r3, [pc, #228]	; (8006768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	015b      	lsls	r3, r3, #5
 8006688:	0d1b      	lsrs	r3, r3, #20
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	fb02 f303 	mul.w	r3, r2, r3
 8006690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006692:	e054      	b.n	800673e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669a:	d050      	beq.n	800673e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800669c:	f7fd f84c 	bl	8003738 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d902      	bls.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d13d      	bne.n	800672e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ca:	d111      	bne.n	80066f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d4:	d004      	beq.n	80066e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066de:	d107      	bne.n	80066f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f8:	d10f      	bne.n	800671a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e017      	b.n	800675e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	3b01      	subs	r3, #1
 800673c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4013      	ands	r3, r2
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	429a      	cmp	r2, r3
 800675a:	d19b      	bne.n	8006694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000000 	.word	0x20000000

0800676c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	; 0x28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800677e:	f7fc ffdb 	bl	8003738 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	1a9b      	subs	r3, r3, r2
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	4413      	add	r3, r2
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800678e:	f7fc ffd3 	bl	8003738 <HAL_GetTick>
 8006792:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800679c:	4b3d      	ldr	r3, [pc, #244]	; (8006894 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	00da      	lsls	r2, r3, #3
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	0d1b      	lsrs	r3, r3, #20
 80067ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
 80067b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80067b4:	e060      	b.n	8006878 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067bc:	d107      	bne.n	80067ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d050      	beq.n	8006878 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067d6:	f7fc ffaf 	bl	8003738 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d902      	bls.n	80067ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d13d      	bne.n	8006868 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006804:	d111      	bne.n	800682a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680e:	d004      	beq.n	800681a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006818:	d107      	bne.n	800682a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006828:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006832:	d10f      	bne.n	8006854 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006852:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e010      	b.n	800688a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	3b01      	subs	r3, #1
 8006876:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4013      	ands	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d196      	bne.n	80067b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3728      	adds	r7, #40	; 0x28
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000000 	.word	0x20000000

08006898 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ac:	d111      	bne.n	80068d2 <SPI_EndRxTransaction+0x3a>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b6:	d004      	beq.n	80068c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c0:	d107      	bne.n	80068d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068da:	d112      	bne.n	8006902 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	2180      	movs	r1, #128	; 0x80
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f7ff feb8 	bl	800665c <SPI_WaitFlagStateUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d021      	beq.n	8006936 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f6:	f043 0220 	orr.w	r2, r3, #32
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e03d      	b.n	800697e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006902:	4b21      	ldr	r3, [pc, #132]	; (8006988 <SPI_EndRxTransaction+0xf0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a21      	ldr	r2, [pc, #132]	; (800698c <SPI_EndRxTransaction+0xf4>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	0d5b      	lsrs	r3, r3, #21
 800690e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	3b01      	subs	r3, #1
 8006922:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692e:	2b80      	cmp	r3, #128	; 0x80
 8006930:	d0f2      	beq.n	8006918 <SPI_EndRxTransaction+0x80>
 8006932:	e000      	b.n	8006936 <SPI_EndRxTransaction+0x9e>
        break;
 8006934:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800693e:	d11d      	bne.n	800697c <SPI_EndRxTransaction+0xe4>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	d004      	beq.n	8006954 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006952:	d113      	bne.n	800697c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff ff03 	bl	800676c <SPI_WaitFifoStateUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d007      	beq.n	800697c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006970:	f043 0220 	orr.w	r2, r3, #32
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e000      	b.n	800697e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000000 	.word	0x20000000
 800698c:	165e9f81 	.word	0x165e9f81

08006990 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7ff fedf 	bl	800676c <SPI_WaitFifoStateUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b8:	f043 0220 	orr.w	r2, r3, #32
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e046      	b.n	8006a52 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069c4:	4b25      	ldr	r3, [pc, #148]	; (8006a5c <SPI_EndRxTxTransaction+0xcc>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a25      	ldr	r2, [pc, #148]	; (8006a60 <SPI_EndRxTxTransaction+0xd0>)
 80069ca:	fba2 2303 	umull	r2, r3, r2, r3
 80069ce:	0d5b      	lsrs	r3, r3, #21
 80069d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e2:	d112      	bne.n	8006a0a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2200      	movs	r2, #0
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7ff fe34 	bl	800665c <SPI_WaitFlagStateUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069fe:	f043 0220 	orr.w	r2, r3, #32
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e023      	b.n	8006a52 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b80      	cmp	r3, #128	; 0x80
 8006a22:	d0f2      	beq.n	8006a0a <SPI_EndRxTxTransaction+0x7a>
 8006a24:	e000      	b.n	8006a28 <SPI_EndRxTxTransaction+0x98>
        break;
 8006a26:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff fe99 	bl	800676c <SPI_WaitFifoStateUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a44:	f043 0220 	orr.w	r2, r3, #32
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e000      	b.n	8006a52 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000000 	.word	0x20000000
 8006a60:	165e9f81 	.word	0x165e9f81

08006a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e049      	b.n	8006b0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fc fcee 	bl	800346c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	f000 fe2a 	bl	80076fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d001      	beq.n	8006b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e054      	b.n	8006bd6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d022      	beq.n	8006b94 <HAL_TIM_Base_Start_IT+0x80>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b56:	d01d      	beq.n	8006b94 <HAL_TIM_Base_Start_IT+0x80>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a22      	ldr	r2, [pc, #136]	; (8006be8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d018      	beq.n	8006b94 <HAL_TIM_Base_Start_IT+0x80>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a21      	ldr	r2, [pc, #132]	; (8006bec <HAL_TIM_Base_Start_IT+0xd8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <HAL_TIM_Base_Start_IT+0x80>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1f      	ldr	r2, [pc, #124]	; (8006bf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00e      	beq.n	8006b94 <HAL_TIM_Base_Start_IT+0x80>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d009      	beq.n	8006b94 <HAL_TIM_Base_Start_IT+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d004      	beq.n	8006b94 <HAL_TIM_Base_Start_IT+0x80>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <HAL_TIM_Base_Start_IT+0xe8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d115      	bne.n	8006bc0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	4b19      	ldr	r3, [pc, #100]	; (8006c00 <HAL_TIM_Base_Start_IT+0xec>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b06      	cmp	r3, #6
 8006ba4:	d015      	beq.n	8006bd2 <HAL_TIM_Base_Start_IT+0xbe>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d011      	beq.n	8006bd2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0201 	orr.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bbe:	e008      	b.n	8006bd2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0201 	orr.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e000      	b.n	8006bd4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40010400 	.word	0x40010400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40001800 	.word	0x40001800
 8006c00:	00010007 	.word	0x00010007

08006c04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e049      	b.n	8006caa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fc fbfe 	bl	800342c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f000 fd5a 	bl	80076fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e049      	b.n	8006d58 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d106      	bne.n	8006cde <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7fc fb5b 	bl	8003394 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f000 fd03 	bl	80076fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_IC_Start_IT+0x1e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	e023      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_IC_Start_IT+0x2e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	e01b      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_IC_Start_IT+0x3e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	e013      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b0c      	cmp	r3, #12
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_IC_Start_IT+0x4e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	e00b      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_IC_Start_IT+0x5e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	e003      	b.n	8006dc6 <HAL_TIM_IC_Start_IT+0x66>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <HAL_TIM_IC_Start_IT+0x78>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	e013      	b.n	8006e00 <HAL_TIM_IC_Start_IT+0xa0>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d104      	bne.n	8006de8 <HAL_TIM_IC_Start_IT+0x88>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	e00b      	b.n	8006e00 <HAL_TIM_IC_Start_IT+0xa0>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d104      	bne.n	8006df8 <HAL_TIM_IC_Start_IT+0x98>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e003      	b.n	8006e00 <HAL_TIM_IC_Start_IT+0xa0>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d102      	bne.n	8006e0e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e08:	7b7b      	ldrb	r3, [r7, #13]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d001      	beq.n	8006e12 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e0e2      	b.n	8006fd8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_IC_Start_IT+0xc2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e20:	e023      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_IC_Start_IT+0xd2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e30:	e01b      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_IC_Start_IT+0xe2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e40:	e013      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_IC_Start_IT+0xf2>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e50:	e00b      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d104      	bne.n	8006e62 <HAL_TIM_IC_Start_IT+0x102>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e60:	e003      	b.n	8006e6a <HAL_TIM_IC_Start_IT+0x10a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <HAL_TIM_IC_Start_IT+0x11a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e78:	e013      	b.n	8006ea2 <HAL_TIM_IC_Start_IT+0x142>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d104      	bne.n	8006e8a <HAL_TIM_IC_Start_IT+0x12a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e88:	e00b      	b.n	8006ea2 <HAL_TIM_IC_Start_IT+0x142>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_IC_Start_IT+0x13a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e98:	e003      	b.n	8006ea2 <HAL_TIM_IC_Start_IT+0x142>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b0c      	cmp	r3, #12
 8006ea6:	d841      	bhi.n	8006f2c <HAL_TIM_IC_Start_IT+0x1cc>
 8006ea8:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <HAL_TIM_IC_Start_IT+0x150>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ee5 	.word	0x08006ee5
 8006eb4:	08006f2d 	.word	0x08006f2d
 8006eb8:	08006f2d 	.word	0x08006f2d
 8006ebc:	08006f2d 	.word	0x08006f2d
 8006ec0:	08006ef7 	.word	0x08006ef7
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006f2d 	.word	0x08006f2d
 8006ecc:	08006f2d 	.word	0x08006f2d
 8006ed0:	08006f09 	.word	0x08006f09
 8006ed4:	08006f2d 	.word	0x08006f2d
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006f2d 	.word	0x08006f2d
 8006ee0:	08006f1b 	.word	0x08006f1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0202 	orr.w	r2, r2, #2
 8006ef2:	60da      	str	r2, [r3, #12]
      break;
 8006ef4:	e01d      	b.n	8006f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0204 	orr.w	r2, r2, #4
 8006f04:	60da      	str	r2, [r3, #12]
      break;
 8006f06:	e014      	b.n	8006f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0208 	orr.w	r2, r2, #8
 8006f16:	60da      	str	r2, [r3, #12]
      break;
 8006f18:	e00b      	b.n	8006f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0210 	orr.w	r2, r2, #16
 8006f28:	60da      	str	r2, [r3, #12]
      break;
 8006f2a:	e002      	b.n	8006f32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f30:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d14e      	bne.n	8006fd6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 f916 	bl	8008172 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a25      	ldr	r2, [pc, #148]	; (8006fe0 <HAL_TIM_IC_Start_IT+0x280>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d022      	beq.n	8006f96 <HAL_TIM_IC_Start_IT+0x236>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f58:	d01d      	beq.n	8006f96 <HAL_TIM_IC_Start_IT+0x236>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a21      	ldr	r2, [pc, #132]	; (8006fe4 <HAL_TIM_IC_Start_IT+0x284>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d018      	beq.n	8006f96 <HAL_TIM_IC_Start_IT+0x236>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a1f      	ldr	r2, [pc, #124]	; (8006fe8 <HAL_TIM_IC_Start_IT+0x288>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <HAL_TIM_IC_Start_IT+0x236>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a1e      	ldr	r2, [pc, #120]	; (8006fec <HAL_TIM_IC_Start_IT+0x28c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00e      	beq.n	8006f96 <HAL_TIM_IC_Start_IT+0x236>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a1c      	ldr	r2, [pc, #112]	; (8006ff0 <HAL_TIM_IC_Start_IT+0x290>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d009      	beq.n	8006f96 <HAL_TIM_IC_Start_IT+0x236>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1b      	ldr	r2, [pc, #108]	; (8006ff4 <HAL_TIM_IC_Start_IT+0x294>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d004      	beq.n	8006f96 <HAL_TIM_IC_Start_IT+0x236>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <HAL_TIM_IC_Start_IT+0x298>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d115      	bne.n	8006fc2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	4b17      	ldr	r3, [pc, #92]	; (8006ffc <HAL_TIM_IC_Start_IT+0x29c>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b06      	cmp	r3, #6
 8006fa6:	d015      	beq.n	8006fd4 <HAL_TIM_IC_Start_IT+0x274>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fae:	d011      	beq.n	8006fd4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc0:	e008      	b.n	8006fd4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e000      	b.n	8006fd6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40010000 	.word	0x40010000
 8006fe4:	40000400 	.word	0x40000400
 8006fe8:	40000800 	.word	0x40000800
 8006fec:	40000c00 	.word	0x40000c00
 8006ff0:	40010400 	.word	0x40010400
 8006ff4:	40014000 	.word	0x40014000
 8006ff8:	40001800 	.word	0x40001800
 8006ffc:	00010007 	.word	0x00010007

08007000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b02      	cmp	r3, #2
 8007014:	d122      	bne.n	800705c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b02      	cmp	r3, #2
 8007022:	d11b      	bne.n	800705c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0202 	mvn.w	r2, #2
 800702c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fb3c 	bl	80076c0 <HAL_TIM_IC_CaptureCallback>
 8007048:	e005      	b.n	8007056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fb2e 	bl	80076ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fb3f 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b04      	cmp	r3, #4
 8007068:	d122      	bne.n	80070b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b04      	cmp	r3, #4
 8007076:	d11b      	bne.n	80070b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0204 	mvn.w	r2, #4
 8007080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2202      	movs	r2, #2
 8007086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fb12 	bl	80076c0 <HAL_TIM_IC_CaptureCallback>
 800709c:	e005      	b.n	80070aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fb04 	bl	80076ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fb15 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d122      	bne.n	8007104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d11b      	bne.n	8007104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0208 	mvn.w	r2, #8
 80070d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2204      	movs	r2, #4
 80070da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fae8 	bl	80076c0 <HAL_TIM_IC_CaptureCallback>
 80070f0:	e005      	b.n	80070fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fada 	bl	80076ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 faeb 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b10      	cmp	r3, #16
 8007110:	d122      	bne.n	8007158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f003 0310 	and.w	r3, r3, #16
 800711c:	2b10      	cmp	r3, #16
 800711e:	d11b      	bne.n	8007158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0210 	mvn.w	r2, #16
 8007128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2208      	movs	r2, #8
 800712e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fabe 	bl	80076c0 <HAL_TIM_IC_CaptureCallback>
 8007144:	e005      	b.n	8007152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fab0 	bl	80076ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fac1 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b01      	cmp	r3, #1
 8007164:	d10e      	bne.n	8007184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b01      	cmp	r3, #1
 8007172:	d107      	bne.n	8007184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0201 	mvn.w	r2, #1
 800717c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fb fdc8 	bl	8002d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b80      	cmp	r3, #128	; 0x80
 8007190:	d10e      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719c:	2b80      	cmp	r3, #128	; 0x80
 800719e:	d107      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 f89e 	bl	80082ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071be:	d10e      	bne.n	80071de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ca:	2b80      	cmp	r3, #128	; 0x80
 80071cc:	d107      	bne.n	80071de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 f891 	bl	8008300 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	d10e      	bne.n	800720a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d107      	bne.n	800720a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fa6f 	bl	80076e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b20      	cmp	r3, #32
 8007216:	d10e      	bne.n	8007236 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b20      	cmp	r3, #32
 8007224:	d107      	bne.n	8007236 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f06f 0220 	mvn.w	r2, #32
 800722e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 f851 	bl	80082d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007236:	bf00      	nop
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b086      	sub	sp, #24
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_TIM_IC_ConfigChannel+0x1e>
 8007258:	2302      	movs	r3, #2
 800725a:	e088      	b.n	800736e <HAL_TIM_IC_ConfigChannel+0x130>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d11b      	bne.n	80072a2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6818      	ldr	r0, [r3, #0]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6819      	ldr	r1, [r3, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f000 fdd1 	bl	8007e20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 020c 	bic.w	r2, r2, #12
 800728c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6999      	ldr	r1, [r3, #24]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	619a      	str	r2, [r3, #24]
 80072a0:	e060      	b.n	8007364 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d11c      	bne.n	80072e2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6819      	ldr	r1, [r3, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f000 fe55 	bl	8007f66 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072ca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6999      	ldr	r1, [r3, #24]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	021a      	lsls	r2, r3, #8
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	619a      	str	r2, [r3, #24]
 80072e0:	e040      	b.n	8007364 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d11b      	bne.n	8007320 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f000 fea2 	bl	8008040 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69da      	ldr	r2, [r3, #28]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 020c 	bic.w	r2, r2, #12
 800730a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69d9      	ldr	r1, [r3, #28]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	61da      	str	r2, [r3, #28]
 800731e:	e021      	b.n	8007364 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b0c      	cmp	r3, #12
 8007324:	d11c      	bne.n	8007360 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6819      	ldr	r1, [r3, #0]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f000 febf 	bl	80080b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007348:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69d9      	ldr	r1, [r3, #28]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	021a      	lsls	r2, r3, #8
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	61da      	str	r2, [r3, #28]
 800735e:	e001      	b.n	8007364 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800736c:	7dfb      	ldrb	r3, [r7, #23]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007392:	2302      	movs	r3, #2
 8007394:	e0ff      	b.n	8007596 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b14      	cmp	r3, #20
 80073a2:	f200 80f0 	bhi.w	8007586 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073a6:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ac:	08007401 	.word	0x08007401
 80073b0:	08007587 	.word	0x08007587
 80073b4:	08007587 	.word	0x08007587
 80073b8:	08007587 	.word	0x08007587
 80073bc:	08007441 	.word	0x08007441
 80073c0:	08007587 	.word	0x08007587
 80073c4:	08007587 	.word	0x08007587
 80073c8:	08007587 	.word	0x08007587
 80073cc:	08007483 	.word	0x08007483
 80073d0:	08007587 	.word	0x08007587
 80073d4:	08007587 	.word	0x08007587
 80073d8:	08007587 	.word	0x08007587
 80073dc:	080074c3 	.word	0x080074c3
 80073e0:	08007587 	.word	0x08007587
 80073e4:	08007587 	.word	0x08007587
 80073e8:	08007587 	.word	0x08007587
 80073ec:	08007505 	.word	0x08007505
 80073f0:	08007587 	.word	0x08007587
 80073f4:	08007587 	.word	0x08007587
 80073f8:	08007587 	.word	0x08007587
 80073fc:	08007545 	.word	0x08007545
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	4618      	mov	r0, r3
 8007408:	f000 fa18 	bl	800783c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699a      	ldr	r2, [r3, #24]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0208 	orr.w	r2, r2, #8
 800741a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699a      	ldr	r2, [r3, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0204 	bic.w	r2, r2, #4
 800742a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6999      	ldr	r1, [r3, #24]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	619a      	str	r2, [r3, #24]
      break;
 800743e:	e0a5      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68b9      	ldr	r1, [r7, #8]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fa6a 	bl	8007920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800745a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699a      	ldr	r2, [r3, #24]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800746a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6999      	ldr	r1, [r3, #24]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	021a      	lsls	r2, r3, #8
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	619a      	str	r2, [r3, #24]
      break;
 8007480:	e084      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	4618      	mov	r0, r3
 800748a:	f000 fac1 	bl	8007a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69da      	ldr	r2, [r3, #28]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0208 	orr.w	r2, r2, #8
 800749c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69da      	ldr	r2, [r3, #28]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0204 	bic.w	r2, r2, #4
 80074ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69d9      	ldr	r1, [r3, #28]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	61da      	str	r2, [r3, #28]
      break;
 80074c0:	e064      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fb17 	bl	8007afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69da      	ldr	r2, [r3, #28]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69d9      	ldr	r1, [r3, #28]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	021a      	lsls	r2, r3, #8
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	61da      	str	r2, [r3, #28]
      break;
 8007502:	e043      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 fb4e 	bl	8007bac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0208 	orr.w	r2, r2, #8
 800751e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0204 	bic.w	r2, r2, #4
 800752e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	691a      	ldr	r2, [r3, #16]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007542:	e023      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fb80 	bl	8007c50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800755e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800756e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	021a      	lsls	r2, r3, #8
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007584:	e002      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	75fb      	strb	r3, [r7, #23]
      break;
 800758a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop

080075a0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e031      	b.n	800761c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb94 	bl	8007cf8 <TIM_SlaveTimer_SetConfig>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e018      	b.n	800761c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007608:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b0c      	cmp	r3, #12
 8007636:	d831      	bhi.n	800769c <HAL_TIM_ReadCapturedValue+0x78>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <HAL_TIM_ReadCapturedValue+0x1c>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007675 	.word	0x08007675
 8007644:	0800769d 	.word	0x0800769d
 8007648:	0800769d 	.word	0x0800769d
 800764c:	0800769d 	.word	0x0800769d
 8007650:	0800767f 	.word	0x0800767f
 8007654:	0800769d 	.word	0x0800769d
 8007658:	0800769d 	.word	0x0800769d
 800765c:	0800769d 	.word	0x0800769d
 8007660:	08007689 	.word	0x08007689
 8007664:	0800769d 	.word	0x0800769d
 8007668:	0800769d 	.word	0x0800769d
 800766c:	0800769d 	.word	0x0800769d
 8007670:	08007693 	.word	0x08007693
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767a:	60fb      	str	r3, [r7, #12]

      break;
 800767c:	e00f      	b.n	800769e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	60fb      	str	r3, [r7, #12]

      break;
 8007686:	e00a      	b.n	800769e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768e:	60fb      	str	r3, [r7, #12]

      break;
 8007690:	e005      	b.n	800769e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	60fb      	str	r3, [r7, #12]

      break;
 800769a:	e000      	b.n	800769e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800769c:	bf00      	nop
  }

  return tmpreg;
 800769e:	68fb      	ldr	r3, [r7, #12]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a40      	ldr	r2, [pc, #256]	; (8007810 <TIM_Base_SetConfig+0x114>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d013      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771a:	d00f      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a3d      	ldr	r2, [pc, #244]	; (8007814 <TIM_Base_SetConfig+0x118>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00b      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a3c      	ldr	r2, [pc, #240]	; (8007818 <TIM_Base_SetConfig+0x11c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d007      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a3b      	ldr	r2, [pc, #236]	; (800781c <TIM_Base_SetConfig+0x120>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a3a      	ldr	r2, [pc, #232]	; (8007820 <TIM_Base_SetConfig+0x124>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d108      	bne.n	800774e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a2f      	ldr	r2, [pc, #188]	; (8007810 <TIM_Base_SetConfig+0x114>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d02b      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775c:	d027      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a2c      	ldr	r2, [pc, #176]	; (8007814 <TIM_Base_SetConfig+0x118>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d023      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2b      	ldr	r2, [pc, #172]	; (8007818 <TIM_Base_SetConfig+0x11c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d01f      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2a      	ldr	r2, [pc, #168]	; (800781c <TIM_Base_SetConfig+0x120>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01b      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a29      	ldr	r2, [pc, #164]	; (8007820 <TIM_Base_SetConfig+0x124>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d017      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a28      	ldr	r2, [pc, #160]	; (8007824 <TIM_Base_SetConfig+0x128>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a27      	ldr	r2, [pc, #156]	; (8007828 <TIM_Base_SetConfig+0x12c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00f      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a26      	ldr	r2, [pc, #152]	; (800782c <TIM_Base_SetConfig+0x130>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00b      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a25      	ldr	r2, [pc, #148]	; (8007830 <TIM_Base_SetConfig+0x134>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a24      	ldr	r2, [pc, #144]	; (8007834 <TIM_Base_SetConfig+0x138>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a23      	ldr	r2, [pc, #140]	; (8007838 <TIM_Base_SetConfig+0x13c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d108      	bne.n	80077c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a0a      	ldr	r2, [pc, #40]	; (8007810 <TIM_Base_SetConfig+0x114>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_Base_SetConfig+0xf8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a0c      	ldr	r2, [pc, #48]	; (8007820 <TIM_Base_SetConfig+0x124>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d103      	bne.n	80077fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	615a      	str	r2, [r3, #20]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	40010000 	.word	0x40010000
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800
 800781c:	40000c00 	.word	0x40000c00
 8007820:	40010400 	.word	0x40010400
 8007824:	40014000 	.word	0x40014000
 8007828:	40014400 	.word	0x40014400
 800782c:	40014800 	.word	0x40014800
 8007830:	40001800 	.word	0x40001800
 8007834:	40001c00 	.word	0x40001c00
 8007838:	40002000 	.word	0x40002000

0800783c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	f023 0201 	bic.w	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <TIM_OC1_SetConfig+0xd8>)
 8007868:	4013      	ands	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f023 0302 	bic.w	r3, r3, #2
 8007884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a21      	ldr	r2, [pc, #132]	; (8007918 <TIM_OC1_SetConfig+0xdc>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_OC1_SetConfig+0x64>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a20      	ldr	r2, [pc, #128]	; (800791c <TIM_OC1_SetConfig+0xe0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10c      	bne.n	80078ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f023 0308 	bic.w	r3, r3, #8
 80078a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f023 0304 	bic.w	r3, r3, #4
 80078b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a16      	ldr	r2, [pc, #88]	; (8007918 <TIM_OC1_SetConfig+0xdc>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d003      	beq.n	80078ca <TIM_OC1_SetConfig+0x8e>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a15      	ldr	r2, [pc, #84]	; (800791c <TIM_OC1_SetConfig+0xe0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d111      	bne.n	80078ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	621a      	str	r2, [r3, #32]
}
 8007908:	bf00      	nop
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	fffeff8f 	.word	0xfffeff8f
 8007918:	40010000 	.word	0x40010000
 800791c:	40010400 	.word	0x40010400

08007920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0210 	bic.w	r2, r3, #16
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4b2e      	ldr	r3, [pc, #184]	; (8007a04 <TIM_OC2_SetConfig+0xe4>)
 800794c:	4013      	ands	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f023 0320 	bic.w	r3, r3, #32
 800796a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4313      	orrs	r3, r2
 8007976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a23      	ldr	r2, [pc, #140]	; (8007a08 <TIM_OC2_SetConfig+0xe8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_OC2_SetConfig+0x68>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a22      	ldr	r2, [pc, #136]	; (8007a0c <TIM_OC2_SetConfig+0xec>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d10d      	bne.n	80079a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800798e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <TIM_OC2_SetConfig+0xe8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d003      	beq.n	80079b4 <TIM_OC2_SetConfig+0x94>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a17      	ldr	r2, [pc, #92]	; (8007a0c <TIM_OC2_SetConfig+0xec>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d113      	bne.n	80079dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	4313      	orrs	r3, r2
 80079da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	621a      	str	r2, [r3, #32]
}
 80079f6:	bf00      	nop
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	feff8fff 	.word	0xfeff8fff
 8007a08:	40010000 	.word	0x40010000
 8007a0c:	40010400 	.word	0x40010400

08007a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4b2d      	ldr	r3, [pc, #180]	; (8007af0 <TIM_OC3_SetConfig+0xe0>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0303 	bic.w	r3, r3, #3
 8007a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a22      	ldr	r2, [pc, #136]	; (8007af4 <TIM_OC3_SetConfig+0xe4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC3_SetConfig+0x66>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a21      	ldr	r2, [pc, #132]	; (8007af8 <TIM_OC3_SetConfig+0xe8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d10d      	bne.n	8007a92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a17      	ldr	r2, [pc, #92]	; (8007af4 <TIM_OC3_SetConfig+0xe4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d003      	beq.n	8007aa2 <TIM_OC3_SetConfig+0x92>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a16      	ldr	r2, [pc, #88]	; (8007af8 <TIM_OC3_SetConfig+0xe8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d113      	bne.n	8007aca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	621a      	str	r2, [r3, #32]
}
 8007ae4:	bf00      	nop
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	fffeff8f 	.word	0xfffeff8f
 8007af4:	40010000 	.word	0x40010000
 8007af8:	40010400 	.word	0x40010400

08007afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4b1e      	ldr	r3, [pc, #120]	; (8007ba0 <TIM_OC4_SetConfig+0xa4>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	031b      	lsls	r3, r3, #12
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a13      	ldr	r2, [pc, #76]	; (8007ba4 <TIM_OC4_SetConfig+0xa8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_OC4_SetConfig+0x68>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a12      	ldr	r2, [pc, #72]	; (8007ba8 <TIM_OC4_SetConfig+0xac>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d109      	bne.n	8007b78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	019b      	lsls	r3, r3, #6
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	621a      	str	r2, [r3, #32]
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	feff8fff 	.word	0xfeff8fff
 8007ba4:	40010000 	.word	0x40010000
 8007ba8:	40010400 	.word	0x40010400

08007bac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4b1b      	ldr	r3, [pc, #108]	; (8007c44 <TIM_OC5_SetConfig+0x98>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	041b      	lsls	r3, r3, #16
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a12      	ldr	r2, [pc, #72]	; (8007c48 <TIM_OC5_SetConfig+0x9c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_OC5_SetConfig+0x5e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <TIM_OC5_SetConfig+0xa0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d109      	bne.n	8007c1e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	621a      	str	r2, [r3, #32]
}
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	fffeff8f 	.word	0xfffeff8f
 8007c48:	40010000 	.word	0x40010000
 8007c4c:	40010400 	.word	0x40010400

08007c50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4b1c      	ldr	r3, [pc, #112]	; (8007cec <TIM_OC6_SetConfig+0x9c>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	051b      	lsls	r3, r3, #20
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a13      	ldr	r2, [pc, #76]	; (8007cf0 <TIM_OC6_SetConfig+0xa0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d003      	beq.n	8007cb0 <TIM_OC6_SetConfig+0x60>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a12      	ldr	r2, [pc, #72]	; (8007cf4 <TIM_OC6_SetConfig+0xa4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d109      	bne.n	8007cc4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	029b      	lsls	r3, r3, #10
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	621a      	str	r2, [r3, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	feff8fff 	.word	0xfeff8fff
 8007cf0:	40010000 	.word	0x40010000
 8007cf4:	40010400 	.word	0x40010400

08007cf8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d14:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4b3e      	ldr	r3, [pc, #248]	; (8007e1c <TIM_SlaveTimer_SetConfig+0x124>)
 8007d24:	4013      	ands	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b70      	cmp	r3, #112	; 0x70
 8007d40:	d01a      	beq.n	8007d78 <TIM_SlaveTimer_SetConfig+0x80>
 8007d42:	2b70      	cmp	r3, #112	; 0x70
 8007d44:	d860      	bhi.n	8007e08 <TIM_SlaveTimer_SetConfig+0x110>
 8007d46:	2b60      	cmp	r3, #96	; 0x60
 8007d48:	d054      	beq.n	8007df4 <TIM_SlaveTimer_SetConfig+0xfc>
 8007d4a:	2b60      	cmp	r3, #96	; 0x60
 8007d4c:	d85c      	bhi.n	8007e08 <TIM_SlaveTimer_SetConfig+0x110>
 8007d4e:	2b50      	cmp	r3, #80	; 0x50
 8007d50:	d046      	beq.n	8007de0 <TIM_SlaveTimer_SetConfig+0xe8>
 8007d52:	2b50      	cmp	r3, #80	; 0x50
 8007d54:	d858      	bhi.n	8007e08 <TIM_SlaveTimer_SetConfig+0x110>
 8007d56:	2b40      	cmp	r3, #64	; 0x40
 8007d58:	d019      	beq.n	8007d8e <TIM_SlaveTimer_SetConfig+0x96>
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d854      	bhi.n	8007e08 <TIM_SlaveTimer_SetConfig+0x110>
 8007d5e:	2b30      	cmp	r3, #48	; 0x30
 8007d60:	d055      	beq.n	8007e0e <TIM_SlaveTimer_SetConfig+0x116>
 8007d62:	2b30      	cmp	r3, #48	; 0x30
 8007d64:	d850      	bhi.n	8007e08 <TIM_SlaveTimer_SetConfig+0x110>
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d051      	beq.n	8007e0e <TIM_SlaveTimer_SetConfig+0x116>
 8007d6a:	2b20      	cmp	r3, #32
 8007d6c:	d84c      	bhi.n	8007e08 <TIM_SlaveTimer_SetConfig+0x110>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d04d      	beq.n	8007e0e <TIM_SlaveTimer_SetConfig+0x116>
 8007d72:	2b10      	cmp	r3, #16
 8007d74:	d04b      	beq.n	8007e0e <TIM_SlaveTimer_SetConfig+0x116>
 8007d76:	e047      	b.n	8007e08 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	68d9      	ldr	r1, [r3, #12]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f000 f9d3 	bl	8008132 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007d8c:	e040      	b.n	8007e10 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d101      	bne.n	8007d9a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e03b      	b.n	8007e12 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6a1a      	ldr	r2, [r3, #32]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0201 	bic.w	r2, r2, #1
 8007db0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dc0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]
      break;
 8007dde:	e017      	b.n	8007e10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	6899      	ldr	r1, [r3, #8]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	461a      	mov	r2, r3
 8007dee:	f000 f88b 	bl	8007f08 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007df2:	e00d      	b.n	8007e10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	6899      	ldr	r1, [r3, #8]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	461a      	mov	r2, r3
 8007e02:	f000 f8ed 	bl	8007fe0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007e06:	e003      	b.n	8007e10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0c:	e000      	b.n	8007e10 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007e0e:	bf00      	nop
  }

  return status;
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	fffefff8 	.word	0xfffefff8

08007e20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	f023 0201 	bic.w	r2, r3, #1
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4a28      	ldr	r2, [pc, #160]	; (8007eec <TIM_TI1_SetConfig+0xcc>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d01b      	beq.n	8007e86 <TIM_TI1_SetConfig+0x66>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e54:	d017      	beq.n	8007e86 <TIM_TI1_SetConfig+0x66>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4a25      	ldr	r2, [pc, #148]	; (8007ef0 <TIM_TI1_SetConfig+0xd0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d013      	beq.n	8007e86 <TIM_TI1_SetConfig+0x66>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4a24      	ldr	r2, [pc, #144]	; (8007ef4 <TIM_TI1_SetConfig+0xd4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00f      	beq.n	8007e86 <TIM_TI1_SetConfig+0x66>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4a23      	ldr	r2, [pc, #140]	; (8007ef8 <TIM_TI1_SetConfig+0xd8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00b      	beq.n	8007e86 <TIM_TI1_SetConfig+0x66>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4a22      	ldr	r2, [pc, #136]	; (8007efc <TIM_TI1_SetConfig+0xdc>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d007      	beq.n	8007e86 <TIM_TI1_SetConfig+0x66>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4a21      	ldr	r2, [pc, #132]	; (8007f00 <TIM_TI1_SetConfig+0xe0>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_TI1_SetConfig+0x66>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4a20      	ldr	r2, [pc, #128]	; (8007f04 <TIM_TI1_SetConfig+0xe4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d101      	bne.n	8007e8a <TIM_TI1_SetConfig+0x6a>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <TIM_TI1_SetConfig+0x6c>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d008      	beq.n	8007ea2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f023 0303 	bic.w	r3, r3, #3
 8007e96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	e003      	b.n	8007eaa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f043 0301 	orr.w	r3, r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f023 030a 	bic.w	r3, r3, #10
 8007ec4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f003 030a 	and.w	r3, r3, #10
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	621a      	str	r2, [r3, #32]
}
 8007ede:	bf00      	nop
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40010000 	.word	0x40010000
 8007ef0:	40000400 	.word	0x40000400
 8007ef4:	40000800 	.word	0x40000800
 8007ef8:	40000c00 	.word	0x40000c00
 8007efc:	40010400 	.word	0x40010400
 8007f00:	40014000 	.word	0x40014000
 8007f04:	40001800 	.word	0x40001800

08007f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f023 0201 	bic.w	r2, r3, #1
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f023 030a 	bic.w	r3, r3, #10
 8007f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b087      	sub	sp, #28
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]
 8007f72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	f023 0210 	bic.w	r2, r3, #16
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	031b      	lsls	r3, r3, #12
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	621a      	str	r2, [r3, #32]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	f023 0210 	bic.w	r2, r3, #16
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800800a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	031b      	lsls	r3, r3, #12
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800801c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	621a      	str	r2, [r3, #32]
}
 8008034:	bf00      	nop
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f023 0303 	bic.w	r3, r3, #3
 800806c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4313      	orrs	r3, r2
 8008074:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800807c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	b2db      	uxtb	r3, r3
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4313      	orrs	r3, r2
 8008088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008090:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	021b      	lsls	r3, r3, #8
 8008096:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	621a      	str	r2, [r3, #32]
}
 80080ac:	bf00      	nop
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	031b      	lsls	r3, r3, #12
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800810a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	031b      	lsls	r3, r3, #12
 8008110:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4313      	orrs	r3, r2
 8008118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008132:	b480      	push	{r7}
 8008134:	b087      	sub	sp, #28
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	607a      	str	r2, [r7, #4]
 800813e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800814c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	021a      	lsls	r2, r3, #8
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	431a      	orrs	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	4313      	orrs	r3, r2
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	609a      	str	r2, [r3, #8]
}
 8008166:	bf00      	nop
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008172:	b480      	push	{r7}
 8008174:	b087      	sub	sp, #28
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f003 031f 	and.w	r3, r3, #31
 8008184:	2201      	movs	r2, #1
 8008186:	fa02 f303 	lsl.w	r3, r2, r3
 800818a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a1a      	ldr	r2, [r3, #32]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	43db      	mvns	r3, r3
 8008194:	401a      	ands	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a1a      	ldr	r2, [r3, #32]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f003 031f 	and.w	r3, r3, #31
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	fa01 f303 	lsl.w	r3, r1, r3
 80081aa:	431a      	orrs	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	621a      	str	r2, [r3, #32]
}
 80081b0:	bf00      	nop
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e06d      	b.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a30      	ldr	r2, [pc, #192]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d004      	beq.n	8008208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a2f      	ldr	r2, [pc, #188]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d108      	bne.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800820e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008220:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a20      	ldr	r2, [pc, #128]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d022      	beq.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008246:	d01d      	beq.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d018      	beq.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a1c      	ldr	r2, [pc, #112]	; (80082c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d013      	beq.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a1a      	ldr	r2, [pc, #104]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00e      	beq.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a15      	ldr	r2, [pc, #84]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d009      	beq.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a16      	ldr	r2, [pc, #88]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d004      	beq.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d10c      	bne.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800828a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	4313      	orrs	r3, r2
 8008294:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	40010000 	.word	0x40010000
 80082c0:	40010400 	.word	0x40010400
 80082c4:	40000400 	.word	0x40000400
 80082c8:	40000800 	.word	0x40000800
 80082cc:	40000c00 	.word	0x40000c00
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40001800 	.word	0x40001800

080082d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e040      	b.n	80083a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fb f926 	bl	8003588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2224      	movs	r2, #36	; 0x24
 8008340:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0201 	bic.w	r2, r2, #1
 8008350:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f8c0 	bl	80084d8 <UART_SetConfig>
 8008358:	4603      	mov	r3, r0
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e022      	b.n	80083a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fb18 	bl	80089a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800837e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800838e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0201 	orr.w	r2, r2, #1
 800839e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fb9f 	bl	8008ae4 <UART_CheckIdleState>
 80083a6:	4603      	mov	r3, r0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	f040 8081 	bne.w	80084cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <HAL_UART_Transmit+0x26>
 80083d0:	88fb      	ldrh	r3, [r7, #6]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e079      	b.n	80084ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_UART_Transmit+0x38>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e072      	b.n	80084ce <HAL_UART_Transmit+0x11e>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2221      	movs	r2, #33	; 0x21
 80083fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083fe:	f7fb f99b 	bl	8003738 <HAL_GetTick>
 8008402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	88fa      	ldrh	r2, [r7, #6]
 8008408:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	88fa      	ldrh	r2, [r7, #6]
 8008410:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841c:	d108      	bne.n	8008430 <HAL_UART_Transmit+0x80>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d104      	bne.n	8008430 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	61bb      	str	r3, [r7, #24]
 800842e:	e003      	b.n	8008438 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008440:	e02c      	b.n	800849c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2200      	movs	r2, #0
 800844a:	2180      	movs	r1, #128	; 0x80
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 fb92 	bl	8008b76 <UART_WaitOnFlagUntilTimeout>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e038      	b.n	80084ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10b      	bne.n	800847a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008470:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	3302      	adds	r3, #2
 8008476:	61bb      	str	r3, [r7, #24]
 8008478:	e007      	b.n	800848a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	3301      	adds	r3, #1
 8008488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	b29a      	uxth	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1cc      	bne.n	8008442 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2200      	movs	r2, #0
 80084b0:	2140      	movs	r1, #64	; 0x40
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f000 fb5f 	bl	8008b76 <UART_WaitOnFlagUntilTimeout>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e005      	b.n	80084ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2220      	movs	r2, #32
 80084c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	e000      	b.n	80084ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80084cc:	2302      	movs	r3, #2
  }
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3720      	adds	r7, #32
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	4ba6      	ldr	r3, [pc, #664]	; (800879c <UART_SetConfig+0x2c4>)
 8008504:	4013      	ands	r3, r2
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	6979      	ldr	r1, [r7, #20]
 800850c:	430b      	orrs	r3, r1
 800850e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	430a      	orrs	r2, r1
 8008548:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a94      	ldr	r2, [pc, #592]	; (80087a0 <UART_SetConfig+0x2c8>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d120      	bne.n	8008596 <UART_SetConfig+0xbe>
 8008554:	4b93      	ldr	r3, [pc, #588]	; (80087a4 <UART_SetConfig+0x2cc>)
 8008556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b03      	cmp	r3, #3
 8008560:	d816      	bhi.n	8008590 <UART_SetConfig+0xb8>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <UART_SetConfig+0x90>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	08008579 	.word	0x08008579
 800856c:	08008585 	.word	0x08008585
 8008570:	0800857f 	.word	0x0800857f
 8008574:	0800858b 	.word	0x0800858b
 8008578:	2301      	movs	r3, #1
 800857a:	77fb      	strb	r3, [r7, #31]
 800857c:	e150      	b.n	8008820 <UART_SetConfig+0x348>
 800857e:	2302      	movs	r3, #2
 8008580:	77fb      	strb	r3, [r7, #31]
 8008582:	e14d      	b.n	8008820 <UART_SetConfig+0x348>
 8008584:	2304      	movs	r3, #4
 8008586:	77fb      	strb	r3, [r7, #31]
 8008588:	e14a      	b.n	8008820 <UART_SetConfig+0x348>
 800858a:	2308      	movs	r3, #8
 800858c:	77fb      	strb	r3, [r7, #31]
 800858e:	e147      	b.n	8008820 <UART_SetConfig+0x348>
 8008590:	2310      	movs	r3, #16
 8008592:	77fb      	strb	r3, [r7, #31]
 8008594:	e144      	b.n	8008820 <UART_SetConfig+0x348>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a83      	ldr	r2, [pc, #524]	; (80087a8 <UART_SetConfig+0x2d0>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d132      	bne.n	8008606 <UART_SetConfig+0x12e>
 80085a0:	4b80      	ldr	r3, [pc, #512]	; (80087a4 <UART_SetConfig+0x2cc>)
 80085a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a6:	f003 030c 	and.w	r3, r3, #12
 80085aa:	2b0c      	cmp	r3, #12
 80085ac:	d828      	bhi.n	8008600 <UART_SetConfig+0x128>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <UART_SetConfig+0xdc>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085e9 	.word	0x080085e9
 80085b8:	08008601 	.word	0x08008601
 80085bc:	08008601 	.word	0x08008601
 80085c0:	08008601 	.word	0x08008601
 80085c4:	080085f5 	.word	0x080085f5
 80085c8:	08008601 	.word	0x08008601
 80085cc:	08008601 	.word	0x08008601
 80085d0:	08008601 	.word	0x08008601
 80085d4:	080085ef 	.word	0x080085ef
 80085d8:	08008601 	.word	0x08008601
 80085dc:	08008601 	.word	0x08008601
 80085e0:	08008601 	.word	0x08008601
 80085e4:	080085fb 	.word	0x080085fb
 80085e8:	2300      	movs	r3, #0
 80085ea:	77fb      	strb	r3, [r7, #31]
 80085ec:	e118      	b.n	8008820 <UART_SetConfig+0x348>
 80085ee:	2302      	movs	r3, #2
 80085f0:	77fb      	strb	r3, [r7, #31]
 80085f2:	e115      	b.n	8008820 <UART_SetConfig+0x348>
 80085f4:	2304      	movs	r3, #4
 80085f6:	77fb      	strb	r3, [r7, #31]
 80085f8:	e112      	b.n	8008820 <UART_SetConfig+0x348>
 80085fa:	2308      	movs	r3, #8
 80085fc:	77fb      	strb	r3, [r7, #31]
 80085fe:	e10f      	b.n	8008820 <UART_SetConfig+0x348>
 8008600:	2310      	movs	r3, #16
 8008602:	77fb      	strb	r3, [r7, #31]
 8008604:	e10c      	b.n	8008820 <UART_SetConfig+0x348>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a68      	ldr	r2, [pc, #416]	; (80087ac <UART_SetConfig+0x2d4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d120      	bne.n	8008652 <UART_SetConfig+0x17a>
 8008610:	4b64      	ldr	r3, [pc, #400]	; (80087a4 <UART_SetConfig+0x2cc>)
 8008612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008616:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800861a:	2b30      	cmp	r3, #48	; 0x30
 800861c:	d013      	beq.n	8008646 <UART_SetConfig+0x16e>
 800861e:	2b30      	cmp	r3, #48	; 0x30
 8008620:	d814      	bhi.n	800864c <UART_SetConfig+0x174>
 8008622:	2b20      	cmp	r3, #32
 8008624:	d009      	beq.n	800863a <UART_SetConfig+0x162>
 8008626:	2b20      	cmp	r3, #32
 8008628:	d810      	bhi.n	800864c <UART_SetConfig+0x174>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <UART_SetConfig+0x15c>
 800862e:	2b10      	cmp	r3, #16
 8008630:	d006      	beq.n	8008640 <UART_SetConfig+0x168>
 8008632:	e00b      	b.n	800864c <UART_SetConfig+0x174>
 8008634:	2300      	movs	r3, #0
 8008636:	77fb      	strb	r3, [r7, #31]
 8008638:	e0f2      	b.n	8008820 <UART_SetConfig+0x348>
 800863a:	2302      	movs	r3, #2
 800863c:	77fb      	strb	r3, [r7, #31]
 800863e:	e0ef      	b.n	8008820 <UART_SetConfig+0x348>
 8008640:	2304      	movs	r3, #4
 8008642:	77fb      	strb	r3, [r7, #31]
 8008644:	e0ec      	b.n	8008820 <UART_SetConfig+0x348>
 8008646:	2308      	movs	r3, #8
 8008648:	77fb      	strb	r3, [r7, #31]
 800864a:	e0e9      	b.n	8008820 <UART_SetConfig+0x348>
 800864c:	2310      	movs	r3, #16
 800864e:	77fb      	strb	r3, [r7, #31]
 8008650:	e0e6      	b.n	8008820 <UART_SetConfig+0x348>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a56      	ldr	r2, [pc, #344]	; (80087b0 <UART_SetConfig+0x2d8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d120      	bne.n	800869e <UART_SetConfig+0x1c6>
 800865c:	4b51      	ldr	r3, [pc, #324]	; (80087a4 <UART_SetConfig+0x2cc>)
 800865e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008662:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008666:	2bc0      	cmp	r3, #192	; 0xc0
 8008668:	d013      	beq.n	8008692 <UART_SetConfig+0x1ba>
 800866a:	2bc0      	cmp	r3, #192	; 0xc0
 800866c:	d814      	bhi.n	8008698 <UART_SetConfig+0x1c0>
 800866e:	2b80      	cmp	r3, #128	; 0x80
 8008670:	d009      	beq.n	8008686 <UART_SetConfig+0x1ae>
 8008672:	2b80      	cmp	r3, #128	; 0x80
 8008674:	d810      	bhi.n	8008698 <UART_SetConfig+0x1c0>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <UART_SetConfig+0x1a8>
 800867a:	2b40      	cmp	r3, #64	; 0x40
 800867c:	d006      	beq.n	800868c <UART_SetConfig+0x1b4>
 800867e:	e00b      	b.n	8008698 <UART_SetConfig+0x1c0>
 8008680:	2300      	movs	r3, #0
 8008682:	77fb      	strb	r3, [r7, #31]
 8008684:	e0cc      	b.n	8008820 <UART_SetConfig+0x348>
 8008686:	2302      	movs	r3, #2
 8008688:	77fb      	strb	r3, [r7, #31]
 800868a:	e0c9      	b.n	8008820 <UART_SetConfig+0x348>
 800868c:	2304      	movs	r3, #4
 800868e:	77fb      	strb	r3, [r7, #31]
 8008690:	e0c6      	b.n	8008820 <UART_SetConfig+0x348>
 8008692:	2308      	movs	r3, #8
 8008694:	77fb      	strb	r3, [r7, #31]
 8008696:	e0c3      	b.n	8008820 <UART_SetConfig+0x348>
 8008698:	2310      	movs	r3, #16
 800869a:	77fb      	strb	r3, [r7, #31]
 800869c:	e0c0      	b.n	8008820 <UART_SetConfig+0x348>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a44      	ldr	r2, [pc, #272]	; (80087b4 <UART_SetConfig+0x2dc>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d125      	bne.n	80086f4 <UART_SetConfig+0x21c>
 80086a8:	4b3e      	ldr	r3, [pc, #248]	; (80087a4 <UART_SetConfig+0x2cc>)
 80086aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086b6:	d017      	beq.n	80086e8 <UART_SetConfig+0x210>
 80086b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086bc:	d817      	bhi.n	80086ee <UART_SetConfig+0x216>
 80086be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c2:	d00b      	beq.n	80086dc <UART_SetConfig+0x204>
 80086c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c8:	d811      	bhi.n	80086ee <UART_SetConfig+0x216>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <UART_SetConfig+0x1fe>
 80086ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d2:	d006      	beq.n	80086e2 <UART_SetConfig+0x20a>
 80086d4:	e00b      	b.n	80086ee <UART_SetConfig+0x216>
 80086d6:	2300      	movs	r3, #0
 80086d8:	77fb      	strb	r3, [r7, #31]
 80086da:	e0a1      	b.n	8008820 <UART_SetConfig+0x348>
 80086dc:	2302      	movs	r3, #2
 80086de:	77fb      	strb	r3, [r7, #31]
 80086e0:	e09e      	b.n	8008820 <UART_SetConfig+0x348>
 80086e2:	2304      	movs	r3, #4
 80086e4:	77fb      	strb	r3, [r7, #31]
 80086e6:	e09b      	b.n	8008820 <UART_SetConfig+0x348>
 80086e8:	2308      	movs	r3, #8
 80086ea:	77fb      	strb	r3, [r7, #31]
 80086ec:	e098      	b.n	8008820 <UART_SetConfig+0x348>
 80086ee:	2310      	movs	r3, #16
 80086f0:	77fb      	strb	r3, [r7, #31]
 80086f2:	e095      	b.n	8008820 <UART_SetConfig+0x348>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a2f      	ldr	r2, [pc, #188]	; (80087b8 <UART_SetConfig+0x2e0>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d125      	bne.n	800874a <UART_SetConfig+0x272>
 80086fe:	4b29      	ldr	r3, [pc, #164]	; (80087a4 <UART_SetConfig+0x2cc>)
 8008700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008704:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008708:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800870c:	d017      	beq.n	800873e <UART_SetConfig+0x266>
 800870e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008712:	d817      	bhi.n	8008744 <UART_SetConfig+0x26c>
 8008714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008718:	d00b      	beq.n	8008732 <UART_SetConfig+0x25a>
 800871a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800871e:	d811      	bhi.n	8008744 <UART_SetConfig+0x26c>
 8008720:	2b00      	cmp	r3, #0
 8008722:	d003      	beq.n	800872c <UART_SetConfig+0x254>
 8008724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008728:	d006      	beq.n	8008738 <UART_SetConfig+0x260>
 800872a:	e00b      	b.n	8008744 <UART_SetConfig+0x26c>
 800872c:	2301      	movs	r3, #1
 800872e:	77fb      	strb	r3, [r7, #31]
 8008730:	e076      	b.n	8008820 <UART_SetConfig+0x348>
 8008732:	2302      	movs	r3, #2
 8008734:	77fb      	strb	r3, [r7, #31]
 8008736:	e073      	b.n	8008820 <UART_SetConfig+0x348>
 8008738:	2304      	movs	r3, #4
 800873a:	77fb      	strb	r3, [r7, #31]
 800873c:	e070      	b.n	8008820 <UART_SetConfig+0x348>
 800873e:	2308      	movs	r3, #8
 8008740:	77fb      	strb	r3, [r7, #31]
 8008742:	e06d      	b.n	8008820 <UART_SetConfig+0x348>
 8008744:	2310      	movs	r3, #16
 8008746:	77fb      	strb	r3, [r7, #31]
 8008748:	e06a      	b.n	8008820 <UART_SetConfig+0x348>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1b      	ldr	r2, [pc, #108]	; (80087bc <UART_SetConfig+0x2e4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d138      	bne.n	80087c6 <UART_SetConfig+0x2ee>
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <UART_SetConfig+0x2cc>)
 8008756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800875e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008762:	d017      	beq.n	8008794 <UART_SetConfig+0x2bc>
 8008764:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008768:	d82a      	bhi.n	80087c0 <UART_SetConfig+0x2e8>
 800876a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876e:	d00b      	beq.n	8008788 <UART_SetConfig+0x2b0>
 8008770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008774:	d824      	bhi.n	80087c0 <UART_SetConfig+0x2e8>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <UART_SetConfig+0x2aa>
 800877a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800877e:	d006      	beq.n	800878e <UART_SetConfig+0x2b6>
 8008780:	e01e      	b.n	80087c0 <UART_SetConfig+0x2e8>
 8008782:	2300      	movs	r3, #0
 8008784:	77fb      	strb	r3, [r7, #31]
 8008786:	e04b      	b.n	8008820 <UART_SetConfig+0x348>
 8008788:	2302      	movs	r3, #2
 800878a:	77fb      	strb	r3, [r7, #31]
 800878c:	e048      	b.n	8008820 <UART_SetConfig+0x348>
 800878e:	2304      	movs	r3, #4
 8008790:	77fb      	strb	r3, [r7, #31]
 8008792:	e045      	b.n	8008820 <UART_SetConfig+0x348>
 8008794:	2308      	movs	r3, #8
 8008796:	77fb      	strb	r3, [r7, #31]
 8008798:	e042      	b.n	8008820 <UART_SetConfig+0x348>
 800879a:	bf00      	nop
 800879c:	efff69f3 	.word	0xefff69f3
 80087a0:	40011000 	.word	0x40011000
 80087a4:	40023800 	.word	0x40023800
 80087a8:	40004400 	.word	0x40004400
 80087ac:	40004800 	.word	0x40004800
 80087b0:	40004c00 	.word	0x40004c00
 80087b4:	40005000 	.word	0x40005000
 80087b8:	40011400 	.word	0x40011400
 80087bc:	40007800 	.word	0x40007800
 80087c0:	2310      	movs	r3, #16
 80087c2:	77fb      	strb	r3, [r7, #31]
 80087c4:	e02c      	b.n	8008820 <UART_SetConfig+0x348>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a72      	ldr	r2, [pc, #456]	; (8008994 <UART_SetConfig+0x4bc>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d125      	bne.n	800881c <UART_SetConfig+0x344>
 80087d0:	4b71      	ldr	r3, [pc, #452]	; (8008998 <UART_SetConfig+0x4c0>)
 80087d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80087da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80087de:	d017      	beq.n	8008810 <UART_SetConfig+0x338>
 80087e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80087e4:	d817      	bhi.n	8008816 <UART_SetConfig+0x33e>
 80087e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ea:	d00b      	beq.n	8008804 <UART_SetConfig+0x32c>
 80087ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f0:	d811      	bhi.n	8008816 <UART_SetConfig+0x33e>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <UART_SetConfig+0x326>
 80087f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087fa:	d006      	beq.n	800880a <UART_SetConfig+0x332>
 80087fc:	e00b      	b.n	8008816 <UART_SetConfig+0x33e>
 80087fe:	2300      	movs	r3, #0
 8008800:	77fb      	strb	r3, [r7, #31]
 8008802:	e00d      	b.n	8008820 <UART_SetConfig+0x348>
 8008804:	2302      	movs	r3, #2
 8008806:	77fb      	strb	r3, [r7, #31]
 8008808:	e00a      	b.n	8008820 <UART_SetConfig+0x348>
 800880a:	2304      	movs	r3, #4
 800880c:	77fb      	strb	r3, [r7, #31]
 800880e:	e007      	b.n	8008820 <UART_SetConfig+0x348>
 8008810:	2308      	movs	r3, #8
 8008812:	77fb      	strb	r3, [r7, #31]
 8008814:	e004      	b.n	8008820 <UART_SetConfig+0x348>
 8008816:	2310      	movs	r3, #16
 8008818:	77fb      	strb	r3, [r7, #31]
 800881a:	e001      	b.n	8008820 <UART_SetConfig+0x348>
 800881c:	2310      	movs	r3, #16
 800881e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008828:	d15b      	bne.n	80088e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800882a:	7ffb      	ldrb	r3, [r7, #31]
 800882c:	2b08      	cmp	r3, #8
 800882e:	d828      	bhi.n	8008882 <UART_SetConfig+0x3aa>
 8008830:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <UART_SetConfig+0x360>)
 8008832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008836:	bf00      	nop
 8008838:	0800885d 	.word	0x0800885d
 800883c:	08008865 	.word	0x08008865
 8008840:	0800886d 	.word	0x0800886d
 8008844:	08008883 	.word	0x08008883
 8008848:	08008873 	.word	0x08008873
 800884c:	08008883 	.word	0x08008883
 8008850:	08008883 	.word	0x08008883
 8008854:	08008883 	.word	0x08008883
 8008858:	0800887b 	.word	0x0800887b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800885c:	f7fc fd52 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 8008860:	61b8      	str	r0, [r7, #24]
        break;
 8008862:	e013      	b.n	800888c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008864:	f7fc fd62 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 8008868:	61b8      	str	r0, [r7, #24]
        break;
 800886a:	e00f      	b.n	800888c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800886c:	4b4b      	ldr	r3, [pc, #300]	; (800899c <UART_SetConfig+0x4c4>)
 800886e:	61bb      	str	r3, [r7, #24]
        break;
 8008870:	e00c      	b.n	800888c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008872:	f7fc fc75 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 8008876:	61b8      	str	r0, [r7, #24]
        break;
 8008878:	e008      	b.n	800888c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887e:	61bb      	str	r3, [r7, #24]
        break;
 8008880:	e004      	b.n	800888c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	77bb      	strb	r3, [r7, #30]
        break;
 800888a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d074      	beq.n	800897c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	005a      	lsls	r2, r3, #1
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	441a      	add	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	2b0f      	cmp	r3, #15
 80088ac:	d916      	bls.n	80088dc <UART_SetConfig+0x404>
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b4:	d212      	bcs.n	80088dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	f023 030f 	bic.w	r3, r3, #15
 80088be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	085b      	lsrs	r3, r3, #1
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	89fb      	ldrh	r3, [r7, #14]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	89fa      	ldrh	r2, [r7, #14]
 80088d8:	60da      	str	r2, [r3, #12]
 80088da:	e04f      	b.n	800897c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	77bb      	strb	r3, [r7, #30]
 80088e0:	e04c      	b.n	800897c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088e2:	7ffb      	ldrb	r3, [r7, #31]
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d828      	bhi.n	800893a <UART_SetConfig+0x462>
 80088e8:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <UART_SetConfig+0x418>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008915 	.word	0x08008915
 80088f4:	0800891d 	.word	0x0800891d
 80088f8:	08008925 	.word	0x08008925
 80088fc:	0800893b 	.word	0x0800893b
 8008900:	0800892b 	.word	0x0800892b
 8008904:	0800893b 	.word	0x0800893b
 8008908:	0800893b 	.word	0x0800893b
 800890c:	0800893b 	.word	0x0800893b
 8008910:	08008933 	.word	0x08008933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008914:	f7fc fcf6 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 8008918:	61b8      	str	r0, [r7, #24]
        break;
 800891a:	e013      	b.n	8008944 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800891c:	f7fc fd06 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 8008920:	61b8      	str	r0, [r7, #24]
        break;
 8008922:	e00f      	b.n	8008944 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008924:	4b1d      	ldr	r3, [pc, #116]	; (800899c <UART_SetConfig+0x4c4>)
 8008926:	61bb      	str	r3, [r7, #24]
        break;
 8008928:	e00c      	b.n	8008944 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800892a:	f7fc fc19 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 800892e:	61b8      	str	r0, [r7, #24]
        break;
 8008930:	e008      	b.n	8008944 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008936:	61bb      	str	r3, [r7, #24]
        break;
 8008938:	e004      	b.n	8008944 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	77bb      	strb	r3, [r7, #30]
        break;
 8008942:	bf00      	nop
    }

    if (pclk != 0U)
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d018      	beq.n	800897c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	085a      	lsrs	r2, r3, #1
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	441a      	add	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	fbb2 f3f3 	udiv	r3, r2, r3
 800895c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b0f      	cmp	r3, #15
 8008962:	d909      	bls.n	8008978 <UART_SetConfig+0x4a0>
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800896a:	d205      	bcs.n	8008978 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	b29a      	uxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60da      	str	r2, [r3, #12]
 8008976:	e001      	b.n	800897c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008988:	7fbb      	ldrb	r3, [r7, #30]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3720      	adds	r7, #32
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	40007c00 	.word	0x40007c00
 8008998:	40023800 	.word	0x40023800
 800899c:	00f42400 	.word	0x00f42400

080089a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00a      	beq.n	80089ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00a      	beq.n	8008a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	f003 0308 	and.w	r3, r3, #8
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	f003 0320 	and.w	r3, r3, #32
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01a      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a9e:	d10a      	bne.n	8008ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	605a      	str	r2, [r3, #4]
  }
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008af4:	f7fa fe20 	bl	8003738 <HAL_GetTick>
 8008af8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d10e      	bne.n	8008b26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f82d 	bl	8008b76 <UART_WaitOnFlagUntilTimeout>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e023      	b.n	8008b6e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d10e      	bne.n	8008b52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f817 	bl	8008b76 <UART_WaitOnFlagUntilTimeout>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e00d      	b.n	8008b6e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b09c      	sub	sp, #112	; 0x70
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	603b      	str	r3, [r7, #0]
 8008b82:	4613      	mov	r3, r2
 8008b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b86:	e0a5      	b.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	f000 80a1 	beq.w	8008cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b92:	f7fa fdd1 	bl	8003738 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d302      	bcc.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d13e      	bne.n	8008c26 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e6      	bne.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e5      	bne.n	8008bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2220      	movs	r2, #32
 8008c12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2220      	movs	r2, #32
 8008c18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e067      	b.n	8008cf6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d04f      	beq.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c42:	d147      	bne.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e6      	bne.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3308      	adds	r3, #8
 8008c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f023 0301 	bic.w	r3, r3, #1
 8008c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ca0:	623a      	str	r2, [r7, #32]
 8008ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	69f9      	ldr	r1, [r7, #28]
 8008ca6:	6a3a      	ldr	r2, [r7, #32]
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e5      	bne.n	8008c80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e010      	b.n	8008cf6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	69da      	ldr	r2, [r3, #28]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	bf0c      	ite	eq
 8008ce4:	2301      	moveq	r3, #1
 8008ce6:	2300      	movne	r3, #0
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	461a      	mov	r2, r3
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	f43f af4a 	beq.w	8008b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3770      	adds	r7, #112	; 0x70
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <__libc_init_array>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	4d0d      	ldr	r5, [pc, #52]	; (8008d38 <__libc_init_array+0x38>)
 8008d04:	4c0d      	ldr	r4, [pc, #52]	; (8008d3c <__libc_init_array+0x3c>)
 8008d06:	1b64      	subs	r4, r4, r5
 8008d08:	10a4      	asrs	r4, r4, #2
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	42a6      	cmp	r6, r4
 8008d0e:	d109      	bne.n	8008d24 <__libc_init_array+0x24>
 8008d10:	4d0b      	ldr	r5, [pc, #44]	; (8008d40 <__libc_init_array+0x40>)
 8008d12:	4c0c      	ldr	r4, [pc, #48]	; (8008d44 <__libc_init_array+0x44>)
 8008d14:	f000 f864 	bl	8008de0 <_init>
 8008d18:	1b64      	subs	r4, r4, r5
 8008d1a:	10a4      	asrs	r4, r4, #2
 8008d1c:	2600      	movs	r6, #0
 8008d1e:	42a6      	cmp	r6, r4
 8008d20:	d105      	bne.n	8008d2e <__libc_init_array+0x2e>
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d28:	4798      	blx	r3
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	e7ee      	b.n	8008d0c <__libc_init_array+0xc>
 8008d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d32:	4798      	blx	r3
 8008d34:	3601      	adds	r6, #1
 8008d36:	e7f2      	b.n	8008d1e <__libc_init_array+0x1e>
 8008d38:	08009684 	.word	0x08009684
 8008d3c:	08009684 	.word	0x08009684
 8008d40:	08009684 	.word	0x08009684
 8008d44:	08009688 	.word	0x08009688

08008d48 <memset>:
 8008d48:	4402      	add	r2, r0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d100      	bne.n	8008d52 <memset+0xa>
 8008d50:	4770      	bx	lr
 8008d52:	f803 1b01 	strb.w	r1, [r3], #1
 8008d56:	e7f9      	b.n	8008d4c <memset+0x4>

08008d58 <__utoa>:
 8008d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5a:	4c1f      	ldr	r4, [pc, #124]	; (8008dd8 <__utoa+0x80>)
 8008d5c:	b08b      	sub	sp, #44	; 0x2c
 8008d5e:	4605      	mov	r5, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	466e      	mov	r6, sp
 8008d64:	f104 0c20 	add.w	ip, r4, #32
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	6861      	ldr	r1, [r4, #4]
 8008d6c:	4637      	mov	r7, r6
 8008d6e:	c703      	stmia	r7!, {r0, r1}
 8008d70:	3408      	adds	r4, #8
 8008d72:	4564      	cmp	r4, ip
 8008d74:	463e      	mov	r6, r7
 8008d76:	d1f7      	bne.n	8008d68 <__utoa+0x10>
 8008d78:	7921      	ldrb	r1, [r4, #4]
 8008d7a:	7139      	strb	r1, [r7, #4]
 8008d7c:	1e91      	subs	r1, r2, #2
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	6038      	str	r0, [r7, #0]
 8008d82:	2922      	cmp	r1, #34	; 0x22
 8008d84:	f04f 0100 	mov.w	r1, #0
 8008d88:	d904      	bls.n	8008d94 <__utoa+0x3c>
 8008d8a:	7019      	strb	r1, [r3, #0]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4618      	mov	r0, r3
 8008d90:	b00b      	add	sp, #44	; 0x2c
 8008d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d94:	1e58      	subs	r0, r3, #1
 8008d96:	4684      	mov	ip, r0
 8008d98:	fbb5 f7f2 	udiv	r7, r5, r2
 8008d9c:	fb02 5617 	mls	r6, r2, r7, r5
 8008da0:	3628      	adds	r6, #40	; 0x28
 8008da2:	446e      	add	r6, sp
 8008da4:	460c      	mov	r4, r1
 8008da6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008daa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008dae:	462e      	mov	r6, r5
 8008db0:	42b2      	cmp	r2, r6
 8008db2:	f101 0101 	add.w	r1, r1, #1
 8008db6:	463d      	mov	r5, r7
 8008db8:	d9ee      	bls.n	8008d98 <__utoa+0x40>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	545a      	strb	r2, [r3, r1]
 8008dbe:	1919      	adds	r1, r3, r4
 8008dc0:	1aa5      	subs	r5, r4, r2
 8008dc2:	42aa      	cmp	r2, r5
 8008dc4:	dae3      	bge.n	8008d8e <__utoa+0x36>
 8008dc6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008dca:	780e      	ldrb	r6, [r1, #0]
 8008dcc:	7006      	strb	r6, [r0, #0]
 8008dce:	3201      	adds	r2, #1
 8008dd0:	f801 5901 	strb.w	r5, [r1], #-1
 8008dd4:	e7f4      	b.n	8008dc0 <__utoa+0x68>
 8008dd6:	bf00      	nop
 8008dd8:	08009654 	.word	0x08009654

08008ddc <utoa>:
 8008ddc:	f7ff bfbc 	b.w	8008d58 <__utoa>

08008de0 <_init>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr

08008dec <_fini>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr
