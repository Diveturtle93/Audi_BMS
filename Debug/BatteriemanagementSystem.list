
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c9c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b8  080074b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074c0  080074c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080074c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000000c  080074d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080074d4  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b85a  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a75  00000000  00000000  0003b894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  000406a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca2d  00000000  00000000  00041888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb06  00000000  00000000  0006e2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108bd2  00000000  00000000  00089dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019298d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  001929e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006e7c 	.word	0x08006e7c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006e7c 	.word	0x08006e7c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f005 ff7b 	bl	8006450 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000240 	.word	0x20000240

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 fc7c 	bl	8006e78 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f005 ff5a 	bl	8006450 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000240 	.word	0x20000240

080005a8 <ltc1380_write>:
//----------------------------------------------------------------------

// Kanal auswaehlen
//----------------------------------------------------------------------
void ltc1380_write(uint8_t Address, uint8_t Channel)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	460a      	mov	r2, r1
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	4613      	mov	r3, r2
 80005b6:	71bb      	strb	r3, [r7, #6]
	ITM_SendNumber(Channel);
	ITM_SendChar('\n');
#endif

	// Definiere Array fuer Channel auswaehlen
	uint8_t off[6] = {0x69, 0x08, 0x00, 0x89, 0x7F, 0xF9};					// Daten-Bytes fuer LTC6811 mit Daten fuer LTC1380
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <ltc1380_write+0x64>)
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c2:	6018      	str	r0, [r3, #0]
 80005c4:	3304      	adds	r3, #4
 80005c6:	8019      	strh	r1, [r3, #0]
	
	// Addresse und Channel waehlen
	off[1] |= ((Address & 0x0F) << 4);										// Address in Array uebertragen
 80005c8:	7a7b      	ldrb	r3, [r7, #9]
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	727b      	strb	r3, [r7, #9]
	off[3] |= ((Channel & 0x0F) << 4);										// Channel in Array uebertragen
 80005da:	7afb      	ldrb	r3, [r7, #11]
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	72fb      	strb	r3, [r7, #11]
	
	// LTC6811 beschreiben und ueber I2C uebertragen
	ltc6811_write(WRCOMM, &off[0]);												// Daten in LTC6811 schreiben
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4619      	mov	r1, r3
 80005f2:	f240 7021 	movw	r0, #1825	; 0x721
 80005f6:	f000 f887 	bl	8000708 <ltc6811_write>
	ltc6811(STCOMM);														// Daten von LTC6811 an LTC1380 senden
 80005fa:	f240 7023 	movw	r0, #1827	; 0x723
 80005fe:	f000 f82f 	bl	8000660 <ltc6811>
		ITM_SendChar(' ');
		ITM_SendNumber(off[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	08006e94 	.word	0x08006e94

08000610 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Chip wird geweckt.\n");
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	e014      	b.n	8000646 <wakeup_ltc6811+0x36>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <wakeup_ltc6811+0x48>)
 8000624:	f002 fde6 	bl	80031f4 <HAL_GPIO_WritePin>

		// Dummy Paket senden
		HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	2201      	movs	r2, #1
 800062c:	21aa      	movs	r1, #170	; 0xaa
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <wakeup_ltc6811+0x4c>)
 8000630:	f003 ffa1 	bl	8004576 <HAL_SPI_Transmit>

		//HAL_Delay(2);														// isoSPI braucht Zeit bis ready

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <wakeup_ltc6811+0x48>)
 800063c:	f002 fdda 	bl	80031f4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	3301      	adds	r3, #1
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0e7      	beq.n	800061c <wakeup_ltc6811+0xc>
	}
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	200000e0 	.word	0x200000e0

08000660 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f971 	bl	8000954 <peccommand>
 8000672:	4603      	mov	r3, r0
 8000674:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000676:	f7ff ffcb 	bl	8000610 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	b29b      	uxth	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	b2db      	uxtb	r3, r3
 8000688:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000690:	89bb      	ldrh	r3, [r7, #12]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 800069a:	89bb      	ldrh	r3, [r7, #12]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f023 0301 	bic.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <ltc6811+0xa0>)
 80006ae:	f002 fda1 	bl	80031f4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80006b2:	f107 0108 	add.w	r1, r7, #8
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	2204      	movs	r2, #4
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <ltc6811+0xa4>)
 80006bc:	f003 ff5b 	bl	8004576 <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	f240 7223 	movw	r2, #1827	; 0x723
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d10f      	bne.n	80006ea <ltc6811+0x8a>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e009      	b.n	80006e4 <ltc6811+0x84>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	2201      	movs	r2, #1
 80006d6:	21aa      	movs	r1, #170	; 0xaa
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <ltc6811+0xa4>)
 80006da:	f003 ff4c 	bl	8004576 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3301      	adds	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2b08      	cmp	r3, #8
 80006e8:	d9f2      	bls.n	80006d0 <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <ltc6811+0xa0>)
 80006f2:	f002 fd7f 	bl	80031f4 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	200000e0 	.word	0x200000e0

08000708 <ltc6811_write>:


// Broadcast Write Command
//----------------------------------------------------------------------
void ltc6811_write(uint16_t command, uint8_t* data)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, fuer Data Funktion nur bei einem Device gegeben
	uint16_t pec_c, pec_d;													// pec_c = Zwischenspeicher 16-Bit Command, pec_d = Zwischenspeicher 16-Bit Data
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	uint8_t tmp[8];															// Zwischenspeicher Daten + Pec CRC
	pec_c = peccommand(command);											// Pec Command berechnen
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f91c 	bl	8000954 <peccommand>
 800071c:	4603      	mov	r3, r0
 800071e:	83bb      	strh	r3, [r7, #28]
	pec_d = peclookup(6, data);												// Pec Daten berechnen
 8000720:	6839      	ldr	r1, [r7, #0]
 8000722:	2006      	movs	r0, #6
 8000724:	f000 f932 	bl	800098c <peclookup>
 8000728:	4603      	mov	r3, r0
 800072a:	837b      	strh	r3, [r7, #26]


	for (uint8_t i = 0; i < 6; i++)
 800072c:	2300      	movs	r3, #0
 800072e:	77fb      	strb	r3, [r7, #31]
 8000730:	e00c      	b.n	800074c <ltc6811_write+0x44>
	{
		tmp[i] = data[i];
 8000732:	7ffb      	ldrb	r3, [r7, #31]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	441a      	add	r2, r3
 8000738:	7ffb      	ldrb	r3, [r7, #31]
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	f107 0120 	add.w	r1, r7, #32
 8000740:	440b      	add	r3, r1
 8000742:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (uint8_t i = 0; i < 6; i++)
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	3301      	adds	r3, #1
 800074a:	77fb      	strb	r3, [r7, #31]
 800074c:	7ffb      	ldrb	r3, [r7, #31]
 800074e:	2b05      	cmp	r3, #5
 8000750:	d9ef      	bls.n	8000732 <ltc6811_write+0x2a>
	}
	tmp[6] = ((pec_d >> 8) & 0xFF);
 8000752:	8b7b      	ldrh	r3, [r7, #26]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	74bb      	strb	r3, [r7, #18]
	tmp[7] = (pec_d & 0xFE);
 800075c:	8b7b      	ldrh	r3, [r7, #26]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f023 0301 	bic.w	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	74fb      	strb	r3, [r7, #19]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000768:	f7ff ff52 	bl	8000610 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command  >> 8) & 0x07);
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	b29b      	uxth	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 0307 	and.w	r3, r3, #7
 8000778:	b2db      	uxtb	r3, r3
 800077a:	753b      	strb	r3, [r7, #20]
	cmd[1] = (command & 0xFF);
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	757b      	strb	r3, [r7, #21]
	cmd[2] = ((pec_c >> 8) & 0xFF);
 8000782:	8bbb      	ldrh	r3, [r7, #28]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	b2db      	uxtb	r3, r3
 800078a:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (pec_c & 0xFE);
 800078c:	8bbb      	ldrh	r3, [r7, #28]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	75fb      	strb	r3, [r7, #23]

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <ltc6811_write+0xcc>)
 80007a0:	f002 fd28 	bl	80031f4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80007a4:	f107 0114 	add.w	r1, r7, #20
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	2204      	movs	r2, #4
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <ltc6811_write+0xd0>)
 80007ae:	f003 fee2 	bl	8004576 <HAL_SPI_Transmit>
	
	// Data senden
//	for (uint8_t i = 0; i < 6; i++)
//	{
		// Sende Daten fuer einen IC
		HAL_SPI_Transmit(&hspi4, tmp, 8, 100);
 80007b2:	f107 010c 	add.w	r1, r7, #12
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2208      	movs	r2, #8
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <ltc6811_write+0xd0>)
 80007bc:	f003 fedb 	bl	8004576 <HAL_SPI_Transmit>
//	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <ltc6811_write+0xcc>)
 80007c8:	f002 fd14 	bl	80031f4 <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	200000e0 	.word	0x200000e0

080007dc <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	6039      	str	r1, [r7, #0]
 80007e6:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint16_t tmp;															// Zwischenspeicher fuer Pruefung CRC
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f8b2 	bl	8000954 <peccommand>
 80007f0:	4603      	mov	r3, r0
 80007f2:	827b      	strh	r3, [r7, #18]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80007f4:	f7ff ff0c 	bl	8000610 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	0a1b      	lsrs	r3, r3, #8
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	b2db      	uxtb	r3, r3
 8000806:	733b      	strb	r3, [r7, #12]
	cmd[1] = (command & 0xFF);
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	737b      	strb	r3, [r7, #13]
	cmd[2] = ((pec >> 8) & 0xFF);
 800080e:	8a7b      	ldrh	r3, [r7, #18]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (pec & 0xFE);
 8000818:	8a7b      	ldrh	r3, [r7, #18]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f023 0301 	bic.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	73fb      	strb	r3, [r7, #15]

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082a:	4845      	ldr	r0, [pc, #276]	; (8000940 <ltc6811_read+0x164>)
 800082c:	f002 fce2 	bl	80031f4 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000830:	f107 010c 	add.w	r1, r7, #12
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	2204      	movs	r2, #4
 8000838:	4842      	ldr	r0, [pc, #264]	; (8000944 <ltc6811_read+0x168>)
 800083a:	f003 fe9c 	bl	8004576 <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	75fb      	strb	r3, [r7, #23]
 8000842:	e00c      	b.n	800085e <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	461a      	mov	r2, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	1899      	adds	r1, r3, r2
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2208      	movs	r2, #8
 8000852:	483c      	ldr	r0, [pc, #240]	; (8000944 <ltc6811_read+0x168>)
 8000854:	f003 fffd 	bl	8004852 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	3301      	adds	r3, #1
 800085c:	75fb      	strb	r3, [r7, #23]
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0ef      	beq.n	8000844 <ltc6811_read+0x68>
	}
	
	for (uint8_t i = 0; i < 8; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	75bb      	strb	r3, [r7, #22]
 8000868:	e00e      	b.n	8000888 <ltc6811_read+0xac>
	{
		uartTransmitNumber(data[i], 10);
 800086a:	7dbb      	ldrb	r3, [r7, #22]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	210a      	movs	r1, #10
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fe77 	bl	8000568 <uartTransmitNumber>
		uartTransmit(" ", 1);
 800087a:	2101      	movs	r1, #1
 800087c:	4832      	ldr	r0, [pc, #200]	; (8000948 <ltc6811_read+0x16c>)
 800087e:	f7ff fe5f 	bl	8000540 <uartTransmit>
	for (uint8_t i = 0; i < 8; i++)
 8000882:	7dbb      	ldrb	r3, [r7, #22]
 8000884:	3301      	adds	r3, #1
 8000886:	75bb      	strb	r3, [r7, #22]
 8000888:	7dbb      	ldrb	r3, [r7, #22]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9ed      	bls.n	800086a <ltc6811_read+0x8e>
	}
	uartTransmit("\n", 1);
 800088e:	2101      	movs	r1, #1
 8000890:	482e      	ldr	r0, [pc, #184]	; (800094c <ltc6811_read+0x170>)
 8000892:	f7ff fe55 	bl	8000540 <uartTransmit>

	// Pec zuruecksetzen
	pec = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	827b      	strh	r3, [r7, #18]

	// Pec pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800089a:	2300      	movs	r3, #0
 800089c:	757b      	strb	r3, [r7, #21]
 800089e:	e041      	b.n	8000924 <ltc6811_read+0x148>
	{
		tmp = ((data[i + 6] << 8) + data[i + 7]);
 80008a0:	7d7b      	ldrb	r3, [r7, #21]
 80008a2:	3306      	adds	r3, #6
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	7d7b      	ldrb	r3, [r7, #21]
 80008b2:	3307      	adds	r3, #7
 80008b4:	6839      	ldr	r1, [r7, #0]
 80008b6:	440b      	add	r3, r1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4413      	add	r3, r2
 80008be:	823b      	strh	r3, [r7, #16]
		pec = peclookup(6, &data[i*8]);
 80008c0:	7d7b      	ldrb	r3, [r7, #21]
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	461a      	mov	r2, r3
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	4619      	mov	r1, r3
 80008cc:	2006      	movs	r0, #6
 80008ce:	f000 f85d 	bl	800098c <peclookup>
 80008d2:	4603      	mov	r3, r0
 80008d4:	827b      	strh	r3, [r7, #18]

		if (pec != tmp)
 80008d6:	8a7a      	ldrh	r2, [r7, #18]
 80008d8:	8a3b      	ldrh	r3, [r7, #16]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d01f      	beq.n	800091e <ltc6811_read+0x142>
		{
			uartTransmit("Pec Error: ", 11);
 80008de:	210b      	movs	r1, #11
 80008e0:	481b      	ldr	r0, [pc, #108]	; (8000950 <ltc6811_read+0x174>)
 80008e2:	f7ff fe2d 	bl	8000540 <uartTransmit>
			uartTransmitNumber(i + 1, 10);
 80008e6:	7d7b      	ldrb	r3, [r7, #21]
 80008e8:	3301      	adds	r3, #1
 80008ea:	210a      	movs	r1, #10
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe3b 	bl	8000568 <uartTransmitNumber>
			uartTransmit(" ", 1);
 80008f2:	2101      	movs	r1, #1
 80008f4:	4814      	ldr	r0, [pc, #80]	; (8000948 <ltc6811_read+0x16c>)
 80008f6:	f7ff fe23 	bl	8000540 <uartTransmit>
			uartTransmitNumber(tmp, 16);
 80008fa:	8a3b      	ldrh	r3, [r7, #16]
 80008fc:	2110      	movs	r1, #16
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe32 	bl	8000568 <uartTransmitNumber>
			uartTransmit(" ", 1);
 8000904:	2101      	movs	r1, #1
 8000906:	4810      	ldr	r0, [pc, #64]	; (8000948 <ltc6811_read+0x16c>)
 8000908:	f7ff fe1a 	bl	8000540 <uartTransmit>
			uartTransmitNumber(pec, 16);
 800090c:	8a7b      	ldrh	r3, [r7, #18]
 800090e:	2110      	movs	r1, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe29 	bl	8000568 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000916:	2101      	movs	r1, #1
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <ltc6811_read+0x170>)
 800091a:	f7ff fe11 	bl	8000540 <uartTransmit>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800091e:	7d7b      	ldrb	r3, [r7, #21]
 8000920:	3301      	adds	r3, #1
 8000922:	757b      	strb	r3, [r7, #21]
 8000924:	7d7b      	ldrb	r3, [r7, #21]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0ba      	beq.n	80008a0 <ltc6811_read+0xc4>
		}
	}

	// ISOCS ausschalten
	ISOCS_DISABLE();
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <ltc6811_read+0x164>)
 8000932:	f002 fc5f 	bl	80031f4 <HAL_GPIO_WritePin>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	200000e0 	.word	0x200000e0
 8000948:	08006ea4 	.word	0x08006ea4
 800094c:	08006ea8 	.word	0x08006ea8
 8000950:	08006eac 	.word	0x08006eac

08000954 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	b2db      	uxtb	r3, r3
 8000972:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	2002      	movs	r0, #2
 800097c:	f000 f806 	bl	800098c <peclookup>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 8000998:	2310      	movs	r3, #16
 800099a:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 800099c:	2300      	movs	r3, #0
 800099e:	737b      	strb	r3, [r7, #13]
 80009a0:	e019      	b.n	80009d6 <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	09db      	lsrs	r3, r3, #7
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	7b7b      	ldrb	r3, [r7, #13]
 80009aa:	6839      	ldr	r1, [r7, #0]
 80009ac:	440b      	add	r3, r1
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4053      	eors	r3, r2
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 80009ba:	89fb      	ldrh	r3, [r7, #14]
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b21a      	sxth	r2, r3
 80009c0:	897b      	ldrh	r3, [r7, #10]
 80009c2:	490b      	ldr	r1, [pc, #44]	; (80009f0 <peclookup+0x64>)
 80009c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	4053      	eors	r3, r2
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80009d0:	7b7b      	ldrb	r3, [r7, #13]
 80009d2:	3301      	adds	r3, #1
 80009d4:	737b      	strb	r3, [r7, #13]
 80009d6:	7b7a      	ldrb	r2, [r7, #13]
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d3e1      	bcc.n	80009a2 <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80009de:	89fb      	ldrh	r3, [r7, #14]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	b29b      	uxth	r3, r3
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	08007278 	.word	0x08007278

080009f4 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80009fa:	2115      	movs	r1, #21
 80009fc:	483b      	ldr	r0, [pc, #236]	; (8000aec <collectHardwareInfo+0xf8>)
 80009fe:	f7ff fd9f 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000a02:	f001 fd8b 	bl	800251c <HAL_GetDEVID>
 8000a06:	4603      	mov	r3, r0
 8000a08:	210a      	movs	r1, #10
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fdac 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000a10:	2117      	movs	r1, #23
 8000a12:	4837      	ldr	r0, [pc, #220]	; (8000af0 <collectHardwareInfo+0xfc>)
 8000a14:	f7ff fd94 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000a18:	f001 fd74 	bl	8002504 <HAL_GetREVID>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d016      	beq.n	8000a54 <collectHardwareInfo+0x60>
 8000a26:	f242 0201 	movw	r2, #8193	; 0x2001
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d817      	bhi.n	8000a5e <collectHardwareInfo+0x6a>
 8000a2e:	f241 0201 	movw	r2, #4097	; 0x1001
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d004      	beq.n	8000a40 <collectHardwareInfo+0x4c>
 8000a36:	f241 0203 	movw	r2, #4099	; 0x1003
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d005      	beq.n	8000a4a <collectHardwareInfo+0x56>
 8000a3e:	e00e      	b.n	8000a5e <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000a40:	2101      	movs	r1, #1
 8000a42:	482c      	ldr	r0, [pc, #176]	; (8000af4 <collectHardwareInfo+0x100>)
 8000a44:	f7ff fd7c 	bl	8000540 <uartTransmit>
			break;
 8000a48:	e011      	b.n	8000a6e <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	482a      	ldr	r0, [pc, #168]	; (8000af8 <collectHardwareInfo+0x104>)
 8000a4e:	f7ff fd77 	bl	8000540 <uartTransmit>
			break;
 8000a52:	e00c      	b.n	8000a6e <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000a54:	2101      	movs	r1, #1
 8000a56:	4829      	ldr	r0, [pc, #164]	; (8000afc <collectHardwareInfo+0x108>)
 8000a58:	f7ff fd72 	bl	8000540 <uartTransmit>
			break;
 8000a5c:	e007      	b.n	8000a6e <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000a5e:	f001 fd51 	bl	8002504 <HAL_GetREVID>
 8000a62:	4603      	mov	r3, r0
 8000a64:	210a      	movs	r1, #10
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fd7e 	bl	8000568 <uartTransmitNumber>
			break;
 8000a6c:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000a6e:	2115      	movs	r1, #21
 8000a70:	4823      	ldr	r0, [pc, #140]	; (8000b00 <collectHardwareInfo+0x10c>)
 8000a72:	f7ff fd65 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000a76:	f002 ffc1 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8000a7a:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <collectHardwareInfo+0x110>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	0c9b      	lsrs	r3, r3, #18
 8000a86:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000a88:	210a      	movs	r1, #10
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff fd6c 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000a90:	2104      	movs	r1, #4
 8000a92:	481d      	ldr	r0, [pc, #116]	; (8000b08 <collectHardwareInfo+0x114>)
 8000a94:	f7ff fd54 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000a98:	2111      	movs	r1, #17
 8000a9a:	481c      	ldr	r0, [pc, #112]	; (8000b0c <collectHardwareInfo+0x118>)
 8000a9c:	f7ff fd50 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000aa0:	f001 fd4a 	bl	8002538 <HAL_GetUIDw0>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fd5d 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4817      	ldr	r0, [pc, #92]	; (8000b10 <collectHardwareInfo+0x11c>)
 8000ab2:	f7ff fd45 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000ab6:	f001 fd4b 	bl	8002550 <HAL_GetUIDw1>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2110      	movs	r1, #16
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd52 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <collectHardwareInfo+0x11c>)
 8000ac8:	f7ff fd3a 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000acc:	f001 fd4c 	bl	8002568 <HAL_GetUIDw2>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fd47 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000ada:	2101      	movs	r1, #1
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <collectHardwareInfo+0x120>)
 8000ade:	f7ff fd2f 	bl	8000540 <uartTransmit>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	08006eb8 	.word	0x08006eb8
 8000af0:	08006ed0 	.word	0x08006ed0
 8000af4:	08006ee8 	.word	0x08006ee8
 8000af8:	08006eec 	.word	0x08006eec
 8000afc:	08006ef0 	.word	0x08006ef0
 8000b00:	08006ef4 	.word	0x08006ef4
 8000b04:	431bde83 	.word	0x431bde83
 8000b08:	08006f0c 	.word	0x08006f0c
 8000b0c:	08006f14 	.word	0x08006f14
 8000b10:	08006f28 	.word	0x08006f28
 8000b14:	08006f2c 	.word	0x08006f2c

08000b18 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000b1c:	2114      	movs	r1, #20
 8000b1e:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <collectMiddlewareInfo+0x98>)
 8000b20:	f7ff fd0e 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000b24:	210a      	movs	r1, #10
 8000b26:	2005      	movs	r0, #5
 8000b28:	f7ff fd1e 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4821      	ldr	r0, [pc, #132]	; (8000bb4 <collectMiddlewareInfo+0x9c>)
 8000b30:	f7ff fd06 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000b34:	210a      	movs	r1, #10
 8000b36:	2001      	movs	r0, #1
 8000b38:	f7ff fd16 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000b3c:	2112      	movs	r1, #18
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <collectMiddlewareInfo+0xa0>)
 8000b40:	f7ff fcfe 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000b44:	f001 fcd4 	bl	80024f0 <HAL_GetHalVersion>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	0e1b      	lsrs	r3, r3, #24
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	210a      	movs	r1, #10
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fd09 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000b56:	2101      	movs	r1, #1
 8000b58:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <collectMiddlewareInfo+0x9c>)
 8000b5a:	f7ff fcf1 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000b5e:	f001 fcc7 	bl	80024f0 <HAL_GetHalVersion>
 8000b62:	4603      	mov	r3, r0
 8000b64:	0c1b      	lsrs	r3, r3, #16
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	210a      	movs	r1, #10
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fcfc 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000b70:	2101      	movs	r1, #1
 8000b72:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <collectMiddlewareInfo+0x9c>)
 8000b74:	f7ff fce4 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000b78:	f001 fcba 	bl	80024f0 <HAL_GetHalVersion>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	210a      	movs	r1, #10
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fcef 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <collectMiddlewareInfo+0x9c>)
 8000b8e:	f7ff fcd7 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000b92:	f001 fcad 	bl	80024f0 <HAL_GetHalVersion>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	210a      	movs	r1, #10
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fce3 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <collectMiddlewareInfo+0xa4>)
 8000ba6:	f7ff fccb 	bl	8000540 <uartTransmit>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08006f30 	.word	0x08006f30
 8000bb4:	08006f44 	.word	0x08006f44
 8000bb8:	08006f48 	.word	0x08006f48
 8000bbc:	08006f2c 	.word	0x08006f2c

08000bc0 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000bc4:	2111      	movs	r1, #17
 8000bc6:	4826      	ldr	r0, [pc, #152]	; (8000c60 <collectSoftwareInfo+0xa0>)
 8000bc8:	f7ff fcba 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000bcc:	2108      	movs	r1, #8
 8000bce:	4825      	ldr	r0, [pc, #148]	; (8000c64 <collectSoftwareInfo+0xa4>)
 8000bd0:	f7ff fcb6 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000bd4:	2111      	movs	r1, #17
 8000bd6:	4824      	ldr	r0, [pc, #144]	; (8000c68 <collectSoftwareInfo+0xa8>)
 8000bd8:	f7ff fcb2 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000bdc:	2108      	movs	r1, #8
 8000bde:	4823      	ldr	r0, [pc, #140]	; (8000c6c <collectSoftwareInfo+0xac>)
 8000be0:	f7ff fcae 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000be4:	210f      	movs	r1, #15
 8000be6:	4822      	ldr	r0, [pc, #136]	; (8000c70 <collectSoftwareInfo+0xb0>)
 8000be8:	f7ff fcaa 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000bec:	2129      	movs	r1, #41	; 0x29
 8000bee:	4821      	ldr	r0, [pc, #132]	; (8000c74 <collectSoftwareInfo+0xb4>)
 8000bf0:	f7ff fca6 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4820      	ldr	r0, [pc, #128]	; (8000c78 <collectSoftwareInfo+0xb8>)
 8000bf8:	f7ff fca2 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000bfc:	2116      	movs	r1, #22
 8000bfe:	481f      	ldr	r0, [pc, #124]	; (8000c7c <collectSoftwareInfo+0xbc>)
 8000c00:	f7ff fc9e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000c04:	2105      	movs	r1, #5
 8000c06:	481e      	ldr	r0, [pc, #120]	; (8000c80 <collectSoftwareInfo+0xc0>)
 8000c08:	f7ff fc9a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000c0c:	2115      	movs	r1, #21
 8000c0e:	481d      	ldr	r0, [pc, #116]	; (8000c84 <collectSoftwareInfo+0xc4>)
 8000c10:	f7ff fc96 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8000c14:	2108      	movs	r1, #8
 8000c16:	481c      	ldr	r0, [pc, #112]	; (8000c88 <collectSoftwareInfo+0xc8>)
 8000c18:	f7ff fc92 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8000c1c:	2116      	movs	r1, #22
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <collectSoftwareInfo+0xcc>)
 8000c20:	f7ff fc8e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8000c24:	2111      	movs	r1, #17
 8000c26:	481a      	ldr	r0, [pc, #104]	; (8000c90 <collectSoftwareInfo+0xd0>)
 8000c28:	f7ff fc8a 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4812      	ldr	r0, [pc, #72]	; (8000c78 <collectSoftwareInfo+0xb8>)
 8000c30:	f7ff fc86 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000c34:	2111      	movs	r1, #17
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <collectSoftwareInfo+0xd4>)
 8000c38:	f7ff fc82 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000c3c:	210b      	movs	r1, #11
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <collectSoftwareInfo+0xd8>)
 8000c40:	f7ff fc7e 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000c44:	2111      	movs	r1, #17
 8000c46:	4815      	ldr	r0, [pc, #84]	; (8000c9c <collectSoftwareInfo+0xdc>)
 8000c48:	f7ff fc7a 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000c4c:	2109      	movs	r1, #9
 8000c4e:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <collectSoftwareInfo+0xe0>)
 8000c50:	f7ff fc76 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000c54:	2101      	movs	r1, #1
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <collectSoftwareInfo+0xb8>)
 8000c58:	f7ff fc72 	bl	8000540 <uartTransmit>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	08006f5c 	.word	0x08006f5c
 8000c64:	08006f70 	.word	0x08006f70
 8000c68:	08006f78 	.word	0x08006f78
 8000c6c:	08006f8c 	.word	0x08006f8c
 8000c70:	08006f94 	.word	0x08006f94
 8000c74:	08006fa4 	.word	0x08006fa4
 8000c78:	08006f2c 	.word	0x08006f2c
 8000c7c:	08006fd0 	.word	0x08006fd0
 8000c80:	08006fe8 	.word	0x08006fe8
 8000c84:	08006ff0 	.word	0x08006ff0
 8000c88:	08007008 	.word	0x08007008
 8000c8c:	08007010 	.word	0x08007010
 8000c90:	08007028 	.word	0x08007028
 8000c94:	0800703c 	.word	0x0800703c
 8000c98:	08007050 	.word	0x08007050
 8000c9c:	0800705c 	.word	0x0800705c
 8000ca0:	08007070 	.word	0x08007070

08000ca4 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000ca8:	2115      	movs	r1, #21
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <collectGitcounts+0x58>)
 8000cac:	f7ff fc48 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4813      	ldr	r0, [pc, #76]	; (8000d00 <collectGitcounts+0x5c>)
 8000cb4:	f7ff fc44 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000cb8:	2117      	movs	r1, #23
 8000cba:	4812      	ldr	r0, [pc, #72]	; (8000d04 <collectGitcounts+0x60>)
 8000cbc:	f7ff fc40 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000cc0:	2103      	movs	r1, #3
 8000cc2:	4811      	ldr	r0, [pc, #68]	; (8000d08 <collectGitcounts+0x64>)
 8000cc4:	f7ff fc3c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000cc8:	211c      	movs	r1, #28
 8000cca:	4810      	ldr	r0, [pc, #64]	; (8000d0c <collectGitcounts+0x68>)
 8000ccc:	f7ff fc38 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	480f      	ldr	r0, [pc, #60]	; (8000d10 <collectGitcounts+0x6c>)
 8000cd4:	f7ff fc34 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000cd8:	2116      	movs	r1, #22
 8000cda:	480e      	ldr	r0, [pc, #56]	; (8000d14 <collectGitcounts+0x70>)
 8000cdc:	f7ff fc30 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <collectGitcounts+0x74>)
 8000ce4:	f7ff fc2c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000ce8:	2115      	movs	r1, #21
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <collectGitcounts+0x78>)
 8000cec:	f7ff fc28 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <collectGitcounts+0x7c>)
 8000cf4:	f7ff fc24 	bl	8000540 <uartTransmit>
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	0800707c 	.word	0x0800707c
 8000d00:	08007094 	.word	0x08007094
 8000d04:	08007098 	.word	0x08007098
 8000d08:	080070b0 	.word	0x080070b0
 8000d0c:	080070b4 	.word	0x080070b4
 8000d10:	080070d0 	.word	0x080070d0
 8000d14:	08006fd0 	.word	0x08006fd0
 8000d18:	080070d4 	.word	0x080070d4
 8000d1c:	08006ff0 	.word	0x08006ff0
 8000d20:	080070d8 	.word	0x080070d8

08000d24 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000d28:	2111      	movs	r1, #17
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <collectSystemInfo+0x40>)
 8000d2c:	f7ff fc08 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000d30:	f7ff fe60 	bl	80009f4 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000d34:	2111      	movs	r1, #17
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <collectSystemInfo+0x44>)
 8000d38:	f7ff fc02 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000d3c:	f7ff ff40 	bl	8000bc0 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000d40:	2113      	movs	r1, #19
 8000d42:	480a      	ldr	r0, [pc, #40]	; (8000d6c <collectSystemInfo+0x48>)
 8000d44:	f7ff fbfc 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000d48:	f7ff fee6 	bl	8000b18 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000d4c:	2113      	movs	r1, #19
 8000d4e:	4808      	ldr	r0, [pc, #32]	; (8000d70 <collectSystemInfo+0x4c>)
 8000d50:	f7ff fbf6 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000d54:	f7ff ffa6 	bl	8000ca4 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000d58:	2103      	movs	r1, #3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <collectSystemInfo+0x50>)
 8000d5c:	f7ff fbf0 	bl	8000540 <uartTransmit>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	080070dc 	.word	0x080070dc
 8000d68:	080070f0 	.word	0x080070f0
 8000d6c:	08007104 	.word	0x08007104
 8000d70:	08007118 	.word	0x08007118
 8000d74:	0800712c 	.word	0x0800712c

08000d78 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <readResetSource+0xa0>)
 8000d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	3301      	adds	r3, #1
 8000d92:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <readResetSource+0xa0>)
 8000d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	3302      	adds	r3, #2
 8000da4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <readResetSource+0xa0>)
 8000da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da02      	bge.n	8000db4 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	3304      	adds	r3, #4
 8000db2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <readResetSource+0xa0>)
 8000db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <readResetSource+0xa0>)
 8000dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	3310      	adds	r3, #16
 8000dd6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <readResetSource+0xa0>)
 8000dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3320      	adds	r3, #32
 8000de8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <readResetSource+0xa0>)
 8000dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	3340      	adds	r3, #64	; 0x40
 8000dfa:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <readResetSource+0xa0>)
 8000dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e00:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <readResetSource+0xa0>)
 8000e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e06:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000e26:	2106      	movs	r1, #6
 8000e28:	482a      	ldr	r0, [pc, #168]	; (8000ed4 <printResetSource+0xb8>)
 8000e2a:	f7ff fb89 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d104      	bne.n	8000e3e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000e34:	210f      	movs	r1, #15
 8000e36:	4828      	ldr	r0, [pc, #160]	; (8000ed8 <printResetSource+0xbc>)
 8000e38:	f7ff fb82 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000e3c:	e046      	b.n	8000ecc <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000e48:	2118      	movs	r1, #24
 8000e4a:	4824      	ldr	r0, [pc, #144]	; (8000edc <printResetSource+0xc0>)
 8000e4c:	f7ff fb78 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000e5a:	2116      	movs	r1, #22
 8000e5c:	4820      	ldr	r0, [pc, #128]	; (8000ee0 <printResetSource+0xc4>)
 8000e5e:	f7ff fb6f 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000e6c:	210a      	movs	r1, #10
 8000e6e:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <printResetSource+0xc8>)
 8000e70:	f7ff fb66 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4819      	ldr	r0, [pc, #100]	; (8000ee8 <printResetSource+0xcc>)
 8000e82:	f7ff fb5d 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000e90:	210f      	movs	r1, #15
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <printResetSource+0xd0>)
 8000e94:	f7ff fb54 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <printResetSource+0xd4>)
 8000ea6:	f7ff fb4b 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000eb4:	210a      	movs	r1, #10
 8000eb6:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <printResetSource+0xd8>)
 8000eb8:	f7ff fb42 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da03      	bge.n	8000ecc <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <printResetSource+0xdc>)
 8000ec8:	f7ff fb3a 	bl	8000540 <uartTransmit>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	08007130 	.word	0x08007130
 8000ed8:	08007138 	.word	0x08007138
 8000edc:	08007148 	.word	0x08007148
 8000ee0:	08007164 	.word	0x08007164
 8000ee4:	0800717c 	.word	0x0800717c
 8000ee8:	08007188 	.word	0x08007188
 8000eec:	0800719c 	.word	0x0800719c
 8000ef0:	080071ac 	.word	0x080071ac
 8000ef4:	080071bc 	.word	0x080071bc
 8000ef8:	080071c8 	.word	0x080071c8

08000efc <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f04:	4850      	ldr	r0, [pc, #320]	; (8001048 <readall_inputs+0x14c>)
 8000f06:	f002 f95d 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	b2d9      	uxtb	r1, r3
 8000f12:	4a4e      	ldr	r2, [pc, #312]	; (800104c <readall_inputs+0x150>)
 8000f14:	7813      	ldrb	r3, [r2, #0]
 8000f16:	f361 0300 	bfi	r3, r1, #0, #1
 8000f1a:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f20:	484b      	ldr	r0, [pc, #300]	; (8001050 <readall_inputs+0x154>)
 8000f22:	f002 f94f 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	b2d9      	uxtb	r1, r3
 8000f2e:	4a47      	ldr	r2, [pc, #284]	; (800104c <readall_inputs+0x150>)
 8000f30:	7813      	ldrb	r3, [r2, #0]
 8000f32:	f361 0341 	bfi	r3, r1, #1, #1
 8000f36:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3c:	4845      	ldr	r0, [pc, #276]	; (8001054 <readall_inputs+0x158>)
 8000f3e:	f002 f941 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	b2d9      	uxtb	r1, r3
 8000f4a:	4a40      	ldr	r2, [pc, #256]	; (800104c <readall_inputs+0x150>)
 8000f4c:	7813      	ldrb	r3, [r2, #0]
 8000f4e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f52:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f58:	483e      	ldr	r0, [pc, #248]	; (8001054 <readall_inputs+0x158>)
 8000f5a:	f002 f933 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	b2d9      	uxtb	r1, r3
 8000f66:	4a39      	ldr	r2, [pc, #228]	; (800104c <readall_inputs+0x150>)
 8000f68:	7813      	ldrb	r3, [r2, #0]
 8000f6a:	f361 1304 	bfi	r3, r1, #4, #1
 8000f6e:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000f70:	2101      	movs	r1, #1
 8000f72:	4838      	ldr	r0, [pc, #224]	; (8001054 <readall_inputs+0x158>)
 8000f74:	f002 f926 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	b2d9      	uxtb	r1, r3
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <readall_inputs+0x150>)
 8000f82:	7813      	ldrb	r3, [r2, #0]
 8000f84:	f361 1345 	bfi	r3, r1, #5, #1
 8000f88:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	4831      	ldr	r0, [pc, #196]	; (8001054 <readall_inputs+0x158>)
 8000f8e:	f002 f919 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2d9      	uxtb	r1, r3
 8000f9a:	4a2c      	ldr	r2, [pc, #176]	; (800104c <readall_inputs+0x150>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	f361 1386 	bfi	r3, r1, #6, #1
 8000fa2:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa8:	4827      	ldr	r0, [pc, #156]	; (8001048 <readall_inputs+0x14c>)
 8000faa:	f002 f90b 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	b2d9      	uxtb	r1, r3
 8000fb6:	4a28      	ldr	r2, [pc, #160]	; (8001058 <readall_inputs+0x15c>)
 8000fb8:	7813      	ldrb	r3, [r2, #0]
 8000fba:	f361 0300 	bfi	r3, r1, #0, #1
 8000fbe:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	4821      	ldr	r0, [pc, #132]	; (8001048 <readall_inputs+0x14c>)
 8000fc4:	f002 f8fe 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	b2d9      	uxtb	r1, r3
 8000fd0:	4a21      	ldr	r2, [pc, #132]	; (8001058 <readall_inputs+0x15c>)
 8000fd2:	7813      	ldrb	r3, [r2, #0]
 8000fd4:	f361 0341 	bfi	r3, r1, #1, #1
 8000fd8:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000fda:	2120      	movs	r1, #32
 8000fdc:	481a      	ldr	r0, [pc, #104]	; (8001048 <readall_inputs+0x14c>)
 8000fde:	f002 f8f1 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	b2d9      	uxtb	r1, r3
 8000fea:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <readall_inputs+0x15c>)
 8000fec:	7813      	ldrb	r3, [r2, #0]
 8000fee:	f361 0382 	bfi	r3, r1, #2, #1
 8000ff2:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <readall_inputs+0x14c>)
 8000ff8:	f002 f8e4 	bl	80031c4 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	b2d9      	uxtb	r1, r3
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <readall_inputs+0x15c>)
 8001006:	7813      	ldrb	r3, [r2, #0]
 8001008:	f361 03c3 	bfi	r3, r1, #3, #1
 800100c:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 800100e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001012:	4812      	ldr	r0, [pc, #72]	; (800105c <readall_inputs+0x160>)
 8001014:	f002 f8d6 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	b2d9      	uxtb	r1, r3
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <readall_inputs+0x15c>)
 8001022:	7813      	ldrb	r3, [r2, #0]
 8001024:	f361 1304 	bfi	r3, r1, #4, #1
 8001028:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 800102a:	2104      	movs	r1, #4
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <readall_inputs+0x160>)
 800102e:	f002 f8c9 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	b2d9      	uxtb	r1, r3
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <readall_inputs+0x164>)
 800103c:	7813      	ldrb	r3, [r2, #0]
 800103e:	f361 0300 	bfi	r3, r1, #0, #1
 8001042:	7013      	strb	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	2000003c 	.word	0x2000003c
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40020000 	.word	0x40020000
 8001058:	20000044 	.word	0x20000044
 800105c:	40021400 	.word	0x40021400
 8001060:	20000040 	.word	0x20000040

08001064 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	481b      	ldr	r0, [pc, #108]	; (80010dc <testPCB_Leds+0x78>)
 800106e:	f002 f8c1 	bl	80031f4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001076:	f001 fa17 	bl	80024a8 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	4817      	ldr	r0, [pc, #92]	; (80010dc <testPCB_Leds+0x78>)
 8001080:	f002 f8b8 	bl	80031f4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001084:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001088:	f001 fa0e 	bl	80024a8 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	2104      	movs	r1, #4
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <testPCB_Leds+0x78>)
 8001092:	f002 f8af 	bl	80031f4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001096:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109a:	f001 fa05 	bl	80024a8 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2104      	movs	r1, #4
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <testPCB_Leds+0x78>)
 80010a4:	f002 f8a6 	bl	80031f4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80010a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ac:	f001 f9fc 	bl	80024a8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b6:	4809      	ldr	r0, [pc, #36]	; (80010dc <testPCB_Leds+0x78>)
 80010b8:	f002 f89c 	bl	80031f4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80010bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c0:	f001 f9f2 	bl	80024a8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <testPCB_Leds+0x78>)
 80010cc:	f002 f892 	bl	80031f4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80010d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d4:	f001 f9e8 	bl	80024a8 <HAL_Delay>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40020400 	.word	0x40020400

080010e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_ADC1_Init+0x98>)
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <MX_ADC1_Init+0x9c>)
 80010f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_ADC1_Init+0x98>)
 80010fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_ADC1_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_ADC1_Init+0x98>)
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <MX_ADC1_Init+0xa0>)
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_ADC1_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_ADC1_Init+0x98>)
 800112e:	2201      	movs	r2, #1
 8001130:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_ADC1_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_ADC1_Init+0x98>)
 800113c:	2201      	movs	r2, #1
 800113e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_ADC1_Init+0x98>)
 8001142:	f001 fa1d 	bl	8002580 <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800114c:	f000 fd52 	bl	8001bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001150:	2304      	movs	r3, #4
 8001152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001154:	2301      	movs	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_ADC1_Init+0x98>)
 8001162:	f001 fa51 	bl	8002608 <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800116c:	f000 fd42 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000048 	.word	0x20000048
 800117c:	40012000 	.word	0x40012000
 8001180:	0f000001 	.word	0x0f000001

08001184 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <HAL_ADC_MspInit+0x74>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d123      	bne.n	80011ee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_ADC_MspInit+0x78>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_ADC_MspInit+0x78>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_ADC_MspInit+0x78>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_ADC_MspInit+0x78>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_ADC_MspInit+0x78>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_ADC_MspInit+0x78>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 80011d6:	23f8      	movs	r3, #248	; 0xf8
 80011d8:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_ADC_MspInit+0x7c>)
 80011ea:	f001 fe3f 	bl	8002e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40012000 	.word	0x40012000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000

08001204 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_CAN1_Init+0x64>)
 800120a:	4a18      	ldr	r2, [pc, #96]	; (800126c <MX_CAN1_Init+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_CAN1_Init+0x64>)
 8001210:	2210      	movs	r2, #16
 8001212:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_CAN1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_CAN1_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_CAN1_Init+0x64>)
 8001222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001226:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_CAN1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_CAN1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_CAN1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_CAN1_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_CAN1_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_CAN1_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_CAN1_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_CAN1_Init+0x64>)
 8001254:	f001 fc28 	bl	8002aa8 <HAL_CAN_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800125e:	f000 fcc9 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200000b8 	.word	0x200000b8
 800126c:	40006400 	.word	0x40006400

08001270 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_CAN3_Init+0x64>)
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <MX_CAN3_Init+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_CAN3_Init+0x64>)
 800127c:	2206      	movs	r2, #6
 800127e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_CAN3_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_CAN3_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_CAN3_Init+0x64>)
 800128e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001292:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_CAN3_Init+0x64>)
 8001296:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800129a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <MX_CAN3_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_CAN3_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_CAN3_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_CAN3_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <MX_CAN3_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_CAN3_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_CAN3_Init+0x64>)
 80012c2:	f001 fbf1 	bl	8002aa8 <HAL_CAN_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80012cc:	f000 fc92 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000090 	.word	0x20000090
 80012d8:	40003400 	.word	0x40003400

080012dc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a43      	ldr	r2, [pc, #268]	; (8001408 <HAL_CAN_MspInit+0x12c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d131      	bne.n	8001362 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012fe:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_CAN_MspInit+0x130>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	4a41      	ldr	r2, [pc, #260]	; (800140c <HAL_CAN_MspInit+0x130>)
 8001306:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001308:	4b40      	ldr	r3, [pc, #256]	; (800140c <HAL_CAN_MspInit+0x130>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10b      	bne.n	8001328 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_CAN_MspInit+0x134>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <HAL_CAN_MspInit+0x134>)
 8001316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <HAL_CAN_MspInit+0x134>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	623b      	str	r3, [r7, #32]
 8001326:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <HAL_CAN_MspInit+0x134>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a38      	ldr	r2, [pc, #224]	; (8001410 <HAL_CAN_MspInit+0x134>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_CAN_MspInit+0x134>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001340:	2303      	movs	r3, #3
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001350:	2309      	movs	r3, #9
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	482e      	ldr	r0, [pc, #184]	; (8001414 <HAL_CAN_MspInit+0x138>)
 800135c:	f001 fd86 	bl	8002e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001360:	e04e      	b.n	8001400 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a2c      	ldr	r2, [pc, #176]	; (8001418 <HAL_CAN_MspInit+0x13c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d149      	bne.n	8001400 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_CAN_MspInit+0x134>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_CAN_MspInit+0x134>)
 8001372:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <HAL_CAN_MspInit+0x134>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <HAL_CAN_MspInit+0x134>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <HAL_CAN_MspInit+0x134>)
 800138a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <HAL_CAN_MspInit+0x134>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_CAN_MspInit+0x130>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	4a1a      	ldr	r2, [pc, #104]	; (800140c <HAL_CAN_MspInit+0x130>)
 80013a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_CAN_MspInit+0x130>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d10b      	bne.n	80013c6 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_CAN_MspInit+0x134>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_CAN_MspInit+0x134>)
 80013b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_CAN_MspInit+0x134>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_CAN_MspInit+0x134>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <HAL_CAN_MspInit+0x134>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_CAN_MspInit+0x134>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80013de:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80013f0:	230b      	movs	r3, #11
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <HAL_CAN_MspInit+0x140>)
 80013fc:	f001 fd36 	bl	8002e6c <HAL_GPIO_Init>
}
 8001400:	bf00      	nop
 8001402:	3738      	adds	r7, #56	; 0x38
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40006400 	.word	0x40006400
 800140c:	20000028 	.word	0x20000028
 8001410:	40023800 	.word	0x40023800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40003400 	.word	0x40003400
 800141c:	40020000 	.word	0x40020000

08001420 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001436:	4bb7      	ldr	r3, [pc, #732]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4ab6      	ldr	r2, [pc, #728]	; (8001714 <MX_GPIO_Init+0x2f4>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4bb4      	ldr	r3, [pc, #720]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4bb1      	ldr	r3, [pc, #708]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4ab0      	ldr	r2, [pc, #704]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4bae      	ldr	r3, [pc, #696]	; (8001714 <MX_GPIO_Init+0x2f4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001466:	4bab      	ldr	r3, [pc, #684]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4aaa      	ldr	r2, [pc, #680]	; (8001714 <MX_GPIO_Init+0x2f4>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4ba8      	ldr	r3, [pc, #672]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147e:	4ba5      	ldr	r3, [pc, #660]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4aa4      	ldr	r2, [pc, #656]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4ba2      	ldr	r3, [pc, #648]	; (8001714 <MX_GPIO_Init+0x2f4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b9f      	ldr	r3, [pc, #636]	; (8001714 <MX_GPIO_Init+0x2f4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a9e      	ldr	r2, [pc, #632]	; (8001714 <MX_GPIO_Init+0x2f4>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b9c      	ldr	r3, [pc, #624]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	4b99      	ldr	r3, [pc, #612]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a98      	ldr	r2, [pc, #608]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b96      	ldr	r3, [pc, #600]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c6:	4b93      	ldr	r3, [pc, #588]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a92      	ldr	r2, [pc, #584]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b90      	ldr	r3, [pc, #576]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014de:	4b8d      	ldr	r3, [pc, #564]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a8c      	ldr	r2, [pc, #560]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b8a      	ldr	r3, [pc, #552]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80014f6:	2200      	movs	r2, #0
 80014f8:	f248 0187 	movw	r1, #32903	; 0x8087
 80014fc:	4886      	ldr	r0, [pc, #536]	; (8001718 <MX_GPIO_Init+0x2f8>)
 80014fe:	f001 fe79 	bl	80031f4 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001508:	4884      	ldr	r0, [pc, #528]	; (800171c <MX_GPIO_Init+0x2fc>)
 800150a:	f001 fe73 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f242 0102 	movw	r1, #8194	; 0x2002
 8001514:	4882      	ldr	r0, [pc, #520]	; (8001720 <MX_GPIO_Init+0x300>)
 8001516:	f001 fe6d 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f240 6102 	movw	r1, #1538	; 0x602
 8001520:	4880      	ldr	r0, [pc, #512]	; (8001724 <MX_GPIO_Init+0x304>)
 8001522:	f001 fe67 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f244 0184 	movw	r1, #16516	; 0x4084
 800152c:	487e      	ldr	r0, [pc, #504]	; (8001728 <MX_GPIO_Init+0x308>)
 800152e:	f001 fe61 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	4877      	ldr	r0, [pc, #476]	; (8001718 <MX_GPIO_Init+0x2f8>)
 800153a:	f001 fe5b 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800153e:	2200      	movs	r2, #0
 8001540:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001544:	4879      	ldr	r0, [pc, #484]	; (800172c <MX_GPIO_Init+0x30c>)
 8001546:	f001 fe55 	bl	80031f4 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2118      	movs	r1, #24
 800154e:	4878      	ldr	r0, [pc, #480]	; (8001730 <MX_GPIO_Init+0x310>)
 8001550:	f001 fe50 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001554:	f648 0387 	movw	r3, #34951	; 0x8887
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	486a      	ldr	r0, [pc, #424]	; (8001718 <MX_GPIO_Init+0x2f8>)
 800156e:	f001 fc7d 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001572:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	4864      	ldr	r0, [pc, #400]	; (8001718 <MX_GPIO_Init+0x2f8>)
 8001588:	f001 fc70 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 800158c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001592:	2303      	movs	r3, #3
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	485d      	ldr	r0, [pc, #372]	; (8001718 <MX_GPIO_Init+0x2f8>)
 80015a2:	f001 fc63 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80015a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4857      	ldr	r0, [pc, #348]	; (800171c <MX_GPIO_Init+0x2fc>)
 80015c0:	f001 fc54 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80015c4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4850      	ldr	r0, [pc, #320]	; (800171c <MX_GPIO_Init+0x2fc>)
 80015da:	f001 fc47 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80015de:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e4:	2303      	movs	r3, #3
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	484b      	ldr	r0, [pc, #300]	; (8001720 <MX_GPIO_Init+0x300>)
 80015f4:	f001 fc3a 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80015f8:	f242 0302 	movw	r3, #8194	; 0x2002
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4843      	ldr	r0, [pc, #268]	; (8001720 <MX_GPIO_Init+0x300>)
 8001612:	f001 fc2b 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001616:	f248 0304 	movw	r3, #32772	; 0x8004
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	483d      	ldr	r0, [pc, #244]	; (8001720 <MX_GPIO_Init+0x300>)
 800162c:	f001 fc1e 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001630:	f641 0305 	movw	r3, #6149	; 0x1805
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	4837      	ldr	r0, [pc, #220]	; (8001724 <MX_GPIO_Init+0x304>)
 8001646:	f001 fc11 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 800164a:	f240 6302 	movw	r3, #1538	; 0x602
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	4830      	ldr	r0, [pc, #192]	; (8001724 <MX_GPIO_Init+0x304>)
 8001664:	f001 fc02 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001668:	f64b 7373 	movw	r3, #49011	; 0xbf73
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166e:	2303      	movs	r3, #3
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	482a      	ldr	r0, [pc, #168]	; (8001728 <MX_GPIO_Init+0x308>)
 800167e:	f001 fbf5 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001682:	f244 0384 	movw	r3, #16516	; 0x4084
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	4823      	ldr	r0, [pc, #140]	; (8001728 <MX_GPIO_Init+0x308>)
 800169c:	f001 fbe6 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 80016a0:	f240 1343 	movw	r3, #323	; 0x143
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	2303      	movs	r3, #3
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	481d      	ldr	r0, [pc, #116]	; (800172c <MX_GPIO_Init+0x30c>)
 80016b6:	f001 fbd9 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 80016ba:	f240 7304 	movw	r3, #1796	; 0x704
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c0:	2303      	movs	r3, #3
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_GPIO_Init+0x310>)
 80016d0:	f001 fbcc 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 80016d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	4811      	ldr	r0, [pc, #68]	; (8001730 <MX_GPIO_Init+0x310>)
 80016ea:	f001 fbbf 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80016ee:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <MX_GPIO_Init+0x30c>)
 8001708:	f001 fbb0 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 800170c:	2318      	movs	r3, #24
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
 8001710:	e010      	b.n	8001734 <MX_GPIO_Init+0x314>
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40021000 	.word	0x40021000
 800171c:	40020800 	.word	0x40020800
 8001720:	40021400 	.word	0x40021400
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40021800 	.word	0x40021800
 8001730:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	4803      	ldr	r0, [pc, #12]	; (8001754 <MX_GPIO_Init+0x334>)
 8001748:	f001 fb90 	bl	8002e6c <HAL_GPIO_Init>

}
 800174c:	bf00      	nop
 800174e:	3738      	adds	r7, #56	; 0x38
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020c00 	.word	0x40020c00

08001758 <calculateMovingAverage>:
static uint16_t getDifference(uint16_t a, uint16_t b);						// Differenzberechnung

// Gleitenden Mittelwert berechnen, sehr Speicher arm
//----------------------------------------------------------------------
static uint16_t calculateMovingAverage(uint16_t oldValue, uint16_t newValue, uint16_t n)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
 8001762:	460b      	mov	r3, r1
 8001764:	80bb      	strh	r3, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 800176a:	88ba      	ldrh	r2, [r7, #4]
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	1ad2      	subs	r2, r2, r3
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	fb92 f3f3 	sdiv	r3, r2, r3
 8001776:	b29a      	uxth	r2, r3
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	4413      	add	r3, r2
 800177c:	b29b      	uxth	r3, r3
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b096      	sub	sp, #88	; 0x58
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001792:	f000 fe2c 	bl	80023ee <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t data[36] = {0}, temp, CFG[6] = {0};
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
 800179a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800179e:	2220      	movs	r2, #32
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 fb1e 	bl	8006de4 <memset>
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	2300      	movs	r3, #0
 80017ae:	843b      	strh	r3, [r7, #32]
  uint32_t tmp;
  uint16_t spannungen[12] = {0}, temperatur[2] = {0}, tmp_mean;
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c4:	f000 f9a6 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c8:	f7ff fe2a 	bl	8001420 <MX_GPIO_Init>
  MX_CAN1_Init();
 80017cc:	f7ff fd1a 	bl	8001204 <MX_CAN1_Init>
  MX_SPI4_Init();
 80017d0:	f000 fa7c 	bl	8001ccc <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80017d4:	f000 fd54 	bl	8002280 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017d8:	f7ff fc82 	bl	80010e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80017dc:	f000 fbb2 	bl	8001f44 <MX_TIM1_Init>
  MX_TIM4_Init();
 80017e0:	f000 fc36 	bl	8002050 <MX_TIM4_Init>
  MX_SPI1_Init();
 80017e4:	f000 fa34 	bl	8001c50 <MX_SPI1_Init>
  MX_CAN3_Init();
 80017e8:	f7ff fd42 	bl	8001270 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80017ec:	f7ff fac4 	bl	8000d78 <readResetSource>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fb12 	bl	8000e1c <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80017f8:	213a      	movs	r1, #58	; 0x3a
 80017fa:	48be      	ldr	r0, [pc, #760]	; (8001af4 <main+0x368>)
 80017fc:	f7fe fea0 	bl	8000540 <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 8001800:	f7ff fa90 	bl	8000d24 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8001804:	f7ff fc2e 	bl	8001064 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001808:	f7ff fb78 	bl	8000efc <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001812:	48b9      	ldr	r0, [pc, #740]	; (8001af8 <main+0x36c>)
 8001814:	f001 fcee 	bl	80031f4 <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 8001818:	2014      	movs	r0, #20
 800181a:	f000 fe45 	bl	80024a8 <HAL_Delay>

    uartTransmit("\n", 1);
 800181e:	2101      	movs	r1, #1
 8001820:	48b6      	ldr	r0, [pc, #728]	; (8001afc <main+0x370>)
 8001822:	f7fe fe8d 	bl	8000540 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 8001826:	2122      	movs	r1, #34	; 0x22
 8001828:	48b5      	ldr	r0, [pc, #724]	; (8001b00 <main+0x374>)
 800182a:	f7fe fe89 	bl	8000540 <uartTransmit>
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
	}*/

    // LTC6811 initialisieren
	CFG[0] = 0xF8;
 800182e:	23f8      	movs	r3, #248	; 0xf8
 8001830:	773b      	strb	r3, [r7, #28]
	CFG[1] = 0xCF;
 8001832:	23cf      	movs	r3, #207	; 0xcf
 8001834:	777b      	strb	r3, [r7, #29]
	CFG[2] = 0x17;
 8001836:	2317      	movs	r3, #23
 8001838:	77bb      	strb	r3, [r7, #30]
	CFG[3] = 0xA4;
 800183a:	23a4      	movs	r3, #164	; 0xa4
 800183c:	77fb      	strb	r3, [r7, #31]
	CFG[4] = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 3020 	strb.w	r3, [r7, #32]
	CFG[5] = 0x00;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ltc6811_write(WRCFG, &CFG[0]);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	2001      	movs	r0, #1
 8001852:	f7fe ff59 	bl	8000708 <ltc6811_write>
		uartTransmitNumber(data[10+i], 10);
	}
	uartTransmit(";", 1);*/

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 8001856:	f240 7011 	movw	r0, #1809	; 0x711
 800185a:	f7fe ff01 	bl	8000660 <ltc6811>
	ltc6811(CLRSTAT);
 800185e:	f240 7013 	movw	r0, #1811	; 0x713
 8001862:	f7fe fefd 	bl	8000660 <ltc6811>
	ltc6811(CLRAUX);
 8001866:	f240 7012 	movw	r0, #1810	; 0x712
 800186a:	f7fe fef9 	bl	8000660 <ltc6811>

	// Erster ADC Vorgang ist ungueltig
	ltc6811(ADCVAX | MD73 | CELLALL);									// Initial Command Zellen auslesen
 800186e:	f240 506f 	movw	r0, #1391	; 0x56f
 8001872:	f7fe fef5 	bl	8000660 <ltc6811>

	tmp_mean = 65535;
 8001876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800187a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 800187e:	f44f 7058 	mov.w	r0, #864	; 0x360
 8001882:	f7fe feed 	bl	8000660 <ltc6811>
		HAL_Delay(300);
 8001886:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800188a:	f000 fe0d 	bl	80024a8 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	4619      	mov	r1, r3
 8001894:	2004      	movs	r0, #4
 8001896:	f7fe ffa1 	bl	80007dc <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	3306      	adds	r3, #6
 80018a0:	4619      	mov	r1, r3
 80018a2:	2006      	movs	r0, #6
 80018a4:	f7fe ff9a 	bl	80007dc <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	330c      	adds	r3, #12
 80018ae:	4619      	mov	r1, r3
 80018b0:	2008      	movs	r0, #8
 80018b2:	f7fe ff93 	bl	80007dc <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	3312      	adds	r3, #18
 80018bc:	4619      	mov	r1, r3
 80018be:	200a      	movs	r0, #10
 80018c0:	f7fe ff8c 	bl	80007dc <ltc6811_read>

		uartTransmit("Spannungen\n", 11);
 80018c4:	210b      	movs	r1, #11
 80018c6:	488f      	ldr	r0, [pc, #572]	; (8001b04 <main+0x378>)
 80018c8:	f7fe fe3a 	bl	8000540 <uartTransmit>

		for (uint8_t i = 0; i < 12; i++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80018d2:	e023      	b.n	800191c <main+0x190>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 80018d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	3301      	adds	r3, #1
 80018dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80018e0:	4413      	add	r3, r2
 80018e2:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018f4:	440b      	add	r3, r1
 80018f6:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21a      	sxth	r2, r3
 8001900:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001904:	b292      	uxth	r2, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800190c:	440b      	add	r3, r1
 800190e:	f823 2c54 	strh.w	r2, [r3, #-84]
		for (uint8_t i = 0; i < 12; i++)
 8001912:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001916:	3301      	adds	r3, #1
 8001918:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800191c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001920:	2b0b      	cmp	r3, #11
 8001922:	d9d7      	bls.n	80018d4 <main+0x148>
		}

		for (uint8_t i = 0; i < 12; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800192a:	e014      	b.n	8001956 <main+0x1ca>
		{
			uartTransmitNumber(spannungen[i], 10);
 800192c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001936:	4413      	add	r3, r2
 8001938:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800193c:	210a      	movs	r1, #10
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe12 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001944:	2101      	movs	r1, #1
 8001946:	4870      	ldr	r0, [pc, #448]	; (8001b08 <main+0x37c>)
 8001948:	f7fe fdfa 	bl	8000540 <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 800194c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001950:	3301      	adds	r3, #1
 8001952:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001956:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800195a:	2b0b      	cmp	r3, #11
 800195c:	d9e6      	bls.n	800192c <main+0x1a0>
		}

		tmp = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	653b      	str	r3, [r7, #80]	; 0x50
		for (uint8_t i = 0; i < 12; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001968:	e010      	b.n	800198c <main+0x200>
		{
			tmp += spannungen[i];
 800196a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001974:	4413      	add	r3, r2
 8001976:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800197a:	461a      	mov	r2, r3
 800197c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800197e:	4413      	add	r3, r2
 8001980:	653b      	str	r3, [r7, #80]	; 0x50
		for (uint8_t i = 0; i < 12; i++)
 8001982:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001986:	3301      	adds	r3, #1
 8001988:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800198c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001990:	2b0b      	cmp	r3, #11
 8001992:	d9ea      	bls.n	800196a <main+0x1de>
		}
		tmp /= 12;
 8001994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001996:	4a5d      	ldr	r2, [pc, #372]	; (8001b0c <main+0x380>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	653b      	str	r3, [r7, #80]	; 0x50
		uartTransmitNumber(tmp, 10);
 80019a0:	210a      	movs	r1, #10
 80019a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80019a4:	f7fe fde0 	bl	8000568 <uartTransmitNumber>
		uartTransmit(";", 1);
 80019a8:	2101      	movs	r1, #1
 80019aa:	4857      	ldr	r0, [pc, #348]	; (8001b08 <main+0x37c>)
 80019ac:	f7fe fdc8 	bl	8000540 <uartTransmit>

		tmp_mean = calculateMovingAverage(tmp_mean, tmp, 10);
 80019b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019b2:	b299      	uxth	r1, r3
 80019b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019b8:	220a      	movs	r2, #10
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fecc 	bl	8001758 <calculateMovingAverage>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uartTransmitNumber(tmp_mean, 10);
 80019c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019ca:	210a      	movs	r1, #10
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdcb 	bl	8000568 <uartTransmitNumber>

		uartTransmit("\n", 1);
 80019d2:	2101      	movs	r1, #1
 80019d4:	4849      	ldr	r0, [pc, #292]	; (8001afc <main+0x370>)
 80019d6:	f7fe fdb3 	bl	8000540 <uartTransmit>

		uartTransmit("Temperaturen\n", 13);
 80019da:	210d      	movs	r1, #13
 80019dc:	484c      	ldr	r0, [pc, #304]	; (8001b10 <main+0x384>)
 80019de:	f7fe fdaf 	bl	8000540 <uartTransmit>

		for (uint8_t j = 0; j < 8; j++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80019e8:	e06c      	b.n	8001ac4 <main+0x338>
		{
			ltc1380_write(LTC1380_MUX0, j);									// Multiplexer 0 einstellen
 80019ea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80019ee:	4619      	mov	r1, r3
 80019f0:	2090      	movs	r0, #144	; 0x90
 80019f2:	f7fe fdd9 	bl	80005a8 <ltc1380_write>
			ltc1380_write(LTC1380_MUX2, j);									// Multiplexer 1 einstellen
 80019f6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80019fa:	4619      	mov	r1, r3
 80019fc:	2094      	movs	r0, #148	; 0x94
 80019fe:	f7fe fdd3 	bl	80005a8 <ltc1380_write>
			HAL_Delay(100);
 8001a02:	2064      	movs	r0, #100	; 0x64
 8001a04:	f000 fd50 	bl	80024a8 <HAL_Delay>
			ltc6811(ADAX | MD262 | GPIOALL);								// Initial Command Zellen auslesen
 8001a08:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 8001a0c:	f7fe fe28 	bl	8000660 <ltc6811>
			HAL_Delay(300);
 8001a10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a14:	f000 fd48 	bl	80024a8 <HAL_Delay>
			ltc6811_read(RDAUXA, &data[0]);
 8001a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	200c      	movs	r0, #12
 8001a20:	f7fe fedc 	bl	80007dc <ltc6811_read>

			for (uint8_t i = 0; i < 3; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001a2a:	e023      	b.n	8001a74 <main+0x2e8>
			{
				temperatur[i] = ((data[i*2+1]<<8) | data[i*2]);
 8001a2c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	3301      	adds	r3, #1
 8001a34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001a38:	4413      	add	r3, r2
 8001a3a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a4c:	440b      	add	r3, r1
 8001a4e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a64:	440b      	add	r3, r1
 8001a66:	f823 2c58 	strh.w	r2, [r3, #-88]
			for (uint8_t i = 0; i < 3; i++)
 8001a6a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001a74:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d9d7      	bls.n	8001a2c <main+0x2a0>
			}
			uartTransmitNumber(temperatur[0], 10);
 8001a7c:	883b      	ldrh	r3, [r7, #0]
 8001a7e:	210a      	movs	r1, #10
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd71 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001a86:	2101      	movs	r1, #1
 8001a88:	481f      	ldr	r0, [pc, #124]	; (8001b08 <main+0x37c>)
 8001a8a:	f7fe fd59 	bl	8000540 <uartTransmit>
			uartTransmitNumber(temperatur[1], 10);
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	210a      	movs	r1, #10
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd68 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	481b      	ldr	r0, [pc, #108]	; (8001b08 <main+0x37c>)
 8001a9c:	f7fe fd50 	bl	8000540 <uartTransmit>

			if (j == 7)
 8001aa0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001aa4:	2b07      	cmp	r3, #7
 8001aa6:	d108      	bne.n	8001aba <main+0x32e>
			{
				uartTransmitNumber(temperatur[2], 10);
 8001aa8:	88bb      	ldrh	r3, [r7, #4]
 8001aaa:	210a      	movs	r1, #10
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd5b 	bl	8000568 <uartTransmitNumber>
				uartTransmit(";", 1);
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4814      	ldr	r0, [pc, #80]	; (8001b08 <main+0x37c>)
 8001ab6:	f7fe fd43 	bl	8000540 <uartTransmit>
		for (uint8_t j = 0; j < 8; j++)
 8001aba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8001ac4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001ac8:	2b07      	cmp	r3, #7
 8001aca:	d98e      	bls.n	80019ea <main+0x25e>
			}
		}

		uartTransmit("\n", 1);
 8001acc:	2101      	movs	r1, #1
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <main+0x370>)
 8001ad0:	f7fe fd36 	bl	8000540 <uartTransmit>

		temp++;
 8001ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		if(temp == 2)
 8001ade:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	f47f aecb 	bne.w	800187e <main+0xf2>
			return 1;
 8001ae8:	2301      	movs	r3, #1
  }
  /* USER CODE END 3 */
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3758      	adds	r7, #88	; 0x58
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	080071d0 	.word	0x080071d0
 8001af8:	40021000 	.word	0x40021000
 8001afc:	0800720c 	.word	0x0800720c
 8001b00:	08007210 	.word	0x08007210
 8001b04:	08007234 	.word	0x08007234
 8001b08:	08007240 	.word	0x08007240
 8001b0c:	aaaaaaab 	.word	0xaaaaaaab
 8001b10:	08007244 	.word	0x08007244

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b094      	sub	sp, #80	; 0x50
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	2234      	movs	r2, #52	; 0x34
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f005 f95e 	bl	8006de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <SystemClock_Config+0xd8>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a2b      	ldr	r2, [pc, #172]	; (8001bec <SystemClock_Config+0xd8>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <SystemClock_Config+0xd8>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <SystemClock_Config+0xdc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <SystemClock_Config+0xdc>)
 8001b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <SystemClock_Config+0xdc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b72:	2302      	movs	r3, #2
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b7c:	2319      	movs	r3, #25
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001b80:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001b84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fb96 	bl	80032c8 <HAL_RCC_OscConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ba2:	f000 f827 	bl	8001bf4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ba6:	f001 fb3f 	bl	8003228 <HAL_PWREx_EnableOverDrive>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001bb0:	f000 f820 	bl	8001bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	2107      	movs	r1, #7
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 fe26 	bl	8003824 <HAL_RCC_ClockConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001bde:	f000 f809 	bl	8001bf4 <Error_Handler>
  }
}
 8001be2:	bf00      	nop
 8001be4:	3750      	adds	r7, #80	; 0x50
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40007000 	.word	0x40007000

08001bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf8:	b672      	cpsid	i
}
 8001bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <Error_Handler+0x50>)
 8001bfe:	7813      	ldrb	r3, [r2, #0]
 8001c00:	f043 0320 	orr.w	r3, r3, #32
 8001c04:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <Error_Handler+0x50>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c16:	480c      	ldr	r0, [pc, #48]	; (8001c48 <Error_Handler+0x54>)
 8001c18:	f001 faec 	bl	80031f4 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <Error_Handler+0x50>)
 8001c1e:	7813      	ldrb	r3, [r2, #0]
 8001c20:	f36f 1386 	bfc	r3, #6, #1
 8001c24:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <Error_Handler+0x50>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	2104      	movs	r1, #4
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <Error_Handler+0x54>)
 8001c36:	f001 fadd 	bl	80031f4 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8001c3a:	2122      	movs	r1, #34	; 0x22
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <Error_Handler+0x58>)
 8001c3e:	f7fe fc7f 	bl	8000540 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8001c42:	e7fe      	b.n	8001c42 <Error_Handler+0x4e>
 8001c44:	20000038 	.word	0x20000038
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	08007254 	.word	0x08007254

08001c50 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <MX_SPI1_Init+0x78>)
 8001c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c6a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001caa:	2208      	movs	r2, #8
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_SPI1_Init+0x74>)
 8001cb0:	f002 fbb6 	bl	8004420 <HAL_SPI_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cba:	f7ff ff9b 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000144 	.word	0x20000144
 8001cc8:	40013000 	.word	0x40013000

08001ccc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <MX_SPI4_Init+0x78>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cdc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001ce6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cea:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfe:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001d02:	2230      	movs	r2, #48	; 0x30
 8001d04:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_SPI4_Init+0x74>)
 8001d2c:	f002 fb78 	bl	8004420 <HAL_SPI_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001d36:	f7ff ff5d 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200000e0 	.word	0x200000e0
 8001d44:	40013400 	.word	0x40013400

08001d48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a3d      	ldr	r2, [pc, #244]	; (8001e5c <HAL_SPI_MspInit+0x114>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d145      	bne.n	8001df6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4a3c      	ldr	r2, [pc, #240]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d82:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4825      	ldr	r0, [pc, #148]	; (8001e64 <HAL_SPI_MspInit+0x11c>)
 8001dce:	f001 f84d 	bl	8002e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001dd2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de4:	2305      	movs	r3, #5
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	481e      	ldr	r0, [pc, #120]	; (8001e68 <HAL_SPI_MspInit+0x120>)
 8001df0:	f001 f83c 	bl	8002e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001df4:	e02d      	b.n	8001e52 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_SPI_MspInit+0x124>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d128      	bne.n	8001e52 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001e06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e0a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	6313      	str	r3, [r2, #48]	; 0x30
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_SPI_MspInit+0x118>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001e30:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e42:	2305      	movs	r3, #5
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4808      	ldr	r0, [pc, #32]	; (8001e70 <HAL_SPI_MspInit+0x128>)
 8001e4e:	f001 f80d 	bl	8002e6c <HAL_GPIO_Init>
}
 8001e52:	bf00      	nop
 8001e54:	3730      	adds	r7, #48	; 0x30
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40013000 	.word	0x40013000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	40021800 	.word	0x40021800
 8001e6c:	40013400 	.word	0x40013400
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_MspInit+0x44>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_MspInit+0x44>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <BusFault_Handler+0x4>

08001edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <UsageFault_Handler+0x4>

08001ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f10:	f000 faaa 	bl	8002468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <SystemInit+0x28>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <SystemInit+0x28>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SystemInit+0x28>)
 8001f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f32:	609a      	str	r2, [r3, #8]
#endif
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	; 0x30
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	463b      	mov	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f72:	4b35      	ldr	r3, [pc, #212]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f74:	4a35      	ldr	r2, [pc, #212]	; (800204c <MX_TIM1_Init+0x108>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f9e:	482a      	ldr	r0, [pc, #168]	; (8002048 <MX_TIM1_Init+0x104>)
 8001fa0:	f003 f9f5 	bl	800538e <HAL_TIM_IC_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001faa:	f7ff fe23 	bl	8001bf4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001fb2:	2350      	movs	r3, #80	; 0x50
 8001fb4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	481f      	ldr	r0, [pc, #124]	; (8002048 <MX_TIM1_Init+0x104>)
 8001fca:	f003 fbe7 	bl	800579c <HAL_TIM_SlaveConfigSynchro>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fd4:	f7ff fe0e 	bl	8001bf4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2200      	movs	r2, #0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4815      	ldr	r0, [pc, #84]	; (8002048 <MX_TIM1_Init+0x104>)
 8001ff2:	f003 fa23 	bl	800543c <HAL_TIM_IC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001ffc:	f7ff fdfa 	bl	8001bf4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002000:	2302      	movs	r3, #2
 8002002:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002004:	2302      	movs	r3, #2
 8002006:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	2204      	movs	r2, #4
 800200e:	4619      	mov	r1, r3
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <MX_TIM1_Init+0x104>)
 8002012:	f003 fa13 	bl	800543c <HAL_TIM_IC_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800201c:	f7ff fdea 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_TIM1_Init+0x104>)
 8002032:	f004 f931 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800203c:	f7ff fdda 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	3730      	adds	r7, #48	; 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200001f4 	.word	0x200001f4
 800204c:	40010000 	.word	0x40010000

08002050 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002062:	463b      	mov	r3, r7
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
 8002070:	615a      	str	r2, [r3, #20]
 8002072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002074:	4b32      	ldr	r3, [pc, #200]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002076:	4a33      	ldr	r2, [pc, #204]	; (8002144 <MX_TIM4_Init+0xf4>)
 8002078:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800207a:	4b31      	ldr	r3, [pc, #196]	; (8002140 <MX_TIM4_Init+0xf0>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002086:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800209a:	4829      	ldr	r0, [pc, #164]	; (8002140 <MX_TIM4_Init+0xf0>)
 800209c:	f003 f920 	bl	80052e0 <HAL_TIM_PWM_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80020a6:	f7ff fda5 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	4821      	ldr	r0, [pc, #132]	; (8002140 <MX_TIM4_Init+0xf0>)
 80020ba:	f004 f8ed 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80020c4:	f7ff fd96 	bl	8001bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c8:	2360      	movs	r3, #96	; 0x60
 80020ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	4818      	ldr	r0, [pc, #96]	; (8002140 <MX_TIM4_Init+0xf0>)
 80020e0:	f003 fa48 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80020ea:	f7ff fd83 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ee:	463b      	mov	r3, r7
 80020f0:	2204      	movs	r2, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4812      	ldr	r0, [pc, #72]	; (8002140 <MX_TIM4_Init+0xf0>)
 80020f6:	f003 fa3d 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002100:	f7ff fd78 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002104:	463b      	mov	r3, r7
 8002106:	2208      	movs	r2, #8
 8002108:	4619      	mov	r1, r3
 800210a:	480d      	ldr	r0, [pc, #52]	; (8002140 <MX_TIM4_Init+0xf0>)
 800210c:	f003 fa32 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002116:	f7ff fd6d 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800211a:	463b      	mov	r3, r7
 800211c:	220c      	movs	r2, #12
 800211e:	4619      	mov	r1, r3
 8002120:	4807      	ldr	r0, [pc, #28]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002122:	f003 fa27 	bl	8005574 <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800212c:	f7ff fd62 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002130:	4803      	ldr	r0, [pc, #12]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002132:	f000 f86d 	bl	8002210 <HAL_TIM_MspPostInit>

}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200001a8 	.word	0x200001a8
 8002144:	40000800 	.word	0x40000800

08002148 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_TIM_IC_MspInit+0x7c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d128      	bne.n	80021bc <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <HAL_TIM_IC_MspInit+0x80>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_TIM_IC_MspInit+0x80>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <HAL_TIM_IC_MspInit+0x80>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_TIM_IC_MspInit+0x80>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_TIM_IC_MspInit+0x80>)
 8002188:	f043 0310 	orr.w	r3, r3, #16
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_TIM_IC_MspInit+0x80>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 800219a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <HAL_TIM_IC_MspInit+0x84>)
 80021b8:	f000 fe58 	bl	8002e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021bc:	bf00      	nop
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40021000 	.word	0x40021000

080021d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_TIM_PWM_MspInit+0x38>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10b      	bne.n	80021fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_TIM_PWM_MspInit+0x3c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_TIM_PWM_MspInit+0x3c>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_TIM_PWM_MspInit+0x3c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40000800 	.word	0x40000800
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_TIM_MspPostInit+0x64>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d11c      	bne.n	800226c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_TIM_MspPostInit+0x68>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <HAL_TIM_MspPostInit+0x68>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_TIM_MspPostInit+0x68>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 800224a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800224e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800225c:	2302      	movs	r3, #2
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4619      	mov	r1, r3
 8002266:	4805      	ldr	r0, [pc, #20]	; (800227c <HAL_TIM_MspPostInit+0x6c>)
 8002268:	f000 fe00 	bl	8002e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40000800 	.word	0x40000800
 8002278:	40023800 	.word	0x40023800
 800227c:	40020c00 	.word	0x40020c00

08002280 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 8002286:	4a15      	ldr	r2, [pc, #84]	; (80022dc <MX_USART2_UART_Init+0x5c>)
 8002288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 800228c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022c4:	f004 f876 	bl	80063b4 <HAL_UART_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022ce:	f7ff fc91 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000240 	.word	0x20000240
 80022dc:	40004400 	.word	0x40004400

080022e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0ae      	sub	sp, #184	; 0xb8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2290      	movs	r2, #144	; 0x90
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f004 fd6f 	bl	8006de4 <memset>
  if(uartHandle->Instance==USART2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a21      	ldr	r2, [pc, #132]	; (8002390 <HAL_UART_MspInit+0xb0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d13a      	bne.n	8002386 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002314:	2300      	movs	r3, #0
 8002316:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4618      	mov	r0, r3
 800231e:	f001 fc57 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002328:	f7ff fc64 	bl	8001bf4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_UART_MspInit+0xb4>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_UART_MspInit+0xb4>)
 8002332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_UART_MspInit+0xb4>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_UART_MspInit+0xb4>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a12      	ldr	r2, [pc, #72]	; (8002394 <HAL_UART_MspInit+0xb4>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_UART_MspInit+0xb4>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800235c:	2360      	movs	r3, #96	; 0x60
 800235e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002374:	2307      	movs	r3, #7
 8002376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <HAL_UART_MspInit+0xb8>)
 8002382:	f000 fd73 	bl	8002e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002386:	bf00      	nop
 8002388:	37b8      	adds	r7, #184	; 0xb8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40004400 	.word	0x40004400
 8002394:	40023800 	.word	0x40023800
 8002398:	40020c00 	.word	0x40020c00

0800239c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800239c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023a2:	e003      	b.n	80023ac <LoopCopyDataInit>

080023a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023aa:	3104      	adds	r1, #4

080023ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023ac:	480b      	ldr	r0, [pc, #44]	; (80023dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023b4:	d3f6      	bcc.n	80023a4 <CopyDataInit>
  ldr  r2, =_sbss
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023b8:	e002      	b.n	80023c0 <LoopFillZerobss>

080023ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023bc:	f842 3b04 	str.w	r3, [r2], #4

080023c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023c4:	d3f9      	bcc.n	80023ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023c6:	f7ff fda7 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ca:	f004 fce7 	bl	8006d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ce:	f7ff f9dd 	bl	800178c <main>
  bx  lr    
 80023d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80023d8:	080074c8 	.word	0x080074c8
  ldr  r0, =_sdata
 80023dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023e0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80023e4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80023e8:	200002c8 	.word	0x200002c8

080023ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC_IRQHandler>

080023ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f2:	2003      	movs	r0, #3
 80023f4:	f000 fd06 	bl	8002e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f000 f805 	bl	8002408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023fe:	f7ff fd39 	bl	8001e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_InitTick+0x54>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_InitTick+0x58>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fd13 	bl	8002e52 <HAL_SYSTICK_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00e      	b.n	8002454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0f      	cmp	r3, #15
 800243a:	d80a      	bhi.n	8002452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800243c:	2200      	movs	r2, #0
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f000 fce9 	bl	8002e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002448:	4a06      	ldr	r2, [pc, #24]	; (8002464 <HAL_InitTick+0x5c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000000 	.word	0x20000000
 8002460:	20000008 	.word	0x20000008
 8002464:	20000004 	.word	0x20000004

08002468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_IncTick+0x24>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_IncTick+0x24>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000008 	.word	0x20000008
 800248c:	200002c4 	.word	0x200002c4

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	200002c4 	.word	0x200002c4

080024a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff ffee 	bl	8002490 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d005      	beq.n	80024ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_Delay+0x44>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ce:	bf00      	nop
 80024d0:	f7ff ffde 	bl	8002490 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d8f7      	bhi.n	80024d0 <HAL_Delay+0x28>
  {
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000008 	.word	0x20000008

080024f0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 80024f4:	4b02      	ldr	r3, [pc, #8]	; (8002500 <HAL_GetHalVersion+0x10>)
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	01020a00 	.word	0x01020a00

08002504 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetREVID+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0c1b      	lsrs	r3, r3, #16
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e0042000 	.word	0xe0042000

0800251c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <HAL_GetDEVID+0x18>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e0042000 	.word	0xe0042000

08002538 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_GetUIDw0+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	1ff0f420 	.word	0x1ff0f420

08002550 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_GetUIDw1+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	1ff0f424 	.word	0x1ff0f424

08002568 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_GetUIDw2+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	1ff0f428 	.word	0x1ff0f428

08002580 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e031      	b.n	80025fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fdf0 	bl	8001184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_ADC_Init+0x84>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	f043 0202 	orr.w	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f970 	bl	80028b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ea:	e001      	b.n	80025f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	ffffeefd 	.word	0xffffeefd

08002608 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1c>
 8002620:	2302      	movs	r3, #2
 8002622:	e136      	b.n	8002892 <HAL_ADC_ConfigChannel+0x28a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b09      	cmp	r3, #9
 8002632:	d93a      	bls.n	80026aa <HAL_ADC_ConfigChannel+0xa2>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800263c:	d035      	beq.n	80026aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68d9      	ldr	r1, [r3, #12]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	3b1e      	subs	r3, #30
 8002654:	2207      	movs	r2, #7
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	400a      	ands	r2, r1
 8002662:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a8d      	ldr	r2, [pc, #564]	; (80028a0 <HAL_ADC_ConfigChannel+0x298>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10a      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68d9      	ldr	r1, [r3, #12]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	061a      	lsls	r2, r3, #24
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002682:	e035      	b.n	80026f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68d9      	ldr	r1, [r3, #12]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	4618      	mov	r0, r3
 8002696:	4603      	mov	r3, r0
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4403      	add	r3, r0
 800269c:	3b1e      	subs	r3, #30
 800269e:	409a      	lsls	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a8:	e022      	b.n	80026f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6919      	ldr	r1, [r3, #16]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	2207      	movs	r2, #7
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6919      	ldr	r1, [r3, #16]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4403      	add	r3, r0
 80026e6:	409a      	lsls	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b06      	cmp	r3, #6
 80026f6:	d824      	bhi.n	8002742 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	3b05      	subs	r3, #5
 800270a:	221f      	movs	r2, #31
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43da      	mvns	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	400a      	ands	r2, r1
 8002718:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	4618      	mov	r0, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3b05      	subs	r3, #5
 8002734:	fa00 f203 	lsl.w	r2, r0, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	635a      	str	r2, [r3, #52]	; 0x34
 8002740:	e04c      	b.n	80027dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d824      	bhi.n	8002794 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	3b23      	subs	r3, #35	; 0x23
 800275c:	221f      	movs	r2, #31
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	400a      	ands	r2, r1
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	4618      	mov	r0, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	3b23      	subs	r3, #35	; 0x23
 8002786:	fa00 f203 	lsl.w	r2, r0, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
 8002792:	e023      	b.n	80027dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	3b41      	subs	r3, #65	; 0x41
 80027a6:	221f      	movs	r2, #31
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43da      	mvns	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	400a      	ands	r2, r1
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b41      	subs	r3, #65	; 0x41
 80027d0:	fa00 f203 	lsl.w	r2, r0, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a30      	ldr	r2, [pc, #192]	; (80028a4 <HAL_ADC_ConfigChannel+0x29c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10a      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1f4>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <HAL_ADC_ConfigChannel+0x29c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10f      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x21e>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b12      	cmp	r3, #18
 800280c:	d10b      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002814:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002818:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a22      	ldr	r2, [pc, #136]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002824:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_ADC_ConfigChannel+0x29c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d12b      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x280>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_ADC_ConfigChannel+0x298>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d003      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x23a>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b11      	cmp	r3, #17
 8002840:	d122      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002848:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800284c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002858:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <HAL_ADC_ConfigChannel+0x298>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d111      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_ADC_ConfigChannel+0x2a4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a11      	ldr	r2, [pc, #68]	; (80028b0 <HAL_ADC_ConfigChannel+0x2a8>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0c9a      	lsrs	r2, r3, #18
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800287a:	e002      	b.n	8002882 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3b01      	subs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	10000012 	.word	0x10000012
 80028a4:	40012000 	.word	0x40012000
 80028a8:	40012300 	.word	0x40012300
 80028ac:	20000000 	.word	0x20000000
 80028b0:	431bde83 	.word	0x431bde83

080028b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028bc:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <ADC_Init+0x1ec>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a77      	ldr	r2, [pc, #476]	; (8002aa0 <ADC_Init+0x1ec>)
 80028c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028c8:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <ADC_Init+0x1ec>)
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4973      	ldr	r1, [pc, #460]	; (8002aa0 <ADC_Init+0x1ec>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	021a      	lsls	r2, r3, #8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <ADC_Init+0x1f0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d022      	beq.n	800298e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002956:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e00f      	b.n	80029ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800299c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0202 	bic.w	r2, r2, #2
 80029bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	005a      	lsls	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01b      	beq.n	8002a14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	3b01      	subs	r3, #1
 8002a08:	035a      	lsls	r2, r3, #13
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e007      	b.n	8002a24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	051a      	lsls	r2, r3, #20
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6899      	ldr	r1, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a66:	025a      	lsls	r2, r3, #9
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	029a      	lsls	r2, r3, #10
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40012300 	.word	0x40012300
 8002aa4:	0f000001 	.word	0x0f000001

08002aa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0ed      	b.n	8002c96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d102      	bne.n	8002acc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fc08 	bl	80012dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002adc:	f7ff fcd8 	bl	8002490 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ae2:	e012      	b.n	8002b0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ae4:	f7ff fcd4 	bl	8002490 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b0a      	cmp	r3, #10
 8002af0:	d90b      	bls.n	8002b0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2205      	movs	r2, #5
 8002b02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0c5      	b.n	8002c96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0e5      	beq.n	8002ae4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0202 	bic.w	r2, r2, #2
 8002b26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b28:	f7ff fcb2 	bl	8002490 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b2e:	e012      	b.n	8002b56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b30:	f7ff fcae 	bl	8002490 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b0a      	cmp	r3, #10
 8002b3c:	d90b      	bls.n	8002b56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2205      	movs	r2, #5
 8002b4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e09f      	b.n	8002c96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e5      	bne.n	8002b30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e1b      	ldrb	r3, [r3, #24]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d108      	bne.n	8002b7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e007      	b.n	8002b8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7e5b      	ldrb	r3, [r3, #25]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e007      	b.n	8002bb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7e9b      	ldrb	r3, [r3, #26]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d108      	bne.n	8002bd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0220 	orr.w	r2, r2, #32
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e007      	b.n	8002be2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0220 	bic.w	r2, r2, #32
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7edb      	ldrb	r3, [r3, #27]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0210 	bic.w	r2, r2, #16
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e007      	b.n	8002c0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0210 	orr.w	r2, r2, #16
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7f1b      	ldrb	r3, [r3, #28]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d108      	bne.n	8002c26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0208 	orr.w	r2, r2, #8
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e007      	b.n	8002c36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0208 	bic.w	r2, r2, #8
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7f5b      	ldrb	r3, [r3, #29]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0204 	orr.w	r2, r2, #4
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e007      	b.n	8002c60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0204 	bic.w	r2, r2, #4
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	ea42 0103 	orr.w	r1, r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00
 8002ce4:	05fa0000 	.word	0x05fa0000

08002ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <__NVIC_GetPriorityGrouping+0x18>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0307 	and.w	r3, r3, #7
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db0a      	blt.n	8002d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d2c:	e00a      	b.n	8002d44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <__NVIC_SetPriority+0x50>)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	761a      	strb	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f1c3 0307 	rsb	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	bf28      	it	cs
 8002d76:	2304      	movcs	r3, #4
 8002d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <NVIC_EncodePriority+0x30>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3b03      	subs	r3, #3
 8002d86:	e000      	b.n	8002d8a <NVIC_EncodePriority+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	4313      	orrs	r3, r2
         );
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd0:	d301      	bcc.n	8002dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00f      	b.n	8002df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <SysTick_Config+0x40>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dde:	210f      	movs	r1, #15
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f7ff ff8e 	bl	8002d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <SysTick_Config+0x40>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <SysTick_Config+0x40>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	e000e010 	.word	0xe000e010

08002e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff47 	bl	8002ca0 <__NVIC_SetPriorityGrouping>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2c:	f7ff ff5c 	bl	8002ce8 <__NVIC_GetPriorityGrouping>
 8002e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7ff ff8e 	bl	8002d58 <NVIC_EncodePriority>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff5d 	bl	8002d04 <__NVIC_SetPriority>
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffb0 	bl	8002dc0 <SysTick_Config>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	; 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	e175      	b.n	8003178 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	f040 8164 	bne.w	8003172 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d005      	beq.n	8002ec2 <HAL_GPIO_Init+0x56>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d130      	bne.n	8002f24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2203      	movs	r2, #3
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 0201 	and.w	r2, r3, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d017      	beq.n	8002f60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d123      	bne.n	8002fb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	08da      	lsrs	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3208      	adds	r2, #8
 8002f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	220f      	movs	r2, #15
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	08da      	lsrs	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3208      	adds	r2, #8
 8002fae:	69b9      	ldr	r1, [r7, #24]
 8002fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0203 	and.w	r2, r3, #3
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80be 	beq.w	8003172 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff6:	4b66      	ldr	r3, [pc, #408]	; (8003190 <HAL_GPIO_Init+0x324>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4a65      	ldr	r2, [pc, #404]	; (8003190 <HAL_GPIO_Init+0x324>)
 8002ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_GPIO_Init+0x324>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800300e:	4a61      	ldr	r2, [pc, #388]	; (8003194 <HAL_GPIO_Init+0x328>)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a58      	ldr	r2, [pc, #352]	; (8003198 <HAL_GPIO_Init+0x32c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d037      	beq.n	80030aa <HAL_GPIO_Init+0x23e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a57      	ldr	r2, [pc, #348]	; (800319c <HAL_GPIO_Init+0x330>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d031      	beq.n	80030a6 <HAL_GPIO_Init+0x23a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a56      	ldr	r2, [pc, #344]	; (80031a0 <HAL_GPIO_Init+0x334>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d02b      	beq.n	80030a2 <HAL_GPIO_Init+0x236>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a55      	ldr	r2, [pc, #340]	; (80031a4 <HAL_GPIO_Init+0x338>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d025      	beq.n	800309e <HAL_GPIO_Init+0x232>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a54      	ldr	r2, [pc, #336]	; (80031a8 <HAL_GPIO_Init+0x33c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01f      	beq.n	800309a <HAL_GPIO_Init+0x22e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a53      	ldr	r2, [pc, #332]	; (80031ac <HAL_GPIO_Init+0x340>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d019      	beq.n	8003096 <HAL_GPIO_Init+0x22a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_GPIO_Init+0x344>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_GPIO_Init+0x226>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a51      	ldr	r2, [pc, #324]	; (80031b4 <HAL_GPIO_Init+0x348>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00d      	beq.n	800308e <HAL_GPIO_Init+0x222>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_GPIO_Init+0x34c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d007      	beq.n	800308a <HAL_GPIO_Init+0x21e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4f      	ldr	r2, [pc, #316]	; (80031bc <HAL_GPIO_Init+0x350>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d101      	bne.n	8003086 <HAL_GPIO_Init+0x21a>
 8003082:	2309      	movs	r3, #9
 8003084:	e012      	b.n	80030ac <HAL_GPIO_Init+0x240>
 8003086:	230a      	movs	r3, #10
 8003088:	e010      	b.n	80030ac <HAL_GPIO_Init+0x240>
 800308a:	2308      	movs	r3, #8
 800308c:	e00e      	b.n	80030ac <HAL_GPIO_Init+0x240>
 800308e:	2307      	movs	r3, #7
 8003090:	e00c      	b.n	80030ac <HAL_GPIO_Init+0x240>
 8003092:	2306      	movs	r3, #6
 8003094:	e00a      	b.n	80030ac <HAL_GPIO_Init+0x240>
 8003096:	2305      	movs	r3, #5
 8003098:	e008      	b.n	80030ac <HAL_GPIO_Init+0x240>
 800309a:	2304      	movs	r3, #4
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x240>
 800309e:	2303      	movs	r3, #3
 80030a0:	e004      	b.n	80030ac <HAL_GPIO_Init+0x240>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e002      	b.n	80030ac <HAL_GPIO_Init+0x240>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_GPIO_Init+0x240>
 80030aa:	2300      	movs	r3, #0
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	f002 0203 	and.w	r2, r2, #3
 80030b2:	0092      	lsls	r2, r2, #2
 80030b4:	4093      	lsls	r3, r2
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030bc:	4935      	ldr	r1, [pc, #212]	; (8003194 <HAL_GPIO_Init+0x328>)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	3302      	adds	r3, #2
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_GPIO_Init+0x354>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ee:	4a34      	ldr	r2, [pc, #208]	; (80031c0 <HAL_GPIO_Init+0x354>)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f4:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <HAL_GPIO_Init+0x354>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003118:	4a29      	ldr	r2, [pc, #164]	; (80031c0 <HAL_GPIO_Init+0x354>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800311e:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <HAL_GPIO_Init+0x354>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003142:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_GPIO_Init+0x354>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_GPIO_Init+0x354>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800316c:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <HAL_GPIO_Init+0x354>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3301      	adds	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b0f      	cmp	r3, #15
 800317c:	f67f ae86 	bls.w	8002e8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	40013800 	.word	0x40013800
 8003198:	40020000 	.word	0x40020000
 800319c:	40020400 	.word	0x40020400
 80031a0:	40020800 	.word	0x40020800
 80031a4:	40020c00 	.word	0x40020c00
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40021400 	.word	0x40021400
 80031b0:	40021800 	.word	0x40021800
 80031b4:	40021c00 	.word	0x40021c00
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40022400 	.word	0x40022400
 80031c0:	40013c00 	.word	0x40013c00

080031c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	e001      	b.n	80031e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
 8003200:	4613      	mov	r3, r2
 8003202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003204:	787b      	ldrb	r3, [r7, #1]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003210:	e003      	b.n	800321a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	041a      	lsls	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	619a      	str	r2, [r3, #24]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323c:	6413      	str	r3, [r2, #64]	; 0x40
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003256:	f7ff f91b 	bl	8002490 <HAL_GetTick>
 800325a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800325c:	e009      	b.n	8003272 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800325e:	f7ff f917 	bl	8002490 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800326c:	d901      	bls.n	8003272 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e022      	b.n	80032b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327e:	d1ee      	bne.n	800325e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0f      	ldr	r2, [pc, #60]	; (80032c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800328c:	f7ff f900 	bl	8002490 <HAL_GetTick>
 8003290:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003292:	e009      	b.n	80032a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003294:	f7ff f8fc 	bl	8002490 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a2:	d901      	bls.n	80032a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e007      	b.n	80032b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032b4:	d1ee      	bne.n	8003294 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40007000 	.word	0x40007000

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e29b      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8087 	beq.w	80033fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ec:	4b96      	ldr	r3, [pc, #600]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d00c      	beq.n	8003312 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f8:	4b93      	ldr	r3, [pc, #588]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d112      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
 8003304:	4b90      	ldr	r3, [pc, #576]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003310:	d10b      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d06c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x130>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d168      	bne.n	80033f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e275      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x7a>
 8003334:	4b84      	ldr	r3, [pc, #528]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a83      	ldr	r2, [pc, #524]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800333a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	e02e      	b.n	80033a0 <HAL_RCC_OscConfig+0xd8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x9c>
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b7c      	ldr	r3, [pc, #496]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7b      	ldr	r2, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800335c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e01d      	b.n	80033a0 <HAL_RCC_OscConfig+0xd8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0xc0>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b73      	ldr	r3, [pc, #460]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a72      	ldr	r2, [pc, #456]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e00b      	b.n	80033a0 <HAL_RCC_OscConfig+0xd8>
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800338e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6b      	ldr	r2, [pc, #428]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800339a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7ff f872 	bl	8002490 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b0:	f7ff f86e 	bl	8002490 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e229      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0xe8>
 80033ce:	e014      	b.n	80033fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7ff f85e 	bl	8002490 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d8:	f7ff f85a 	bl	8002490 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e215      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ea:	4b57      	ldr	r3, [pc, #348]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x110>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d069      	beq.n	80034da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003406:	4b50      	ldr	r3, [pc, #320]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b08      	cmp	r3, #8
 800341c:	d11c      	bne.n	8003458 <HAL_RCC_OscConfig+0x190>
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d116      	bne.n	8003458 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_RCC_OscConfig+0x17a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e1e9      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	493d      	ldr	r1, [pc, #244]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	e040      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003460:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a38      	ldr	r2, [pc, #224]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7ff f810 	bl	8002490 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003474:	f7ff f80c 	bl	8002490 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1c7      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	4b30      	ldr	r3, [pc, #192]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003492:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4929      	ldr	r1, [pc, #164]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
 80034a6:	e018      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a26      	ldr	r2, [pc, #152]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe ffec 	bl	8002490 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe ffe8 	bl	8002490 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1a3      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d038      	beq.n	8003558 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d019      	beq.n	8003522 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f2:	4a15      	ldr	r2, [pc, #84]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7fe ffc9 	bl	8002490 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003502:	f7fe ffc5 	bl	8002490 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e180      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x23a>
 8003520:	e01a      	b.n	8003558 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003526:	4a08      	ldr	r2, [pc, #32]	; (8003548 <HAL_RCC_OscConfig+0x280>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe ffaf 	bl	8002490 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe ffab 	bl	8002490 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d903      	bls.n	800354c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e166      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
 8003548:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a4 	beq.w	80036ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b89      	ldr	r3, [pc, #548]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a88      	ldr	r2, [pc, #544]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b86      	ldr	r3, [pc, #536]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358e:	4b83      	ldr	r3, [pc, #524]	; (800379c <HAL_RCC_OscConfig+0x4d4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800359a:	4b80      	ldr	r3, [pc, #512]	; (800379c <HAL_RCC_OscConfig+0x4d4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7f      	ldr	r2, [pc, #508]	; (800379c <HAL_RCC_OscConfig+0x4d4>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fe ff73 	bl	8002490 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fe ff6f 	bl	8002490 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	; 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e12a      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c0:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x4d4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x31a>
 80035d4:	4b70      	ldr	r3, [pc, #448]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a6f      	ldr	r2, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	e02d      	b.n	800363e <HAL_RCC_OscConfig+0x376>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x33c>
 80035ea:	4b6b      	ldr	r3, [pc, #428]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a6a      	ldr	r2, [pc, #424]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	4b68      	ldr	r3, [pc, #416]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a67      	ldr	r2, [pc, #412]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	e01c      	b.n	800363e <HAL_RCC_OscConfig+0x376>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_OscConfig+0x35e>
 800360c:	4b62      	ldr	r3, [pc, #392]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a61      	ldr	r2, [pc, #388]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a5e      	ldr	r2, [pc, #376]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0x376>
 8003626:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a5b      	ldr	r2, [pc, #364]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
 8003632:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a58      	ldr	r2, [pc, #352]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe ff23 	bl	8002490 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe ff1f 	bl	8002490 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0d8      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ee      	beq.n	800364e <HAL_RCC_OscConfig+0x386>
 8003670:	e014      	b.n	800369c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003672:	f7fe ff0d 	bl	8002490 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe ff09 	bl	8002490 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0c2      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	4b41      	ldr	r3, [pc, #260]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ee      	bne.n	800367a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80ae 	beq.w	8003814 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d06d      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d14b      	bne.n	8003764 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b32      	ldr	r3, [pc, #200]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a31      	ldr	r2, [pc, #196]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fe feda 	bl	8002490 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe fed6 	bl	8002490 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e091      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b29      	ldr	r3, [pc, #164]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	019b      	lsls	r3, r3, #6
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	3b01      	subs	r3, #1
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	071b      	lsls	r3, r3, #28
 800372a:	491b      	ldr	r1, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe fea8 	bl	8002490 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7fe fea4 	bl	8002490 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e05f      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x47c>
 8003762:	e057      	b.n	8003814 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 800376a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800376e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe fe8e 	bl	8002490 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003778:	f7fe fe8a 	bl	8002490 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e045      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_RCC_OscConfig+0x4d0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x4b0>
 8003796:	e03d      	b.n	8003814 <HAL_RCC_OscConfig+0x54c>
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037a0:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <HAL_RCC_OscConfig+0x558>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d030      	beq.n	8003810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d129      	bne.n	8003810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d122      	bne.n	8003810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d0:	4013      	ands	r3, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037d8:	4293      	cmp	r3, r2
 80037da:	d119      	bne.n	8003810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	3b01      	subs	r3, #1
 80037ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d10f      	bne.n	8003810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800

08003824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0d0      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800383c:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d910      	bls.n	800386c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 020f 	bic.w	r2, r3, #15
 8003852:	4965      	ldr	r1, [pc, #404]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0b8      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003884:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a58      	ldr	r2, [pc, #352]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 800388a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800388e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800389c:	4b53      	ldr	r3, [pc, #332]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a52      	ldr	r2, [pc, #328]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	494d      	ldr	r1, [pc, #308]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d040      	beq.n	8003948 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d115      	bne.n	8003906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e07f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e6:	4b41      	ldr	r3, [pc, #260]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e073      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f6:	4b3d      	ldr	r3, [pc, #244]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06b      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003906:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 0203 	bic.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4936      	ldr	r1, [pc, #216]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	4313      	orrs	r3, r2
 8003916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fe fdba 	bl	8002490 <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fe fdb6 	bl	8002490 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e053      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 020c 	and.w	r2, r3, #12
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	429a      	cmp	r2, r3
 8003946:	d1eb      	bne.n	8003920 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d210      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 020f 	bic.w	r2, r3, #15
 800395e:	4922      	ldr	r1, [pc, #136]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e032      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4916      	ldr	r1, [pc, #88]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	490e      	ldr	r1, [pc, #56]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039b6:	f000 f821 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 80039ba:	4602      	mov	r2, r0
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	490a      	ldr	r1, [pc, #40]	; (80039f0 <HAL_RCC_ClockConfig+0x1cc>)
 80039c8:	5ccb      	ldrb	r3, [r1, r3]
 80039ca:	fa22 f303 	lsr.w	r3, r2, r3
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <HAL_RCC_ClockConfig+0x1d0>)
 80039d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1d4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fd16 	bl	8002408 <HAL_InitTick>

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023c00 	.word	0x40023c00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	08007478 	.word	0x08007478
 80039f4:	20000000 	.word	0x20000000
 80039f8:	20000004 	.word	0x20000004

080039fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039fc:	b5b0      	push	{r4, r5, r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a02:	2100      	movs	r1, #0
 8003a04:	6079      	str	r1, [r7, #4]
 8003a06:	2100      	movs	r1, #0
 8003a08:	60f9      	str	r1, [r7, #12]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a0e:	2100      	movs	r1, #0
 8003a10:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a12:	4952      	ldr	r1, [pc, #328]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a14:	6889      	ldr	r1, [r1, #8]
 8003a16:	f001 010c 	and.w	r1, r1, #12
 8003a1a:	2908      	cmp	r1, #8
 8003a1c:	d00d      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0x3e>
 8003a1e:	2908      	cmp	r1, #8
 8003a20:	f200 8094 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x150>
 8003a24:	2900      	cmp	r1, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x32>
 8003a28:	2904      	cmp	r1, #4
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x38>
 8003a2c:	e08e      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a30:	60bb      	str	r3, [r7, #8]
      break;
 8003a32:	e08e      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a34:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a36:	60bb      	str	r3, [r7, #8]
      break;
 8003a38:	e08b      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a3a:	4948      	ldr	r1, [pc, #288]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a3c:	6849      	ldr	r1, [r1, #4]
 8003a3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a42:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a44:	4945      	ldr	r1, [pc, #276]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a46:	6849      	ldr	r1, [r1, #4]
 8003a48:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	d024      	beq.n	8003a9a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a50:	4942      	ldr	r1, [pc, #264]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a52:	6849      	ldr	r1, [r1, #4]
 8003a54:	0989      	lsrs	r1, r1, #6
 8003a56:	4608      	mov	r0, r1
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a60:	f04f 0500 	mov.w	r5, #0
 8003a64:	ea00 0204 	and.w	r2, r0, r4
 8003a68:	ea01 0305 	and.w	r3, r1, r5
 8003a6c:	493d      	ldr	r1, [pc, #244]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a6e:	fb01 f003 	mul.w	r0, r1, r3
 8003a72:	2100      	movs	r1, #0
 8003a74:	fb01 f102 	mul.w	r1, r1, r2
 8003a78:	1844      	adds	r4, r0, r1
 8003a7a:	493a      	ldr	r1, [pc, #232]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a7c:	fba2 0101 	umull	r0, r1, r2, r1
 8003a80:	1863      	adds	r3, r4, r1
 8003a82:	4619      	mov	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	f7fc fbdc 	bl	8000248 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e04a      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	ea02 0400 	and.w	r4, r2, r0
 8003ab2:	ea03 0501 	and.w	r5, r3, r1
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	014b      	lsls	r3, r1, #5
 8003ac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ac8:	0142      	lsls	r2, r0, #5
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	1b00      	subs	r0, r0, r4
 8003ad0:	eb61 0105 	sbc.w	r1, r1, r5
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	018b      	lsls	r3, r1, #6
 8003ade:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ae2:	0182      	lsls	r2, r0, #6
 8003ae4:	1a12      	subs	r2, r2, r0
 8003ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aea:	f04f 0000 	mov.w	r0, #0
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	00d9      	lsls	r1, r3, #3
 8003af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003af8:	00d0      	lsls	r0, r2, #3
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	1912      	adds	r2, r2, r4
 8003b00:	eb45 0303 	adc.w	r3, r5, r3
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	0299      	lsls	r1, r3, #10
 8003b0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b12:	0290      	lsls	r0, r2, #10
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	f7fc fb90 	bl	8000248 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	60bb      	str	r3, [r7, #8]
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b4e:	60bb      	str	r3, [r7, #8]
      break;
 8003b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b52:	68bb      	ldr	r3, [r7, #8]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	017d7840 	.word	0x017d7840

08003b68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	08007488 	.word	0x08007488

08003ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bac:	f7ff ffdc 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0b5b      	lsrs	r3, r3, #13
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4903      	ldr	r1, [pc, #12]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bbe:	5ccb      	ldrb	r3, [r1, r3]
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	08007488 	.word	0x08007488

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d012      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bf8:	4b69      	ldr	r3, [pc, #420]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4a68      	ldr	r2, [pc, #416]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c02:	6093      	str	r3, [r2, #8]
 8003c04:	4b66      	ldr	r3, [pc, #408]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	4964      	ldr	r1, [pc, #400]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d017      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	4959      	ldr	r1, [pc, #356]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c48:	d101      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c66:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	494a      	ldr	r1, [pc, #296]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c84:	d101      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 808b 	beq.w	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cb4:	4b3a      	ldr	r3, [pc, #232]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	4a39      	ldr	r2, [pc, #228]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ccc:	4b35      	ldr	r3, [pc, #212]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd8:	f7fe fbda 	bl	8002490 <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fe fbd6 	bl	8002490 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e38f      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cf2:	4b2c      	ldr	r3, [pc, #176]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cfe:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d035      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d02e      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	4a1a      	ldr	r2, [pc, #104]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d3e:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d44:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d114      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fb9e 	bl	8002490 <HAL_GetTick>
 8003d54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d56:	e00a      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fe fb9a 	bl	8002490 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e351      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ee      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d86:	d111      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d96:	400b      	ands	r3, r1
 8003d98:	4901      	ldr	r1, [pc, #4]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40007000 	.word	0x40007000
 8003da8:	0ffffcff 	.word	0x0ffffcff
 8003dac:	4bb3      	ldr	r3, [pc, #716]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4ab2      	ldr	r2, [pc, #712]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003db6:	6093      	str	r3, [r2, #8]
 8003db8:	4bb0      	ldr	r3, [pc, #704]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	49ad      	ldr	r1, [pc, #692]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d010      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dd6:	4ba9      	ldr	r3, [pc, #676]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	4aa7      	ldr	r2, [pc, #668]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003de6:	4ba5      	ldr	r3, [pc, #660]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	49a2      	ldr	r1, [pc, #648]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e04:	4b9d      	ldr	r3, [pc, #628]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e12:	499a      	ldr	r1, [pc, #616]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e26:	4b95      	ldr	r3, [pc, #596]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e34:	4991      	ldr	r1, [pc, #580]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e48:	4b8c      	ldr	r3, [pc, #560]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e56:	4989      	ldr	r1, [pc, #548]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e6a:	4b84      	ldr	r3, [pc, #528]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4980      	ldr	r1, [pc, #512]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e8c:	4b7b      	ldr	r3, [pc, #492]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4978      	ldr	r1, [pc, #480]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eae:	4b73      	ldr	r3, [pc, #460]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f023 020c 	bic.w	r2, r3, #12
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebc:	496f      	ldr	r1, [pc, #444]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ed0:	4b6a      	ldr	r3, [pc, #424]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	4967      	ldr	r1, [pc, #412]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef2:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	495e      	ldr	r1, [pc, #376]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f14:	4b59      	ldr	r3, [pc, #356]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	4956      	ldr	r1, [pc, #344]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f36:	4b51      	ldr	r3, [pc, #324]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	494d      	ldr	r1, [pc, #308]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f58:	4b48      	ldr	r3, [pc, #288]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	4945      	ldr	r1, [pc, #276]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f7a:	4b40      	ldr	r3, [pc, #256]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f88:	493c      	ldr	r1, [pc, #240]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f9c:	4b37      	ldr	r3, [pc, #220]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003faa:	4934      	ldr	r1, [pc, #208]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d011      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fbe:	4b2f      	ldr	r3, [pc, #188]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fcc:	492b      	ldr	r1, [pc, #172]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	491b      	ldr	r1, [pc, #108]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004020:	4b16      	ldr	r3, [pc, #88]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004030:	4912      	ldr	r1, [pc, #72]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004054:	4909      	ldr	r1, [pc, #36]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00f      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800406a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	e002      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	4986      	ldr	r1, [pc, #536]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004094:	4b81      	ldr	r3, [pc, #516]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a4:	497d      	ldr	r1, [pc, #500]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d006      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80d6 	beq.w	800426c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040c0:	4b76      	ldr	r3, [pc, #472]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a75      	ldr	r2, [pc, #468]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040cc:	f7fe f9e0 	bl	8002490 <HAL_GetTick>
 80040d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040d4:	f7fe f9dc 	bl	8002490 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e195      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040e6:	4b6d      	ldr	r3, [pc, #436]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d021      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11d      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004106:	4b65      	ldr	r3, [pc, #404]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411a:	0e1b      	lsrs	r3, r3, #24
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	019a      	lsls	r2, r3, #6
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	071b      	lsls	r3, r3, #28
 800413a:	4958      	ldr	r1, [pc, #352]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02e      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416c:	d129      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800416e:	4b4b      	ldr	r3, [pc, #300]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800417c:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004182:	0f1b      	lsrs	r3, r3, #28
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	019a      	lsls	r2, r3, #6
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	061b      	lsls	r3, r3, #24
 800419c:	431a      	orrs	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	071b      	lsls	r3, r3, #28
 80041a2:	493e      	ldr	r1, [pc, #248]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041aa:	4b3c      	ldr	r3, [pc, #240]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b0:	f023 021f 	bic.w	r2, r3, #31
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	3b01      	subs	r3, #1
 80041ba:	4938      	ldr	r1, [pc, #224]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01d      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041ce:	4b33      	ldr	r3, [pc, #204]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d4:	0e1b      	lsrs	r3, r3, #24
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041dc:	4b2f      	ldr	r3, [pc, #188]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e2:	0f1b      	lsrs	r3, r3, #28
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	019a      	lsls	r2, r3, #6
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	431a      	orrs	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	061b      	lsls	r3, r3, #24
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	071b      	lsls	r3, r3, #28
 8004202:	4926      	ldr	r1, [pc, #152]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d011      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	019a      	lsls	r2, r3, #6
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	071b      	lsls	r3, r3, #28
 8004232:	491a      	ldr	r1, [pc, #104]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800423a:	4b18      	ldr	r3, [pc, #96]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a17      	ldr	r2, [pc, #92]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004246:	f7fe f923 	bl	8002490 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800424e:	f7fe f91f 	bl	8002490 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b64      	cmp	r3, #100	; 0x64
 800425a:	d901      	bls.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0d8      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b01      	cmp	r3, #1
 8004270:	f040 80ce 	bne.w	8004410 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a08      	ldr	r2, [pc, #32]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004280:	f7fe f906 	bl	8002490 <HAL_GetTick>
 8004284:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004286:	e00b      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004288:	f7fe f902 	bl	8002490 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d904      	bls.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0bb      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042a0:	4b5e      	ldr	r3, [pc, #376]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ac:	d0ec      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d02e      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d12a      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042d6:	4b51      	ldr	r3, [pc, #324]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042e4:	4b4d      	ldr	r3, [pc, #308]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	0f1b      	lsrs	r3, r3, #28
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	019a      	lsls	r2, r3, #6
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	071b      	lsls	r3, r3, #28
 800430a:	4944      	ldr	r1, [pc, #272]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004312:	4b42      	ldr	r3, [pc, #264]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004318:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	493d      	ldr	r1, [pc, #244]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d022      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004340:	d11d      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004342:	4b36      	ldr	r3, [pc, #216]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	0e1b      	lsrs	r3, r3, #24
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004350:	4b32      	ldr	r3, [pc, #200]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	0f1b      	lsrs	r3, r3, #28
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	019a      	lsls	r2, r3, #6
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	431a      	orrs	r2, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	061b      	lsls	r3, r3, #24
 8004370:	431a      	orrs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	071b      	lsls	r3, r3, #28
 8004376:	4929      	ldr	r1, [pc, #164]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d028      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	0e1b      	lsrs	r3, r3, #24
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004398:	4b20      	ldr	r3, [pc, #128]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	019a      	lsls	r2, r3, #6
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	431a      	orrs	r2, r3
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	071b      	lsls	r3, r3, #28
 80043be:	4917      	ldr	r1, [pc, #92]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	4911      	ldr	r1, [pc, #68]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0e      	ldr	r2, [pc, #56]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fe f852 	bl	8002490 <HAL_GetTick>
 80043ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043f0:	f7fe f84e 	bl	8002490 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e007      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800440a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800440e:	d1ef      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3720      	adds	r7, #32
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800

08004420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e09d      	b.n	800456e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d108      	bne.n	800444c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004442:	d009      	beq.n	8004458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	61da      	str	r2, [r3, #28]
 800444a:	e005      	b.n	8004458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd fc68 	bl	8001d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004498:	d902      	bls.n	80044a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	e002      	b.n	80044a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044ae:	d007      	beq.n	80044c0 <HAL_SPI_Init+0xa0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044b8:	d002      	beq.n	80044c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004502:	ea42 0103 	orr.w	r1, r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	f003 0204 	and.w	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800453c:	ea42 0103 	orr.w	r1, r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800455c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b088      	sub	sp, #32
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_SPI_Transmit+0x22>
 8004594:	2302      	movs	r3, #2
 8004596:	e158      	b.n	800484a <HAL_SPI_Transmit+0x2d4>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a0:	f7fd ff76 	bl	8002490 <HAL_GetTick>
 80045a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d002      	beq.n	80045bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
 80045b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045ba:	e13d      	b.n	8004838 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Transmit+0x52>
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045cc:	e134      	b.n	8004838 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2203      	movs	r2, #3
 80045d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004618:	d10f      	bne.n	800463a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004628:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004638:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d007      	beq.n	8004658 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004656:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004660:	d94b      	bls.n	80046fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_SPI_Transmit+0xfa>
 800466a:	8afb      	ldrh	r3, [r7, #22]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d13e      	bne.n	80046ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	881a      	ldrh	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	1c9a      	adds	r2, r3, #2
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004694:	e02b      	b.n	80046ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d112      	bne.n	80046ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	1c9a      	adds	r2, r3, #2
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046c8:	e011      	b.n	80046ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ca:	f7fd fee1 	bl	8002490 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d803      	bhi.n	80046e2 <HAL_SPI_Transmit+0x16c>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d102      	bne.n	80046e8 <HAL_SPI_Transmit+0x172>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046ec:	e0a4      	b.n	8004838 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ce      	bne.n	8004696 <HAL_SPI_Transmit+0x120>
 80046f8:	e07c      	b.n	80047f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_SPI_Transmit+0x192>
 8004702:	8afb      	ldrh	r3, [r7, #22]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d170      	bne.n	80047ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d912      	bls.n	8004738 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	881a      	ldrh	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	1c9a      	adds	r2, r3, #2
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b02      	subs	r3, #2
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004736:	e058      	b.n	80047ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800475e:	e044      	b.n	80047ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d12b      	bne.n	80047c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d912      	bls.n	800479e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	1c9a      	adds	r2, r3, #2
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b02      	subs	r3, #2
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800479c:	e025      	b.n	80047ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c4:	e011      	b.n	80047ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c6:	f7fd fe63 	bl	8002490 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d803      	bhi.n	80047de <HAL_SPI_Transmit+0x268>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d102      	bne.n	80047e4 <HAL_SPI_Transmit+0x26e>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047e8:	e026      	b.n	8004838 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1b5      	bne.n	8004760 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fd07 	bl	800520c <SPI_EndRxTxTransaction>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e000      	b.n	8004838 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004848:	7ffb      	ldrb	r3, [r7, #31]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b088      	sub	sp, #32
 8004856:	af02      	add	r7, sp, #8
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486e:	d112      	bne.n	8004896 <HAL_SPI_Receive+0x44>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10e      	bne.n	8004896 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2204      	movs	r2, #4
 800487c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f910 	bl	8004ab2 <HAL_SPI_TransmitReceive>
 8004892:	4603      	mov	r3, r0
 8004894:	e109      	b.n	8004aaa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_SPI_Receive+0x52>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e102      	b.n	8004aaa <HAL_SPI_Receive+0x258>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ac:	f7fd fdf0 	bl	8002490 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80048be:	2302      	movs	r3, #2
 80048c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048c2:	e0e9      	b.n	8004a98 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_Receive+0x7e>
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048d4:	e0e0      	b.n	8004a98 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2204      	movs	r2, #4
 80048da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004920:	d908      	bls.n	8004934 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	e007      	b.n	8004944 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494c:	d10f      	bne.n	800496e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800496c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d007      	beq.n	800498c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004994:	d867      	bhi.n	8004a66 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004996:	e030      	b.n	80049fa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d117      	bne.n	80049d6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f103 020c 	add.w	r2, r3, #12
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	7812      	ldrb	r2, [r2, #0]
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80049d4:	e011      	b.n	80049fa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d6:	f7fd fd5b 	bl	8002490 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d803      	bhi.n	80049ee <HAL_SPI_Receive+0x19c>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d102      	bne.n	80049f4 <HAL_SPI_Receive+0x1a2>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049f8:	e04e      	b.n	8004a98 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1c8      	bne.n	8004998 <HAL_SPI_Receive+0x146>
 8004a06:	e034      	b.n	8004a72 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d115      	bne.n	8004a42 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	b292      	uxth	r2, r2
 8004a22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	1c9a      	adds	r2, r3, #2
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a40:	e011      	b.n	8004a66 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a42:	f7fd fd25 	bl	8002490 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d803      	bhi.n	8004a5a <HAL_SPI_Receive+0x208>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a58:	d102      	bne.n	8004a60 <HAL_SPI_Receive+0x20e>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a64:	e018      	b.n	8004a98 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1ca      	bne.n	8004a08 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fb4c 	bl	8005114 <SPI_EndRxTransaction>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	75fb      	strb	r3, [r7, #23]
 8004a94:	e000      	b.n	8004a98 <HAL_SPI_Receive+0x246>
  }

error :
 8004a96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b08a      	sub	sp, #40	; 0x28
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0x26>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e1fb      	b.n	8004ed0 <HAL_SPI_TransmitReceive+0x41e>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae0:	f7fd fcd6 	bl	8002490 <HAL_GetTick>
 8004ae4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004afc:	7efb      	ldrb	r3, [r7, #27]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d00e      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x6e>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b08:	d106      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x66>
 8004b12:	7efb      	ldrb	r3, [r7, #27]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d003      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b1e:	e1cd      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x80>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x80>
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b38:	e1c0      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d003      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2205      	movs	r2, #5
 8004b4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	887a      	ldrh	r2, [r7, #2]
 8004b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	887a      	ldrh	r2, [r7, #2]
 8004b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	887a      	ldrh	r2, [r7, #2]
 8004b7a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b90:	d802      	bhi.n	8004b98 <HAL_SPI_TransmitReceive+0xe6>
 8004b92:	8a3b      	ldrh	r3, [r7, #16]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d908      	bls.n	8004baa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	e007      	b.n	8004bba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bb8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d007      	beq.n	8004bd8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004be0:	d97c      	bls.n	8004cdc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x13e>
 8004bea:	8a7b      	ldrh	r3, [r7, #18]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d169      	bne.n	8004cc4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	881a      	ldrh	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	1c9a      	adds	r2, r3, #2
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c14:	e056      	b.n	8004cc4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d11b      	bne.n	8004c5c <HAL_SPI_TransmitReceive+0x1aa>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d016      	beq.n	8004c5c <HAL_SPI_TransmitReceive+0x1aa>
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d113      	bne.n	8004c5c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d11c      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x1f2>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d016      	beq.n	8004ca4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	b292      	uxth	r2, r2
 8004c82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ca4:	f7fd fbf4 	bl	8002490 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d807      	bhi.n	8004cc4 <HAL_SPI_TransmitReceive+0x212>
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	d003      	beq.n	8004cc4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004cc2:	e0fb      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1a3      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x164>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d19d      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x164>
 8004cda:	e0df      	b.n	8004e9c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x23a>
 8004ce4:	8a7b      	ldrh	r3, [r7, #18]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	f040 80cb 	bne.w	8004e82 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d912      	bls.n	8004d1c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	881a      	ldrh	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	1c9a      	adds	r2, r3, #2
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b02      	subs	r3, #2
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d1a:	e0b2      	b.n	8004e82 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d42:	e09e      	b.n	8004e82 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d134      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x30a>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d02f      	beq.n	8004dbc <HAL_SPI_TransmitReceive+0x30a>
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d12c      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d912      	bls.n	8004d92 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	881a      	ldrh	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	1c9a      	adds	r2, r3, #2
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b02      	subs	r3, #2
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d90:	e012      	b.n	8004db8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	7812      	ldrb	r2, [r2, #0]
 8004d9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d148      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x3aa>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d042      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d923      	bls.n	8004e2a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	b292      	uxth	r2, r2
 8004dee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	1c9a      	adds	r2, r3, #2
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b02      	subs	r3, #2
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d81f      	bhi.n	8004e58 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e26:	605a      	str	r2, [r3, #4]
 8004e28:	e016      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f103 020c 	add.w	r2, r3, #12
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	7812      	ldrb	r2, [r2, #0]
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e5c:	f7fd fb18 	bl	8002490 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d803      	bhi.n	8004e74 <HAL_SPI_TransmitReceive+0x3c2>
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d102      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x3c8>
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d103      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e80:	e01c      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f47f af5b 	bne.w	8004d44 <HAL_SPI_TransmitReceive+0x292>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f47f af54 	bne.w	8004d44 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f9b3 	bl	800520c <SPI_EndRxTxTransaction>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d006      	beq.n	8004eba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	661a      	str	r2, [r3, #96]	; 0x60
 8004eb8:	e000      	b.n	8004ebc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004eba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3728      	adds	r7, #40	; 0x28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ee8:	f7fd fad2 	bl	8002490 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ef8:	f7fd faca 	bl	8002490 <HAL_GetTick>
 8004efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004efe:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	015b      	lsls	r3, r3, #5
 8004f04:	0d1b      	lsrs	r3, r3, #20
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	fb02 f303 	mul.w	r3, r2, r3
 8004f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f0e:	e054      	b.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d050      	beq.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f18:	f7fd faba 	bl	8002490 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d902      	bls.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d13d      	bne.n	8004faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f46:	d111      	bne.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f50:	d004      	beq.n	8004f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5a:	d107      	bne.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f74:	d10f      	bne.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e017      	b.n	8004fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d19b      	bne.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000000 	.word	0x20000000

08004fe8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ffa:	f7fd fa49 	bl	8002490 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	4413      	add	r3, r2
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800500a:	f7fd fa41 	bl	8002490 <HAL_GetTick>
 800500e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005018:	4b3d      	ldr	r3, [pc, #244]	; (8005110 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00da      	lsls	r2, r3, #3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	0d1b      	lsrs	r3, r3, #20
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005030:	e060      	b.n	80050f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005038:	d107      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0x62>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005048:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d050      	beq.n	80050f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005052:	f7fd fa1d 	bl	8002490 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505e:	429a      	cmp	r2, r3
 8005060:	d902      	bls.n	8005068 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	2b00      	cmp	r3, #0
 8005066:	d13d      	bne.n	80050e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005076:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005080:	d111      	bne.n	80050a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508a:	d004      	beq.n	8005096 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005094:	d107      	bne.n	80050a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ae:	d10f      	bne.n	80050d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e010      	b.n	8005106 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d196      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3728      	adds	r7, #40	; 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000000 	.word	0x20000000

08005114 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005128:	d111      	bne.n	800514e <SPI_EndRxTransaction+0x3a>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005132:	d004      	beq.n	800513e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513c:	d107      	bne.n	800514e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005156:	d112      	bne.n	800517e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2200      	movs	r2, #0
 8005160:	2180      	movs	r1, #128	; 0x80
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff feb8 	bl	8004ed8 <SPI_WaitFlagStateUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d021      	beq.n	80051b2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005172:	f043 0220 	orr.w	r2, r3, #32
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e03d      	b.n	80051fa <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800517e:	4b21      	ldr	r3, [pc, #132]	; (8005204 <SPI_EndRxTransaction+0xf0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a21      	ldr	r2, [pc, #132]	; (8005208 <SPI_EndRxTransaction+0xf4>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	0d5b      	lsrs	r3, r3, #21
 800518a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	3b01      	subs	r3, #1
 800519e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d0f2      	beq.n	8005194 <SPI_EndRxTransaction+0x80>
 80051ae:	e000      	b.n	80051b2 <SPI_EndRxTransaction+0x9e>
        break;
 80051b0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ba:	d11d      	bne.n	80051f8 <SPI_EndRxTransaction+0xe4>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c4:	d004      	beq.n	80051d0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ce:	d113      	bne.n	80051f8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff ff03 	bl	8004fe8 <SPI_WaitFifoStateUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e000      	b.n	80051fa <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000000 	.word	0x20000000
 8005208:	165e9f81 	.word	0x165e9f81

0800520c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff fedf 	bl	8004fe8 <SPI_WaitFifoStateUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	f043 0220 	orr.w	r2, r3, #32
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e046      	b.n	80052ce <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <SPI_EndRxTxTransaction+0xcc>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a25      	ldr	r2, [pc, #148]	; (80052dc <SPI_EndRxTxTransaction+0xd0>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	0d5b      	lsrs	r3, r3, #21
 800524c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005250:	fb02 f303 	mul.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800525e:	d112      	bne.n	8005286 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2200      	movs	r2, #0
 8005268:	2180      	movs	r1, #128	; 0x80
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff fe34 	bl	8004ed8 <SPI_WaitFlagStateUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d016      	beq.n	80052a4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e023      	b.n	80052ce <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	3b01      	subs	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b80      	cmp	r3, #128	; 0x80
 800529e:	d0f2      	beq.n	8005286 <SPI_EndRxTxTransaction+0x7a>
 80052a0:	e000      	b.n	80052a4 <SPI_EndRxTxTransaction+0x98>
        break;
 80052a2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff fe99 	bl	8004fe8 <SPI_WaitFifoStateUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c0:	f043 0220 	orr.w	r2, r3, #32
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e000      	b.n	80052ce <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000000 	.word	0x20000000
 80052dc:	165e9f81 	.word	0x165e9f81

080052e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e049      	b.n	8005386 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc ff62 	bl	80021d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3304      	adds	r3, #4
 800531c:	4619      	mov	r1, r3
 800531e:	4610      	mov	r0, r2
 8005320:	f000 fa7e 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e049      	b.n	8005434 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d106      	bne.n	80053ba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fc fec7 	bl	8002148 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2202      	movs	r2, #2
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f000 fa27 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005456:	2302      	movs	r3, #2
 8005458:	e088      	b.n	800556c <HAL_TIM_IC_ConfigChannel+0x130>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f000 fd64 	bl	8005f44 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 020c 	bic.w	r2, r2, #12
 800548a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	619a      	str	r2, [r3, #24]
 800549e:	e060      	b.n	8005562 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d11c      	bne.n	80054e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6819      	ldr	r1, [r3, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f000 fde8 	bl	800608a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6999      	ldr	r1, [r3, #24]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	021a      	lsls	r2, r3, #8
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	619a      	str	r2, [r3, #24]
 80054de:	e040      	b.n	8005562 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d11b      	bne.n	800551e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6819      	ldr	r1, [r3, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f000 fe35 	bl	8006164 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 020c 	bic.w	r2, r2, #12
 8005508:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69d9      	ldr	r1, [r3, #28]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	61da      	str	r2, [r3, #28]
 800551c:	e021      	b.n	8005562 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b0c      	cmp	r3, #12
 8005522:	d11c      	bne.n	800555e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6819      	ldr	r1, [r3, #0]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f000 fe52 	bl	80061dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005546:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69d9      	ldr	r1, [r3, #28]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	021a      	lsls	r2, r3, #8
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	61da      	str	r2, [r3, #28]
 800555c:	e001      	b.n	8005562 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800556a:	7dfb      	ldrb	r3, [r7, #23]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800558e:	2302      	movs	r3, #2
 8005590:	e0ff      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b14      	cmp	r3, #20
 800559e:	f200 80f0 	bhi.w	8005782 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055a2:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055fd 	.word	0x080055fd
 80055ac:	08005783 	.word	0x08005783
 80055b0:	08005783 	.word	0x08005783
 80055b4:	08005783 	.word	0x08005783
 80055b8:	0800563d 	.word	0x0800563d
 80055bc:	08005783 	.word	0x08005783
 80055c0:	08005783 	.word	0x08005783
 80055c4:	08005783 	.word	0x08005783
 80055c8:	0800567f 	.word	0x0800567f
 80055cc:	08005783 	.word	0x08005783
 80055d0:	08005783 	.word	0x08005783
 80055d4:	08005783 	.word	0x08005783
 80055d8:	080056bf 	.word	0x080056bf
 80055dc:	08005783 	.word	0x08005783
 80055e0:	08005783 	.word	0x08005783
 80055e4:	08005783 	.word	0x08005783
 80055e8:	08005701 	.word	0x08005701
 80055ec:	08005783 	.word	0x08005783
 80055f0:	08005783 	.word	0x08005783
 80055f4:	08005783 	.word	0x08005783
 80055f8:	08005741 	.word	0x08005741
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f9ac 	bl	8005960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0208 	orr.w	r2, r2, #8
 8005616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0204 	bic.w	r2, r2, #4
 8005626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6999      	ldr	r1, [r3, #24]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	619a      	str	r2, [r3, #24]
      break;
 800563a:	e0a5      	b.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 f9fe 	bl	8005a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6999      	ldr	r1, [r3, #24]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	021a      	lsls	r2, r3, #8
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	619a      	str	r2, [r3, #24]
      break;
 800567c:	e084      	b.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fa55 	bl	8005b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0208 	orr.w	r2, r2, #8
 8005698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0204 	bic.w	r2, r2, #4
 80056a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69d9      	ldr	r1, [r3, #28]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	61da      	str	r2, [r3, #28]
      break;
 80056bc:	e064      	b.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 faab 	bl	8005c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69d9      	ldr	r1, [r3, #28]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	021a      	lsls	r2, r3, #8
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	61da      	str	r2, [r3, #28]
      break;
 80056fe:	e043      	b.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fae2 	bl	8005cd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0208 	orr.w	r2, r2, #8
 800571a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0204 	bic.w	r2, r2, #4
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800573e:	e023      	b.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fb14 	bl	8005d74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005780:	e002      	b.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
      break;
 8005786:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop

0800579c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e031      	b.n	8005818 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fb28 	bl	8005e1c <TIM_SlaveTimer_SetConfig>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e018      	b.n	8005818 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005804:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a40      	ldr	r2, [pc, #256]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3d      	ldr	r2, [pc, #244]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3c      	ldr	r2, [pc, #240]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3a      	ldr	r2, [pc, #232]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2f      	ldr	r2, [pc, #188]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d02b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d027      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d023      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a29      	ldr	r2, [pc, #164]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d017      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a28      	ldr	r2, [pc, #160]	; (8005948 <TIM_Base_SetConfig+0x128>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a27      	ldr	r2, [pc, #156]	; (800594c <TIM_Base_SetConfig+0x12c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <TIM_Base_SetConfig+0x130>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a25      	ldr	r2, [pc, #148]	; (8005954 <TIM_Base_SetConfig+0x134>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a24      	ldr	r2, [pc, #144]	; (8005958 <TIM_Base_SetConfig+0x138>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a23      	ldr	r2, [pc, #140]	; (800595c <TIM_Base_SetConfig+0x13c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <TIM_Base_SetConfig+0x114>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <TIM_Base_SetConfig+0x124>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d103      	bne.n	8005920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	615a      	str	r2, [r3, #20]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40000c00 	.word	0x40000c00
 8005944:	40010400 	.word	0x40010400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	40001800 	.word	0x40001800
 8005958:	40001c00 	.word	0x40001c00
 800595c:	40002000 	.word	0x40002000

08005960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f023 0201 	bic.w	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4b2b      	ldr	r3, [pc, #172]	; (8005a38 <TIM_OC1_SetConfig+0xd8>)
 800598c:	4013      	ands	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f023 0302 	bic.w	r3, r3, #2
 80059a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <TIM_OC1_SetConfig+0xdc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_OC1_SetConfig+0x64>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a20      	ldr	r2, [pc, #128]	; (8005a40 <TIM_OC1_SetConfig+0xe0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d10c      	bne.n	80059de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 0308 	bic.w	r3, r3, #8
 80059ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 0304 	bic.w	r3, r3, #4
 80059dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <TIM_OC1_SetConfig+0xdc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC1_SetConfig+0x8e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <TIM_OC1_SetConfig+0xe0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d111      	bne.n	8005a12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	fffeff8f 	.word	0xfffeff8f
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40010400 	.word	0x40010400

08005a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f023 0210 	bic.w	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4b2e      	ldr	r3, [pc, #184]	; (8005b28 <TIM_OC2_SetConfig+0xe4>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0320 	bic.w	r3, r3, #32
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <TIM_OC2_SetConfig+0xe8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC2_SetConfig+0x68>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a22      	ldr	r2, [pc, #136]	; (8005b30 <TIM_OC2_SetConfig+0xec>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10d      	bne.n	8005ac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <TIM_OC2_SetConfig+0xe8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC2_SetConfig+0x94>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <TIM_OC2_SetConfig+0xec>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d113      	bne.n	8005b00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	feff8fff 	.word	0xfeff8fff
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40010400 	.word	0x40010400

08005b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4b2d      	ldr	r3, [pc, #180]	; (8005c14 <TIM_OC3_SetConfig+0xe0>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0303 	bic.w	r3, r3, #3
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <TIM_OC3_SetConfig+0xe4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_OC3_SetConfig+0x66>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <TIM_OC3_SetConfig+0xe8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d10d      	bne.n	8005bb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <TIM_OC3_SetConfig+0xe4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x92>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <TIM_OC3_SetConfig+0xe8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d113      	bne.n	8005bee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	621a      	str	r2, [r3, #32]
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	fffeff8f 	.word	0xfffeff8f
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40010400 	.word	0x40010400

08005c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <TIM_OC4_SetConfig+0xa4>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	031b      	lsls	r3, r3, #12
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <TIM_OC4_SetConfig+0xa8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_OC4_SetConfig+0x68>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a12      	ldr	r2, [pc, #72]	; (8005ccc <TIM_OC4_SetConfig+0xac>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d109      	bne.n	8005c9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	019b      	lsls	r3, r3, #6
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	feff8fff 	.word	0xfeff8fff
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40010400 	.word	0x40010400

08005cd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <TIM_OC5_SetConfig+0x98>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	041b      	lsls	r3, r3, #16
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a12      	ldr	r2, [pc, #72]	; (8005d6c <TIM_OC5_SetConfig+0x9c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d003      	beq.n	8005d2e <TIM_OC5_SetConfig+0x5e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a11      	ldr	r2, [pc, #68]	; (8005d70 <TIM_OC5_SetConfig+0xa0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d109      	bne.n	8005d42 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	621a      	str	r2, [r3, #32]
}
 8005d5c:	bf00      	nop
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	fffeff8f 	.word	0xfffeff8f
 8005d6c:	40010000 	.word	0x40010000
 8005d70:	40010400 	.word	0x40010400

08005d74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4b1c      	ldr	r3, [pc, #112]	; (8005e10 <TIM_OC6_SetConfig+0x9c>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	021b      	lsls	r3, r3, #8
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	051b      	lsls	r3, r3, #20
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <TIM_OC6_SetConfig+0xa0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC6_SetConfig+0x60>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a12      	ldr	r2, [pc, #72]	; (8005e18 <TIM_OC6_SetConfig+0xa4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d109      	bne.n	8005de8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	029b      	lsls	r3, r3, #10
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	feff8fff 	.word	0xfeff8fff
 8005e14:	40010000 	.word	0x40010000
 8005e18:	40010400 	.word	0x40010400

08005e1c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e38:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4b3e      	ldr	r3, [pc, #248]	; (8005f40 <TIM_SlaveTimer_SetConfig+0x124>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b70      	cmp	r3, #112	; 0x70
 8005e64:	d01a      	beq.n	8005e9c <TIM_SlaveTimer_SetConfig+0x80>
 8005e66:	2b70      	cmp	r3, #112	; 0x70
 8005e68:	d860      	bhi.n	8005f2c <TIM_SlaveTimer_SetConfig+0x110>
 8005e6a:	2b60      	cmp	r3, #96	; 0x60
 8005e6c:	d054      	beq.n	8005f18 <TIM_SlaveTimer_SetConfig+0xfc>
 8005e6e:	2b60      	cmp	r3, #96	; 0x60
 8005e70:	d85c      	bhi.n	8005f2c <TIM_SlaveTimer_SetConfig+0x110>
 8005e72:	2b50      	cmp	r3, #80	; 0x50
 8005e74:	d046      	beq.n	8005f04 <TIM_SlaveTimer_SetConfig+0xe8>
 8005e76:	2b50      	cmp	r3, #80	; 0x50
 8005e78:	d858      	bhi.n	8005f2c <TIM_SlaveTimer_SetConfig+0x110>
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d019      	beq.n	8005eb2 <TIM_SlaveTimer_SetConfig+0x96>
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d854      	bhi.n	8005f2c <TIM_SlaveTimer_SetConfig+0x110>
 8005e82:	2b30      	cmp	r3, #48	; 0x30
 8005e84:	d055      	beq.n	8005f32 <TIM_SlaveTimer_SetConfig+0x116>
 8005e86:	2b30      	cmp	r3, #48	; 0x30
 8005e88:	d850      	bhi.n	8005f2c <TIM_SlaveTimer_SetConfig+0x110>
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d051      	beq.n	8005f32 <TIM_SlaveTimer_SetConfig+0x116>
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d84c      	bhi.n	8005f2c <TIM_SlaveTimer_SetConfig+0x110>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d04d      	beq.n	8005f32 <TIM_SlaveTimer_SetConfig+0x116>
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d04b      	beq.n	8005f32 <TIM_SlaveTimer_SetConfig+0x116>
 8005e9a:	e047      	b.n	8005f2c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68d9      	ldr	r1, [r3, #12]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f000 f9d3 	bl	8006256 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005eb0:	e040      	b.n	8005f34 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d101      	bne.n	8005ebe <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e03b      	b.n	8005f36 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6a1a      	ldr	r2, [r3, #32]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
      break;
 8005f02:	e017      	b.n	8005f34 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6899      	ldr	r1, [r3, #8]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	461a      	mov	r2, r3
 8005f12:	f000 f88b 	bl	800602c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005f16:	e00d      	b.n	8005f34 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6899      	ldr	r1, [r3, #8]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	461a      	mov	r2, r3
 8005f26:	f000 f8ed 	bl	8006104 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005f2a:	e003      	b.n	8005f34 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f30:	e000      	b.n	8005f34 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005f32:	bf00      	nop
  }

  return status;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	fffefff8 	.word	0xfffefff8

08005f44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a28      	ldr	r2, [pc, #160]	; (8006010 <TIM_TI1_SetConfig+0xcc>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01b      	beq.n	8005faa <TIM_TI1_SetConfig+0x66>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f78:	d017      	beq.n	8005faa <TIM_TI1_SetConfig+0x66>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a25      	ldr	r2, [pc, #148]	; (8006014 <TIM_TI1_SetConfig+0xd0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <TIM_TI1_SetConfig+0x66>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a24      	ldr	r2, [pc, #144]	; (8006018 <TIM_TI1_SetConfig+0xd4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00f      	beq.n	8005faa <TIM_TI1_SetConfig+0x66>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4a23      	ldr	r2, [pc, #140]	; (800601c <TIM_TI1_SetConfig+0xd8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_TI1_SetConfig+0x66>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a22      	ldr	r2, [pc, #136]	; (8006020 <TIM_TI1_SetConfig+0xdc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_TI1_SetConfig+0x66>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4a21      	ldr	r2, [pc, #132]	; (8006024 <TIM_TI1_SetConfig+0xe0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_TI1_SetConfig+0x66>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a20      	ldr	r2, [pc, #128]	; (8006028 <TIM_TI1_SetConfig+0xe4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d101      	bne.n	8005fae <TIM_TI1_SetConfig+0x6a>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <TIM_TI1_SetConfig+0x6c>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	e003      	b.n	8005fce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f023 030a 	bic.w	r3, r3, #10
 8005fe8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f003 030a 	and.w	r3, r3, #10
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40010000 	.word	0x40010000
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40010400 	.word	0x40010400
 8006024:	40014000 	.word	0x40014000
 8006028:	40001800 	.word	0x40001800

0800602c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f023 0201 	bic.w	r2, r3, #1
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f023 030a 	bic.w	r3, r3, #10
 8006068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	621a      	str	r2, [r3, #32]
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800608a:	b480      	push	{r7}
 800608c:	b087      	sub	sp, #28
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f023 0210 	bic.w	r2, r3, #16
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	031b      	lsls	r3, r3, #12
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	621a      	str	r2, [r3, #32]
}
 80060f8:	bf00      	nop
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f023 0210 	bic.w	r2, r3, #16
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800612e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	031b      	lsls	r3, r3, #12
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f023 0303 	bic.w	r3, r3, #3
 8006190:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	021b      	lsls	r3, r3, #8
 80061ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006208:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800621a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	031b      	lsls	r3, r3, #12
 8006220:	b29b      	uxth	r3, r3
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800622e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	031b      	lsls	r3, r3, #12
 8006234:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006256:	b480      	push	{r7}
 8006258:	b087      	sub	sp, #28
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
 8006262:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006270:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	021a      	lsls	r2, r3, #8
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	431a      	orrs	r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4313      	orrs	r3, r2
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	609a      	str	r2, [r3, #8]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e06d      	b.n	800638c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a30      	ldr	r2, [pc, #192]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d004      	beq.n	80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2f      	ldr	r2, [pc, #188]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d108      	bne.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a20      	ldr	r2, [pc, #128]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d022      	beq.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006322:	d01d      	beq.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d018      	beq.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00e      	beq.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a15      	ldr	r2, [pc, #84]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d009      	beq.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a16      	ldr	r2, [pc, #88]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d004      	beq.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a15      	ldr	r2, [pc, #84]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10c      	bne.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	4313      	orrs	r3, r2
 8006370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	40010000 	.word	0x40010000
 800639c:	40010400 	.word	0x40010400
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40001800 	.word	0x40001800

080063b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e040      	b.n	8006448 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb ff82 	bl	80022e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2224      	movs	r2, #36	; 0x24
 80063e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0201 	bic.w	r2, r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f8c0 	bl	8006578 <UART_SetConfig>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e022      	b.n	8006448 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fb16 	bl	8006a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800641e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800642e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fb9d 	bl	8006b80 <UART_CheckIdleState>
 8006446:	4603      	mov	r3, r0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006464:	2b20      	cmp	r3, #32
 8006466:	f040 8081 	bne.w	800656c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_UART_Transmit+0x26>
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e079      	b.n	800656e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_UART_Transmit+0x38>
 8006484:	2302      	movs	r3, #2
 8006486:	e072      	b.n	800656e <HAL_UART_Transmit+0x11e>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2221      	movs	r2, #33	; 0x21
 800649c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800649e:	f7fb fff7 	bl	8002490 <HAL_GetTick>
 80064a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064bc:	d108      	bne.n	80064d0 <HAL_UART_Transmit+0x80>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	e003      	b.n	80064d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064e0:	e02c      	b.n	800653c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2200      	movs	r2, #0
 80064ea:	2180      	movs	r1, #128	; 0x80
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fb90 	bl	8006c12 <UART_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e038      	b.n	800656e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006510:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	3302      	adds	r3, #2
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	e007      	b.n	800652a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3301      	adds	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1cc      	bne.n	80064e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	2140      	movs	r1, #64	; 0x40
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fb5d 	bl	8006c12 <UART_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e005      	b.n	800656e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2220      	movs	r2, #32
 8006566:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	e000      	b.n	800656e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800656c:	2302      	movs	r3, #2
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4ba7      	ldr	r3, [pc, #668]	; (8006840 <UART_SetConfig+0x2c8>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	6979      	ldr	r1, [r7, #20]
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a95      	ldr	r2, [pc, #596]	; (8006844 <UART_SetConfig+0x2cc>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d120      	bne.n	8006636 <UART_SetConfig+0xbe>
 80065f4:	4b94      	ldr	r3, [pc, #592]	; (8006848 <UART_SetConfig+0x2d0>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d816      	bhi.n	8006630 <UART_SetConfig+0xb8>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0x90>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	08006619 	.word	0x08006619
 800660c:	08006625 	.word	0x08006625
 8006610:	0800661f 	.word	0x0800661f
 8006614:	0800662b 	.word	0x0800662b
 8006618:	2301      	movs	r3, #1
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e14f      	b.n	80068be <UART_SetConfig+0x346>
 800661e:	2302      	movs	r3, #2
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e14c      	b.n	80068be <UART_SetConfig+0x346>
 8006624:	2304      	movs	r3, #4
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e149      	b.n	80068be <UART_SetConfig+0x346>
 800662a:	2308      	movs	r3, #8
 800662c:	77fb      	strb	r3, [r7, #31]
 800662e:	e146      	b.n	80068be <UART_SetConfig+0x346>
 8006630:	2310      	movs	r3, #16
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e143      	b.n	80068be <UART_SetConfig+0x346>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a84      	ldr	r2, [pc, #528]	; (800684c <UART_SetConfig+0x2d4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d132      	bne.n	80066a6 <UART_SetConfig+0x12e>
 8006640:	4b81      	ldr	r3, [pc, #516]	; (8006848 <UART_SetConfig+0x2d0>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006646:	f003 030c 	and.w	r3, r3, #12
 800664a:	2b0c      	cmp	r3, #12
 800664c:	d828      	bhi.n	80066a0 <UART_SetConfig+0x128>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0xdc>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006689 	.word	0x08006689
 8006658:	080066a1 	.word	0x080066a1
 800665c:	080066a1 	.word	0x080066a1
 8006660:	080066a1 	.word	0x080066a1
 8006664:	08006695 	.word	0x08006695
 8006668:	080066a1 	.word	0x080066a1
 800666c:	080066a1 	.word	0x080066a1
 8006670:	080066a1 	.word	0x080066a1
 8006674:	0800668f 	.word	0x0800668f
 8006678:	080066a1 	.word	0x080066a1
 800667c:	080066a1 	.word	0x080066a1
 8006680:	080066a1 	.word	0x080066a1
 8006684:	0800669b 	.word	0x0800669b
 8006688:	2300      	movs	r3, #0
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e117      	b.n	80068be <UART_SetConfig+0x346>
 800668e:	2302      	movs	r3, #2
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e114      	b.n	80068be <UART_SetConfig+0x346>
 8006694:	2304      	movs	r3, #4
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e111      	b.n	80068be <UART_SetConfig+0x346>
 800669a:	2308      	movs	r3, #8
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e10e      	b.n	80068be <UART_SetConfig+0x346>
 80066a0:	2310      	movs	r3, #16
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e10b      	b.n	80068be <UART_SetConfig+0x346>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a69      	ldr	r2, [pc, #420]	; (8006850 <UART_SetConfig+0x2d8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d120      	bne.n	80066f2 <UART_SetConfig+0x17a>
 80066b0:	4b65      	ldr	r3, [pc, #404]	; (8006848 <UART_SetConfig+0x2d0>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066ba:	2b30      	cmp	r3, #48	; 0x30
 80066bc:	d013      	beq.n	80066e6 <UART_SetConfig+0x16e>
 80066be:	2b30      	cmp	r3, #48	; 0x30
 80066c0:	d814      	bhi.n	80066ec <UART_SetConfig+0x174>
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d009      	beq.n	80066da <UART_SetConfig+0x162>
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d810      	bhi.n	80066ec <UART_SetConfig+0x174>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <UART_SetConfig+0x15c>
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d006      	beq.n	80066e0 <UART_SetConfig+0x168>
 80066d2:	e00b      	b.n	80066ec <UART_SetConfig+0x174>
 80066d4:	2300      	movs	r3, #0
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e0f1      	b.n	80068be <UART_SetConfig+0x346>
 80066da:	2302      	movs	r3, #2
 80066dc:	77fb      	strb	r3, [r7, #31]
 80066de:	e0ee      	b.n	80068be <UART_SetConfig+0x346>
 80066e0:	2304      	movs	r3, #4
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e0eb      	b.n	80068be <UART_SetConfig+0x346>
 80066e6:	2308      	movs	r3, #8
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e0e8      	b.n	80068be <UART_SetConfig+0x346>
 80066ec:	2310      	movs	r3, #16
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e0e5      	b.n	80068be <UART_SetConfig+0x346>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a57      	ldr	r2, [pc, #348]	; (8006854 <UART_SetConfig+0x2dc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d120      	bne.n	800673e <UART_SetConfig+0x1c6>
 80066fc:	4b52      	ldr	r3, [pc, #328]	; (8006848 <UART_SetConfig+0x2d0>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006702:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006706:	2bc0      	cmp	r3, #192	; 0xc0
 8006708:	d013      	beq.n	8006732 <UART_SetConfig+0x1ba>
 800670a:	2bc0      	cmp	r3, #192	; 0xc0
 800670c:	d814      	bhi.n	8006738 <UART_SetConfig+0x1c0>
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	d009      	beq.n	8006726 <UART_SetConfig+0x1ae>
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d810      	bhi.n	8006738 <UART_SetConfig+0x1c0>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <UART_SetConfig+0x1a8>
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d006      	beq.n	800672c <UART_SetConfig+0x1b4>
 800671e:	e00b      	b.n	8006738 <UART_SetConfig+0x1c0>
 8006720:	2300      	movs	r3, #0
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e0cb      	b.n	80068be <UART_SetConfig+0x346>
 8006726:	2302      	movs	r3, #2
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e0c8      	b.n	80068be <UART_SetConfig+0x346>
 800672c:	2304      	movs	r3, #4
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e0c5      	b.n	80068be <UART_SetConfig+0x346>
 8006732:	2308      	movs	r3, #8
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e0c2      	b.n	80068be <UART_SetConfig+0x346>
 8006738:	2310      	movs	r3, #16
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e0bf      	b.n	80068be <UART_SetConfig+0x346>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a45      	ldr	r2, [pc, #276]	; (8006858 <UART_SetConfig+0x2e0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d125      	bne.n	8006794 <UART_SetConfig+0x21c>
 8006748:	4b3f      	ldr	r3, [pc, #252]	; (8006848 <UART_SetConfig+0x2d0>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006756:	d017      	beq.n	8006788 <UART_SetConfig+0x210>
 8006758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800675c:	d817      	bhi.n	800678e <UART_SetConfig+0x216>
 800675e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006762:	d00b      	beq.n	800677c <UART_SetConfig+0x204>
 8006764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006768:	d811      	bhi.n	800678e <UART_SetConfig+0x216>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <UART_SetConfig+0x1fe>
 800676e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006772:	d006      	beq.n	8006782 <UART_SetConfig+0x20a>
 8006774:	e00b      	b.n	800678e <UART_SetConfig+0x216>
 8006776:	2300      	movs	r3, #0
 8006778:	77fb      	strb	r3, [r7, #31]
 800677a:	e0a0      	b.n	80068be <UART_SetConfig+0x346>
 800677c:	2302      	movs	r3, #2
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e09d      	b.n	80068be <UART_SetConfig+0x346>
 8006782:	2304      	movs	r3, #4
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e09a      	b.n	80068be <UART_SetConfig+0x346>
 8006788:	2308      	movs	r3, #8
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e097      	b.n	80068be <UART_SetConfig+0x346>
 800678e:	2310      	movs	r3, #16
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e094      	b.n	80068be <UART_SetConfig+0x346>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a30      	ldr	r2, [pc, #192]	; (800685c <UART_SetConfig+0x2e4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d125      	bne.n	80067ea <UART_SetConfig+0x272>
 800679e:	4b2a      	ldr	r3, [pc, #168]	; (8006848 <UART_SetConfig+0x2d0>)
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ac:	d017      	beq.n	80067de <UART_SetConfig+0x266>
 80067ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067b2:	d817      	bhi.n	80067e4 <UART_SetConfig+0x26c>
 80067b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b8:	d00b      	beq.n	80067d2 <UART_SetConfig+0x25a>
 80067ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067be:	d811      	bhi.n	80067e4 <UART_SetConfig+0x26c>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <UART_SetConfig+0x254>
 80067c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c8:	d006      	beq.n	80067d8 <UART_SetConfig+0x260>
 80067ca:	e00b      	b.n	80067e4 <UART_SetConfig+0x26c>
 80067cc:	2301      	movs	r3, #1
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e075      	b.n	80068be <UART_SetConfig+0x346>
 80067d2:	2302      	movs	r3, #2
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e072      	b.n	80068be <UART_SetConfig+0x346>
 80067d8:	2304      	movs	r3, #4
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e06f      	b.n	80068be <UART_SetConfig+0x346>
 80067de:	2308      	movs	r3, #8
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e06c      	b.n	80068be <UART_SetConfig+0x346>
 80067e4:	2310      	movs	r3, #16
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e069      	b.n	80068be <UART_SetConfig+0x346>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <UART_SetConfig+0x2e8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d137      	bne.n	8006864 <UART_SetConfig+0x2ec>
 80067f4:	4b14      	ldr	r3, [pc, #80]	; (8006848 <UART_SetConfig+0x2d0>)
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006802:	d017      	beq.n	8006834 <UART_SetConfig+0x2bc>
 8006804:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006808:	d817      	bhi.n	800683a <UART_SetConfig+0x2c2>
 800680a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680e:	d00b      	beq.n	8006828 <UART_SetConfig+0x2b0>
 8006810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006814:	d811      	bhi.n	800683a <UART_SetConfig+0x2c2>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <UART_SetConfig+0x2aa>
 800681a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681e:	d006      	beq.n	800682e <UART_SetConfig+0x2b6>
 8006820:	e00b      	b.n	800683a <UART_SetConfig+0x2c2>
 8006822:	2300      	movs	r3, #0
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e04a      	b.n	80068be <UART_SetConfig+0x346>
 8006828:	2302      	movs	r3, #2
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e047      	b.n	80068be <UART_SetConfig+0x346>
 800682e:	2304      	movs	r3, #4
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e044      	b.n	80068be <UART_SetConfig+0x346>
 8006834:	2308      	movs	r3, #8
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e041      	b.n	80068be <UART_SetConfig+0x346>
 800683a:	2310      	movs	r3, #16
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e03e      	b.n	80068be <UART_SetConfig+0x346>
 8006840:	efff69f3 	.word	0xefff69f3
 8006844:	40011000 	.word	0x40011000
 8006848:	40023800 	.word	0x40023800
 800684c:	40004400 	.word	0x40004400
 8006850:	40004800 	.word	0x40004800
 8006854:	40004c00 	.word	0x40004c00
 8006858:	40005000 	.word	0x40005000
 800685c:	40011400 	.word	0x40011400
 8006860:	40007800 	.word	0x40007800
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a71      	ldr	r2, [pc, #452]	; (8006a30 <UART_SetConfig+0x4b8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d125      	bne.n	80068ba <UART_SetConfig+0x342>
 800686e:	4b71      	ldr	r3, [pc, #452]	; (8006a34 <UART_SetConfig+0x4bc>)
 8006870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006878:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800687c:	d017      	beq.n	80068ae <UART_SetConfig+0x336>
 800687e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006882:	d817      	bhi.n	80068b4 <UART_SetConfig+0x33c>
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	d00b      	beq.n	80068a2 <UART_SetConfig+0x32a>
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688e:	d811      	bhi.n	80068b4 <UART_SetConfig+0x33c>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <UART_SetConfig+0x324>
 8006894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006898:	d006      	beq.n	80068a8 <UART_SetConfig+0x330>
 800689a:	e00b      	b.n	80068b4 <UART_SetConfig+0x33c>
 800689c:	2300      	movs	r3, #0
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e00d      	b.n	80068be <UART_SetConfig+0x346>
 80068a2:	2302      	movs	r3, #2
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e00a      	b.n	80068be <UART_SetConfig+0x346>
 80068a8:	2304      	movs	r3, #4
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e007      	b.n	80068be <UART_SetConfig+0x346>
 80068ae:	2308      	movs	r3, #8
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e004      	b.n	80068be <UART_SetConfig+0x346>
 80068b4:	2310      	movs	r3, #16
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e001      	b.n	80068be <UART_SetConfig+0x346>
 80068ba:	2310      	movs	r3, #16
 80068bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d15a      	bne.n	800697e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80068c8:	7ffb      	ldrb	r3, [r7, #31]
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d827      	bhi.n	800691e <UART_SetConfig+0x3a6>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <UART_SetConfig+0x35c>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	08006901 	.word	0x08006901
 80068dc:	08006909 	.word	0x08006909
 80068e0:	0800691f 	.word	0x0800691f
 80068e4:	0800690f 	.word	0x0800690f
 80068e8:	0800691f 	.word	0x0800691f
 80068ec:	0800691f 	.word	0x0800691f
 80068f0:	0800691f 	.word	0x0800691f
 80068f4:	08006917 	.word	0x08006917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f8:	f7fd f942 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 80068fc:	61b8      	str	r0, [r7, #24]
        break;
 80068fe:	e013      	b.n	8006928 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006900:	f7fd f952 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8006904:	61b8      	str	r0, [r7, #24]
        break;
 8006906:	e00f      	b.n	8006928 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006908:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <UART_SetConfig+0x4c0>)
 800690a:	61bb      	str	r3, [r7, #24]
        break;
 800690c:	e00c      	b.n	8006928 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800690e:	f7fd f875 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8006912:	61b8      	str	r0, [r7, #24]
        break;
 8006914:	e008      	b.n	8006928 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691a:	61bb      	str	r3, [r7, #24]
        break;
 800691c:	e004      	b.n	8006928 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	77bb      	strb	r3, [r7, #30]
        break;
 8006926:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d074      	beq.n	8006a18 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	005a      	lsls	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	441a      	add	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006942:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b0f      	cmp	r3, #15
 8006948:	d916      	bls.n	8006978 <UART_SetConfig+0x400>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006950:	d212      	bcs.n	8006978 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f023 030f 	bic.w	r3, r3, #15
 800695a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	085b      	lsrs	r3, r3, #1
 8006960:	b29b      	uxth	r3, r3
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	b29a      	uxth	r2, r3
 8006968:	89fb      	ldrh	r3, [r7, #14]
 800696a:	4313      	orrs	r3, r2
 800696c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	89fa      	ldrh	r2, [r7, #14]
 8006974:	60da      	str	r2, [r3, #12]
 8006976:	e04f      	b.n	8006a18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	77bb      	strb	r3, [r7, #30]
 800697c:	e04c      	b.n	8006a18 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800697e:	7ffb      	ldrb	r3, [r7, #31]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d828      	bhi.n	80069d6 <UART_SetConfig+0x45e>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x414>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069c1 	.word	0x080069c1
 8006998:	080069d7 	.word	0x080069d7
 800699c:	080069c7 	.word	0x080069c7
 80069a0:	080069d7 	.word	0x080069d7
 80069a4:	080069d7 	.word	0x080069d7
 80069a8:	080069d7 	.word	0x080069d7
 80069ac:	080069cf 	.word	0x080069cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b0:	f7fd f8e6 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 80069b4:	61b8      	str	r0, [r7, #24]
        break;
 80069b6:	e013      	b.n	80069e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069b8:	f7fd f8f6 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 80069bc:	61b8      	str	r0, [r7, #24]
        break;
 80069be:	e00f      	b.n	80069e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <UART_SetConfig+0x4c0>)
 80069c2:	61bb      	str	r3, [r7, #24]
        break;
 80069c4:	e00c      	b.n	80069e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069c6:	f7fd f819 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 80069ca:	61b8      	str	r0, [r7, #24]
        break;
 80069cc:	e008      	b.n	80069e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d2:	61bb      	str	r3, [r7, #24]
        break;
 80069d4:	e004      	b.n	80069e0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	77bb      	strb	r3, [r7, #30]
        break;
 80069de:	bf00      	nop
    }

    if (pclk != 0U)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d018      	beq.n	8006a18 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	085a      	lsrs	r2, r3, #1
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	441a      	add	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b0f      	cmp	r3, #15
 80069fe:	d909      	bls.n	8006a14 <UART_SetConfig+0x49c>
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a06:	d205      	bcs.n	8006a14 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	e001      	b.n	8006a18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006a24:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40007c00 	.word	0x40007c00
 8006a34:	40023800 	.word	0x40023800
 8006a38:	00f42400 	.word	0x00f42400

08006a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01a      	beq.n	8006b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b3a:	d10a      	bne.n	8006b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	605a      	str	r2, [r3, #4]
  }
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b90:	f7fb fc7e 	bl	8002490 <HAL_GetTick>
 8006b94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d10e      	bne.n	8006bc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f82d 	bl	8006c12 <UART_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e023      	b.n	8006c0a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d10e      	bne.n	8006bee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f817 	bl	8006c12 <UART_WaitOnFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e00d      	b.n	8006c0a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b09c      	sub	sp, #112	; 0x70
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	603b      	str	r3, [r7, #0]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c22:	e0a5      	b.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2a:	f000 80a1 	beq.w	8006d70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2e:	f7fb fc2f 	bl	8002490 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d302      	bcc.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d13e      	bne.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c58:	667b      	str	r3, [r7, #100]	; 0x64
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e6      	bne.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3308      	adds	r3, #8
 8006c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c96:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e5      	bne.n	8006c76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e067      	b.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d04f      	beq.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cde:	d147      	bne.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ce8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d3c:	623a      	str	r2, [r7, #32]
 8006d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	69f9      	ldr	r1, [r7, #28]
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e5      	bne.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e010      	b.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69da      	ldr	r2, [r3, #28]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	bf0c      	ite	eq
 8006d80:	2301      	moveq	r3, #1
 8006d82:	2300      	movne	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	f43f af4a 	beq.w	8006c24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3770      	adds	r7, #112	; 0x70
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <__libc_init_array>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	4d0d      	ldr	r5, [pc, #52]	; (8006dd4 <__libc_init_array+0x38>)
 8006da0:	4c0d      	ldr	r4, [pc, #52]	; (8006dd8 <__libc_init_array+0x3c>)
 8006da2:	1b64      	subs	r4, r4, r5
 8006da4:	10a4      	asrs	r4, r4, #2
 8006da6:	2600      	movs	r6, #0
 8006da8:	42a6      	cmp	r6, r4
 8006daa:	d109      	bne.n	8006dc0 <__libc_init_array+0x24>
 8006dac:	4d0b      	ldr	r5, [pc, #44]	; (8006ddc <__libc_init_array+0x40>)
 8006dae:	4c0c      	ldr	r4, [pc, #48]	; (8006de0 <__libc_init_array+0x44>)
 8006db0:	f000 f864 	bl	8006e7c <_init>
 8006db4:	1b64      	subs	r4, r4, r5
 8006db6:	10a4      	asrs	r4, r4, #2
 8006db8:	2600      	movs	r6, #0
 8006dba:	42a6      	cmp	r6, r4
 8006dbc:	d105      	bne.n	8006dca <__libc_init_array+0x2e>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc4:	4798      	blx	r3
 8006dc6:	3601      	adds	r6, #1
 8006dc8:	e7ee      	b.n	8006da8 <__libc_init_array+0xc>
 8006dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dce:	4798      	blx	r3
 8006dd0:	3601      	adds	r6, #1
 8006dd2:	e7f2      	b.n	8006dba <__libc_init_array+0x1e>
 8006dd4:	080074c0 	.word	0x080074c0
 8006dd8:	080074c0 	.word	0x080074c0
 8006ddc:	080074c0 	.word	0x080074c0
 8006de0:	080074c4 	.word	0x080074c4

08006de4 <memset>:
 8006de4:	4402      	add	r2, r0
 8006de6:	4603      	mov	r3, r0
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d100      	bne.n	8006dee <memset+0xa>
 8006dec:	4770      	bx	lr
 8006dee:	f803 1b01 	strb.w	r1, [r3], #1
 8006df2:	e7f9      	b.n	8006de8 <memset+0x4>

08006df4 <__utoa>:
 8006df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df6:	4c1f      	ldr	r4, [pc, #124]	; (8006e74 <__utoa+0x80>)
 8006df8:	b08b      	sub	sp, #44	; 0x2c
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	466e      	mov	r6, sp
 8006e00:	f104 0c20 	add.w	ip, r4, #32
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	6861      	ldr	r1, [r4, #4]
 8006e08:	4637      	mov	r7, r6
 8006e0a:	c703      	stmia	r7!, {r0, r1}
 8006e0c:	3408      	adds	r4, #8
 8006e0e:	4564      	cmp	r4, ip
 8006e10:	463e      	mov	r6, r7
 8006e12:	d1f7      	bne.n	8006e04 <__utoa+0x10>
 8006e14:	7921      	ldrb	r1, [r4, #4]
 8006e16:	7139      	strb	r1, [r7, #4]
 8006e18:	1e91      	subs	r1, r2, #2
 8006e1a:	6820      	ldr	r0, [r4, #0]
 8006e1c:	6038      	str	r0, [r7, #0]
 8006e1e:	2922      	cmp	r1, #34	; 0x22
 8006e20:	f04f 0100 	mov.w	r1, #0
 8006e24:	d904      	bls.n	8006e30 <__utoa+0x3c>
 8006e26:	7019      	strb	r1, [r3, #0]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	b00b      	add	sp, #44	; 0x2c
 8006e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e30:	1e58      	subs	r0, r3, #1
 8006e32:	4684      	mov	ip, r0
 8006e34:	fbb5 f7f2 	udiv	r7, r5, r2
 8006e38:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006e3c:	fb02 5617 	mls	r6, r2, r7, r5
 8006e40:	4476      	add	r6, lr
 8006e42:	460c      	mov	r4, r1
 8006e44:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006e48:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006e4c:	462e      	mov	r6, r5
 8006e4e:	42b2      	cmp	r2, r6
 8006e50:	f101 0101 	add.w	r1, r1, #1
 8006e54:	463d      	mov	r5, r7
 8006e56:	d9ed      	bls.n	8006e34 <__utoa+0x40>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	545a      	strb	r2, [r3, r1]
 8006e5c:	1919      	adds	r1, r3, r4
 8006e5e:	1aa5      	subs	r5, r4, r2
 8006e60:	42aa      	cmp	r2, r5
 8006e62:	dae2      	bge.n	8006e2a <__utoa+0x36>
 8006e64:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006e68:	780e      	ldrb	r6, [r1, #0]
 8006e6a:	7006      	strb	r6, [r0, #0]
 8006e6c:	3201      	adds	r2, #1
 8006e6e:	f801 5901 	strb.w	r5, [r1], #-1
 8006e72:	e7f4      	b.n	8006e5e <__utoa+0x6a>
 8006e74:	08007490 	.word	0x08007490

08006e78 <utoa>:
 8006e78:	f7ff bfbc 	b.w	8006df4 <__utoa>

08006e7c <_init>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr

08006e88 <_fini>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr
