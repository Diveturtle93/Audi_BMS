
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b98  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072b8  080072b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072c0  080072c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080072c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  080072d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080072d4  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a83  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384c  00000000  00000000  00038abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0003c310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c382  00000000  00000000  0003e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019662  00000000  00000000  0006ab1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107c44  00000000  00000000  0008417c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018bdc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dec  00000000  00000000  0018be14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006d78 	.word	0x08006d78

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006d78 	.word	0x08006d78

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f005 ff41 	bl	80063dc <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000026c 	.word	0x2000026c

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 fbfa 	bl	8006d74 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f005 ff20 	bl	80063dc <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000026c 	.word	0x2000026c

080005a8 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<LTC6811_DEVICES; i++)								// Wiederholen fuer Anzahl Slaves
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e011      	b.n	80005d8 <wakeup_ltc6811+0x30>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <wakeup_ltc6811+0x40>)
 80005bc:	f002 fe3c 	bl	8003238 <HAL_GPIO_WritePin>

		HAL_Delay(2);														// isoSPI braucht Zeit bis ready
 80005c0:	2002      	movs	r0, #2
 80005c2:	f001 ff9f 	bl	8002504 <HAL_Delay>

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <wakeup_ltc6811+0x40>)
 80005ce:	f002 fe33 	bl	8003238 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<LTC6811_DEVICES; i++)								// Wiederholen fuer Anzahl Slaves
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	3301      	adds	r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0ea      	beq.n	80005b4 <wakeup_ltc6811+0xc>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	// PEC berechnen, Anhand Command
	uint16_t pec;
	uint8_t cmd[4];
	pec = peccommand(command);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f89b 	bl	8000734 <peccommand>
 80005fe:	4603      	mov	r3, r0
 8000600:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000602:	f7ff ffd1 	bl	80005a8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	b29b      	uxth	r3, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	b2db      	uxtb	r3, r3
 8000614:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 800061c:	89bb      	ldrh	r3, [r7, #12]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	b29b      	uxth	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000626:	89bb      	ldrh	r3, [r7, #12]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <ltc6811+0x9c>)
 800063a:	f002 fdfd 	bl	8003238 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 800063e:	f107 0108 	add.w	r1, r7, #8
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	2204      	movs	r2, #4
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <ltc6811+0xa0>)
 8000648:	f003 ffb7 	bl	80045ba <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	f240 7223 	movw	r2, #1827	; 0x723
 8000652:	4293      	cmp	r3, r2
 8000654:	d10e      	bne.n	8000674 <ltc6811+0x88>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e008      	b.n	800066e <ltc6811+0x82>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xFF, 1, 100);
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2201      	movs	r2, #1
 8000660:	21ff      	movs	r1, #255	; 0xff
 8000662:	480a      	ldr	r0, [pc, #40]	; (800068c <ltc6811+0xa0>)
 8000664:	f003 ffa9 	bl	80045ba <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	3301      	adds	r3, #1
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2b08      	cmp	r3, #8
 8000672:	d9f3      	bls.n	800065c <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <ltc6811+0x9c>)
 800067c:	f002 fddc 	bl	8003238 <HAL_GPIO_WritePin>
	// Ende der Uebertragung
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	2000010c 	.word	0x2000010c

08000690 <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
void ltc6811_read(uint16_t command, uint8_t* data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	80fb      	strh	r3, [r7, #6]
	// PEC berechnen, Anhand Command
	uint16_t pec;
	uint8_t cmd[4];
	pec = peccommand(command);
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f848 	bl	8000734 <peccommand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80006a8:	f7ff ff7e 	bl	80005a8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	f003 0307 	and.w	r3, r3, #7
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 80006c2:	89bb      	ldrh	r3, [r7, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 80006cc:	89bb      	ldrh	r3, [r7, #12]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	f023 0301 	bic.w	r3, r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006de:	4813      	ldr	r0, [pc, #76]	; (800072c <ltc6811_read+0x9c>)
 80006e0:	f002 fdaa 	bl	8003238 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80006e4:	f107 0108 	add.w	r1, r7, #8
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2204      	movs	r2, #4
 80006ec:	4810      	ldr	r0, [pc, #64]	; (8000730 <ltc6811_read+0xa0>)
 80006ee:	f003 ff64 	bl	80045ba <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	e00c      	b.n	8000712 <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	461a      	mov	r2, r3
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	1899      	adds	r1, r3, r2
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2208      	movs	r2, #8
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <ltc6811_read+0xa0>)
 8000708:	f004 f8c5 	bl	8004896 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0ef      	beq.n	80006f8 <ltc6811_read+0x68>
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <ltc6811_read+0x9c>)
 8000720:	f002 fd8a 	bl	8003238 <HAL_GPIO_WritePin>
	// Ende der Uebertragung
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	2000010c 	.word	0x2000010c

08000734 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	b29b      	uxth	r3, r3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 0307 	and.w	r3, r3, #7
 8000750:	b2db      	uxtb	r3, r3
 8000752:	733b      	strb	r3, [r7, #12]
	
	return peclookup(2, pec);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	4619      	mov	r1, r3
 800075a:	2002      	movs	r0, #2
 800075c:	f000 f806 	bl	800076c <peclookup>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 8000778:	2310      	movs	r3, #16
 800077a:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	737b      	strb	r3, [r7, #13]
 8000780:	e019      	b.n	80007b6 <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	09db      	lsrs	r3, r3, #7
 8000786:	b29a      	uxth	r2, r3
 8000788:	7b7b      	ldrb	r3, [r7, #13]
 800078a:	6839      	ldr	r1, [r7, #0]
 800078c:	440b      	add	r3, r1
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	4053      	eors	r3, r2
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	b21a      	sxth	r2, r3
 80007a0:	897b      	ldrh	r3, [r7, #10]
 80007a2:	490b      	ldr	r1, [pc, #44]	; (80007d0 <peclookup+0x64>)
 80007a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4053      	eors	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80007b0:	7b7b      	ldrb	r3, [r7, #13]
 80007b2:	3301      	adds	r3, #1
 80007b4:	737b      	strb	r3, [r7, #13]
 80007b6:	7b7a      	ldrb	r2, [r7, #13]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d3e1      	bcc.n	8000782 <peclookup+0x16>
	}
	
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b29b      	uxth	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	08007078 	.word	0x08007078

080007d4 <ltc6811_check>:
//----------------------------------------------------------------------*/

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b092      	sub	sp, #72	; 0x48
 80007d8:	af00      	add	r7, sp, #0
	// Variablen definieren
	uint8_t tmp_data[64] = {0}, result = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	223c      	movs	r2, #60	; 0x3c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fa7a 	bl	8006ce0 <memset>
 80007ec:	2300      	movs	r3, #0
 80007ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80007f2:	f7ff fed9 	bl	80005a8 <wakeup_ltc6811>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 80007f6:	f240 7011 	movw	r0, #1809	; 0x711
 80007fa:	f7ff fef7 	bl	80005ec <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 80007fe:	f240 7012 	movw	r0, #1810	; 0x712
 8000802:	f7ff fef3 	bl	80005ec <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 8000806:	f240 7013 	movw	r0, #1811	; 0x713
 800080a:	f7ff feef 	bl	80005ec <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	2012      	movs	r0, #18
 8000814:	f7ff ff3c 	bl	8000690 <ltc6811_read>
	{
		result |= (1<<0);													// Thermal Shutdown nicht Ok
	}

	// Selbsttest 1
	if (ltc6811_test1() == 1)
 8000818:	f000 f826 	bl	8000868 <ltc6811_test1>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d105      	bne.n	800082e <ltc6811_check+0x5a>
		result |= (1<<1);													// Selbsttest 1 nicht bestanden
 8000822:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Selbsttest 2
	if (ltc6811_test2() == 1)
 800082e:	f000 f917 	bl	8000a60 <ltc6811_test2>
 8000832:	4603      	mov	r3, r0
 8000834:	2b01      	cmp	r3, #1
 8000836:	d105      	bne.n	8000844 <ltc6811_check+0x70>
		result |= (1<<2);													// Selbsttest 2 nicht bestanden
 8000838:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Selbsttest 1
	if (ltc6811_diagn() == 1)
 8000844:	f000 fa08 	bl	8000c58 <ltc6811_diagn>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d105      	bne.n	800085a <ltc6811_check+0x86>
		result |= (1<<3);													// Multiplexertest nicht bestanden
 800084e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ltc6811_read(RDCVA, &tmp_data[24]);
	ltc6811_read(RDCVB, &tmp_data[30]);
	ltc6811_read(RDCVC, &tmp_data[36]);
	ltc6811_read(RDCVD, &tmp_data[42]);*/

	return result;										// return result
 800085a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800085e:	4618      	mov	r0, r3
 8000860:	3748      	adds	r7, #72	; 0x48
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <ltc6811_test1>:
//----------------------------------------------------------------------

// Selbsttest 1 Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test1(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b092      	sub	sp, #72	; 0x48
 800086c:	af00      	add	r7, sp, #0
	// Variablen definieren
	uint8_t tmp_data[64] = {0};
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	223c      	movs	r2, #60	; 0x3c
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f006 fa30 	bl	8006ce0 <memset>
	uint16_t tmp = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	// Commands für Status senden  Test 1
	ltc6811(CVST | MD73 | ST1);												// Digitalfilter Check Zellspannungen
 8000886:	f240 3027 	movw	r0, #807	; 0x327
 800088a:	f7ff feaf 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 800088e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000892:	f001 fe37 	bl	8002504 <HAL_Delay>
	ltc6811(AXST | MD73 | ST1);												// Digitalfilter Check GPIO-Spannungen
 8000896:	f240 5027 	movw	r0, #1319	; 0x527
 800089a:	f7ff fea7 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 800089e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008a2:	f001 fe2f 	bl	8002504 <HAL_Delay>
	ltc6811(STATST | MD73 | ST1);											// Digitalfilter Check Interne Messungen
 80008a6:	f240 502f 	movw	r0, #1327	; 0x52f
 80008aa:	f7ff fe9f 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 80008ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008b2:	f001 fe27 	bl	8002504 <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	2004      	movs	r0, #4
 80008bc:	f7ff fee8 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	3308      	adds	r3, #8
 80008c4:	4619      	mov	r1, r3
 80008c6:	2006      	movs	r0, #6
 80008c8:	f7ff fee2 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	3310      	adds	r3, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	2008      	movs	r0, #8
 80008d4:	f7ff fedc 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	3318      	adds	r3, #24
 80008dc:	4619      	mov	r1, r3
 80008de:	200a      	movs	r0, #10
 80008e0:	f7ff fed6 	bl	8000690 <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	3320      	adds	r3, #32
 80008e8:	4619      	mov	r1, r3
 80008ea:	200c      	movs	r0, #12
 80008ec:	f7ff fed0 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	3328      	adds	r3, #40	; 0x28
 80008f4:	4619      	mov	r1, r3
 80008f6:	200e      	movs	r0, #14
 80008f8:	f7ff feca 	bl	8000690 <ltc6811_read>
	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	3330      	adds	r3, #48	; 0x30
 8000900:	4619      	mov	r1, r3
 8000902:	2010      	movs	r0, #16
 8000904:	f7ff fec4 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	3338      	adds	r3, #56	; 0x38
 800090c:	4619      	mov	r1, r3
 800090e:	2012      	movs	r0, #18
 8000910:	f7ff febe 	bl	8000690 <ltc6811_read>

	// Daten pruefen Test 1
	for (uint8_t i=0; i<12; i++)
 8000914:	2300      	movs	r3, #0
 8000916:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800091a:	e096      	b.n	8000a4a <ltc6811_test1+0x1e2>
	{
		switch (i)
 800091c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000920:	2b0b      	cmp	r3, #11
 8000922:	f200 8084 	bhi.w	8000a2e <ltc6811_test1+0x1c6>
 8000926:	a201      	add	r2, pc, #4	; (adr r2, 800092c <ltc6811_test1+0xc4>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	0800095d 	.word	0x0800095d
 8000930:	0800095d 	.word	0x0800095d
 8000934:	0800095d 	.word	0x0800095d
 8000938:	0800098f 	.word	0x0800098f
 800093c:	0800098f 	.word	0x0800098f
 8000940:	0800098f 	.word	0x0800098f
 8000944:	080009c3 	.word	0x080009c3
 8000948:	080009c3 	.word	0x080009c3
 800094c:	080009c3 	.word	0x080009c3
 8000950:	080009f9 	.word	0x080009f9
 8000954:	080009f9 	.word	0x080009f9
 8000958:	080009f9 	.word	0x080009f9
		{
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 800095c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	3301      	adds	r3, #1
 8000964:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000968:	4413      	add	r3, r2
 800096a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21a      	sxth	r2, r3
 8000972:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800097c:	440b      	add	r3, r1
 800097e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21b      	sxth	r3, r3
 8000988:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				break;
 800098c:	e050      	b.n	8000a30 <ltc6811_test1+0x1c8>
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3]<<8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 800098e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	3303      	adds	r3, #3
 8000996:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800099a:	4413      	add	r3, r2
 800099c:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80009a8:	3301      	adds	r3, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80009b0:	440b      	add	r3, r1
 80009b2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				break;
 80009c0:	e036      	b.n	8000a30 <ltc6811_test1+0x1c8>
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1]<<8)|tmp_data[(i+2)*2]);			// Register CVC umwandeln
 80009c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80009c6:	3302      	adds	r3, #2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	3301      	adds	r3, #1
 80009cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d0:	4413      	add	r3, r2
 80009d2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	b21a      	sxth	r2, r3
 80009da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80009de:	3302      	adds	r3, #2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80009e6:	440b      	add	r3, r1
 80009e8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				break;
 80009f6:	e01b      	b.n	8000a30 <ltc6811_test1+0x1c8>
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3]<<8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 80009f8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80009fc:	3302      	adds	r3, #2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	3303      	adds	r3, #3
 8000a02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000a06:	4413      	add	r3, r2
 8000a08:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000a14:	3303      	adds	r3, #3
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000a1c:	440b      	add	r3, r1
 8000a1e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				break;
 8000a2c:	e000      	b.n	8000a30 <ltc6811_test1+0x1c8>
			default:
				break;
 8000a2e:	bf00      	nop
		}
		if (tmp != 0x9555)
 8000a30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000a34:	f249 5255 	movw	r2, #38229	; 0x9555
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d001      	beq.n	8000a40 <ltc6811_test1+0x1d8>
			return 1;														// Selbsttest 1 nicht OK
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e00a      	b.n	8000a56 <ltc6811_test1+0x1ee>
	for (uint8_t i=0; i<12; i++)
 8000a40:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000a44:	3301      	adds	r3, #1
 8000a46:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000a4a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000a4e:	2b0b      	cmp	r3, #11
 8000a50:	f67f af64 	bls.w	800091c <ltc6811_test1+0xb4>
	}

	return 0;																// Selbsttest 1 OK
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3748      	adds	r7, #72	; 0x48
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop

08000a60 <ltc6811_test2>:
//----------------------------------------------------------------------

// Selbsttest 2 Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test2(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b092      	sub	sp, #72	; 0x48
 8000a64:	af00      	add	r7, sp, #0
	// Variablen definieren
	uint8_t tmp_data[64] = {0};
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	223c      	movs	r2, #60	; 0x3c
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f006 f934 	bl	8006ce0 <memset>
	uint16_t tmp = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	// Commands für Status senden Test 2
	ltc6811(CVST | MD73 | ST1);												// Digitalfilter Check Zellspannungen
 8000a7e:	f240 3027 	movw	r0, #807	; 0x327
 8000a82:	f7ff fdb3 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 8000a86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a8a:	f001 fd3b 	bl	8002504 <HAL_Delay>
	ltc6811(AXST | MD73 | ST1);												// Digitalfilter Check GPIO-Spannungen
 8000a8e:	f240 5027 	movw	r0, #1319	; 0x527
 8000a92:	f7ff fdab 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 8000a96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a9a:	f001 fd33 	bl	8002504 <HAL_Delay>
	ltc6811(STATST | MD73 | ST1);											// Digitalfilter Check Interne Messungen
 8000a9e:	f240 502f 	movw	r0, #1327	; 0x52f
 8000aa2:	f7ff fda3 	bl	80005ec <ltc6811>
	HAL_Delay(300);
 8000aa6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aaa:	f001 fd2b 	bl	8002504 <HAL_Delay>

	// Register auslesen Test 2
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f7ff fdec 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	3308      	adds	r3, #8
 8000abc:	4619      	mov	r1, r3
 8000abe:	2006      	movs	r0, #6
 8000ac0:	f7ff fde6 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	3310      	adds	r3, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	2008      	movs	r0, #8
 8000acc:	f7ff fde0 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	3318      	adds	r3, #24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f7ff fdda 	bl	8000690 <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	3320      	adds	r3, #32
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f7ff fdd4 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	3328      	adds	r3, #40	; 0x28
 8000aec:	4619      	mov	r1, r3
 8000aee:	200e      	movs	r0, #14
 8000af0:	f7ff fdce 	bl	8000690 <ltc6811_read>
	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	3330      	adds	r3, #48	; 0x30
 8000af8:	4619      	mov	r1, r3
 8000afa:	2010      	movs	r0, #16
 8000afc:	f7ff fdc8 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	3338      	adds	r3, #56	; 0x38
 8000b04:	4619      	mov	r1, r3
 8000b06:	2012      	movs	r0, #18
 8000b08:	f7ff fdc2 	bl	8000690 <ltc6811_read>

	// Daten pruefen Test 2
	for (uint8_t i=0; i<12; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000b12:	e096      	b.n	8000c42 <ltc6811_test2+0x1e2>
	{
		switch (i)
 8000b14:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000b18:	2b0b      	cmp	r3, #11
 8000b1a:	f200 8084 	bhi.w	8000c26 <ltc6811_test2+0x1c6>
 8000b1e:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <ltc6811_test2+0xc4>)
 8000b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b24:	08000b55 	.word	0x08000b55
 8000b28:	08000b55 	.word	0x08000b55
 8000b2c:	08000b55 	.word	0x08000b55
 8000b30:	08000b87 	.word	0x08000b87
 8000b34:	08000b87 	.word	0x08000b87
 8000b38:	08000b87 	.word	0x08000b87
 8000b3c:	08000bbb 	.word	0x08000bbb
 8000b40:	08000bbb 	.word	0x08000bbb
 8000b44:	08000bbb 	.word	0x08000bbb
 8000b48:	08000bf1 	.word	0x08000bf1
 8000b4c:	08000bf1 	.word	0x08000bf1
 8000b50:	08000bf1 	.word	0x08000bf1
		{
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000b54:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b60:	4413      	add	r3, r2
 8000b62:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	b21a      	sxth	r2, r3
 8000b6a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b74:	440b      	add	r3, r1
 8000b76:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				break;
 8000b84:	e050      	b.n	8000c28 <ltc6811_test2+0x1c8>
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3]<<8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000b86:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	3303      	adds	r3, #3
 8000b8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b92:	4413      	add	r3, r2
 8000b94:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000ba8:	440b      	add	r3, r1
 8000baa:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				break;
 8000bb8:	e036      	b.n	8000c28 <ltc6811_test2+0x1c8>
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1]<<8)|tmp_data[(i+2)*2]);			// Register CVC umwandeln
 8000bba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000bc8:	4413      	add	r3, r2
 8000bca:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000bde:	440b      	add	r3, r1
 8000be0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				break;
 8000bee:	e01b      	b.n	8000c28 <ltc6811_test2+0x1c8>
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3]<<8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000bf0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	3303      	adds	r3, #3
 8000bfa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000bfe:	4413      	add	r3, r2
 8000c00:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000c0c:	3303      	adds	r3, #3
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000c14:	440b      	add	r3, r1
 8000c16:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				break;
 8000c24:	e000      	b.n	8000c28 <ltc6811_test2+0x1c8>
			default:
				break;
 8000c26:	bf00      	nop
		}
		if (tmp != 0x6AAA)
 8000c28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000c2c:	f646 22aa 	movw	r2, #27306	; 0x6aaa
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d001      	beq.n	8000c38 <ltc6811_test2+0x1d8>
			return 1;														// Selbsttest 2 nicht OK
 8000c34:	2301      	movs	r3, #1
 8000c36:	e00a      	b.n	8000c4e <ltc6811_test2+0x1ee>
	for (uint8_t i=0; i<12; i++)
 8000c38:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000c42:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000c46:	2b0b      	cmp	r3, #11
 8000c48:	f67f af64 	bls.w	8000b14 <ltc6811_test2+0xb4>
	}

	return 0;																// Selbsttest 2 OK
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3748      	adds	r7, #72	; 0x48
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop

08000c58 <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
	// Variablen definieren
	uint8_t tmp_data[8] = {0};
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]

	wakeup_ltc6811();
 8000c66:	f7ff fc9f 	bl	80005a8 <wakeup_ltc6811>
	ltc6811(DIAGN);															// Multiplexer Check
 8000c6a:	f240 7015 	movw	r0, #1813	; 0x715
 8000c6e:	f7ff fcbd 	bl	80005ec <ltc6811>
	wakeup_ltc6811();
 8000c72:	f7ff fc99 	bl	80005a8 <wakeup_ltc6811>
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	2012      	movs	r0, #18
 8000c7c:	f7ff fd08 	bl	8000690 <ltc6811_read>

	if (tmp_data[5] & (1<<1))
 8000c80:	797b      	ldrb	r3, [r7, #5]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <ltc6811_diagn+0x36>
		return 1;															// Multiplexertest nicht OK
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <ltc6811_diagn+0x38>
	else
		return 0;															// Multiplexertest OK
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000c9c:	2112      	movs	r1, #18
 8000c9e:	4824      	ldr	r0, [pc, #144]	; (8000d30 <collectMiddlewareInfo+0x98>)
 8000ca0:	f7ff fc4e 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	2005      	movs	r0, #5
 8000ca8:	f7ff fc5e 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000cac:	2101      	movs	r1, #1
 8000cae:	4821      	ldr	r0, [pc, #132]	; (8000d34 <collectMiddlewareInfo+0x9c>)
 8000cb0:	f7ff fc46 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fc56 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <collectMiddlewareInfo+0xa0>)
 8000cc0:	f7ff fc3e 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000cc4:	f001 fc42 	bl	800254c <HAL_GetHalVersion>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	0e1b      	lsrs	r3, r3, #24
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	210a      	movs	r1, #10
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc49 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4816      	ldr	r0, [pc, #88]	; (8000d34 <collectMiddlewareInfo+0x9c>)
 8000cda:	f7ff fc31 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000cde:	f001 fc35 	bl	800254c <HAL_GetHalVersion>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	0c1b      	lsrs	r3, r3, #16
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	210a      	movs	r1, #10
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fc3c 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4810      	ldr	r0, [pc, #64]	; (8000d34 <collectMiddlewareInfo+0x9c>)
 8000cf4:	f7ff fc24 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000cf8:	f001 fc28 	bl	800254c <HAL_GetHalVersion>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	0a1b      	lsrs	r3, r3, #8
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	210a      	movs	r1, #10
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fc2f 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <collectMiddlewareInfo+0x9c>)
 8000d0e:	f7ff fc17 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000d12:	f001 fc1b 	bl	800254c <HAL_GetHalVersion>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	210a      	movs	r1, #10
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fc23 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000d22:	2101      	movs	r1, #1
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <collectMiddlewareInfo+0xa4>)
 8000d26:	f7ff fc0b 	bl	8000540 <uartTransmit>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	08006d90 	.word	0x08006d90
 8000d34:	08006da4 	.word	0x08006da4
 8000d38:	08006da8 	.word	0x08006da8
 8000d3c:	08006db8 	.word	0x08006db8

08000d40 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 8000d44:	2110      	movs	r1, #16
 8000d46:	4816      	ldr	r0, [pc, #88]	; (8000da0 <collectSoftwareInfo+0x60>)
 8000d48:	f7ff fbfa 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	4815      	ldr	r0, [pc, #84]	; (8000da4 <collectSoftwareInfo+0x64>)
 8000d50:	f7ff fbf6 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000d54:	210f      	movs	r1, #15
 8000d56:	4814      	ldr	r0, [pc, #80]	; (8000da8 <collectSoftwareInfo+0x68>)
 8000d58:	f7ff fbf2 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000d5c:	210c      	movs	r1, #12
 8000d5e:	4813      	ldr	r0, [pc, #76]	; (8000dac <collectSoftwareInfo+0x6c>)
 8000d60:	f7ff fbee 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000d64:	210d      	movs	r1, #13
 8000d66:	4812      	ldr	r0, [pc, #72]	; (8000db0 <collectSoftwareInfo+0x70>)
 8000d68:	f7ff fbea 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000d6c:	2129      	movs	r1, #41	; 0x29
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <collectSoftwareInfo+0x74>)
 8000d70:	f7ff fbe6 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000d74:	210f      	movs	r1, #15
 8000d76:	4810      	ldr	r0, [pc, #64]	; (8000db8 <collectSoftwareInfo+0x78>)
 8000d78:	f7ff fbe2 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000d7c:	210c      	movs	r1, #12
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <collectSoftwareInfo+0x7c>)
 8000d80:	f7ff fbde 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000d84:	210f      	movs	r1, #15
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <collectSoftwareInfo+0x80>)
 8000d88:	f7ff fbda 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000d8c:	2109      	movs	r1, #9
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <collectSoftwareInfo+0x84>)
 8000d90:	f7ff fbd6 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);
 8000d94:	2101      	movs	r1, #1
 8000d96:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <collectSoftwareInfo+0x88>)
 8000d98:	f7ff fbd2 	bl	8000540 <uartTransmit>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	08006dbc 	.word	0x08006dbc
 8000da4:	08006dcc 	.word	0x08006dcc
 8000da8:	08006dd4 	.word	0x08006dd4
 8000dac:	08006de4 	.word	0x08006de4
 8000db0:	08006df0 	.word	0x08006df0
 8000db4:	08006e00 	.word	0x08006e00
 8000db8:	08006e2c 	.word	0x08006e2c
 8000dbc:	08006e3c 	.word	0x08006e3c
 8000dc0:	08006e48 	.word	0x08006e48
 8000dc4:	08006e58 	.word	0x08006e58
 8000dc8:	08006db8 	.word	0x08006db8

08000dcc <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000dd2:	2113      	movs	r1, #19
 8000dd4:	483b      	ldr	r0, [pc, #236]	; (8000ec4 <collectHardwareInfo+0xf8>)
 8000dd6:	f7ff fbb3 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000dda:	f001 fbcd 	bl	8002578 <HAL_GetDEVID>
 8000dde:	4603      	mov	r3, r0
 8000de0:	210a      	movs	r1, #10
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fbc0 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000de8:	2115      	movs	r1, #21
 8000dea:	4837      	ldr	r0, [pc, #220]	; (8000ec8 <collectHardwareInfo+0xfc>)
 8000dec:	f7ff fba8 	bl	8000540 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000df0:	f001 fbb6 	bl	8002560 <HAL_GetREVID>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f242 0201 	movw	r2, #8193	; 0x2001
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d016      	beq.n	8000e2c <collectHardwareInfo+0x60>
 8000dfe:	f242 0201 	movw	r2, #8193	; 0x2001
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d817      	bhi.n	8000e36 <collectHardwareInfo+0x6a>
 8000e06:	f241 0201 	movw	r2, #4097	; 0x1001
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d004      	beq.n	8000e18 <collectHardwareInfo+0x4c>
 8000e0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d005      	beq.n	8000e22 <collectHardwareInfo+0x56>
 8000e16:	e00e      	b.n	8000e36 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	482c      	ldr	r0, [pc, #176]	; (8000ecc <collectHardwareInfo+0x100>)
 8000e1c:	f7ff fb90 	bl	8000540 <uartTransmit>
			break;
 8000e20:	e011      	b.n	8000e46 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000e22:	2101      	movs	r1, #1
 8000e24:	482a      	ldr	r0, [pc, #168]	; (8000ed0 <collectHardwareInfo+0x104>)
 8000e26:	f7ff fb8b 	bl	8000540 <uartTransmit>
			break;
 8000e2a:	e00c      	b.n	8000e46 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4829      	ldr	r0, [pc, #164]	; (8000ed4 <collectHardwareInfo+0x108>)
 8000e30:	f7ff fb86 	bl	8000540 <uartTransmit>
			break;
 8000e34:	e007      	b.n	8000e46 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000e36:	f001 fb93 	bl	8002560 <HAL_GetREVID>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	210a      	movs	r1, #10
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fb92 	bl	8000568 <uartTransmitNumber>
			break;
 8000e44:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000e46:	2113      	movs	r1, #19
 8000e48:	4823      	ldr	r0, [pc, #140]	; (8000ed8 <collectHardwareInfo+0x10c>)
 8000e4a:	f7ff fb79 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000e4e:	f002 fdf7 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 8000e52:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a21      	ldr	r2, [pc, #132]	; (8000edc <collectHardwareInfo+0x110>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	0c9b      	lsrs	r3, r3, #18
 8000e5e:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000e60:	210a      	movs	r1, #10
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fb80 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000e68:	2104      	movs	r1, #4
 8000e6a:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <collectHardwareInfo+0x114>)
 8000e6c:	f7ff fb68 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000e70:	210f      	movs	r1, #15
 8000e72:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <collectHardwareInfo+0x118>)
 8000e74:	f7ff fb64 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000e78:	f001 fb8c 	bl	8002594 <HAL_GetUIDw0>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb71 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000e86:	2101      	movs	r1, #1
 8000e88:	4817      	ldr	r0, [pc, #92]	; (8000ee8 <collectHardwareInfo+0x11c>)
 8000e8a:	f7ff fb59 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000e8e:	f001 fb8d 	bl	80025ac <HAL_GetUIDw1>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2110      	movs	r1, #16
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fb66 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <collectHardwareInfo+0x11c>)
 8000ea0:	f7ff fb4e 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000ea4:	f001 fb8e 	bl	80025c4 <HAL_GetUIDw2>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb5b 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <collectHardwareInfo+0x120>)
 8000eb6:	f7ff fb43 	bl	8000540 <uartTransmit>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	08006e64 	.word	0x08006e64
 8000ec8:	08006e78 	.word	0x08006e78
 8000ecc:	08006e90 	.word	0x08006e90
 8000ed0:	08006e94 	.word	0x08006e94
 8000ed4:	08006e98 	.word	0x08006e98
 8000ed8:	08006e9c 	.word	0x08006e9c
 8000edc:	431bde83 	.word	0x431bde83
 8000ee0:	08006eb0 	.word	0x08006eb0
 8000ee4:	08006eb8 	.word	0x08006eb8
 8000ee8:	08006ec8 	.word	0x08006ec8
 8000eec:	08006db8 	.word	0x08006db8

08000ef0 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000ef4:	2111      	movs	r1, #17
 8000ef6:	480b      	ldr	r0, [pc, #44]	; (8000f24 <collectSystemInfo+0x34>)
 8000ef8:	f7ff fb22 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000efc:	f7ff ff66 	bl	8000dcc <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000f00:	2111      	movs	r1, #17
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <collectSystemInfo+0x38>)
 8000f04:	f7ff fb1c 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000f08:	f7ff ff1a 	bl	8000d40 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000f0c:	2113      	movs	r1, #19
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <collectSystemInfo+0x3c>)
 8000f10:	f7ff fb16 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000f14:	f7ff fec0 	bl	8000c98 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 8000f18:	2103      	movs	r1, #3
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <collectSystemInfo+0x40>)
 8000f1c:	f7ff fb10 	bl	8000540 <uartTransmit>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08006ecc 	.word	0x08006ecc
 8000f28:	08006ee0 	.word	0x08006ee0
 8000f2c:	08006ef4 	.word	0x08006ef4
 8000f30:	08006f08 	.word	0x08006f08

08000f34 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <readResetSource+0xa0>)
 8000f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <readResetSource+0xa0>)
 8000f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <readResetSource+0xa0>)
 8000f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	da02      	bge.n	8000f70 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <readResetSource+0xa0>)
 8000f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	3308      	adds	r3, #8
 8000f80:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <readResetSource+0xa0>)
 8000f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	3310      	adds	r3, #16
 8000f92:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <readResetSource+0xa0>)
 8000f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	3320      	adds	r3, #32
 8000fa4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <readResetSource+0xa0>)
 8000fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	3340      	adds	r3, #64	; 0x40
 8000fb6:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <readResetSource+0xa0>)
 8000fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <readResetSource+0xa0>)
 8000fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fc2:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000fe2:	2106      	movs	r1, #6
 8000fe4:	482a      	ldr	r0, [pc, #168]	; (8001090 <printResetSource+0xb8>)
 8000fe6:	f7ff faab 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d104      	bne.n	8000ffa <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000ff0:	210f      	movs	r1, #15
 8000ff2:	4828      	ldr	r0, [pc, #160]	; (8001094 <printResetSource+0xbc>)
 8000ff4:	f7ff faa4 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000ff8:	e046      	b.n	8001088 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8001004:	2118      	movs	r1, #24
 8001006:	4824      	ldr	r0, [pc, #144]	; (8001098 <printResetSource+0xc0>)
 8001008:	f7ff fa9a 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8001016:	2116      	movs	r1, #22
 8001018:	4820      	ldr	r0, [pc, #128]	; (800109c <printResetSource+0xc4>)
 800101a:	f7ff fa91 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8001028:	210a      	movs	r1, #10
 800102a:	481d      	ldr	r0, [pc, #116]	; (80010a0 <printResetSource+0xc8>)
 800102c:	f7ff fa88 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800103a:	2110      	movs	r1, #16
 800103c:	4819      	ldr	r0, [pc, #100]	; (80010a4 <printResetSource+0xcc>)
 800103e:	f7ff fa7f 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 800104c:	210f      	movs	r1, #15
 800104e:	4816      	ldr	r0, [pc, #88]	; (80010a8 <printResetSource+0xd0>)
 8001050:	f7ff fa76 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 800105e:	210f      	movs	r1, #15
 8001060:	4812      	ldr	r0, [pc, #72]	; (80010ac <printResetSource+0xd4>)
 8001062:	f7ff fa6d 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8001070:	210a      	movs	r1, #10
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <printResetSource+0xd8>)
 8001074:	f7ff fa64 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	da03      	bge.n	8001088 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8001080:	2105      	movs	r1, #5
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <printResetSource+0xdc>)
 8001084:	f7ff fa5c 	bl	8000540 <uartTransmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	08006f0c 	.word	0x08006f0c
 8001094:	08006f14 	.word	0x08006f14
 8001098:	08006f24 	.word	0x08006f24
 800109c:	08006f40 	.word	0x08006f40
 80010a0:	08006f58 	.word	0x08006f58
 80010a4:	08006f64 	.word	0x08006f64
 80010a8:	08006f78 	.word	0x08006f78
 80010ac:	08006f88 	.word	0x08006f88
 80010b0:	08006f98 	.word	0x08006f98
 80010b4:	08006fa4 	.word	0x08006fa4

080010b8 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 80010bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c0:	4850      	ldr	r0, [pc, #320]	; (8001204 <readall_inputs+0x14c>)
 80010c2:	f002 f8a1 	bl	8003208 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <readall_inputs+0x150>)
 80010d0:	7813      	ldrb	r3, [r2, #0]
 80010d2:	f361 0300 	bfi	r3, r1, #0, #1
 80010d6:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80010d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010dc:	484b      	ldr	r0, [pc, #300]	; (800120c <readall_inputs+0x154>)
 80010de:	f002 f893 	bl	8003208 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	b2d9      	uxtb	r1, r3
 80010ea:	4a47      	ldr	r2, [pc, #284]	; (8001208 <readall_inputs+0x150>)
 80010ec:	7813      	ldrb	r3, [r2, #0]
 80010ee:	f361 0341 	bfi	r3, r1, #1, #1
 80010f2:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 80010f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f8:	4845      	ldr	r0, [pc, #276]	; (8001210 <readall_inputs+0x158>)
 80010fa:	f002 f885 	bl	8003208 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	b2d9      	uxtb	r1, r3
 8001106:	4a40      	ldr	r2, [pc, #256]	; (8001208 <readall_inputs+0x150>)
 8001108:	7813      	ldrb	r3, [r2, #0]
 800110a:	f361 03c3 	bfi	r3, r1, #3, #1
 800110e:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001114:	483e      	ldr	r0, [pc, #248]	; (8001210 <readall_inputs+0x158>)
 8001116:	f002 f877 	bl	8003208 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2d9      	uxtb	r1, r3
 8001122:	4a39      	ldr	r2, [pc, #228]	; (8001208 <readall_inputs+0x150>)
 8001124:	7813      	ldrb	r3, [r2, #0]
 8001126:	f361 1304 	bfi	r3, r1, #4, #1
 800112a:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 800112c:	2101      	movs	r1, #1
 800112e:	4838      	ldr	r0, [pc, #224]	; (8001210 <readall_inputs+0x158>)
 8001130:	f002 f86a 	bl	8003208 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2d9      	uxtb	r1, r3
 800113c:	4a32      	ldr	r2, [pc, #200]	; (8001208 <readall_inputs+0x150>)
 800113e:	7813      	ldrb	r3, [r2, #0]
 8001140:	f361 1345 	bfi	r3, r1, #5, #1
 8001144:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001146:	2104      	movs	r1, #4
 8001148:	4831      	ldr	r0, [pc, #196]	; (8001210 <readall_inputs+0x158>)
 800114a:	f002 f85d 	bl	8003208 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	b2d9      	uxtb	r1, r3
 8001156:	4a2c      	ldr	r2, [pc, #176]	; (8001208 <readall_inputs+0x150>)
 8001158:	7813      	ldrb	r3, [r2, #0]
 800115a:	f361 1386 	bfi	r3, r1, #6, #1
 800115e:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8001160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001164:	4827      	ldr	r0, [pc, #156]	; (8001204 <readall_inputs+0x14c>)
 8001166:	f002 f84f 	bl	8003208 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	b2d9      	uxtb	r1, r3
 8001172:	4a28      	ldr	r2, [pc, #160]	; (8001214 <readall_inputs+0x15c>)
 8001174:	7813      	ldrb	r3, [r2, #0]
 8001176:	f361 0300 	bfi	r3, r1, #0, #1
 800117a:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 800117c:	2108      	movs	r1, #8
 800117e:	4821      	ldr	r0, [pc, #132]	; (8001204 <readall_inputs+0x14c>)
 8001180:	f002 f842 	bl	8003208 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	b2d9      	uxtb	r1, r3
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <readall_inputs+0x15c>)
 800118e:	7813      	ldrb	r3, [r2, #0]
 8001190:	f361 0341 	bfi	r3, r1, #1, #1
 8001194:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8001196:	2120      	movs	r1, #32
 8001198:	481a      	ldr	r0, [pc, #104]	; (8001204 <readall_inputs+0x14c>)
 800119a:	f002 f835 	bl	8003208 <HAL_GPIO_ReadPin>
 800119e:	4603      	mov	r3, r0
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	b2d9      	uxtb	r1, r3
 80011a6:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <readall_inputs+0x15c>)
 80011a8:	7813      	ldrb	r3, [r2, #0]
 80011aa:	f361 0382 	bfi	r3, r1, #2, #1
 80011ae:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80011b0:	2110      	movs	r1, #16
 80011b2:	4814      	ldr	r0, [pc, #80]	; (8001204 <readall_inputs+0x14c>)
 80011b4:	f002 f828 	bl	8003208 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	b2d9      	uxtb	r1, r3
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <readall_inputs+0x15c>)
 80011c2:	7813      	ldrb	r3, [r2, #0]
 80011c4:	f361 03c3 	bfi	r3, r1, #3, #1
 80011c8:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 80011ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ce:	4812      	ldr	r0, [pc, #72]	; (8001218 <readall_inputs+0x160>)
 80011d0:	f002 f81a 	bl	8003208 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2d9      	uxtb	r1, r3
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <readall_inputs+0x15c>)
 80011de:	7813      	ldrb	r3, [r2, #0]
 80011e0:	f361 1304 	bfi	r3, r1, #4, #1
 80011e4:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 80011e6:	2104      	movs	r1, #4
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <readall_inputs+0x160>)
 80011ea:	f002 f80d 	bl	8003208 <HAL_GPIO_ReadPin>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	b2d9      	uxtb	r1, r3
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <readall_inputs+0x164>)
 80011f8:	7813      	ldrb	r3, [r2, #0]
 80011fa:	f361 0300 	bfi	r3, r1, #0, #1
 80011fe:	7013      	strb	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	20000060 	.word	0x20000060
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020000 	.word	0x40020000
 8001214:	20000068 	.word	0x20000068
 8001218:	40021400 	.word	0x40021400
 800121c:	20000064 	.word	0x20000064

08001220 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	481b      	ldr	r0, [pc, #108]	; (8001298 <testPCB_Leds+0x78>)
 800122a:	f002 f805 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800122e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001232:	f001 f967 	bl	8002504 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	4817      	ldr	r0, [pc, #92]	; (8001298 <testPCB_Leds+0x78>)
 800123c:	f001 fffc 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001244:	f001 f95e 	bl	8002504 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2104      	movs	r1, #4
 800124c:	4812      	ldr	r0, [pc, #72]	; (8001298 <testPCB_Leds+0x78>)
 800124e:	f001 fff3 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001256:	f001 f955 	bl	8002504 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2104      	movs	r1, #4
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <testPCB_Leds+0x78>)
 8001260:	f001 ffea 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001268:	f001 f94c 	bl	8002504 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <testPCB_Leds+0x78>)
 8001274:	f001 ffe0 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f001 f942 	bl	8002504 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <testPCB_Leds+0x78>)
 8001288:	f001 ffd6 	bl	8003238 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800128c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001290:	f001 f938 	bl	8002504 <HAL_Delay>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40020400 	.word	0x40020400

0800129c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_ADC1_Init+0x98>)
 80012b0:	4a21      	ldr	r2, [pc, #132]	; (8001338 <MX_ADC1_Init+0x9c>)
 80012b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_ADC1_Init+0x98>)
 80012b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_ADC1_Init+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_ADC1_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_ADC1_Init+0x98>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_ADC1_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_ADC1_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_ADC1_Init+0x98>)
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <MX_ADC1_Init+0xa0>)
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_ADC1_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_ADC1_Init+0x98>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_ADC1_Init+0x98>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_ADC1_Init+0x98>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_ADC1_Init+0x98>)
 80012fe:	f001 f96d 	bl	80025dc <HAL_ADC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001308:	f000 fcbc 	bl	8001c84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800130c:	2304      	movs	r3, #4
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001310:	2301      	movs	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_ADC1_Init+0x98>)
 800131e:	f001 f9a1 	bl	8002664 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001328:	f000 fcac 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000006c 	.word	0x2000006c
 8001338:	40012000 	.word	0x40012000
 800133c:	0f000001 	.word	0x0f000001

08001340 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <HAL_ADC_MspInit+0x74>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d123      	bne.n	80013aa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_ADC_MspInit+0x78>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_ADC_MspInit+0x78>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_ADC_MspInit+0x78>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_ADC_MspInit+0x78>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_ADC_MspInit+0x78>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_ADC_MspInit+0x78>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001392:	23f8      	movs	r3, #248	; 0xf8
 8001394:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_ADC_MspInit+0x7c>)
 80013a6:	f001 fd83 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012000 	.word	0x40012000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000

080013c0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_CAN1_Init+0x64>)
 80013c6:	4a18      	ldr	r2, [pc, #96]	; (8001428 <MX_CAN1_Init+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_CAN1_Init+0x64>)
 80013cc:	2210      	movs	r2, #16
 80013ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_CAN1_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_CAN1_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_CAN1_Init+0x64>)
 80013de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_CAN1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_CAN1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_CAN1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_CAN1_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_CAN1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_CAN1_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_CAN1_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_CAN1_Init+0x64>)
 8001410:	f001 fb6c 	bl	8002aec <HAL_CAN_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800141a:	f000 fc33 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200000dc 	.word	0x200000dc
 8001428:	40006400 	.word	0x40006400

0800142c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_CAN3_Init+0x64>)
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <MX_CAN3_Init+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_CAN3_Init+0x64>)
 8001438:	2206      	movs	r2, #6
 800143a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_CAN3_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_CAN3_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_CAN3_Init+0x64>)
 800144a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800144e:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_CAN3_Init+0x64>)
 8001452:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001456:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_CAN3_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_CAN3_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_CAN3_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_CAN3_Init+0x64>)
 800146c:	2200      	movs	r2, #0
 800146e:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_CAN3_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_CAN3_Init+0x64>)
 8001478:	2200      	movs	r2, #0
 800147a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_CAN3_Init+0x64>)
 800147e:	f001 fb35 	bl	8002aec <HAL_CAN_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001488:	f000 fbfc 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200000b4 	.word	0x200000b4
 8001494:	40003400 	.word	0x40003400

08001498 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08e      	sub	sp, #56	; 0x38
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a43      	ldr	r2, [pc, #268]	; (80015c4 <HAL_CAN_MspInit+0x12c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d131      	bne.n	800151e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014ba:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <HAL_CAN_MspInit+0x130>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a41      	ldr	r2, [pc, #260]	; (80015c8 <HAL_CAN_MspInit+0x130>)
 80014c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014c4:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <HAL_CAN_MspInit+0x130>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10b      	bne.n	80014e4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014cc:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <HAL_CAN_MspInit+0x134>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a3e      	ldr	r2, [pc, #248]	; (80015cc <HAL_CAN_MspInit+0x134>)
 80014d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <HAL_CAN_MspInit+0x134>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e0:	623b      	str	r3, [r7, #32]
 80014e2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	4b39      	ldr	r3, [pc, #228]	; (80015cc <HAL_CAN_MspInit+0x134>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a38      	ldr	r2, [pc, #224]	; (80015cc <HAL_CAN_MspInit+0x134>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_CAN_MspInit+0x134>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014fc:	2303      	movs	r3, #3
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800150c:	2309      	movs	r3, #9
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	482e      	ldr	r0, [pc, #184]	; (80015d0 <HAL_CAN_MspInit+0x138>)
 8001518:	f001 fcca 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 800151c:	e04e      	b.n	80015bc <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a2c      	ldr	r2, [pc, #176]	; (80015d4 <HAL_CAN_MspInit+0x13c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d149      	bne.n	80015bc <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <HAL_CAN_MspInit+0x134>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <HAL_CAN_MspInit+0x134>)
 800152e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_CAN_MspInit+0x134>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_CAN_MspInit+0x134>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a21      	ldr	r2, [pc, #132]	; (80015cc <HAL_CAN_MspInit+0x134>)
 8001546:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <HAL_CAN_MspInit+0x134>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_CAN_MspInit+0x130>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_CAN_MspInit+0x130>)
 8001560:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_CAN_MspInit+0x130>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10b      	bne.n	8001582 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_CAN_MspInit+0x134>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a17      	ldr	r2, [pc, #92]	; (80015cc <HAL_CAN_MspInit+0x134>)
 8001570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_CAN_MspInit+0x134>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_CAN_MspInit+0x134>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_CAN_MspInit+0x134>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_CAN_MspInit+0x134>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800159a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80015ac:	230b      	movs	r3, #11
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <HAL_CAN_MspInit+0x140>)
 80015b8:	f001 fc7a 	bl	8002eb0 <HAL_GPIO_Init>
}
 80015bc:	bf00      	nop
 80015be:	3738      	adds	r7, #56	; 0x38
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40006400 	.word	0x40006400
 80015c8:	20000028 	.word	0x20000028
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40003400 	.word	0x40003400
 80015d8:	40020000 	.word	0x40020000

080015dc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	; 0x38
 80015e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f2:	4bb7      	ldr	r3, [pc, #732]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4ab6      	ldr	r2, [pc, #728]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 80015f8:	f043 0310 	orr.w	r3, r3, #16
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4bb4      	ldr	r3, [pc, #720]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	4bb1      	ldr	r3, [pc, #708]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4ab0      	ldr	r2, [pc, #704]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4bae      	ldr	r3, [pc, #696]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001622:	4bab      	ldr	r3, [pc, #684]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4aaa      	ldr	r2, [pc, #680]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001628:	f043 0320 	orr.w	r3, r3, #32
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4ba8      	ldr	r3, [pc, #672]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	4ba5      	ldr	r3, [pc, #660]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4aa4      	ldr	r2, [pc, #656]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4ba2      	ldr	r3, [pc, #648]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b9f      	ldr	r3, [pc, #636]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a9e      	ldr	r2, [pc, #632]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b9c      	ldr	r3, [pc, #624]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b99      	ldr	r3, [pc, #612]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a98      	ldr	r2, [pc, #608]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b96      	ldr	r3, [pc, #600]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001682:	4b93      	ldr	r3, [pc, #588]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a92      	ldr	r2, [pc, #584]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b90      	ldr	r3, [pc, #576]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	4b8d      	ldr	r3, [pc, #564]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a8c      	ldr	r2, [pc, #560]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b8a      	ldr	r3, [pc, #552]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80016b2:	2200      	movs	r2, #0
 80016b4:	f248 0187 	movw	r1, #32903	; 0x8087
 80016b8:	4886      	ldr	r0, [pc, #536]	; (80018d4 <MX_GPIO_Init+0x2f8>)
 80016ba:	f001 fdbd 	bl	8003238 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c4:	4884      	ldr	r0, [pc, #528]	; (80018d8 <MX_GPIO_Init+0x2fc>)
 80016c6:	f001 fdb7 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f242 0102 	movw	r1, #8194	; 0x2002
 80016d0:	4882      	ldr	r0, [pc, #520]	; (80018dc <MX_GPIO_Init+0x300>)
 80016d2:	f001 fdb1 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f240 6102 	movw	r1, #1538	; 0x602
 80016dc:	4880      	ldr	r0, [pc, #512]	; (80018e0 <MX_GPIO_Init+0x304>)
 80016de:	f001 fdab 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f244 0184 	movw	r1, #16516	; 0x4084
 80016e8:	487e      	ldr	r0, [pc, #504]	; (80018e4 <MX_GPIO_Init+0x308>)
 80016ea:	f001 fda5 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016f4:	4877      	ldr	r0, [pc, #476]	; (80018d4 <MX_GPIO_Init+0x2f8>)
 80016f6:	f001 fd9f 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80016fa:	2200      	movs	r2, #0
 80016fc:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001700:	4879      	ldr	r0, [pc, #484]	; (80018e8 <MX_GPIO_Init+0x30c>)
 8001702:	f001 fd99 	bl	8003238 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2118      	movs	r1, #24
 800170a:	4878      	ldr	r0, [pc, #480]	; (80018ec <MX_GPIO_Init+0x310>)
 800170c:	f001 fd94 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001710:	f648 0387 	movw	r3, #34951	; 0x8887
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	486a      	ldr	r0, [pc, #424]	; (80018d4 <MX_GPIO_Init+0x2f8>)
 800172a:	f001 fbc1 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 800172e:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	4864      	ldr	r0, [pc, #400]	; (80018d4 <MX_GPIO_Init+0x2f8>)
 8001744:	f001 fbb4 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001748:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174e:	2303      	movs	r3, #3
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	485d      	ldr	r0, [pc, #372]	; (80018d4 <MX_GPIO_Init+0x2f8>)
 800175e:	f001 fba7 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4857      	ldr	r0, [pc, #348]	; (80018d8 <MX_GPIO_Init+0x2fc>)
 800177c:	f001 fb98 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001780:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001786:	2303      	movs	r3, #3
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	4850      	ldr	r0, [pc, #320]	; (80018d8 <MX_GPIO_Init+0x2fc>)
 8001796:	f001 fb8b 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800179a:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a0:	2303      	movs	r3, #3
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	484b      	ldr	r0, [pc, #300]	; (80018dc <MX_GPIO_Init+0x300>)
 80017b0:	f001 fb7e 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80017b4:	f242 0302 	movw	r3, #8194	; 0x2002
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	4843      	ldr	r0, [pc, #268]	; (80018dc <MX_GPIO_Init+0x300>)
 80017ce:	f001 fb6f 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 80017d2:	f248 0304 	movw	r3, #32772	; 0x8004
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	483d      	ldr	r0, [pc, #244]	; (80018dc <MX_GPIO_Init+0x300>)
 80017e8:	f001 fb62 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80017ec:	f641 0305 	movw	r3, #6149	; 0x1805
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	4837      	ldr	r0, [pc, #220]	; (80018e0 <MX_GPIO_Init+0x304>)
 8001802:	f001 fb55 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001806:	f240 6302 	movw	r3, #1538	; 0x602
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	4830      	ldr	r0, [pc, #192]	; (80018e0 <MX_GPIO_Init+0x304>)
 8001820:	f001 fb46 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001824:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182a:	2303      	movs	r3, #3
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	482a      	ldr	r0, [pc, #168]	; (80018e4 <MX_GPIO_Init+0x308>)
 800183a:	f001 fb39 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800183e:	f244 0384 	movw	r3, #16516	; 0x4084
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	4823      	ldr	r0, [pc, #140]	; (80018e4 <MX_GPIO_Init+0x308>)
 8001858:	f001 fb2a 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 800185c:	f240 1343 	movw	r3, #323	; 0x143
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001862:	2303      	movs	r3, #3
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	481d      	ldr	r0, [pc, #116]	; (80018e8 <MX_GPIO_Init+0x30c>)
 8001872:	f001 fb1d 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001876:	f240 7304 	movw	r3, #1796	; 0x704
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187c:	2303      	movs	r3, #3
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	4818      	ldr	r0, [pc, #96]	; (80018ec <MX_GPIO_Init+0x310>)
 800188c:	f001 fb10 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	4811      	ldr	r0, [pc, #68]	; (80018ec <MX_GPIO_Init+0x310>)
 80018a6:	f001 fb03 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80018aa:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c0:	4619      	mov	r1, r3
 80018c2:	4809      	ldr	r0, [pc, #36]	; (80018e8 <MX_GPIO_Init+0x30c>)
 80018c4:	f001 faf4 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80018c8:	2318      	movs	r3, #24
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
 80018cc:	e010      	b.n	80018f0 <MX_GPIO_Init+0x314>
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40021400 	.word	0x40021400
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40021800 	.word	0x40021800
 80018ec:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_GPIO_Init+0x334>)
 8001904:	f001 fad4 	bl	8002eb0 <HAL_GPIO_Init>

}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	; 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40020c00 	.word	0x40020c00

08001914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191a:	f000 fd96 	bl	800244a <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t spannungen[12] = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	615a      	str	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192e:	f000 f917 	bl	8001b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001932:	f7ff fe53 	bl	80015dc <MX_GPIO_Init>
  MX_CAN1_Init();
 8001936:	f7ff fd43 	bl	80013c0 <MX_CAN1_Init>
  MX_SPI4_Init();
 800193a:	f000 fa0f 	bl	8001d5c <MX_SPI4_Init>
  MX_USART2_UART_Init();
 800193e:	f000 fce7 	bl	8002310 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001942:	f7ff fcab 	bl	800129c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001946:	f000 fb45 	bl	8001fd4 <MX_TIM1_Init>
  MX_TIM4_Init();
 800194a:	f000 fbc9 	bl	80020e0 <MX_TIM4_Init>
  MX_SPI1_Init();
 800194e:	f000 f9c7 	bl	8001ce0 <MX_SPI1_Init>
  MX_CAN3_Init();
 8001952:	f7ff fd6b 	bl	800142c <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001956:	f7ff faed 	bl	8000f34 <readResetSource>
 800195a:	4603      	mov	r3, r0
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fb3b 	bl	8000fd8 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001962:	213a      	movs	r1, #58	; 0x3a
 8001964:	486d      	ldr	r0, [pc, #436]	; (8001b1c <main+0x208>)
 8001966:	f7fe fdeb 	bl	8000540 <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 800196a:	f7ff fac1 	bl	8000ef0 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 800196e:	f7ff fc57 	bl	8001220 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001972:	f7ff fba1 	bl	80010b8 <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
    HAL_GPIO_WritePin(ISOSPI_EN_GPIO_Port, ISOSPI_EN_Pin, GPIO_PIN_SET);
 8001976:	2201      	movs	r2, #1
 8001978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800197c:	4868      	ldr	r0, [pc, #416]	; (8001b20 <main+0x20c>)
 800197e:	f001 fc5b 	bl	8003238 <HAL_GPIO_WritePin>

    uartTransmit("\n", 1);
 8001982:	2101      	movs	r1, #1
 8001984:	4867      	ldr	r0, [pc, #412]	; (8001b24 <main+0x210>)
 8001986:	f7fe fddb 	bl	8000540 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 800198a:	2122      	movs	r1, #34	; 0x22
 800198c:	4866      	ldr	r0, [pc, #408]	; (8001b28 <main+0x214>)
 800198e:	f7fe fdd7 	bl	8000540 <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 8001992:	f7fe ff1f 	bl	80007d4 <ltc6811_check>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	4b64      	ldr	r3, [pc, #400]	; (8001b2c <main+0x218>)
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <main+0x218>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01e      	beq.n	80019e4 <main+0xd0>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 80019a6:	211f      	movs	r1, #31
 80019a8:	4861      	ldr	r0, [pc, #388]	; (8001b30 <main+0x21c>)
 80019aa:	f7fe fdc9 	bl	8000540 <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 80019ae:	4a61      	ldr	r2, [pc, #388]	; (8001b34 <main+0x220>)
 80019b0:	7813      	ldrb	r3, [r2, #0]
 80019b2:	f043 0320 	orr.w	r3, r3, #32
 80019b6:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 80019b8:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <main+0x220>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019c8:	485b      	ldr	r0, [pc, #364]	; (8001b38 <main+0x224>)
 80019ca:	f001 fc35 	bl	8003238 <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <main+0x218>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	210a      	movs	r1, #10
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fdc7 	bl	8000568 <uartTransmitNumber>
		uartTransmit("\n", 1);
 80019da:	2101      	movs	r1, #1
 80019dc:	4851      	ldr	r0, [pc, #324]	; (8001b24 <main+0x210>)
 80019de:	f7fe fdaf 	bl	8000540 <uartTransmit>
 80019e2:	e003      	b.n	80019ec <main+0xd8>
		//return 0;														// Programm abbrechen
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 80019e4:	2120      	movs	r1, #32
 80019e6:	4855      	ldr	r0, [pc, #340]	; (8001b3c <main+0x228>)
 80019e8:	f7fe fdaa 	bl	8000540 <uartTransmit>
	}

	ltc6811_read(RDCFG, &data[0]);
 80019ec:	4954      	ldr	r1, [pc, #336]	; (8001b40 <main+0x22c>)
 80019ee:	2002      	movs	r0, #2
 80019f0:	f7fe fe4e 	bl	8000690 <ltc6811_read>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 80019f4:	f240 7011 	movw	r0, #1809	; 0x711
 80019f8:	f7fe fdf8 	bl	80005ec <ltc6811>
	ltc6811(CLRSTAT);
 80019fc:	f240 7013 	movw	r0, #1811	; 0x713
 8001a00:	f7fe fdf4 	bl	80005ec <ltc6811>
	ltc6811(CLRAUX);
 8001a04:	f240 7012 	movw	r0, #1810	; 0x712
 8001a08:	f7fe fdf0 	bl	80005ec <ltc6811>

	ltc6811(ADAX | MD262 | GPIOALL);
 8001a0c:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 8001a10:	f7fe fdec 	bl	80005ec <ltc6811>
	ltc6811_read(RDAUXA, &data[0]);
 8001a14:	494a      	ldr	r1, [pc, #296]	; (8001b40 <main+0x22c>)
 8001a16:	200c      	movs	r0, #12
 8001a18:	f7fe fe3a 	bl	8000690 <ltc6811_read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 8001a1c:	f44f 7058 	mov.w	r0, #864	; 0x360
 8001a20:	f7fe fde4 	bl	80005ec <ltc6811>
		HAL_Delay(300);
 8001a24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a28:	f000 fd6c 	bl	8002504 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 8001a2c:	4944      	ldr	r1, [pc, #272]	; (8001b40 <main+0x22c>)
 8001a2e:	2004      	movs	r0, #4
 8001a30:	f7fe fe2e 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 8001a34:	4943      	ldr	r1, [pc, #268]	; (8001b44 <main+0x230>)
 8001a36:	2006      	movs	r0, #6
 8001a38:	f7fe fe2a 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 8001a3c:	4942      	ldr	r1, [pc, #264]	; (8001b48 <main+0x234>)
 8001a3e:	2008      	movs	r0, #8
 8001a40:	f7fe fe26 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 8001a44:	4941      	ldr	r1, [pc, #260]	; (8001b4c <main+0x238>)
 8001a46:	200a      	movs	r0, #10
 8001a48:	f7fe fe22 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCFG, &data[26]);
 8001a4c:	4940      	ldr	r1, [pc, #256]	; (8001b50 <main+0x23c>)
 8001a4e:	2002      	movs	r0, #2
 8001a50:	f7fe fe1e 	bl	8000690 <ltc6811_read>

		for (uint8_t i = 0; i < 12; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	77fb      	strb	r3, [r7, #31]
 8001a58:	e018      	b.n	8001a8c <main+0x178>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a37      	ldr	r2, [pc, #220]	; (8001b40 <main+0x22c>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	7ffb      	ldrb	r3, [r7, #31]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4934      	ldr	r1, [pc, #208]	; (8001b40 <main+0x22c>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	7ffb      	ldrb	r3, [r7, #31]
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	f107 0120 	add.w	r1, r7, #32
 8001a80:	440b      	add	r3, r1
 8001a82:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < 12; i++)
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	77fb      	strb	r3, [r7, #31]
 8001a8c:	7ffb      	ldrb	r3, [r7, #31]
 8001a8e:	2b0b      	cmp	r3, #11
 8001a90:	d9e3      	bls.n	8001a5a <main+0x146>
		}

		for (uint8_t i = 0; i < 12; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	77bb      	strb	r3, [r7, #30]
 8001a96:	e011      	b.n	8001abc <main+0x1a8>
		{
			uartTransmitNumber(spannungen[i], 10);
 8001a98:	7fbb      	ldrb	r3, [r7, #30]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	f107 0220 	add.w	r2, r7, #32
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001aa6:	210a      	movs	r1, #10
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd5d 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4828      	ldr	r0, [pc, #160]	; (8001b54 <main+0x240>)
 8001ab2:	f7fe fd45 	bl	8000540 <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 8001ab6:	7fbb      	ldrb	r3, [r7, #30]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	77bb      	strb	r3, [r7, #30]
 8001abc:	7fbb      	ldrb	r3, [r7, #30]
 8001abe:	2b0b      	cmp	r3, #11
 8001ac0:	d9ea      	bls.n	8001a98 <main+0x184>
		}

		tmp = 0;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <main+0x244>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 12; i++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	777b      	strb	r3, [r7, #29]
 8001acc:	e00f      	b.n	8001aee <main+0x1da>
		{
			tmp += spannungen[i];
 8001ace:	7f7b      	ldrb	r3, [r7, #29]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	f107 0220 	add.w	r2, r7, #32
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <main+0x244>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <main+0x244>)
 8001ae6:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 12; i++)
 8001ae8:	7f7b      	ldrb	r3, [r7, #29]
 8001aea:	3301      	adds	r3, #1
 8001aec:	777b      	strb	r3, [r7, #29]
 8001aee:	7f7b      	ldrb	r3, [r7, #29]
 8001af0:	2b0b      	cmp	r3, #11
 8001af2:	d9ec      	bls.n	8001ace <main+0x1ba>
		}
		tmp /= 12;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <main+0x244>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <main+0x248>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	08db      	lsrs	r3, r3, #3
 8001b00:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <main+0x244>)
 8001b02:	6013      	str	r3, [r2, #0]
		uartTransmitNumber(tmp, 10);
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <main+0x244>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	210a      	movs	r1, #10
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd2c 	bl	8000568 <uartTransmitNumber>

		uartTransmit("\n", 1);
 8001b10:	2101      	movs	r1, #1
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <main+0x210>)
 8001b14:	f7fe fd14 	bl	8000540 <uartTransmit>
		ltc6811(ADCVC | MD73 | CELLALL);
 8001b18:	e780      	b.n	8001a1c <main+0x108>
 8001b1a:	bf00      	nop
 8001b1c:	08006fac 	.word	0x08006fac
 8001b20:	40021000 	.word	0x40021000
 8001b24:	08006fe8 	.word	0x08006fe8
 8001b28:	08006fec 	.word	0x08006fec
 8001b2c:	20000108 	.word	0x20000108
 8001b30:	08007010 	.word	0x08007010
 8001b34:	2000005c 	.word	0x2000005c
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	08007030 	.word	0x08007030
 8001b40:	2000002c 	.word	0x2000002c
 8001b44:	20000032 	.word	0x20000032
 8001b48:	20000038 	.word	0x20000038
 8001b4c:	2000003e 	.word	0x2000003e
 8001b50:	20000046 	.word	0x20000046
 8001b54:	08007050 	.word	0x08007050
 8001b58:	20000104 	.word	0x20000104
 8001b5c:	aaaaaaab 	.word	0xaaaaaaab

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b8      	sub	sp, #224	; 0xe0
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b6a:	2234      	movs	r2, #52	; 0x34
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 f8b6 	bl	8006ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	2290      	movs	r2, #144	; 0x90
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 f8a7 	bl	8006ce0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <SystemClock_Config+0x11c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a39      	ldr	r2, [pc, #228]	; (8001c7c <SystemClock_Config+0x11c>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <SystemClock_Config+0x11c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <SystemClock_Config+0x120>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a34      	ldr	r2, [pc, #208]	; (8001c80 <SystemClock_Config+0x120>)
 8001bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <SystemClock_Config+0x120>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001bde:	2319      	movs	r3, #25
 8001be0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001be4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 fb82 	bl	800330c <HAL_RCC_OscConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001c0e:	f000 f839 	bl	8001c84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c12:	f001 fb2b 	bl	800326c <HAL_PWREx_EnableOverDrive>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c1c:	f000 f832 	bl	8001c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c20:	230f      	movs	r3, #15
 8001c22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c46:	2107      	movs	r1, #7
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fe0d 	bl	8003868 <HAL_RCC_ClockConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001c54:	f000 f816 	bl	8001c84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 ffd5 	bl	8003c14 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8001c70:	f000 f808 	bl	8001c84 <Error_Handler>
  }
}
 8001c74:	bf00      	nop
 8001c76:	37e0      	adds	r7, #224	; 0xe0
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8001c8c:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <Error_Handler+0x50>)
 8001c8e:	7813      	ldrb	r3, [r2, #0]
 8001c90:	f043 0320 	orr.w	r3, r3, #32
 8001c94:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <Error_Handler+0x50>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca6:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <Error_Handler+0x54>)
 8001ca8:	f001 fac6 	bl	8003238 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001cac:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <Error_Handler+0x50>)
 8001cae:	7813      	ldrb	r3, [r2, #0]
 8001cb0:	f36f 1386 	bfc	r3, #6, #1
 8001cb4:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <Error_Handler+0x50>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <Error_Handler+0x54>)
 8001cc6:	f001 fab7 	bl	8003238 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8001cca:	2122      	movs	r1, #34	; 0x22
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <Error_Handler+0x58>)
 8001cce:	f7fe fc37 	bl	8000540 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8001cd2:	e7fe      	b.n	8001cd2 <Error_Handler+0x4e>
 8001cd4:	2000005c 	.word	0x2000005c
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	08007054 	.word	0x08007054

08001ce0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <MX_SPI1_Init+0x78>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001cfa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001cfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d2e:	2207      	movs	r2, #7
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d40:	f002 fb90 	bl	8004464 <HAL_SPI_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d4a:	f7ff ff9b 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000170 	.word	0x20000170
 8001d58:	40013000 	.word	0x40013000

08001d5c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <MX_SPI4_Init+0x78>)
 8001d64:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d6c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d7a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d7e:	2202      	movs	r2, #2
 8001d80:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d92:	2230      	movs	r2, #48	; 0x30
 8001d94:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001daa:	2207      	movs	r2, #7
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_SPI4_Init+0x74>)
 8001dbc:	f002 fb52 	bl	8004464 <HAL_SPI_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001dc6:	f7ff ff5d 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000010c 	.word	0x2000010c
 8001dd4:	40013400 	.word	0x40013400

08001dd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a3d      	ldr	r2, [pc, #244]	; (8001eec <HAL_SPI_MspInit+0x114>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d145      	bne.n	8001e86 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a3c      	ldr	r2, [pc, #240]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a36      	ldr	r2, [pc, #216]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e18:	f043 0308 	orr.w	r3, r3, #8
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a30      	ldr	r2, [pc, #192]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e52:	2305      	movs	r3, #5
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4825      	ldr	r0, [pc, #148]	; (8001ef4 <HAL_SPI_MspInit+0x11c>)
 8001e5e:	f001 f827 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001e62:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e74:	2305      	movs	r3, #5
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	481e      	ldr	r0, [pc, #120]	; (8001ef8 <HAL_SPI_MspInit+0x120>)
 8001e80:	f001 f816 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001e84:	e02d      	b.n	8001ee2 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_SPI_MspInit+0x124>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d128      	bne.n	8001ee2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001eae:	f043 0310 	orr.w	r3, r3, #16
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_SPI_MspInit+0x118>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001ec0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4808      	ldr	r0, [pc, #32]	; (8001f00 <HAL_SPI_MspInit+0x128>)
 8001ede:	f000 ffe7 	bl	8002eb0 <HAL_GPIO_Init>
}
 8001ee2:	bf00      	nop
 8001ee4:	3730      	adds	r7, #48	; 0x30
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40013000 	.word	0x40013000
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40013400 	.word	0x40013400
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_MspInit+0x44>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_MspInit+0x44>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_MspInit+0x44>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_MspInit+0x44>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_MspInit+0x44>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_MspInit+0x44>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler+0x4>

08001f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 fa90 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <SystemInit+0x28>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <SystemInit+0x28>)
 8001fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SystemInit+0x28>)
 8001fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fc2:	609a      	str	r2, [r3, #8]
#endif
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002002:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <MX_TIM1_Init+0x104>)
 8002004:	4a35      	ldr	r2, [pc, #212]	; (80020dc <MX_TIM1_Init+0x108>)
 8002006:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <MX_TIM1_Init+0x104>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <MX_TIM1_Init+0x104>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002014:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <MX_TIM1_Init+0x104>)
 8002016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <MX_TIM1_Init+0x104>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002022:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <MX_TIM1_Init+0x104>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <MX_TIM1_Init+0x104>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800202e:	482a      	ldr	r0, [pc, #168]	; (80020d8 <MX_TIM1_Init+0x104>)
 8002030:	f003 f983 	bl	800533a <HAL_TIM_IC_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800203a:	f7ff fe23 	bl	8001c84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800203e:	2304      	movs	r3, #4
 8002040:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002042:	2350      	movs	r3, #80	; 0x50
 8002044:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	481f      	ldr	r0, [pc, #124]	; (80020d8 <MX_TIM1_Init+0x104>)
 800205a:	f003 fb69 	bl	8005730 <HAL_TIM_SlaveConfigSynchro>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002064:	f7ff fe0e 	bl	8001c84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	2200      	movs	r2, #0
 800207e:	4619      	mov	r1, r3
 8002080:	4815      	ldr	r0, [pc, #84]	; (80020d8 <MX_TIM1_Init+0x104>)
 8002082:	f003 f9b1 	bl	80053e8 <HAL_TIM_IC_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800208c:	f7ff fdfa 	bl	8001c84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002090:	2302      	movs	r3, #2
 8002092:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002094:	2302      	movs	r3, #2
 8002096:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	2204      	movs	r2, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_TIM1_Init+0x104>)
 80020a2:	f003 f9a1 	bl	80053e8 <HAL_TIM_IC_ConfigChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80020ac:	f7ff fdea 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_TIM1_Init+0x104>)
 80020c2:	f004 f8af 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80020cc:	f7ff fdda 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020d0:	bf00      	nop
 80020d2:	3730      	adds	r7, #48	; 0x30
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000220 	.word	0x20000220
 80020dc:	40010000 	.word	0x40010000

080020e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	463b      	mov	r3, r7
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002106:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <MX_TIM4_Init+0xf4>)
 8002108:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <MX_TIM4_Init+0xf0>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800211c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800212a:	4829      	ldr	r0, [pc, #164]	; (80021d0 <MX_TIM4_Init+0xf0>)
 800212c:	f003 f8ae 	bl	800528c <HAL_TIM_PWM_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002136:	f7ff fda5 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	4821      	ldr	r0, [pc, #132]	; (80021d0 <MX_TIM4_Init+0xf0>)
 800214a:	f004 f86b 	bl	8006224 <HAL_TIMEx_MasterConfigSynchronization>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002154:	f7ff fd96 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002158:	2360      	movs	r3, #96	; 0x60
 800215a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	2200      	movs	r2, #0
 800216c:	4619      	mov	r1, r3
 800216e:	4818      	ldr	r0, [pc, #96]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002170:	f003 f9ce 	bl	8005510 <HAL_TIM_PWM_ConfigChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800217a:	f7ff fd83 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800217e:	463b      	mov	r3, r7
 8002180:	2204      	movs	r2, #4
 8002182:	4619      	mov	r1, r3
 8002184:	4812      	ldr	r0, [pc, #72]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002186:	f003 f9c3 	bl	8005510 <HAL_TIM_PWM_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002190:	f7ff fd78 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002194:	463b      	mov	r3, r7
 8002196:	2208      	movs	r2, #8
 8002198:	4619      	mov	r1, r3
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <MX_TIM4_Init+0xf0>)
 800219c:	f003 f9b8 	bl	8005510 <HAL_TIM_PWM_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80021a6:	f7ff fd6d 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021aa:	463b      	mov	r3, r7
 80021ac:	220c      	movs	r2, #12
 80021ae:	4619      	mov	r1, r3
 80021b0:	4807      	ldr	r0, [pc, #28]	; (80021d0 <MX_TIM4_Init+0xf0>)
 80021b2:	f003 f9ad 	bl	8005510 <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80021bc:	f7ff fd62 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM4_Init+0xf0>)
 80021c2:	f000 f86d 	bl	80022a0 <HAL_TIM_MspPostInit>

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200001d4 	.word	0x200001d4
 80021d4:	40000800 	.word	0x40000800

080021d8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_TIM_IC_MspInit+0x7c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d128      	bne.n	800224c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <HAL_TIM_IC_MspInit+0x80>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_TIM_IC_MspInit+0x80>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_TIM_IC_MspInit+0x80>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_TIM_IC_MspInit+0x80>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a10      	ldr	r2, [pc, #64]	; (8002258 <HAL_TIM_IC_MspInit+0x80>)
 8002218:	f043 0310 	orr.w	r3, r3, #16
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_TIM_IC_MspInit+0x80>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 800222a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800223c:	2301      	movs	r3, #1
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <HAL_TIM_IC_MspInit+0x84>)
 8002248:	f000 fe32 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800224c:	bf00      	nop
 800224e:	3728      	adds	r7, #40	; 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40010000 	.word	0x40010000
 8002258:	40023800 	.word	0x40023800
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <HAL_TIM_PWM_MspInit+0x38>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10b      	bne.n	800228a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_TIM_PWM_MspInit+0x3c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_TIM_PWM_MspInit+0x3c>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_TIM_PWM_MspInit+0x3c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40000800 	.word	0x40000800
 800229c:	40023800 	.word	0x40023800

080022a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a11      	ldr	r2, [pc, #68]	; (8002304 <HAL_TIM_MspPostInit+0x64>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11c      	bne.n	80022fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_TIM_MspPostInit+0x68>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_TIM_MspPostInit+0x68>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_TIM_MspPostInit+0x68>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80022da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80022de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_TIM_MspPostInit+0x6c>)
 80022f8:	f000 fdda 	bl	8002eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022fc:	bf00      	nop
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40000800 	.word	0x40000800
 8002308:	40023800 	.word	0x40023800
 800230c:	40020c00 	.word	0x40020c00

08002310 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <MX_USART2_UART_Init+0x58>)
 8002316:	4a15      	ldr	r2, [pc, #84]	; (800236c <MX_USART2_UART_Init+0x5c>)
 8002318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <MX_USART2_UART_Init+0x58>)
 800231c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <MX_USART2_UART_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <MX_USART2_UART_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_USART2_UART_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_USART2_UART_Init+0x58>)
 8002336:	220c      	movs	r2, #12
 8002338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <MX_USART2_UART_Init+0x58>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_USART2_UART_Init+0x58>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <MX_USART2_UART_Init+0x58>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_USART2_UART_Init+0x58>)
 800234e:	2200      	movs	r2, #0
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_USART2_UART_Init+0x58>)
 8002354:	f003 fff4 	bl	8006340 <HAL_UART_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800235e:	f7ff fc91 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000026c 	.word	0x2000026c
 800236c:	40004400 	.word	0x40004400

08002370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a17      	ldr	r2, [pc, #92]	; (80023ec <HAL_UART_MspInit+0x7c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d127      	bne.n	80023e2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_UART_MspInit+0x80>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_UART_MspInit+0x80>)
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_UART_MspInit+0x80>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_UART_MspInit+0x80>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_UART_MspInit+0x80>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_UART_MspInit+0x80>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023c2:	2360      	movs	r3, #96	; 0x60
 80023c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d2:	2307      	movs	r3, #7
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <HAL_UART_MspInit+0x84>)
 80023de:	f000 fd67 	bl	8002eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023e2:	bf00      	nop
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40004400 	.word	0x40004400
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020c00 	.word	0x40020c00

080023f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002430 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023fe:	e003      	b.n	8002408 <LoopCopyDataInit>

08002400 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002402:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002404:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002406:	3104      	adds	r1, #4

08002408 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002408:	480b      	ldr	r0, [pc, #44]	; (8002438 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800240c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800240e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002410:	d3f6      	bcc.n	8002400 <CopyDataInit>
  ldr  r2, =_sbss
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002414:	e002      	b.n	800241c <LoopFillZerobss>

08002416 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002416:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002418:	f842 3b04 	str.w	r3, [r2], #4

0800241c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800241e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002420:	d3f9      	bcc.n	8002416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002422:	f7ff fdc1 	bl	8001fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002426:	f004 fc37 	bl	8006c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242a:	f7ff fa73 	bl	8001914 <main>
  bx  lr    
 800242e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002430:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002434:	080072c8 	.word	0x080072c8
  ldr  r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800243c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002440:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002444:	200002f4 	.word	0x200002f4

08002448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC_IRQHandler>

0800244a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244e:	2003      	movs	r0, #3
 8002450:	f000 fcfa 	bl	8002e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002454:	2000      	movs	r0, #0
 8002456:	f000 f805 	bl	8002464 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800245a:	f7ff fd53 	bl	8001f04 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_InitTick+0x54>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_InitTick+0x58>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fd07 	bl	8002e96 <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00e      	b.n	80024b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d80a      	bhi.n	80024ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f000 fcdd 	bl	8002e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a4:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <HAL_InitTick+0x5c>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000008 	.word	0x20000008
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x20>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_IncTick+0x24>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000008 	.word	0x20000008
 80024e8:	200002f0 	.word	0x200002f0

080024ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_GetTick+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	200002f0 	.word	0x200002f0

08002504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff ffee 	bl	80024ec <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d005      	beq.n	800252a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_Delay+0x44>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252a:	bf00      	nop
 800252c:	f7ff ffde 	bl	80024ec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d8f7      	bhi.n	800252c <HAL_Delay+0x28>
  {
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000008 	.word	0x20000008

0800254c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8002550:	4b02      	ldr	r3, [pc, #8]	; (800255c <HAL_GetHalVersion+0x10>)
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	01020900 	.word	0x01020900

08002560 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_GetREVID+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0c1b      	lsrs	r3, r3, #16
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e0042000 	.word	0xe0042000

08002578 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_GetDEVID+0x18>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e0042000 	.word	0xe0042000

08002594 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_GetUIDw0+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	1ff0f420 	.word	0x1ff0f420

080025ac <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_GetUIDw1+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	1ff0f424 	.word	0x1ff0f424

080025c4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_GetUIDw2+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	1ff0f428 	.word	0x1ff0f428

080025dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e031      	b.n	8002656 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe fea0 	bl	8001340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_ADC_Init+0x84>)
 8002620:	4013      	ands	r3, r2
 8002622:	f043 0202 	orr.w	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f964 	bl	80028f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
 8002646:	e001      	b.n	800264c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	ffffeefd 	.word	0xffffeefd

08002664 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1c>
 800267c:	2302      	movs	r3, #2
 800267e:	e12a      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x272>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b09      	cmp	r3, #9
 800268e:	d93a      	bls.n	8002706 <HAL_ADC_ConfigChannel+0xa2>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002698:	d035      	beq.n	8002706 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68d9      	ldr	r1, [r3, #12]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	3b1e      	subs	r3, #30
 80026b0:	2207      	movs	r2, #7
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	400a      	ands	r2, r1
 80026be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a87      	ldr	r2, [pc, #540]	; (80028e4 <HAL_ADC_ConfigChannel+0x280>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10a      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	061a      	lsls	r2, r3, #24
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026de:	e035      	b.n	800274c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4403      	add	r3, r0
 80026f8:	3b1e      	subs	r3, #30
 80026fa:	409a      	lsls	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002704:	e022      	b.n	800274c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6919      	ldr	r1, [r3, #16]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	2207      	movs	r2, #7
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43da      	mvns	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	400a      	ands	r2, r1
 8002728:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6919      	ldr	r1, [r3, #16]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4618      	mov	r0, r3
 800273c:	4603      	mov	r3, r0
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4403      	add	r3, r0
 8002742:	409a      	lsls	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b06      	cmp	r3, #6
 8002752:	d824      	bhi.n	800279e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	3b05      	subs	r3, #5
 8002766:	221f      	movs	r2, #31
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	400a      	ands	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3b05      	subs	r3, #5
 8002790:	fa00 f203 	lsl.w	r2, r0, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	635a      	str	r2, [r3, #52]	; 0x34
 800279c:	e04c      	b.n	8002838 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d824      	bhi.n	80027f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	3b23      	subs	r3, #35	; 0x23
 80027b8:	221f      	movs	r2, #31
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	400a      	ands	r2, r1
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4618      	mov	r0, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b23      	subs	r3, #35	; 0x23
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
 80027ee:	e023      	b.n	8002838 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	3b41      	subs	r3, #65	; 0x41
 8002802:	221f      	movs	r2, #31
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43da      	mvns	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	400a      	ands	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	b29b      	uxth	r3, r3
 800281e:	4618      	mov	r0, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3b41      	subs	r3, #65	; 0x41
 800282c:	fa00 f203 	lsl.w	r2, r0, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <HAL_ADC_ConfigChannel+0x284>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10a      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1f4>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800284a:	d105      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 8002852:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002856:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <HAL_ADC_ConfigChannel+0x284>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d109      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x212>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b12      	cmp	r3, #18
 8002868:	d105      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 8002870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002874:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_ADC_ConfigChannel+0x284>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d125      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x268>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_ADC_ConfigChannel+0x280>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x22e>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b11      	cmp	r3, #17
 8002890:	d11c      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a15      	ldr	r2, [pc, #84]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 8002898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800289c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_ADC_ConfigChannel+0x280>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_ADC_ConfigChannel+0x28c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_ADC_ConfigChannel+0x290>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9a      	lsrs	r2, r3, #18
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028be:	e002      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f9      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	10000012 	.word	0x10000012
 80028e8:	40012000 	.word	0x40012000
 80028ec:	40012300 	.word	0x40012300
 80028f0:	20000000 	.word	0x20000000
 80028f4:	431bde83 	.word	0x431bde83

080028f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002900:	4b78      	ldr	r3, [pc, #480]	; (8002ae4 <ADC_Init+0x1ec>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a77      	ldr	r2, [pc, #476]	; (8002ae4 <ADC_Init+0x1ec>)
 8002906:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800290a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800290c:	4b75      	ldr	r3, [pc, #468]	; (8002ae4 <ADC_Init+0x1ec>)
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4973      	ldr	r1, [pc, #460]	; (8002ae4 <ADC_Init+0x1ec>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800294c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <ADC_Init+0x1f0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800299a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6899      	ldr	r1, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e00f      	b.n	80029f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0202 	bic.w	r2, r2, #2
 8002a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	005a      	lsls	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	035a      	lsls	r2, r3, #13
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e007      	b.n	8002a68 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	051a      	lsls	r2, r3, #20
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aaa:	025a      	lsls	r2, r3, #9
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	029a      	lsls	r2, r3, #10
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	0f000001 	.word	0x0f000001

08002aec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0ed      	b.n	8002cda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fcc4 	bl	8001498 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0202 	bic.w	r2, r2, #2
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b20:	f7ff fce4 	bl	80024ec <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b26:	e012      	b.n	8002b4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b28:	f7ff fce0 	bl	80024ec <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b0a      	cmp	r3, #10
 8002b34:	d90b      	bls.n	8002b4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2205      	movs	r2, #5
 8002b46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0c5      	b.n	8002cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e5      	bne.n	8002b28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6c:	f7ff fcbe 	bl	80024ec <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b72:	e012      	b.n	8002b9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b74:	f7ff fcba 	bl	80024ec <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b0a      	cmp	r3, #10
 8002b80:	d90b      	bls.n	8002b9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2205      	movs	r2, #5
 8002b92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e09f      	b.n	8002cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0e5      	beq.n	8002b74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7e1b      	ldrb	r3, [r3, #24]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d108      	bne.n	8002bc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e007      	b.n	8002bd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7e5b      	ldrb	r3, [r3, #25]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d108      	bne.n	8002bec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e007      	b.n	8002bfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7e9b      	ldrb	r3, [r3, #26]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d108      	bne.n	8002c16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0220 	orr.w	r2, r2, #32
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e007      	b.n	8002c26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0220 	bic.w	r2, r2, #32
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7edb      	ldrb	r3, [r3, #27]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d108      	bne.n	8002c40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0210 	bic.w	r2, r2, #16
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e007      	b.n	8002c50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0210 	orr.w	r2, r2, #16
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7f1b      	ldrb	r3, [r3, #28]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d108      	bne.n	8002c6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0208 	orr.w	r2, r2, #8
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e007      	b.n	8002c7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0208 	bic.w	r2, r2, #8
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7f5b      	ldrb	r3, [r3, #29]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d108      	bne.n	8002c94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0204 	orr.w	r2, r2, #4
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e007      	b.n	8002ca4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0204 	bic.w	r2, r2, #4
 8002ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	ea42 0103 	orr.w	r1, r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	1e5a      	subs	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <__NVIC_SetPriorityGrouping+0x40>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x40>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00
 8002d28:	05fa0000 	.word	0x05fa0000

08002d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e14:	d301      	bcc.n	8002e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00f      	b.n	8002e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <SysTick_Config+0x40>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e22:	210f      	movs	r1, #15
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f7ff ff8e 	bl	8002d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <SysTick_Config+0x40>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <SysTick_Config+0x40>)
 8002e34:	2207      	movs	r2, #7
 8002e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	e000e010 	.word	0xe000e010

08002e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ff47 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e70:	f7ff ff5c 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f7ff ff8e 	bl	8002d9c <NVIC_EncodePriority>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff5d 	bl	8002d48 <__NVIC_SetPriority>
}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ffb0 	bl	8002e04 <SysTick_Config>
 8002ea4:	4603      	mov	r3, r0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	e175      	b.n	80031bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	f040 8164 	bne.w	80031b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d00b      	beq.n	8002f0e <HAL_GPIO_Init+0x5e>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f02:	2b11      	cmp	r3, #17
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b12      	cmp	r3, #18
 8002f0c:	d130      	bne.n	8002f70 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	2203      	movs	r2, #3
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f44:	2201      	movs	r2, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 0201 	and.w	r2, r3, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x100>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b12      	cmp	r3, #18
 8002fae:	d123      	bne.n	8002ff8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	08da      	lsrs	r2, r3, #3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3208      	adds	r2, #8
 8002fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	220f      	movs	r2, #15
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	08da      	lsrs	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3208      	adds	r2, #8
 8002ff2:	69b9      	ldr	r1, [r7, #24]
 8002ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0203 	and.w	r2, r3, #3
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80be 	beq.w	80031b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303a:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_GPIO_Init+0x324>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4a65      	ldr	r2, [pc, #404]	; (80031d4 <HAL_GPIO_Init+0x324>)
 8003040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003044:	6453      	str	r3, [r2, #68]	; 0x44
 8003046:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <HAL_GPIO_Init+0x324>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003052:	4a61      	ldr	r2, [pc, #388]	; (80031d8 <HAL_GPIO_Init+0x328>)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	3302      	adds	r3, #2
 800305a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	220f      	movs	r2, #15
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_GPIO_Init+0x32c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d037      	beq.n	80030ee <HAL_GPIO_Init+0x23e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a57      	ldr	r2, [pc, #348]	; (80031e0 <HAL_GPIO_Init+0x330>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d031      	beq.n	80030ea <HAL_GPIO_Init+0x23a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a56      	ldr	r2, [pc, #344]	; (80031e4 <HAL_GPIO_Init+0x334>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d02b      	beq.n	80030e6 <HAL_GPIO_Init+0x236>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a55      	ldr	r2, [pc, #340]	; (80031e8 <HAL_GPIO_Init+0x338>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d025      	beq.n	80030e2 <HAL_GPIO_Init+0x232>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a54      	ldr	r2, [pc, #336]	; (80031ec <HAL_GPIO_Init+0x33c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01f      	beq.n	80030de <HAL_GPIO_Init+0x22e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a53      	ldr	r2, [pc, #332]	; (80031f0 <HAL_GPIO_Init+0x340>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x22a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a52      	ldr	r2, [pc, #328]	; (80031f4 <HAL_GPIO_Init+0x344>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x226>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a51      	ldr	r2, [pc, #324]	; (80031f8 <HAL_GPIO_Init+0x348>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x222>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a50      	ldr	r2, [pc, #320]	; (80031fc <HAL_GPIO_Init+0x34c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x21e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4f      	ldr	r2, [pc, #316]	; (8003200 <HAL_GPIO_Init+0x350>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x21a>
 80030c6:	2309      	movs	r3, #9
 80030c8:	e012      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030ca:	230a      	movs	r3, #10
 80030cc:	e010      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030ce:	2308      	movs	r3, #8
 80030d0:	e00e      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030d2:	2307      	movs	r3, #7
 80030d4:	e00c      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030d6:	2306      	movs	r3, #6
 80030d8:	e00a      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030da:	2305      	movs	r3, #5
 80030dc:	e008      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030de:	2304      	movs	r3, #4
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030e2:	2303      	movs	r3, #3
 80030e4:	e004      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e002      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x240>
 80030ee:	2300      	movs	r3, #0
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	f002 0203 	and.w	r2, r2, #3
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	4093      	lsls	r3, r2
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003100:	4935      	ldr	r1, [pc, #212]	; (80031d8 <HAL_GPIO_Init+0x328>)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <HAL_GPIO_Init+0x354>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003132:	4a34      	ldr	r2, [pc, #208]	; (8003204 <HAL_GPIO_Init+0x354>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003138:	4b32      	ldr	r3, [pc, #200]	; (8003204 <HAL_GPIO_Init+0x354>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800315c:	4a29      	ldr	r2, [pc, #164]	; (8003204 <HAL_GPIO_Init+0x354>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_GPIO_Init+0x354>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003186:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <HAL_GPIO_Init+0x354>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318c:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_GPIO_Init+0x354>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b0:	4a14      	ldr	r2, [pc, #80]	; (8003204 <HAL_GPIO_Init+0x354>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	f67f ae86 	bls.w	8002ed0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40013800 	.word	0x40013800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40020400 	.word	0x40020400
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40021400 	.word	0x40021400
 80031f4:	40021800 	.word	0x40021800
 80031f8:	40021c00 	.word	0x40021c00
 80031fc:	40022000 	.word	0x40022000
 8003200:	40022400 	.word	0x40022400
 8003204:	40013c00 	.word	0x40013c00

08003208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	e001      	b.n	800322a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
 8003244:	4613      	mov	r3, r2
 8003246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003248:	787b      	ldrb	r3, [r7, #1]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003254:	e003      	b.n	800325e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003256:	887b      	ldrh	r3, [r7, #2]
 8003258:	041a      	lsls	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	619a      	str	r2, [r3, #24]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_PWREx_EnableOverDrive+0x98>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_PWREx_EnableOverDrive+0x98>)
 800327c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_PWREx_EnableOverDrive+0x98>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800328e:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800329a:	f7ff f927 	bl	80024ec <HAL_GetTick>
 800329e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032a0:	e009      	b.n	80032b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032a2:	f7ff f923 	bl	80024ec <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b0:	d901      	bls.n	80032b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e022      	b.n	80032fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c2:	d1ee      	bne.n	80032a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032c4:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d0:	f7ff f90c 	bl	80024ec <HAL_GetTick>
 80032d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032d6:	e009      	b.n	80032ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d8:	f7ff f908 	bl	80024ec <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e6:	d901      	bls.n	80032ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e007      	b.n	80032fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f8:	d1ee      	bne.n	80032d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	40007000 	.word	0x40007000

0800330c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e29b      	b.n	800385a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8087 	beq.w	800343e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003330:	4b96      	ldr	r3, [pc, #600]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b04      	cmp	r3, #4
 800333a:	d00c      	beq.n	8003356 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333c:	4b93      	ldr	r3, [pc, #588]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d112      	bne.n	800336e <HAL_RCC_OscConfig+0x62>
 8003348:	4b90      	ldr	r3, [pc, #576]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003354:	d10b      	bne.n	800336e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003356:	4b8d      	ldr	r3, [pc, #564]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d06c      	beq.n	800343c <HAL_RCC_OscConfig+0x130>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d168      	bne.n	800343c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e275      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x7a>
 8003378:	4b84      	ldr	r3, [pc, #528]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a83      	ldr	r2, [pc, #524]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800337e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	e02e      	b.n	80033e4 <HAL_RCC_OscConfig+0xd8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x9c>
 800338e:	4b7f      	ldr	r3, [pc, #508]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7e      	ldr	r2, [pc, #504]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b7c      	ldr	r3, [pc, #496]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7b      	ldr	r2, [pc, #492]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e01d      	b.n	80033e4 <HAL_RCC_OscConfig+0xd8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0xc0>
 80033b2:	4b76      	ldr	r3, [pc, #472]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b73      	ldr	r3, [pc, #460]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a72      	ldr	r2, [pc, #456]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0xd8>
 80033cc:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b6c      	ldr	r3, [pc, #432]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6b      	ldr	r2, [pc, #428]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7ff f87e 	bl	80024ec <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7ff f87a 	bl	80024ec <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e229      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b61      	ldr	r3, [pc, #388]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0xe8>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7ff f86a 	bl	80024ec <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7ff f866 	bl	80024ec <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e215      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	4b57      	ldr	r3, [pc, #348]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x110>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d069      	beq.n	800351e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800344a:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003456:	4b4d      	ldr	r3, [pc, #308]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b08      	cmp	r3, #8
 8003460:	d11c      	bne.n	800349c <HAL_RCC_OscConfig+0x190>
 8003462:	4b4a      	ldr	r3, [pc, #296]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d116      	bne.n	800349c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_RCC_OscConfig+0x17a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e1e9      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	493d      	ldr	r1, [pc, #244]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	e040      	b.n	800351e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d023      	beq.n	80034ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a4:	4b39      	ldr	r3, [pc, #228]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a38      	ldr	r2, [pc, #224]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7ff f81c 	bl	80024ec <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b8:	f7ff f818 	bl	80024ec <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1c7      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4929      	ldr	r1, [pc, #164]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
 80034ea:	e018      	b.n	800351e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a26      	ldr	r2, [pc, #152]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fff8 	bl	80024ec <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003500:	f7fe fff4 	bl	80024ec <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1a3      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d038      	beq.n	800359c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d019      	beq.n	8003566 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003536:	4a15      	ldr	r2, [pc, #84]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353e:	f7fe ffd5 	bl	80024ec <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003546:	f7fe ffd1 	bl	80024ec <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e180      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x23a>
 8003564:	e01a      	b.n	800359c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356a:	4a08      	ldr	r2, [pc, #32]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe ffbb 	bl	80024ec <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357a:	f7fe ffb7 	bl	80024ec <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d903      	bls.n	8003590 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e166      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
 800358c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b92      	ldr	r3, [pc, #584]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ee      	bne.n	800357a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a4 	beq.w	80036f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035aa:	4b8c      	ldr	r3, [pc, #560]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b89      	ldr	r3, [pc, #548]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a88      	ldr	r2, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b86      	ldr	r3, [pc, #536]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d2:	4b83      	ldr	r3, [pc, #524]	; (80037e0 <HAL_RCC_OscConfig+0x4d4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d118      	bne.n	8003610 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035de:	4b80      	ldr	r3, [pc, #512]	; (80037e0 <HAL_RCC_OscConfig+0x4d4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7f      	ldr	r2, [pc, #508]	; (80037e0 <HAL_RCC_OscConfig+0x4d4>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ea:	f7fe ff7f 	bl	80024ec <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fe ff7b 	bl	80024ec <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	; 0x64
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e12a      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003604:	4b76      	ldr	r3, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0x4d4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x31a>
 8003618:	4b70      	ldr	r3, [pc, #448]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a6f      	ldr	r2, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	e02d      	b.n	8003682 <HAL_RCC_OscConfig+0x376>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0x33c>
 800362e:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a6a      	ldr	r2, [pc, #424]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a67      	ldr	r2, [pc, #412]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
 8003646:	e01c      	b.n	8003682 <HAL_RCC_OscConfig+0x376>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b05      	cmp	r3, #5
 800364e:	d10c      	bne.n	800366a <HAL_RCC_OscConfig+0x35e>
 8003650:	4b62      	ldr	r3, [pc, #392]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a61      	ldr	r2, [pc, #388]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003656:	f043 0304 	orr.w	r3, r3, #4
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	4b5f      	ldr	r3, [pc, #380]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a5e      	ldr	r2, [pc, #376]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	e00b      	b.n	8003682 <HAL_RCC_OscConfig+0x376>
 800366a:	4b5c      	ldr	r3, [pc, #368]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a5b      	ldr	r2, [pc, #364]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	4b59      	ldr	r3, [pc, #356]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a58      	ldr	r2, [pc, #352]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d015      	beq.n	80036b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368a:	f7fe ff2f 	bl	80024ec <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003692:	f7fe ff2b 	bl	80024ec <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0d8      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a8:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ee      	beq.n	8003692 <HAL_RCC_OscConfig+0x386>
 80036b4:	e014      	b.n	80036e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fe ff19 	bl	80024ec <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe ff15 	bl	80024ec <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0c2      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d4:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ee      	bne.n	80036be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d105      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e6:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a3c      	ldr	r2, [pc, #240]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80ae 	beq.w	8003858 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036fc:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d06d      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d14b      	bne.n	80037a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a31      	ldr	r2, [pc, #196]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800371a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fee6 	bl	80024ec <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fee2 	bl	80024ec <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e091      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	3b01      	subs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	071b      	lsls	r3, r3, #28
 800376e:	491b      	ldr	r1, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe feb4 	bl	80024ec <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe feb0 	bl	80024ec <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e05f      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x47c>
 80037a6:	e057      	b.n	8003858 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80037ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe fe9a 	bl	80024ec <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe fe96 	bl	80024ec <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e045      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x4b0>
 80037da:	e03d      	b.n	8003858 <HAL_RCC_OscConfig+0x54c>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037e4:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <HAL_RCC_OscConfig+0x558>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d030      	beq.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d129      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d122      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800381c:	4293      	cmp	r3, r2
 800381e:	d119      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d10f      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0d0      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003880:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d910      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b67      	ldr	r3, [pc, #412]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 020f 	bic.w	r2, r3, #15
 8003896:	4965      	ldr	r1, [pc, #404]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0b8      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c8:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	494d      	ldr	r1, [pc, #308]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d040      	beq.n	800398c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d115      	bne.n	800394a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e07f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d107      	bne.n	800393a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e073      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393a:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06b      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f023 0203 	bic.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4936      	ldr	r1, [pc, #216]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003958:	4313      	orrs	r3, r2
 800395a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395c:	f7fe fdc6 	bl	80024ec <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fe fdc2 	bl	80024ec <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e053      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 020c 	and.w	r2, r3, #12
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	429a      	cmp	r2, r3
 800398a:	d1eb      	bne.n	8003964 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800398c:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d210      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 020f 	bic.w	r2, r3, #15
 80039a2:	4922      	ldr	r1, [pc, #136]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e032      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4916      	ldr	r1, [pc, #88]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	490e      	ldr	r1, [pc, #56]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039fa:	f000 f821 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	490a      	ldr	r1, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x1cc>)
 8003a0c:	5ccb      	ldrb	r3, [r1, r3]
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1d0>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_RCC_ClockConfig+0x1d4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fd22 	bl	8002464 <HAL_InitTick>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00
 8003a30:	40023800 	.word	0x40023800
 8003a34:	08007278 	.word	0x08007278
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	20000004 	.word	0x20000004

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a46:	2100      	movs	r1, #0
 8003a48:	6079      	str	r1, [r7, #4]
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	60f9      	str	r1, [r7, #12]
 8003a4e:	2100      	movs	r1, #0
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a52:	2100      	movs	r1, #0
 8003a54:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a56:	4952      	ldr	r1, [pc, #328]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a58:	6889      	ldr	r1, [r1, #8]
 8003a5a:	f001 010c 	and.w	r1, r1, #12
 8003a5e:	2908      	cmp	r1, #8
 8003a60:	d00d      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x3e>
 8003a62:	2908      	cmp	r1, #8
 8003a64:	f200 8094 	bhi.w	8003b90 <HAL_RCC_GetSysClockFreq+0x150>
 8003a68:	2900      	cmp	r1, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x32>
 8003a6c:	2904      	cmp	r1, #4
 8003a6e:	d003      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x38>
 8003a70:	e08e      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a72:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a74:	60bb      	str	r3, [r7, #8]
      break;
 8003a76:	e08e      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a7a:	60bb      	str	r3, [r7, #8]
      break;
 8003a7c:	e08b      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a7e:	4948      	ldr	r1, [pc, #288]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a80:	6849      	ldr	r1, [r1, #4]
 8003a82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a86:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a88:	4945      	ldr	r1, [pc, #276]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a8a:	6849      	ldr	r1, [r1, #4]
 8003a8c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a90:	2900      	cmp	r1, #0
 8003a92:	d024      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a94:	4942      	ldr	r1, [pc, #264]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a96:	6849      	ldr	r1, [r1, #4]
 8003a98:	0989      	lsrs	r1, r1, #6
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003aa4:	f04f 0500 	mov.w	r5, #0
 8003aa8:	ea00 0204 	and.w	r2, r0, r4
 8003aac:	ea01 0305 	and.w	r3, r1, r5
 8003ab0:	493d      	ldr	r1, [pc, #244]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ab2:	fb01 f003 	mul.w	r0, r1, r3
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	fb01 f102 	mul.w	r1, r1, r2
 8003abc:	1844      	adds	r4, r0, r1
 8003abe:	493a      	ldr	r1, [pc, #232]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ac0:	fba2 0101 	umull	r0, r1, r2, r1
 8003ac4:	1863      	adds	r3, r4, r1
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f7fc fbba 	bl	8000248 <__aeabi_uldivmod>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e04a      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ade:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	ea02 0400 	and.w	r4, r2, r0
 8003af6:	ea03 0501 	and.w	r5, r3, r1
 8003afa:	4620      	mov	r0, r4
 8003afc:	4629      	mov	r1, r5
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	014b      	lsls	r3, r1, #5
 8003b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b0c:	0142      	lsls	r2, r0, #5
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	1b00      	subs	r0, r0, r4
 8003b14:	eb61 0105 	sbc.w	r1, r1, r5
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	018b      	lsls	r3, r1, #6
 8003b22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b26:	0182      	lsls	r2, r0, #6
 8003b28:	1a12      	subs	r2, r2, r0
 8003b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b2e:	f04f 0000 	mov.w	r0, #0
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	00d9      	lsls	r1, r3, #3
 8003b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b3c:	00d0      	lsls	r0, r2, #3
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	1912      	adds	r2, r2, r4
 8003b44:	eb45 0303 	adc.w	r3, r5, r3
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0299      	lsls	r1, r3, #10
 8003b52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b56:	0290      	lsls	r0, r2, #10
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	f7fc fb6e 	bl	8000248 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4613      	mov	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	60bb      	str	r3, [r7, #8]
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b92:	60bb      	str	r3, [r7, #8]
      break;
 8003b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b96:	68bb      	ldr	r3, [r7, #8]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	017d7840 	.word	0x017d7840

08003bac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000000 	.word	0x20000000

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc8:	f7ff fff0 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0a9b      	lsrs	r3, r3, #10
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	08007288 	.word	0x08007288

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf0:	f7ff ffdc 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0b5b      	lsrs	r3, r3, #13
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	08007288 	.word	0x08007288

08003c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c3c:	4b69      	ldr	r3, [pc, #420]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a68      	ldr	r2, [pc, #416]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c46:	6093      	str	r3, [r2, #8]
 8003c48:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	4964      	ldr	r1, [pc, #400]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d017      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c6e:	4b5d      	ldr	r3, [pc, #372]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	4959      	ldr	r1, [pc, #356]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d017      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003caa:	4b4e      	ldr	r3, [pc, #312]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	494a      	ldr	r1, [pc, #296]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 808b 	beq.w	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b3a      	ldr	r3, [pc, #232]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	4a39      	ldr	r2, [pc, #228]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6413      	str	r3, [r2, #64]	; 0x40
 8003d04:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d10:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a34      	ldr	r2, [pc, #208]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1c:	f7fe fbe6 	bl	80024ec <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fe fbe2 	bl	80024ec <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e38f      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d36:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d42:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d035      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d02e      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d114      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe fbaa 	bl	80024ec <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7fe fba6 	bl	80024ec <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e351      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ee      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dca:	d111      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dda:	400b      	ands	r3, r1
 8003ddc:	4901      	ldr	r1, [pc, #4]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
 8003de2:	e00b      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40007000 	.word	0x40007000
 8003dec:	0ffffcff 	.word	0x0ffffcff
 8003df0:	4bb3      	ldr	r3, [pc, #716]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4ab2      	ldr	r2, [pc, #712]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dfa:	6093      	str	r3, [r2, #8]
 8003dfc:	4bb0      	ldr	r3, [pc, #704]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e08:	49ad      	ldr	r1, [pc, #692]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e1a:	4ba9      	ldr	r3, [pc, #676]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e20:	4aa7      	ldr	r2, [pc, #668]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e2a:	4ba5      	ldr	r3, [pc, #660]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	49a2      	ldr	r1, [pc, #648]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e48:	4b9d      	ldr	r3, [pc, #628]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e56:	499a      	ldr	r1, [pc, #616]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e6a:	4b95      	ldr	r3, [pc, #596]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e78:	4991      	ldr	r1, [pc, #580]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e8c:	4b8c      	ldr	r3, [pc, #560]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9a:	4989      	ldr	r1, [pc, #548]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eae:	4b84      	ldr	r3, [pc, #528]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4980      	ldr	r1, [pc, #512]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed0:	4b7b      	ldr	r3, [pc, #492]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	4978      	ldr	r1, [pc, #480]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef2:	4b73      	ldr	r3, [pc, #460]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f023 020c 	bic.w	r2, r3, #12
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f00:	496f      	ldr	r1, [pc, #444]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f14:	4b6a      	ldr	r3, [pc, #424]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	4967      	ldr	r1, [pc, #412]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f36:	4b62      	ldr	r3, [pc, #392]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f44:	495e      	ldr	r1, [pc, #376]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f58:	4b59      	ldr	r3, [pc, #356]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	4956      	ldr	r1, [pc, #344]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f7a:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	494d      	ldr	r1, [pc, #308]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f9c:	4b48      	ldr	r3, [pc, #288]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	4945      	ldr	r1, [pc, #276]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fbe:	4b40      	ldr	r3, [pc, #256]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fcc:	493c      	ldr	r1, [pc, #240]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fe0:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fee:	4934      	ldr	r1, [pc, #208]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d011      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004002:	4b2f      	ldr	r3, [pc, #188]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004010:	492b      	ldr	r1, [pc, #172]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800401c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004020:	d101      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004022:	2301      	movs	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004042:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004050:	491b      	ldr	r1, [pc, #108]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004064:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004074:	4912      	ldr	r1, [pc, #72]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004098:	4909      	ldr	r1, [pc, #36]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00f      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
 80040c4:	4986      	ldr	r1, [pc, #536]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040d8:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e8:	497d      	ldr	r1, [pc, #500]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d006      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80d6 	beq.w	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004104:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a75      	ldr	r2, [pc, #468]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800410e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004110:	f7fe f9ec 	bl	80024ec <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004118:	f7fe f9e8 	bl	80024ec <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e195      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800412a:	4b6d      	ldr	r3, [pc, #436]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d021      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11d      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004158:	4b61      	ldr	r3, [pc, #388]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415e:	0e1b      	lsrs	r3, r3, #24
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	019a      	lsls	r2, r3, #6
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	071b      	lsls	r3, r3, #28
 800417e:	4958      	ldr	r1, [pc, #352]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b0:	d129      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041b2:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041c0:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c6:	0f1b      	lsrs	r3, r3, #28
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	019a      	lsls	r2, r3, #6
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	061b      	lsls	r3, r3, #24
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	493e      	ldr	r1, [pc, #248]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041ee:	4b3c      	ldr	r3, [pc, #240]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f4:	f023 021f 	bic.w	r2, r3, #31
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	3b01      	subs	r3, #1
 80041fe:	4938      	ldr	r1, [pc, #224]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004212:	4b33      	ldr	r3, [pc, #204]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004218:	0e1b      	lsrs	r3, r3, #24
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004220:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004226:	0f1b      	lsrs	r3, r3, #28
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	019a      	lsls	r2, r3, #6
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	431a      	orrs	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	071b      	lsls	r3, r3, #28
 8004246:	4926      	ldr	r1, [pc, #152]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d011      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	019a      	lsls	r2, r3, #6
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	491a      	ldr	r1, [pc, #104]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004284:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428a:	f7fe f92f 	bl	80024ec <HAL_GetTick>
 800428e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004292:	f7fe f92b 	bl	80024ec <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b64      	cmp	r3, #100	; 0x64
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e0d8      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	f040 80ce 	bne.w	8004454 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fe f912 	bl	80024ec <HAL_GetTick>
 80042c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042ca:	e00b      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042cc:	f7fe f90e 	bl	80024ec <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d904      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0bb      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042e4:	4b5e      	ldr	r3, [pc, #376]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f0:	d0ec      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800430e:	2b00      	cmp	r3, #0
 8004310:	d02e      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d12a      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800431a:	4b51      	ldr	r3, [pc, #324]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004328:	4b4d      	ldr	r3, [pc, #308]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	0f1b      	lsrs	r3, r3, #28
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	019a      	lsls	r2, r3, #6
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	431a      	orrs	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	4944      	ldr	r1, [pc, #272]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004356:	4b42      	ldr	r3, [pc, #264]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	493d      	ldr	r1, [pc, #244]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d022      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004384:	d11d      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004386:	4b36      	ldr	r3, [pc, #216]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	0e1b      	lsrs	r3, r3, #24
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004394:	4b32      	ldr	r3, [pc, #200]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	0f1b      	lsrs	r3, r3, #28
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	019a      	lsls	r2, r3, #6
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	4929      	ldr	r1, [pc, #164]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d028      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043ce:	4b24      	ldr	r3, [pc, #144]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	0e1b      	lsrs	r3, r3, #24
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043dc:	4b20      	ldr	r3, [pc, #128]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	0c1b      	lsrs	r3, r3, #16
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	019a      	lsls	r2, r3, #6
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	431a      	orrs	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	071b      	lsls	r3, r3, #28
 8004402:	4917      	ldr	r1, [pc, #92]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	4911      	ldr	r1, [pc, #68]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442c:	f7fe f85e 	bl	80024ec <HAL_GetTick>
 8004430:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004434:	f7fe f85a 	bl	80024ec <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e007      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004452:	d1ef      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800

08004464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e09d      	b.n	80045b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004486:	d009      	beq.n	800449c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	61da      	str	r2, [r3, #28]
 800448e:	e005      	b.n	800449c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd fc8e 	bl	8001dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044dc:	d902      	bls.n	80044e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e002      	b.n	80044ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044f2:	d007      	beq.n	8004504 <HAL_SPI_Init+0xa0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	ea42 0103 	orr.w	r1, r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	f003 0204 	and.w	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004580:	ea42 0103 	orr.w	r1, r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b088      	sub	sp, #32
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_SPI_Transmit+0x22>
 80045d8:	2302      	movs	r3, #2
 80045da:	e158      	b.n	800488e <HAL_SPI_Transmit+0x2d4>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e4:	f7fd ff82 	bl	80024ec <HAL_GetTick>
 80045e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d002      	beq.n	8004600 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045fe:	e13d      	b.n	800487c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_SPI_Transmit+0x52>
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004610:	e134      	b.n	800487c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2203      	movs	r2, #3
 8004616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465c:	d10f      	bne.n	800467e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800467c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d007      	beq.n	800469c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800469a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046a4:	d94b      	bls.n	800473e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_SPI_Transmit+0xfa>
 80046ae:	8afb      	ldrh	r3, [r7, #22]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d13e      	bne.n	8004732 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	881a      	ldrh	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	1c9a      	adds	r2, r3, #2
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046d8:	e02b      	b.n	8004732 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d112      	bne.n	800470e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	881a      	ldrh	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	1c9a      	adds	r2, r3, #2
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800470c:	e011      	b.n	8004732 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800470e:	f7fd feed 	bl	80024ec <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d803      	bhi.n	8004726 <HAL_SPI_Transmit+0x16c>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d102      	bne.n	800472c <HAL_SPI_Transmit+0x172>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004730:	e0a4      	b.n	800487c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ce      	bne.n	80046da <HAL_SPI_Transmit+0x120>
 800473c:	e07c      	b.n	8004838 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_SPI_Transmit+0x192>
 8004746:	8afb      	ldrh	r3, [r7, #22]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d170      	bne.n	800482e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d912      	bls.n	800477c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	1c9a      	adds	r2, r3, #2
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b02      	subs	r3, #2
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	87da      	strh	r2, [r3, #62]	; 0x3e
 800477a:	e058      	b.n	800482e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	7812      	ldrb	r2, [r2, #0]
 8004788:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047a2:	e044      	b.n	800482e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d12b      	bne.n	800480a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d912      	bls.n	80047e2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	881a      	ldrh	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	1c9a      	adds	r2, r3, #2
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b02      	subs	r3, #2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047e0:	e025      	b.n	800482e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	7812      	ldrb	r2, [r2, #0]
 80047ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004808:	e011      	b.n	800482e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800480a:	f7fd fe6f 	bl	80024ec <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d803      	bhi.n	8004822 <HAL_SPI_Transmit+0x268>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d102      	bne.n	8004828 <HAL_SPI_Transmit+0x26e>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800482c:	e026      	b.n	800487c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1b5      	bne.n	80047a4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fcdf 	bl	8005200 <SPI_EndRxTxTransaction>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e000      	b.n	800487c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800487a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800488c:	7ffb      	ldrb	r3, [r7, #31]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b088      	sub	sp, #32
 800489a:	af02      	add	r7, sp, #8
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b2:	d112      	bne.n	80048da <HAL_SPI_Receive+0x44>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10e      	bne.n	80048da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2204      	movs	r2, #4
 80048c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	4613      	mov	r3, r2
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f910 	bl	8004af6 <HAL_SPI_TransmitReceive>
 80048d6:	4603      	mov	r3, r0
 80048d8:	e109      	b.n	8004aee <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_SPI_Receive+0x52>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e102      	b.n	8004aee <HAL_SPI_Receive+0x258>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048f0:	f7fd fdfc 	bl	80024ec <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d002      	beq.n	8004908 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004902:	2302      	movs	r3, #2
 8004904:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004906:	e0e9      	b.n	8004adc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_SPI_Receive+0x7e>
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004918:	e0e0      	b.n	8004adc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2204      	movs	r2, #4
 800491e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	88fa      	ldrh	r2, [r7, #6]
 800493a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004964:	d908      	bls.n	8004978 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	e007      	b.n	8004988 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004990:	d10f      	bne.n	80049b2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d007      	beq.n	80049d0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049d8:	d867      	bhi.n	8004aaa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049da:	e030      	b.n	8004a3e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d117      	bne.n	8004a1a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f103 020c 	add.w	r2, r3, #12
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a18:	e011      	b.n	8004a3e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a1a:	f7fd fd67 	bl	80024ec <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d803      	bhi.n	8004a32 <HAL_SPI_Receive+0x19c>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d102      	bne.n	8004a38 <HAL_SPI_Receive+0x1a2>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a3c:	e04e      	b.n	8004adc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1c8      	bne.n	80049dc <HAL_SPI_Receive+0x146>
 8004a4a:	e034      	b.n	8004ab6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d115      	bne.n	8004a86 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	b292      	uxth	r2, r2
 8004a66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	1c9a      	adds	r2, r3, #2
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a84:	e011      	b.n	8004aaa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a86:	f7fd fd31 	bl	80024ec <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d803      	bhi.n	8004a9e <HAL_SPI_Receive+0x208>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d102      	bne.n	8004aa4 <HAL_SPI_Receive+0x20e>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d102      	bne.n	8004aaa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004aa8:	e018      	b.n	8004adc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1ca      	bne.n	8004a4c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	6839      	ldr	r1, [r7, #0]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fb48 	bl	8005150 <SPI_EndRxTransaction>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	75fb      	strb	r3, [r7, #23]
 8004ad8:	e000      	b.n	8004adc <HAL_SPI_Receive+0x246>
  }

error :
 8004ada:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b08a      	sub	sp, #40	; 0x28
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b04:	2301      	movs	r3, #1
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x26>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e1fb      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x41e>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b24:	f7fd fce2 	bl	80024ec <HAL_GetTick>
 8004b28:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b30:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b40:	7efb      	ldrb	r3, [r7, #27]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d00e      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x6e>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4c:	d106      	bne.n	8004b5c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <HAL_SPI_TransmitReceive+0x66>
 8004b56:	7efb      	ldrb	r3, [r7, #27]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d003      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b62:	e1cd      	b.n	8004f00 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x80>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x80>
 8004b70:	887b      	ldrh	r3, [r7, #2]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b7c:	e1c0      	b.n	8004f00 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d003      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2205      	movs	r2, #5
 8004b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	887a      	ldrh	r2, [r7, #2]
 8004ba2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	887a      	ldrh	r2, [r7, #2]
 8004baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	887a      	ldrh	r2, [r7, #2]
 8004bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	887a      	ldrh	r2, [r7, #2]
 8004bbe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bd4:	d802      	bhi.n	8004bdc <HAL_SPI_TransmitReceive+0xe6>
 8004bd6:	8a3b      	ldrh	r3, [r7, #16]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d908      	bls.n	8004bee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bea:	605a      	str	r2, [r3, #4]
 8004bec:	e007      	b.n	8004bfe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bfc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d007      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c24:	d97c      	bls.n	8004d20 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x13e>
 8004c2e:	8a7b      	ldrh	r3, [r7, #18]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d169      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c58:	e056      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d11b      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x1aa>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x1aa>
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d113      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d11c      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x1f2>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	b292      	uxth	r2, r2
 8004cc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	1c9a      	adds	r2, r3, #2
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ce8:	f7fd fc00 	bl	80024ec <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d807      	bhi.n	8004d08 <HAL_SPI_TransmitReceive+0x212>
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d003      	beq.n	8004d08 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d06:	e0fb      	b.n	8004f00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1a3      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x164>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d19d      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x164>
 8004d1e:	e0df      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_SPI_TransmitReceive+0x23a>
 8004d28:	8a7b      	ldrh	r3, [r7, #18]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	f040 80cb 	bne.w	8004ec6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d912      	bls.n	8004d60 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	881a      	ldrh	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	1c9a      	adds	r2, r3, #2
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b02      	subs	r3, #2
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d5e:	e0b2      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	7812      	ldrb	r2, [r2, #0]
 8004d6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d86:	e09e      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d134      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x30a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d02f      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x30a>
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d12c      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d912      	bls.n	8004dd6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	881a      	ldrh	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b02      	subs	r3, #2
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dd4:	e012      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d148      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x3aa>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d042      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d923      	bls.n	8004e6e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	b292      	uxth	r2, r2
 8004e32:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	1c9a      	adds	r2, r3, #2
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b02      	subs	r3, #2
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d81f      	bhi.n	8004e9c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e6a:	605a      	str	r2, [r3, #4]
 8004e6c:	e016      	b.n	8004e9c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f103 020c 	add.w	r2, r3, #12
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	7812      	ldrb	r2, [r2, #0]
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ea0:	f7fd fb24 	bl	80024ec <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d803      	bhi.n	8004eb8 <HAL_SPI_TransmitReceive+0x3c2>
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d102      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x3c8>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ec4:	e01c      	b.n	8004f00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f af5b 	bne.w	8004d88 <HAL_SPI_TransmitReceive+0x292>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f47f af54 	bne.w	8004d88 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f98b 	bl	8005200 <SPI_EndRxTxTransaction>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	661a      	str	r2, [r3, #96]	; 0x60
 8004efc:	e000      	b.n	8004f00 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004efe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3728      	adds	r7, #40	; 0x28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f2c:	f7fd fade 	bl	80024ec <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	4413      	add	r3, r2
 8004f3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f3c:	f7fd fad6 	bl	80024ec <HAL_GetTick>
 8004f40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f42:	4b39      	ldr	r3, [pc, #228]	; (8005028 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	015b      	lsls	r3, r3, #5
 8004f48:	0d1b      	lsrs	r3, r3, #20
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f52:	e054      	b.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d050      	beq.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f5c:	f7fd fac6 	bl	80024ec <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d902      	bls.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d13d      	bne.n	8004fee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8a:	d111      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f94:	d004      	beq.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d107      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb8:	d10f      	bne.n	8004fda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e017      	b.n	800501e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	429a      	cmp	r2, r3
 800501a:	d19b      	bne.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000000 	.word	0x20000000

0800502c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800503a:	f7fd fa57 	bl	80024ec <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	4413      	add	r3, r2
 8005048:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800504a:	f7fd fa4f 	bl	80024ec <HAL_GetTick>
 800504e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005050:	4b3e      	ldr	r3, [pc, #248]	; (800514c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	00da      	lsls	r2, r3, #3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	0d1b      	lsrs	r3, r3, #20
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005068:	e062      	b.n	8005130 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005070:	d109      	bne.n	8005086 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005084:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d050      	beq.n	8005130 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800508e:	f7fd fa2d 	bl	80024ec <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	429a      	cmp	r2, r3
 800509c:	d902      	bls.n	80050a4 <SPI_WaitFifoStateUntilTimeout+0x78>
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d13d      	bne.n	8005120 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050bc:	d111      	bne.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c6:	d004      	beq.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d0:	d107      	bne.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	d10f      	bne.n	800510c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800510a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e010      	b.n	8005142 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3b01      	subs	r3, #1
 800512e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d194      	bne.n	800506a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000000 	.word	0x20000000

08005150 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005164:	d111      	bne.n	800518a <SPI_EndRxTransaction+0x3a>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800516e:	d004      	beq.n	800517a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005178:	d107      	bne.n	800518a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005188:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	2180      	movs	r1, #128	; 0x80
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff fec1 	bl	8004f1c <SPI_WaitFlagStateUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e023      	b.n	80051f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b8:	d11d      	bne.n	80051f6 <SPI_EndRxTransaction+0xa6>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c2:	d004      	beq.n	80051ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051cc:	d113      	bne.n	80051f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff ff26 	bl	800502c <SPI_WaitFifoStateUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e000      	b.n	80051f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2200      	movs	r2, #0
 8005214:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff ff07 	bl	800502c <SPI_WaitFifoStateUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e027      	b.n	8005284 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	2180      	movs	r1, #128	; 0x80
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7ff fe6c 	bl	8004f1c <SPI_WaitFlagStateUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524e:	f043 0220 	orr.w	r2, r3, #32
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e014      	b.n	8005284 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff fee0 	bl	800502c <SPI_WaitFifoStateUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005276:	f043 0220 	orr.w	r2, r3, #32
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e000      	b.n	8005284 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e049      	b.n	8005332 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fc ffd4 	bl	8002260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f000 fa72 	bl	80057b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e049      	b.n	80053e0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fc ff39 	bl	80021d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f000 fa1b 	bl	80057b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_IC_ConfigChannel+0x1a>
 80053fe:	2302      	movs	r3, #2
 8005400:	e082      	b.n	8005508 <HAL_TIM_IC_ConfigChannel+0x120>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	6819      	ldr	r1, [r3, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f000 fd56 	bl	8005ed0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 020c 	bic.w	r2, r2, #12
 8005432:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6999      	ldr	r1, [r3, #24]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	619a      	str	r2, [r3, #24]
 8005446:	e05a      	b.n	80054fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d11c      	bne.n	8005488 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f000 fdda 	bl	8006016 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005470:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6999      	ldr	r1, [r3, #24]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	021a      	lsls	r2, r3, #8
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	619a      	str	r2, [r3, #24]
 8005486:	e03a      	b.n	80054fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b08      	cmp	r3, #8
 800548c:	d11b      	bne.n	80054c6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6819      	ldr	r1, [r3, #0]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f000 fe27 	bl	80060f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 020c 	bic.w	r2, r2, #12
 80054b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69d9      	ldr	r1, [r3, #28]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
 80054c4:	e01b      	b.n	80054fe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6819      	ldr	r1, [r3, #0]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f000 fe47 	bl	8006168 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69d9      	ldr	r1, [r3, #28]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	021a      	lsls	r2, r3, #8
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005526:	2302      	movs	r3, #2
 8005528:	e0fd      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x216>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b14      	cmp	r3, #20
 8005536:	f200 80f0 	bhi.w	800571a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005595 	.word	0x08005595
 8005544:	0800571b 	.word	0x0800571b
 8005548:	0800571b 	.word	0x0800571b
 800554c:	0800571b 	.word	0x0800571b
 8005550:	080055d5 	.word	0x080055d5
 8005554:	0800571b 	.word	0x0800571b
 8005558:	0800571b 	.word	0x0800571b
 800555c:	0800571b 	.word	0x0800571b
 8005560:	08005617 	.word	0x08005617
 8005564:	0800571b 	.word	0x0800571b
 8005568:	0800571b 	.word	0x0800571b
 800556c:	0800571b 	.word	0x0800571b
 8005570:	08005657 	.word	0x08005657
 8005574:	0800571b 	.word	0x0800571b
 8005578:	0800571b 	.word	0x0800571b
 800557c:	0800571b 	.word	0x0800571b
 8005580:	08005699 	.word	0x08005699
 8005584:	0800571b 	.word	0x0800571b
 8005588:	0800571b 	.word	0x0800571b
 800558c:	0800571b 	.word	0x0800571b
 8005590:	080056d9 	.word	0x080056d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f9aa 	bl	80058f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0208 	orr.w	r2, r2, #8
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0204 	bic.w	r2, r2, #4
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	619a      	str	r2, [r3, #24]
      break;
 80055d2:	e0a3      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f9fc 	bl	80059d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6999      	ldr	r1, [r3, #24]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	021a      	lsls	r2, r3, #8
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	619a      	str	r2, [r3, #24]
      break;
 8005614:	e082      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fa53 	bl	8005ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0208 	orr.w	r2, r2, #8
 8005630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0204 	bic.w	r2, r2, #4
 8005640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	61da      	str	r2, [r3, #28]
      break;
 8005654:	e062      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 faa9 	bl	8005bb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69d9      	ldr	r1, [r3, #28]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	021a      	lsls	r2, r3, #8
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	61da      	str	r2, [r3, #28]
      break;
 8005696:	e041      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fae0 	bl	8005c64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0208 	orr.w	r2, r2, #8
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0204 	bic.w	r2, r2, #4
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056d6:	e021      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fb12 	bl	8005d08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	021a      	lsls	r2, r3, #8
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005718:	e000      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800571a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop

08005730 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005744:	2302      	movs	r3, #2
 8005746:	e031      	b.n	80057ac <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fb28 	bl	8005db0 <TIM_SlaveTimer_SetConfig>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e018      	b.n	80057ac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005788:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005798:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a40      	ldr	r2, [pc, #256]	; (80058c8 <TIM_Base_SetConfig+0x114>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d2:	d00f      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a3d      	ldr	r2, [pc, #244]	; (80058cc <TIM_Base_SetConfig+0x118>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a3c      	ldr	r2, [pc, #240]	; (80058d0 <TIM_Base_SetConfig+0x11c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a3b      	ldr	r2, [pc, #236]	; (80058d4 <TIM_Base_SetConfig+0x120>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a3a      	ldr	r2, [pc, #232]	; (80058d8 <TIM_Base_SetConfig+0x124>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d108      	bne.n	8005806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2f      	ldr	r2, [pc, #188]	; (80058c8 <TIM_Base_SetConfig+0x114>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d02b      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005814:	d027      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2c      	ldr	r2, [pc, #176]	; (80058cc <TIM_Base_SetConfig+0x118>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d023      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a2b      	ldr	r2, [pc, #172]	; (80058d0 <TIM_Base_SetConfig+0x11c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01f      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <TIM_Base_SetConfig+0x120>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01b      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a29      	ldr	r2, [pc, #164]	; (80058d8 <TIM_Base_SetConfig+0x124>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d017      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a28      	ldr	r2, [pc, #160]	; (80058dc <TIM_Base_SetConfig+0x128>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a27      	ldr	r2, [pc, #156]	; (80058e0 <TIM_Base_SetConfig+0x12c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00f      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a26      	ldr	r2, [pc, #152]	; (80058e4 <TIM_Base_SetConfig+0x130>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00b      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a25      	ldr	r2, [pc, #148]	; (80058e8 <TIM_Base_SetConfig+0x134>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d007      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a24      	ldr	r2, [pc, #144]	; (80058ec <TIM_Base_SetConfig+0x138>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d003      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a23      	ldr	r2, [pc, #140]	; (80058f0 <TIM_Base_SetConfig+0x13c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d108      	bne.n	8005878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a0a      	ldr	r2, [pc, #40]	; (80058c8 <TIM_Base_SetConfig+0x114>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_Base_SetConfig+0xf8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <TIM_Base_SetConfig+0x124>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d103      	bne.n	80058b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	615a      	str	r2, [r3, #20]
}
 80058ba:	bf00      	nop
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40010000 	.word	0x40010000
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40000c00 	.word	0x40000c00
 80058d8:	40010400 	.word	0x40010400
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800
 80058e8:	40001800 	.word	0x40001800
 80058ec:	40001c00 	.word	0x40001c00
 80058f0:	40002000 	.word	0x40002000

080058f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f023 0201 	bic.w	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4b2b      	ldr	r3, [pc, #172]	; (80059cc <TIM_OC1_SetConfig+0xd8>)
 8005920:	4013      	ands	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f023 0302 	bic.w	r3, r3, #2
 800593c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a21      	ldr	r2, [pc, #132]	; (80059d0 <TIM_OC1_SetConfig+0xdc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_OC1_SetConfig+0x64>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <TIM_OC1_SetConfig+0xe0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10c      	bne.n	8005972 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0308 	bic.w	r3, r3, #8
 800595e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 0304 	bic.w	r3, r3, #4
 8005970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <TIM_OC1_SetConfig+0xdc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_OC1_SetConfig+0x8e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <TIM_OC1_SetConfig+0xe0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d111      	bne.n	80059a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	fffeff8f 	.word	0xfffeff8f
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40010400 	.word	0x40010400

080059d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f023 0210 	bic.w	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4b2e      	ldr	r3, [pc, #184]	; (8005abc <TIM_OC2_SetConfig+0xe4>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0320 	bic.w	r3, r3, #32
 8005a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a23      	ldr	r2, [pc, #140]	; (8005ac0 <TIM_OC2_SetConfig+0xe8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_OC2_SetConfig+0x68>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <TIM_OC2_SetConfig+0xec>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10d      	bne.n	8005a5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <TIM_OC2_SetConfig+0xe8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_OC2_SetConfig+0x94>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <TIM_OC2_SetConfig+0xec>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d113      	bne.n	8005a94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	feff8fff 	.word	0xfeff8fff
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40010400 	.word	0x40010400

08005ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4b2d      	ldr	r3, [pc, #180]	; (8005ba8 <TIM_OC3_SetConfig+0xe0>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a22      	ldr	r2, [pc, #136]	; (8005bac <TIM_OC3_SetConfig+0xe4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <TIM_OC3_SetConfig+0x66>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <TIM_OC3_SetConfig+0xe8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d10d      	bne.n	8005b4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a17      	ldr	r2, [pc, #92]	; (8005bac <TIM_OC3_SetConfig+0xe4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_OC3_SetConfig+0x92>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <TIM_OC3_SetConfig+0xe8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d113      	bne.n	8005b82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	621a      	str	r2, [r3, #32]
}
 8005b9c:	bf00      	nop
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	fffeff8f 	.word	0xfffeff8f
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40010400 	.word	0x40010400

08005bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <TIM_OC4_SetConfig+0xa4>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <TIM_OC4_SetConfig+0xa8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_OC4_SetConfig+0x68>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a12      	ldr	r2, [pc, #72]	; (8005c60 <TIM_OC4_SetConfig+0xac>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d109      	bne.n	8005c30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	019b      	lsls	r3, r3, #6
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	feff8fff 	.word	0xfeff8fff
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400

08005c64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <TIM_OC5_SetConfig+0x98>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a12      	ldr	r2, [pc, #72]	; (8005d00 <TIM_OC5_SetConfig+0x9c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_OC5_SetConfig+0x5e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a11      	ldr	r2, [pc, #68]	; (8005d04 <TIM_OC5_SetConfig+0xa0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d109      	bne.n	8005cd6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	621a      	str	r2, [r3, #32]
}
 8005cf0:	bf00      	nop
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	fffeff8f 	.word	0xfffeff8f
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400

08005d08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <TIM_OC6_SetConfig+0x9c>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	051b      	lsls	r3, r3, #20
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <TIM_OC6_SetConfig+0xa0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC6_SetConfig+0x60>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a12      	ldr	r2, [pc, #72]	; (8005dac <TIM_OC6_SetConfig+0xa4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d109      	bne.n	8005d7c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	029b      	lsls	r3, r3, #10
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	feff8fff 	.word	0xfeff8fff
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40010400 	.word	0x40010400

08005db0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ecc <TIM_SlaveTimer_SetConfig+0x11c>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b70      	cmp	r3, #112	; 0x70
 8005df4:	d01a      	beq.n	8005e2c <TIM_SlaveTimer_SetConfig+0x7c>
 8005df6:	2b70      	cmp	r3, #112	; 0x70
 8005df8:	d860      	bhi.n	8005ebc <TIM_SlaveTimer_SetConfig+0x10c>
 8005dfa:	2b60      	cmp	r3, #96	; 0x60
 8005dfc:	d054      	beq.n	8005ea8 <TIM_SlaveTimer_SetConfig+0xf8>
 8005dfe:	2b60      	cmp	r3, #96	; 0x60
 8005e00:	d85c      	bhi.n	8005ebc <TIM_SlaveTimer_SetConfig+0x10c>
 8005e02:	2b50      	cmp	r3, #80	; 0x50
 8005e04:	d046      	beq.n	8005e94 <TIM_SlaveTimer_SetConfig+0xe4>
 8005e06:	2b50      	cmp	r3, #80	; 0x50
 8005e08:	d858      	bhi.n	8005ebc <TIM_SlaveTimer_SetConfig+0x10c>
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d019      	beq.n	8005e42 <TIM_SlaveTimer_SetConfig+0x92>
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d854      	bhi.n	8005ebc <TIM_SlaveTimer_SetConfig+0x10c>
 8005e12:	2b30      	cmp	r3, #48	; 0x30
 8005e14:	d054      	beq.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x110>
 8005e16:	2b30      	cmp	r3, #48	; 0x30
 8005e18:	d850      	bhi.n	8005ebc <TIM_SlaveTimer_SetConfig+0x10c>
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d050      	beq.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x110>
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d84c      	bhi.n	8005ebc <TIM_SlaveTimer_SetConfig+0x10c>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d04c      	beq.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x110>
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d04a      	beq.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005e2a:	e047      	b.n	8005ebc <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68d9      	ldr	r1, [r3, #12]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f000 f9d1 	bl	80061e2 <TIM_ETR_SetConfig>
      break;
 8005e40:	e03f      	b.n	8005ec2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b05      	cmp	r3, #5
 8005e48:	d101      	bne.n	8005e4e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e03a      	b.n	8005ec4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a1a      	ldr	r2, [r3, #32]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e74:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	621a      	str	r2, [r3, #32]
      break;
 8005e92:	e016      	b.n	8005ec2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	6899      	ldr	r1, [r3, #8]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f000 f889 	bl	8005fb8 <TIM_TI1_ConfigInputStage>
      break;
 8005ea6:	e00c      	b.n	8005ec2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	6899      	ldr	r1, [r3, #8]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f000 f8eb 	bl	8006090 <TIM_TI2_ConfigInputStage>
      break;
 8005eba:	e002      	b.n	8005ec2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005ebc:	bf00      	nop
 8005ebe:	e000      	b.n	8005ec2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005ec0:	bf00      	nop
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	fffefff8 	.word	0xfffefff8

08005ed0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a28      	ldr	r2, [pc, #160]	; (8005f9c <TIM_TI1_SetConfig+0xcc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d01b      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f04:	d017      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a25      	ldr	r2, [pc, #148]	; (8005fa0 <TIM_TI1_SetConfig+0xd0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a24      	ldr	r2, [pc, #144]	; (8005fa4 <TIM_TI1_SetConfig+0xd4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00f      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a23      	ldr	r2, [pc, #140]	; (8005fa8 <TIM_TI1_SetConfig+0xd8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00b      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a22      	ldr	r2, [pc, #136]	; (8005fac <TIM_TI1_SetConfig+0xdc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <TIM_TI1_SetConfig+0xe0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <TIM_TI1_SetConfig+0xe4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d101      	bne.n	8005f3a <TIM_TI1_SetConfig+0x6a>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <TIM_TI1_SetConfig+0x6c>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0303 	bic.w	r3, r3, #3
 8005f46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e003      	b.n	8005f5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f023 030a 	bic.w	r3, r3, #10
 8005f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f003 030a 	and.w	r3, r3, #10
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40010400 	.word	0x40010400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40001800 	.word	0x40001800

08005fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 030a 	bic.w	r3, r3, #10
 8005ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006016:	b480      	push	{r7}
 8006018:	b087      	sub	sp, #28
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f023 0210 	bic.w	r2, r3, #16
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006042:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	031b      	lsls	r3, r3, #12
 800605a:	b29b      	uxth	r3, r3
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006068:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f023 0210 	bic.w	r2, r3, #16
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	031b      	lsls	r3, r3, #12
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	621a      	str	r2, [r3, #32]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800612c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	b2db      	uxtb	r3, r3
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006140:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	621a      	str	r2, [r3, #32]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006194:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	031b      	lsls	r3, r3, #12
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	031b      	lsls	r3, r3, #12
 80061c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b087      	sub	sp, #28
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
 80061ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	021a      	lsls	r2, r3, #8
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	431a      	orrs	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4313      	orrs	r3, r2
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	609a      	str	r2, [r3, #8]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006238:	2302      	movs	r3, #2
 800623a:	e06d      	b.n	8006318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a30      	ldr	r2, [pc, #192]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2f      	ldr	r2, [pc, #188]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d108      	bne.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006276:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006288:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a20      	ldr	r2, [pc, #128]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d022      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ae:	d01d      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1d      	ldr	r2, [pc, #116]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1a      	ldr	r2, [pc, #104]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a15      	ldr	r2, [pc, #84]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a16      	ldr	r2, [pc, #88]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a15      	ldr	r2, [pc, #84]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d10c      	bne.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40000c00 	.word	0x40000c00
 8006338:	40014000 	.word	0x40014000
 800633c:	40001800 	.word	0x40001800

08006340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e040      	b.n	80063d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fc f804 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2224      	movs	r2, #36	; 0x24
 800636c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f8c0 	bl	8006504 <UART_SetConfig>
 8006384:	4603      	mov	r3, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e022      	b.n	80063d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fb16 	bl	80069c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fb9d 	bl	8006b0c <UART_CheckIdleState>
 80063d2:	4603      	mov	r3, r0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	f040 8081 	bne.w	80064f8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_UART_Transmit+0x26>
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e079      	b.n	80064fa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_UART_Transmit+0x38>
 8006410:	2302      	movs	r3, #2
 8006412:	e072      	b.n	80064fa <HAL_UART_Transmit+0x11e>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2221      	movs	r2, #33	; 0x21
 8006428:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800642a:	f7fc f85f 	bl	80024ec <HAL_GetTick>
 800642e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	88fa      	ldrh	r2, [r7, #6]
 8006434:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	88fa      	ldrh	r2, [r7, #6]
 800643c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006448:	d108      	bne.n	800645c <HAL_UART_Transmit+0x80>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	e003      	b.n	8006464 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006460:	2300      	movs	r3, #0
 8006462:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800646c:	e02c      	b.n	80064c8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2200      	movs	r2, #0
 8006476:	2180      	movs	r1, #128	; 0x80
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fb90 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e038      	b.n	80064fa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800649c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	3302      	adds	r3, #2
 80064a2:	61bb      	str	r3, [r7, #24]
 80064a4:	e007      	b.n	80064b6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	3301      	adds	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1cc      	bne.n	800646e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2200      	movs	r2, #0
 80064dc:	2140      	movs	r1, #64	; 0x40
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fb5d 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e005      	b.n	80064fa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4ba7      	ldr	r3, [pc, #668]	; (80067cc <UART_SetConfig+0x2c8>)
 8006530:	4013      	ands	r3, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	6979      	ldr	r1, [r7, #20]
 8006538:	430b      	orrs	r3, r1
 800653a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a95      	ldr	r2, [pc, #596]	; (80067d0 <UART_SetConfig+0x2cc>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d120      	bne.n	80065c2 <UART_SetConfig+0xbe>
 8006580:	4b94      	ldr	r3, [pc, #592]	; (80067d4 <UART_SetConfig+0x2d0>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	2b03      	cmp	r3, #3
 800658c:	d816      	bhi.n	80065bc <UART_SetConfig+0xb8>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x90>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065b1 	.word	0x080065b1
 800659c:	080065ab 	.word	0x080065ab
 80065a0:	080065b7 	.word	0x080065b7
 80065a4:	2301      	movs	r3, #1
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e14f      	b.n	800684a <UART_SetConfig+0x346>
 80065aa:	2302      	movs	r3, #2
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e14c      	b.n	800684a <UART_SetConfig+0x346>
 80065b0:	2304      	movs	r3, #4
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e149      	b.n	800684a <UART_SetConfig+0x346>
 80065b6:	2308      	movs	r3, #8
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e146      	b.n	800684a <UART_SetConfig+0x346>
 80065bc:	2310      	movs	r3, #16
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e143      	b.n	800684a <UART_SetConfig+0x346>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a84      	ldr	r2, [pc, #528]	; (80067d8 <UART_SetConfig+0x2d4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d132      	bne.n	8006632 <UART_SetConfig+0x12e>
 80065cc:	4b81      	ldr	r3, [pc, #516]	; (80067d4 <UART_SetConfig+0x2d0>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	2b0c      	cmp	r3, #12
 80065d8:	d828      	bhi.n	800662c <UART_SetConfig+0x128>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <UART_SetConfig+0xdc>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	08006615 	.word	0x08006615
 80065e4:	0800662d 	.word	0x0800662d
 80065e8:	0800662d 	.word	0x0800662d
 80065ec:	0800662d 	.word	0x0800662d
 80065f0:	08006621 	.word	0x08006621
 80065f4:	0800662d 	.word	0x0800662d
 80065f8:	0800662d 	.word	0x0800662d
 80065fc:	0800662d 	.word	0x0800662d
 8006600:	0800661b 	.word	0x0800661b
 8006604:	0800662d 	.word	0x0800662d
 8006608:	0800662d 	.word	0x0800662d
 800660c:	0800662d 	.word	0x0800662d
 8006610:	08006627 	.word	0x08006627
 8006614:	2300      	movs	r3, #0
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e117      	b.n	800684a <UART_SetConfig+0x346>
 800661a:	2302      	movs	r3, #2
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e114      	b.n	800684a <UART_SetConfig+0x346>
 8006620:	2304      	movs	r3, #4
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e111      	b.n	800684a <UART_SetConfig+0x346>
 8006626:	2308      	movs	r3, #8
 8006628:	77fb      	strb	r3, [r7, #31]
 800662a:	e10e      	b.n	800684a <UART_SetConfig+0x346>
 800662c:	2310      	movs	r3, #16
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e10b      	b.n	800684a <UART_SetConfig+0x346>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a69      	ldr	r2, [pc, #420]	; (80067dc <UART_SetConfig+0x2d8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d120      	bne.n	800667e <UART_SetConfig+0x17a>
 800663c:	4b65      	ldr	r3, [pc, #404]	; (80067d4 <UART_SetConfig+0x2d0>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006642:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006646:	2b30      	cmp	r3, #48	; 0x30
 8006648:	d013      	beq.n	8006672 <UART_SetConfig+0x16e>
 800664a:	2b30      	cmp	r3, #48	; 0x30
 800664c:	d814      	bhi.n	8006678 <UART_SetConfig+0x174>
 800664e:	2b20      	cmp	r3, #32
 8006650:	d009      	beq.n	8006666 <UART_SetConfig+0x162>
 8006652:	2b20      	cmp	r3, #32
 8006654:	d810      	bhi.n	8006678 <UART_SetConfig+0x174>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <UART_SetConfig+0x15c>
 800665a:	2b10      	cmp	r3, #16
 800665c:	d006      	beq.n	800666c <UART_SetConfig+0x168>
 800665e:	e00b      	b.n	8006678 <UART_SetConfig+0x174>
 8006660:	2300      	movs	r3, #0
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e0f1      	b.n	800684a <UART_SetConfig+0x346>
 8006666:	2302      	movs	r3, #2
 8006668:	77fb      	strb	r3, [r7, #31]
 800666a:	e0ee      	b.n	800684a <UART_SetConfig+0x346>
 800666c:	2304      	movs	r3, #4
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e0eb      	b.n	800684a <UART_SetConfig+0x346>
 8006672:	2308      	movs	r3, #8
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e0e8      	b.n	800684a <UART_SetConfig+0x346>
 8006678:	2310      	movs	r3, #16
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e0e5      	b.n	800684a <UART_SetConfig+0x346>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a57      	ldr	r2, [pc, #348]	; (80067e0 <UART_SetConfig+0x2dc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d120      	bne.n	80066ca <UART_SetConfig+0x1c6>
 8006688:	4b52      	ldr	r3, [pc, #328]	; (80067d4 <UART_SetConfig+0x2d0>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006692:	2bc0      	cmp	r3, #192	; 0xc0
 8006694:	d013      	beq.n	80066be <UART_SetConfig+0x1ba>
 8006696:	2bc0      	cmp	r3, #192	; 0xc0
 8006698:	d814      	bhi.n	80066c4 <UART_SetConfig+0x1c0>
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d009      	beq.n	80066b2 <UART_SetConfig+0x1ae>
 800669e:	2b80      	cmp	r3, #128	; 0x80
 80066a0:	d810      	bhi.n	80066c4 <UART_SetConfig+0x1c0>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <UART_SetConfig+0x1a8>
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d006      	beq.n	80066b8 <UART_SetConfig+0x1b4>
 80066aa:	e00b      	b.n	80066c4 <UART_SetConfig+0x1c0>
 80066ac:	2300      	movs	r3, #0
 80066ae:	77fb      	strb	r3, [r7, #31]
 80066b0:	e0cb      	b.n	800684a <UART_SetConfig+0x346>
 80066b2:	2302      	movs	r3, #2
 80066b4:	77fb      	strb	r3, [r7, #31]
 80066b6:	e0c8      	b.n	800684a <UART_SetConfig+0x346>
 80066b8:	2304      	movs	r3, #4
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e0c5      	b.n	800684a <UART_SetConfig+0x346>
 80066be:	2308      	movs	r3, #8
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e0c2      	b.n	800684a <UART_SetConfig+0x346>
 80066c4:	2310      	movs	r3, #16
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e0bf      	b.n	800684a <UART_SetConfig+0x346>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a45      	ldr	r2, [pc, #276]	; (80067e4 <UART_SetConfig+0x2e0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d125      	bne.n	8006720 <UART_SetConfig+0x21c>
 80066d4:	4b3f      	ldr	r3, [pc, #252]	; (80067d4 <UART_SetConfig+0x2d0>)
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e2:	d017      	beq.n	8006714 <UART_SetConfig+0x210>
 80066e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e8:	d817      	bhi.n	800671a <UART_SetConfig+0x216>
 80066ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ee:	d00b      	beq.n	8006708 <UART_SetConfig+0x204>
 80066f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f4:	d811      	bhi.n	800671a <UART_SetConfig+0x216>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <UART_SetConfig+0x1fe>
 80066fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fe:	d006      	beq.n	800670e <UART_SetConfig+0x20a>
 8006700:	e00b      	b.n	800671a <UART_SetConfig+0x216>
 8006702:	2300      	movs	r3, #0
 8006704:	77fb      	strb	r3, [r7, #31]
 8006706:	e0a0      	b.n	800684a <UART_SetConfig+0x346>
 8006708:	2302      	movs	r3, #2
 800670a:	77fb      	strb	r3, [r7, #31]
 800670c:	e09d      	b.n	800684a <UART_SetConfig+0x346>
 800670e:	2304      	movs	r3, #4
 8006710:	77fb      	strb	r3, [r7, #31]
 8006712:	e09a      	b.n	800684a <UART_SetConfig+0x346>
 8006714:	2308      	movs	r3, #8
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e097      	b.n	800684a <UART_SetConfig+0x346>
 800671a:	2310      	movs	r3, #16
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e094      	b.n	800684a <UART_SetConfig+0x346>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a30      	ldr	r2, [pc, #192]	; (80067e8 <UART_SetConfig+0x2e4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d125      	bne.n	8006776 <UART_SetConfig+0x272>
 800672a:	4b2a      	ldr	r3, [pc, #168]	; (80067d4 <UART_SetConfig+0x2d0>)
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006730:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006734:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006738:	d017      	beq.n	800676a <UART_SetConfig+0x266>
 800673a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800673e:	d817      	bhi.n	8006770 <UART_SetConfig+0x26c>
 8006740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006744:	d00b      	beq.n	800675e <UART_SetConfig+0x25a>
 8006746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674a:	d811      	bhi.n	8006770 <UART_SetConfig+0x26c>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <UART_SetConfig+0x254>
 8006750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006754:	d006      	beq.n	8006764 <UART_SetConfig+0x260>
 8006756:	e00b      	b.n	8006770 <UART_SetConfig+0x26c>
 8006758:	2301      	movs	r3, #1
 800675a:	77fb      	strb	r3, [r7, #31]
 800675c:	e075      	b.n	800684a <UART_SetConfig+0x346>
 800675e:	2302      	movs	r3, #2
 8006760:	77fb      	strb	r3, [r7, #31]
 8006762:	e072      	b.n	800684a <UART_SetConfig+0x346>
 8006764:	2304      	movs	r3, #4
 8006766:	77fb      	strb	r3, [r7, #31]
 8006768:	e06f      	b.n	800684a <UART_SetConfig+0x346>
 800676a:	2308      	movs	r3, #8
 800676c:	77fb      	strb	r3, [r7, #31]
 800676e:	e06c      	b.n	800684a <UART_SetConfig+0x346>
 8006770:	2310      	movs	r3, #16
 8006772:	77fb      	strb	r3, [r7, #31]
 8006774:	e069      	b.n	800684a <UART_SetConfig+0x346>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <UART_SetConfig+0x2e8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d137      	bne.n	80067f0 <UART_SetConfig+0x2ec>
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <UART_SetConfig+0x2d0>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800678a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800678e:	d017      	beq.n	80067c0 <UART_SetConfig+0x2bc>
 8006790:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006794:	d817      	bhi.n	80067c6 <UART_SetConfig+0x2c2>
 8006796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800679a:	d00b      	beq.n	80067b4 <UART_SetConfig+0x2b0>
 800679c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a0:	d811      	bhi.n	80067c6 <UART_SetConfig+0x2c2>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <UART_SetConfig+0x2aa>
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067aa:	d006      	beq.n	80067ba <UART_SetConfig+0x2b6>
 80067ac:	e00b      	b.n	80067c6 <UART_SetConfig+0x2c2>
 80067ae:	2300      	movs	r3, #0
 80067b0:	77fb      	strb	r3, [r7, #31]
 80067b2:	e04a      	b.n	800684a <UART_SetConfig+0x346>
 80067b4:	2302      	movs	r3, #2
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e047      	b.n	800684a <UART_SetConfig+0x346>
 80067ba:	2304      	movs	r3, #4
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e044      	b.n	800684a <UART_SetConfig+0x346>
 80067c0:	2308      	movs	r3, #8
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e041      	b.n	800684a <UART_SetConfig+0x346>
 80067c6:	2310      	movs	r3, #16
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e03e      	b.n	800684a <UART_SetConfig+0x346>
 80067cc:	efff69f3 	.word	0xefff69f3
 80067d0:	40011000 	.word	0x40011000
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40004400 	.word	0x40004400
 80067dc:	40004800 	.word	0x40004800
 80067e0:	40004c00 	.word	0x40004c00
 80067e4:	40005000 	.word	0x40005000
 80067e8:	40011400 	.word	0x40011400
 80067ec:	40007800 	.word	0x40007800
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a71      	ldr	r2, [pc, #452]	; (80069bc <UART_SetConfig+0x4b8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d125      	bne.n	8006846 <UART_SetConfig+0x342>
 80067fa:	4b71      	ldr	r3, [pc, #452]	; (80069c0 <UART_SetConfig+0x4bc>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006804:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006808:	d017      	beq.n	800683a <UART_SetConfig+0x336>
 800680a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800680e:	d817      	bhi.n	8006840 <UART_SetConfig+0x33c>
 8006810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006814:	d00b      	beq.n	800682e <UART_SetConfig+0x32a>
 8006816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681a:	d811      	bhi.n	8006840 <UART_SetConfig+0x33c>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <UART_SetConfig+0x324>
 8006820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006824:	d006      	beq.n	8006834 <UART_SetConfig+0x330>
 8006826:	e00b      	b.n	8006840 <UART_SetConfig+0x33c>
 8006828:	2300      	movs	r3, #0
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e00d      	b.n	800684a <UART_SetConfig+0x346>
 800682e:	2302      	movs	r3, #2
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e00a      	b.n	800684a <UART_SetConfig+0x346>
 8006834:	2304      	movs	r3, #4
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e007      	b.n	800684a <UART_SetConfig+0x346>
 800683a:	2308      	movs	r3, #8
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e004      	b.n	800684a <UART_SetConfig+0x346>
 8006840:	2310      	movs	r3, #16
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	e001      	b.n	800684a <UART_SetConfig+0x346>
 8006846:	2310      	movs	r3, #16
 8006848:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006852:	d15b      	bne.n	800690c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006854:	7ffb      	ldrb	r3, [r7, #31]
 8006856:	2b08      	cmp	r3, #8
 8006858:	d827      	bhi.n	80068aa <UART_SetConfig+0x3a6>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <UART_SetConfig+0x35c>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006885 	.word	0x08006885
 8006864:	0800688d 	.word	0x0800688d
 8006868:	08006895 	.word	0x08006895
 800686c:	080068ab 	.word	0x080068ab
 8006870:	0800689b 	.word	0x0800689b
 8006874:	080068ab 	.word	0x080068ab
 8006878:	080068ab 	.word	0x080068ab
 800687c:	080068ab 	.word	0x080068ab
 8006880:	080068a3 	.word	0x080068a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006884:	f7fd f99e 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8006888:	61b8      	str	r0, [r7, #24]
        break;
 800688a:	e013      	b.n	80068b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800688c:	f7fd f9ae 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8006890:	61b8      	str	r0, [r7, #24]
        break;
 8006892:	e00f      	b.n	80068b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006894:	4b4b      	ldr	r3, [pc, #300]	; (80069c4 <UART_SetConfig+0x4c0>)
 8006896:	61bb      	str	r3, [r7, #24]
        break;
 8006898:	e00c      	b.n	80068b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800689a:	f7fd f8d1 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 800689e:	61b8      	str	r0, [r7, #24]
        break;
 80068a0:	e008      	b.n	80068b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a6:	61bb      	str	r3, [r7, #24]
        break;
 80068a8:	e004      	b.n	80068b4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	77bb      	strb	r3, [r7, #30]
        break;
 80068b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d074      	beq.n	80069a4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	005a      	lsls	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	441a      	add	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b0f      	cmp	r3, #15
 80068d6:	d916      	bls.n	8006906 <UART_SetConfig+0x402>
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068de:	d212      	bcs.n	8006906 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f023 030f 	bic.w	r3, r3, #15
 80068e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	89fb      	ldrh	r3, [r7, #14]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	89fa      	ldrh	r2, [r7, #14]
 8006902:	60da      	str	r2, [r3, #12]
 8006904:	e04e      	b.n	80069a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	77bb      	strb	r3, [r7, #30]
 800690a:	e04b      	b.n	80069a4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800690c:	7ffb      	ldrb	r3, [r7, #31]
 800690e:	2b08      	cmp	r3, #8
 8006910:	d827      	bhi.n	8006962 <UART_SetConfig+0x45e>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <UART_SetConfig+0x414>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800693d 	.word	0x0800693d
 800691c:	08006945 	.word	0x08006945
 8006920:	0800694d 	.word	0x0800694d
 8006924:	08006963 	.word	0x08006963
 8006928:	08006953 	.word	0x08006953
 800692c:	08006963 	.word	0x08006963
 8006930:	08006963 	.word	0x08006963
 8006934:	08006963 	.word	0x08006963
 8006938:	0800695b 	.word	0x0800695b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800693c:	f7fd f942 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8006940:	61b8      	str	r0, [r7, #24]
        break;
 8006942:	e013      	b.n	800696c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006944:	f7fd f952 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8006948:	61b8      	str	r0, [r7, #24]
        break;
 800694a:	e00f      	b.n	800696c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800694c:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <UART_SetConfig+0x4c0>)
 800694e:	61bb      	str	r3, [r7, #24]
        break;
 8006950:	e00c      	b.n	800696c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006952:	f7fd f875 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 8006956:	61b8      	str	r0, [r7, #24]
        break;
 8006958:	e008      	b.n	800696c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695e:	61bb      	str	r3, [r7, #24]
        break;
 8006960:	e004      	b.n	800696c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	77bb      	strb	r3, [r7, #30]
        break;
 800696a:	bf00      	nop
    }

    if (pclk != 0U)
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d018      	beq.n	80069a4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	085a      	lsrs	r2, r3, #1
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	441a      	add	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	fbb2 f3f3 	udiv	r3, r2, r3
 8006984:	b29b      	uxth	r3, r3
 8006986:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b0f      	cmp	r3, #15
 800698c:	d908      	bls.n	80069a0 <UART_SetConfig+0x49c>
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006994:	d204      	bcs.n	80069a0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	60da      	str	r2, [r3, #12]
 800699e:	e001      	b.n	80069a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3720      	adds	r7, #32
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40007c00 	.word	0x40007c00
 80069c0:	40023800 	.word	0x40023800
 80069c4:	00f42400 	.word	0x00f42400

080069c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01a      	beq.n	8006ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac6:	d10a      	bne.n	8006ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
  }
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b1c:	f7fb fce6 	bl	80024ec <HAL_GetTick>
 8006b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d10e      	bne.n	8006b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f82d 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e023      	b.n	8006b96 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d10e      	bne.n	8006b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f817 	bl	8006b9e <UART_WaitOnFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e00d      	b.n	8006b96 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4613      	mov	r3, r2
 8006bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bae:	e05e      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb6:	d05a      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb8:	f7fb fc98 	bl	80024ec <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d302      	bcc.n	8006bce <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d11b      	bne.n	8006c06 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bdc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e043      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02c      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c22:	d124      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c3c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e00f      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4013      	ands	r3, r2
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	bf0c      	ite	eq
 8006c7e:	2301      	moveq	r3, #1
 8006c80:	2300      	movne	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d091      	beq.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <__libc_init_array>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4d0d      	ldr	r5, [pc, #52]	; (8006cd0 <__libc_init_array+0x38>)
 8006c9c:	4c0d      	ldr	r4, [pc, #52]	; (8006cd4 <__libc_init_array+0x3c>)
 8006c9e:	1b64      	subs	r4, r4, r5
 8006ca0:	10a4      	asrs	r4, r4, #2
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	42a6      	cmp	r6, r4
 8006ca6:	d109      	bne.n	8006cbc <__libc_init_array+0x24>
 8006ca8:	4d0b      	ldr	r5, [pc, #44]	; (8006cd8 <__libc_init_array+0x40>)
 8006caa:	4c0c      	ldr	r4, [pc, #48]	; (8006cdc <__libc_init_array+0x44>)
 8006cac:	f000 f864 	bl	8006d78 <_init>
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	42a6      	cmp	r6, r4
 8006cb8:	d105      	bne.n	8006cc6 <__libc_init_array+0x2e>
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc0:	4798      	blx	r3
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	e7ee      	b.n	8006ca4 <__libc_init_array+0xc>
 8006cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cca:	4798      	blx	r3
 8006ccc:	3601      	adds	r6, #1
 8006cce:	e7f2      	b.n	8006cb6 <__libc_init_array+0x1e>
 8006cd0:	080072c0 	.word	0x080072c0
 8006cd4:	080072c0 	.word	0x080072c0
 8006cd8:	080072c0 	.word	0x080072c0
 8006cdc:	080072c4 	.word	0x080072c4

08006ce0 <memset>:
 8006ce0:	4402      	add	r2, r0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d100      	bne.n	8006cea <memset+0xa>
 8006ce8:	4770      	bx	lr
 8006cea:	f803 1b01 	strb.w	r1, [r3], #1
 8006cee:	e7f9      	b.n	8006ce4 <memset+0x4>

08006cf0 <__utoa>:
 8006cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf2:	4c1f      	ldr	r4, [pc, #124]	; (8006d70 <__utoa+0x80>)
 8006cf4:	b08b      	sub	sp, #44	; 0x2c
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	466e      	mov	r6, sp
 8006cfc:	f104 0c20 	add.w	ip, r4, #32
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	6861      	ldr	r1, [r4, #4]
 8006d04:	4637      	mov	r7, r6
 8006d06:	c703      	stmia	r7!, {r0, r1}
 8006d08:	3408      	adds	r4, #8
 8006d0a:	4564      	cmp	r4, ip
 8006d0c:	463e      	mov	r6, r7
 8006d0e:	d1f7      	bne.n	8006d00 <__utoa+0x10>
 8006d10:	7921      	ldrb	r1, [r4, #4]
 8006d12:	7139      	strb	r1, [r7, #4]
 8006d14:	1e91      	subs	r1, r2, #2
 8006d16:	6820      	ldr	r0, [r4, #0]
 8006d18:	6038      	str	r0, [r7, #0]
 8006d1a:	2922      	cmp	r1, #34	; 0x22
 8006d1c:	f04f 0100 	mov.w	r1, #0
 8006d20:	d904      	bls.n	8006d2c <__utoa+0x3c>
 8006d22:	7019      	strb	r1, [r3, #0]
 8006d24:	460b      	mov	r3, r1
 8006d26:	4618      	mov	r0, r3
 8006d28:	b00b      	add	sp, #44	; 0x2c
 8006d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2c:	1e58      	subs	r0, r3, #1
 8006d2e:	4684      	mov	ip, r0
 8006d30:	fbb5 f7f2 	udiv	r7, r5, r2
 8006d34:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006d38:	fb02 5617 	mls	r6, r2, r7, r5
 8006d3c:	4476      	add	r6, lr
 8006d3e:	460c      	mov	r4, r1
 8006d40:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006d44:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006d48:	462e      	mov	r6, r5
 8006d4a:	42b2      	cmp	r2, r6
 8006d4c:	f101 0101 	add.w	r1, r1, #1
 8006d50:	463d      	mov	r5, r7
 8006d52:	d9ed      	bls.n	8006d30 <__utoa+0x40>
 8006d54:	2200      	movs	r2, #0
 8006d56:	545a      	strb	r2, [r3, r1]
 8006d58:	1919      	adds	r1, r3, r4
 8006d5a:	1aa5      	subs	r5, r4, r2
 8006d5c:	42aa      	cmp	r2, r5
 8006d5e:	dae2      	bge.n	8006d26 <__utoa+0x36>
 8006d60:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006d64:	780e      	ldrb	r6, [r1, #0]
 8006d66:	7006      	strb	r6, [r0, #0]
 8006d68:	3201      	adds	r2, #1
 8006d6a:	f801 5901 	strb.w	r5, [r1], #-1
 8006d6e:	e7f4      	b.n	8006d5a <__utoa+0x6a>
 8006d70:	08007290 	.word	0x08007290

08006d74 <utoa>:
 8006d74:	f7ff bfbc 	b.w	8006cf0 <__utoa>

08006d78 <_init>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	bf00      	nop
 8006d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7e:	bc08      	pop	{r3}
 8006d80:	469e      	mov	lr, r3
 8006d82:	4770      	bx	lr

08006d84 <_fini>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	bf00      	nop
 8006d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8a:	bc08      	pop	{r3}
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	4770      	bx	lr
