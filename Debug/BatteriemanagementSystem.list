
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000751c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008024  08008024  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800802c  0800802c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800802c  0800802c  0001802c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008030  08008030  00018030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08008040  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08008040  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7b3  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003956  00000000  00000000  0003b7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0003f148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  000404a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c1de  00000000  00000000  00041660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1c0  00000000  00000000  0006d83e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108b54  00000000  00000000  000889fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00191552  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f40  00000000  00000000  001915a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080076fc 	.word	0x080076fc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080076fc 	.word	0x080076fc

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f006 fbbb 	bl	8006cd0 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000026c 	.word	0x2000026c

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f007 f8bc 	bl	80076f8 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f006 fb9a 	bl	8006cd0 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000026c 	.word	0x2000026c

080005a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d013      	beq.n	80005e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00b      	beq.n	80005e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	e000      	b.n	80005d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Chip wird geweckt.\n");
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <wakeup_ltc6811+0x54>)
 8000600:	f001 f90f 	bl	8001822 <ITM_SendString>
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000604:	2300      	movs	r3, #0
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	e017      	b.n	800063a <wakeup_ltc6811+0x42>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <wakeup_ltc6811+0x58>)
 8000612:	f003 fa2f 	bl	8003a74 <HAL_GPIO_WritePin>

		// Dummy Paket senden
		HAL_SPI_Transmit(&hspi4, (uint8_t*)0xAA, 1, 100);					// Chip wecken
 8000616:	2364      	movs	r3, #100	; 0x64
 8000618:	2201      	movs	r2, #1
 800061a:	21aa      	movs	r1, #170	; 0xaa
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <wakeup_ltc6811+0x5c>)
 800061e:	f004 fbea 	bl	8004df6 <HAL_SPI_Transmit>

		HAL_Delay(2);														// isoSPI braucht Zeit bis ready
 8000622:	2002      	movs	r0, #2
 8000624:	f002 fb80 	bl	8002d28 <HAL_Delay>

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062e:	4808      	ldr	r0, [pc, #32]	; (8000650 <wakeup_ltc6811+0x58>)
 8000630:	f003 fa20 	bl	8003a74 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	3301      	adds	r3, #1
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0e4      	beq.n	800060a <wakeup_ltc6811+0x12>
	}
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	080077c0 	.word	0x080077c0
 8000650:	40021000 	.word	0x40021000
 8000654:	2000010c 	.word	0x2000010c

08000658 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von Transcreceive LTC6811.\n");
 8000662:	4835      	ldr	r0, [pc, #212]	; (8000738 <ltc6811+0xe0>)
 8000664:	f001 f8dd 	bl	8001822 <ITM_SendString>
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f906 	bl	800087c <peccommand>
 8000670:	4603      	mov	r3, r0
 8000672:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000674:	f7ff ffc0 	bl	80005f8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	0a1b      	lsrs	r3, r3, #8
 800067c:	b29b      	uxth	r3, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0307 	and.w	r3, r3, #7
 8000684:	b2db      	uxtb	r3, r3
 8000686:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 800068e:	89bb      	ldrh	r3, [r7, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	b29b      	uxth	r3, r3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000698:	89bb      	ldrh	r3, [r7, #12]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	f023 0301 	bic.w	r3, r3, #1
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006aa:	4824      	ldr	r0, [pc, #144]	; (800073c <ltc6811+0xe4>)
 80006ac:	f003 f9e2 	bl	8003a74 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80006b0:	f107 0108 	add.w	r1, r7, #8
 80006b4:	2364      	movs	r3, #100	; 0x64
 80006b6:	2204      	movs	r2, #4
 80006b8:	4821      	ldr	r0, [pc, #132]	; (8000740 <ltc6811+0xe8>)
 80006ba:	f004 fb9c 	bl	8004df6 <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	f240 7223 	movw	r2, #1827	; 0x723
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d10e      	bne.n	80006e6 <ltc6811+0x8e>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e008      	b.n	80006e0 <ltc6811+0x88>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xFF, 1, 100);
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	2201      	movs	r2, #1
 80006d2:	21ff      	movs	r1, #255	; 0xff
 80006d4:	481a      	ldr	r0, [pc, #104]	; (8000740 <ltc6811+0xe8>)
 80006d6:	f004 fb8e 	bl	8004df6 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	3301      	adds	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2b08      	cmp	r3, #8
 80006e4:	d9f3      	bls.n	80006ce <ltc6811+0x76>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ec:	4813      	ldr	r0, [pc, #76]	; (800073c <ltc6811+0xe4>)
 80006ee:	f003 f9c1 	bl	8003a74 <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Command wurde gesendet.\n");
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <ltc6811+0xec>)
 80006f4:	f001 f895 	bl	8001822 <ITM_SendString>
	ITM_SendString("Folgendes wurde gesendet:");
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <ltc6811+0xf0>)
 80006fa:	f001 f892 	bl	8001822 <ITM_SendString>

	// Sende Command auf UART
	for (uint8_t i = 0; i < 4; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	73bb      	strb	r3, [r7, #14]
 8000702:	e00e      	b.n	8000722 <ltc6811+0xca>
	{
		ITM_SendChar(' ');
 8000704:	2020      	movs	r0, #32
 8000706:	f7ff ff4f 	bl	80005a8 <ITM_SendChar>
		ITM_SendNumber(cmd[i]);
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	f107 0210 	add.w	r2, r7, #16
 8000710:	4413      	add	r3, r2
 8000712:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f89a 	bl	8001850 <ITM_SendNumber>
	for (uint8_t i = 0; i < 4; i++)
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	3301      	adds	r3, #1
 8000720:	73bb      	strb	r3, [r7, #14]
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d9ed      	bls.n	8000704 <ltc6811+0xac>
	}
	ITM_SendChar('\n');
 8000728:	200a      	movs	r0, #10
 800072a:	f7ff ff3d 	bl	80005a8 <ITM_SendChar>
#endif
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	080077d4 	.word	0x080077d4
 800073c:	40021000 	.word	0x40021000
 8000740:	2000010c 	.word	0x2000010c
 8000744:	080077f8 	.word	0x080077f8
 8000748:	08007814 	.word	0x08007814

0800074c <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	80fb      	strh	r3, [r7, #6]
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Aufruf von Receive LTC6811.\n");
 8000758:	4842      	ldr	r0, [pc, #264]	; (8000864 <ltc6811_read+0x118>)
 800075a:	f001 f862 	bl	8001822 <ITM_SendString>
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f88b 	bl	800087c <peccommand>
 8000766:	4603      	mov	r3, r0
 8000768:	827b      	strh	r3, [r7, #18]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 800076a:	f7ff ff45 	bl	80005f8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b29b      	uxth	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	b2db      	uxtb	r3, r3
 800077c:	733b      	strb	r3, [r7, #12]
	cmd[1] = (command & 0xFF);
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	737b      	strb	r3, [r7, #13]
	cmd[2] = ((pec >> 8) & 0xFF);
 8000784:	8a7b      	ldrh	r3, [r7, #18]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (pec & 0xFE);
 800078e:	8a7b      	ldrh	r3, [r7, #18]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	f023 0301 	bic.w	r3, r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	73fb      	strb	r3, [r7, #15]

	// ISOCS einschalten
	ISOCS_ENABLE();
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a0:	4831      	ldr	r0, [pc, #196]	; (8000868 <ltc6811_read+0x11c>)
 80007a2:	f003 f967 	bl	8003a74 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80007a6:	f107 010c 	add.w	r1, r7, #12
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	2204      	movs	r2, #4
 80007ae:	482f      	ldr	r0, [pc, #188]	; (800086c <ltc6811_read+0x120>)
 80007b0:	f004 fb21 	bl	8004df6 <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	75fb      	strb	r3, [r7, #23]
 80007b8:	e00c      	b.n	80007d4 <ltc6811_read+0x88>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80007ba:	7dfb      	ldrb	r3, [r7, #23]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	461a      	mov	r2, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	1899      	adds	r1, r3, r2
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	2208      	movs	r2, #8
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <ltc6811_read+0x120>)
 80007ca:	f004 fc82 	bl	80050d2 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80007ce:	7dfb      	ldrb	r3, [r7, #23]
 80007d0:	3301      	adds	r3, #1
 80007d2:	75fb      	strb	r3, [r7, #23]
 80007d4:	7dfb      	ldrb	r3, [r7, #23]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0ef      	beq.n	80007ba <ltc6811_read+0x6e>
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e0:	4821      	ldr	r0, [pc, #132]	; (8000868 <ltc6811_read+0x11c>)
 80007e2:	f003 f947 	bl	8003a74 <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Command wurde empfangen.\n");
 80007e6:	4822      	ldr	r0, [pc, #136]	; (8000870 <ltc6811_read+0x124>)
 80007e8:	f001 f81b 	bl	8001822 <ITM_SendString>
	ITM_SendString("Folgendes wurde empfangen:");
 80007ec:	4821      	ldr	r0, [pc, #132]	; (8000874 <ltc6811_read+0x128>)
 80007ee:	f001 f818 	bl	8001822 <ITM_SendString>

	// Sende Command auf UART
	for (uint8_t i = 0; i < 4; i++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	75bb      	strb	r3, [r7, #22]
 80007f6:	e00e      	b.n	8000816 <ltc6811_read+0xca>
	{
		ITM_SendChar(' ');
 80007f8:	2020      	movs	r0, #32
 80007fa:	f7ff fed5 	bl	80005a8 <ITM_SendChar>
		ITM_SendNumber(cmd[i]);
 80007fe:	7dbb      	ldrb	r3, [r7, #22]
 8000800:	f107 0218 	add.w	r2, r7, #24
 8000804:	4413      	add	r3, r2
 8000806:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f820 	bl	8001850 <ITM_SendNumber>
	for (uint8_t i = 0; i < 4; i++)
 8000810:	7dbb      	ldrb	r3, [r7, #22]
 8000812:	3301      	adds	r3, #1
 8000814:	75bb      	strb	r3, [r7, #22]
 8000816:	7dbb      	ldrb	r3, [r7, #22]
 8000818:	2b03      	cmp	r3, #3
 800081a:	d9ed      	bls.n	80007f8 <ltc6811_read+0xac>
	}
	ITM_SendChar('\n');
 800081c:	200a      	movs	r0, #10
 800081e:	f7ff fec3 	bl	80005a8 <ITM_SendChar>

	ITM_SendString("Daten wurde empfangen.\n");
 8000822:	4815      	ldr	r0, [pc, #84]	; (8000878 <ltc6811_read+0x12c>)
 8000824:	f000 fffd 	bl	8001822 <ITM_SendString>
	ITM_SendString("Folgendes wurde empfangen:");
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <ltc6811_read+0x128>)
 800082a:	f000 fffa 	bl	8001822 <ITM_SendString>

	// Sende Daten auf UART
	for (uint8_t i = 0; i < 8; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	757b      	strb	r3, [r7, #21]
 8000832:	e00c      	b.n	800084e <ltc6811_read+0x102>
	{
		ITM_SendChar(' ');
 8000834:	2020      	movs	r0, #32
 8000836:	f7ff feb7 	bl	80005a8 <ITM_SendChar>
		ITM_SendNumber(data[i]);
 800083a:	7d7b      	ldrb	r3, [r7, #21]
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f804 	bl	8001850 <ITM_SendNumber>
	for (uint8_t i = 0; i < 8; i++)
 8000848:	7d7b      	ldrb	r3, [r7, #21]
 800084a:	3301      	adds	r3, #1
 800084c:	757b      	strb	r3, [r7, #21]
 800084e:	7d7b      	ldrb	r3, [r7, #21]
 8000850:	2b07      	cmp	r3, #7
 8000852:	d9ef      	bls.n	8000834 <ltc6811_read+0xe8>
	}
	ITM_SendChar('\n');
 8000854:	200a      	movs	r0, #10
 8000856:	f7ff fea7 	bl	80005a8 <ITM_SendChar>
#endif

	return 0;
 800085a:	2300      	movs	r3, #0
}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	08007868 	.word	0x08007868
 8000868:	40021000 	.word	0x40021000
 800086c:	2000010c 	.word	0x2000010c
 8000870:	08007888 	.word	0x08007888
 8000874:	080078a4 	.word	0x080078a4
 8000878:	080078c0 	.word	0x080078c0

0800087c <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	0a1b      	lsrs	r3, r3, #8
 8000890:	b29b      	uxth	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	b2db      	uxtb	r3, r3
 800089a:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	2002      	movs	r0, #2
 80008a4:	f000 f806 	bl	80008b4 <peclookup>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 80008c0:	2310      	movs	r3, #16
 80008c2:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	737b      	strb	r3, [r7, #13]
 80008c8:	e019      	b.n	80008fe <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 80008ca:	89fb      	ldrh	r3, [r7, #14]
 80008cc:	09db      	lsrs	r3, r3, #7
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
 80008d2:	6839      	ldr	r1, [r7, #0]
 80008d4:	440b      	add	r3, r1
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	4053      	eors	r3, r2
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	897b      	ldrh	r3, [r7, #10]
 80008ea:	490b      	ldr	r1, [pc, #44]	; (8000918 <peclookup+0x64>)
 80008ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	4053      	eors	r3, r2
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80008f8:	7b7b      	ldrb	r3, [r7, #13]
 80008fa:	3301      	adds	r3, #1
 80008fc:	737b      	strb	r3, [r7, #13]
 80008fe:	7b7a      	ldrb	r2, [r7, #13]
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	429a      	cmp	r2, r3
 8000904:	d3e1      	bcc.n	80008ca <peclookup+0x16>
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 8000906:	89fb      	ldrh	r3, [r7, #14]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	b29b      	uxth	r3, r3
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	08007de4 	.word	0x08007de4

0800091c <ltc6811_check>:
//----------------------------------------------------------------------

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b092      	sub	sp, #72	; 0x48
 8000920:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Check LTC6811.\n");
 8000922:	4849      	ldr	r0, [pc, #292]	; (8000a48 <ltc6811_check+0x12c>)
 8000924:	f000 ff7d 	bl	8001822 <ITM_SendString>
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	223c      	movs	r2, #60	; 0x3c
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f006 fe95 	bl	8007664 <memset>
 800093a:	2300      	movs	r3, #0
 800093c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000940:	f7ff fe5a 	bl	80005f8 <wakeup_ltc6811>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 8000944:	f240 7011 	movw	r0, #1809	; 0x711
 8000948:	f7ff fe86 	bl	8000658 <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 800094c:	f240 7012 	movw	r0, #1810	; 0x712
 8000950:	f7ff fe82 	bl	8000658 <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 8000954:	f240 7013 	movw	r0, #1811	; 0x713
 8000958:	f7ff fe7e 	bl	8000658 <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4619      	mov	r1, r3
 8000960:	2012      	movs	r0, #18
 8000962:	f7ff fef3 	bl	800074c <ltc6811_read>
		ITM_SendChar('\n');
#endif
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 8000966:	f44f 7090 	mov.w	r0, #288	; 0x120
 800096a:	f000 f879 	bl	8000a60 <ltc6811_test>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d111      	bne.n	8000998 <ltc6811_check+0x7c>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 8000974:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 1 Fehler");
 8000980:	4832      	ldr	r0, [pc, #200]	; (8000a4c <ltc6811_check+0x130>)
 8000982:	f000 ff4e 	bl	8001822 <ITM_SendString>
		ITM_SendChar('\n');
 8000986:	200a      	movs	r0, #10
 8000988:	f7ff fe0e 	bl	80005a8 <ITM_SendChar>
		ITM_SendChar('\n');
 800098c:	200a      	movs	r0, #10
 800098e:	f7ff fe0b 	bl	80005a8 <ITM_SendChar>
		ITM_SendChar('\n');
 8000992:	200a      	movs	r0, #10
 8000994:	f7ff fe08 	bl	80005a8 <ITM_SendChar>
#endif
	}

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000998:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800099c:	f000 f860 	bl	8000a60 <ltc6811_test>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d111      	bne.n	80009ca <ltc6811_check+0xae>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 80009a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 2 Fehler");
 80009b2:	4827      	ldr	r0, [pc, #156]	; (8000a50 <ltc6811_check+0x134>)
 80009b4:	f000 ff35 	bl	8001822 <ITM_SendString>
		ITM_SendChar('\n');
 80009b8:	200a      	movs	r0, #10
 80009ba:	f7ff fdf5 	bl	80005a8 <ITM_SendChar>
		ITM_SendChar('\n');
 80009be:	200a      	movs	r0, #10
 80009c0:	f7ff fdf2 	bl	80005a8 <ITM_SendChar>
		ITM_SendChar('\n');
 80009c4:	200a      	movs	r0, #10
 80009c6:	f7ff fdef 	bl	80005a8 <ITM_SendChar>
#endif
	}

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 80009ca:	f000 fa3d 	bl	8000e48 <ltc6811_diagn>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d111      	bne.n	80009f8 <ltc6811_check+0xdc>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 80009d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

#ifdef DEBUG_LTC6811
		ITM_SendString("Multiplexer Fehler");
 80009e0:	481c      	ldr	r0, [pc, #112]	; (8000a54 <ltc6811_check+0x138>)
 80009e2:	f000 ff1e 	bl	8001822 <ITM_SendString>
		ITM_SendChar('\n');
 80009e6:	200a      	movs	r0, #10
 80009e8:	f7ff fdde 	bl	80005a8 <ITM_SendChar>
		ITM_SendChar('\n');
 80009ec:	200a      	movs	r0, #10
 80009ee:	f7ff fddb 	bl	80005a8 <ITM_SendChar>
		ITM_SendChar('\n');
 80009f2:	200a      	movs	r0, #10
 80009f4:	f7ff fdd8 	bl	80005a8 <ITM_SendChar>
#endif
	}

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 80009f8:	f000 fa4c 	bl	8000e94 <ltc6811_openwire>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d111      	bne.n	8000a26 <ltc6811_check+0x10a>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 8000a02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

#ifdef DEBUG_LTC6811
		ITM_SendString("Openwire Fehler");
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <ltc6811_check+0x13c>)
 8000a10:	f000 ff07 	bl	8001822 <ITM_SendString>
		ITM_SendChar('\n');
 8000a14:	200a      	movs	r0, #10
 8000a16:	f7ff fdc7 	bl	80005a8 <ITM_SendChar>
		ITM_SendChar('\n');
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f7ff fdc4 	bl	80005a8 <ITM_SendChar>
		ITM_SendChar('\n');
 8000a20:	200a      	movs	r0, #10
 8000a22:	f7ff fdc1 	bl	80005a8 <ITM_SendChar>
#endif
	}

	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Error Code:\t");
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <ltc6811_check+0x140>)
 8000a28:	f000 fefb 	bl	8001822 <ITM_SendString>
	ITM_SendNumber(error);
 8000a2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 ff0d 	bl	8001850 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000a36:	200a      	movs	r0, #10
 8000a38:	f7ff fdb6 	bl	80005a8 <ITM_SendChar>
#endif

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3748      	adds	r7, #72	; 0x48
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	080078d8 	.word	0x080078d8
 8000a4c:	080078f4 	.word	0x080078f4
 8000a50:	08007908 	.word	0x08007908
 8000a54:	0800791c 	.word	0x0800791c
 8000a58:	08007930 	.word	0x08007930
 8000a5c:	08007940 	.word	0x08007940

08000a60 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	; 0x50
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	80fb      	strh	r3, [r7, #6]
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Test LTC6811.\n");
 8000a6a:	48e1      	ldr	r0, [pc, #900]	; (8000df0 <ltc6811_test+0x390>)
 8000a6c:	f000 fed9 	bl	8001822 <ITM_SendString>
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	223c      	movs	r2, #60	; 0x3c
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f006 fdf1 	bl	8007664 <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000a94:	f043 0303 	orr.w	r3, r3, #3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fddc 	bl	8000658 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000aa0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aa4:	f002 f940 	bl	8002d28 <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aae:	f043 0307 	orr.w	r3, r3, #7
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fdcf 	bl	8000658 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000aba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000abe:	f002 f933 	bl	8002d28 <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000ac8:	f043 0307 	orr.w	r3, r3, #7
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fdc2 	bl	8000658 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000ad4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ad8:	f002 f926 	bl	8002d28 <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2004      	movs	r0, #4
 8000ae4:	f7ff fe32 	bl	800074c <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	3308      	adds	r3, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	2006      	movs	r0, #6
 8000af2:	f7ff fe2b 	bl	800074c <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	3310      	adds	r3, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	2008      	movs	r0, #8
 8000b00:	f7ff fe24 	bl	800074c <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	3318      	adds	r3, #24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	200a      	movs	r0, #10
 8000b0e:	f7ff fe1d 	bl	800074c <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	3320      	adds	r3, #32
 8000b18:	4619      	mov	r1, r3
 8000b1a:	200c      	movs	r0, #12
 8000b1c:	f7ff fe16 	bl	800074c <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	3328      	adds	r3, #40	; 0x28
 8000b26:	4619      	mov	r1, r3
 8000b28:	200e      	movs	r0, #14
 8000b2a:	f7ff fe0f 	bl	800074c <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	3330      	adds	r3, #48	; 0x30
 8000b34:	4619      	mov	r1, r3
 8000b36:	2010      	movs	r0, #16
 8000b38:	f7ff fe08 	bl	800074c <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	3338      	adds	r3, #56	; 0x38
 8000b42:	4619      	mov	r1, r3
 8000b44:	2012      	movs	r0, #18
 8000b46:	f7ff fe01 	bl	800074c <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command & MD2714)													// Wenn Sampling Frequenz = MD2714
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d017      	beq.n	8000b84 <ltc6811_test+0x124>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{*/
			// Wenn Selbsttest 1 gewaehlt
			if (command & ST1)
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	f003 0320 	and.w	r3, r3, #32
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <ltc6811_test+0x108>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000b5e:	f249 5365 	movw	r3, #38245	; 0x9565
 8000b62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000b66:	e024      	b.n	8000bb2 <ltc6811_test+0x152>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command & ST2)
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d004      	beq.n	8000b7c <ltc6811_test+0x11c>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000b72:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000b76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000b7a:	e01a      	b.n	8000bb2 <ltc6811_test+0x152>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000b82:	e016      	b.n	8000bb2 <ltc6811_test+0x152>
//		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command & ST1)
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	f003 0320 	and.w	r3, r3, #32
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <ltc6811_test+0x138>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000b8e:	f249 5355 	movw	r3, #38229	; 0x9555
 8000b92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000b96:	e00c      	b.n	8000bb2 <ltc6811_test+0x152>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command & ST2)
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <ltc6811_test+0x14c>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000ba2:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000ba6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000baa:	e002      	b.n	8000bb2 <ltc6811_test+0x152>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000bb8:	e135      	b.n	8000e26 <ltc6811_test+0x3c6>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 8000bba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bbe:	2b1d      	cmp	r3, #29
 8000bc0:	f200 8118 	bhi.w	8000df4 <ltc6811_test+0x394>
 8000bc4:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <ltc6811_test+0x16c>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000c45 	.word	0x08000c45
 8000bd0:	08000c45 	.word	0x08000c45
 8000bd4:	08000c45 	.word	0x08000c45
 8000bd8:	08000c77 	.word	0x08000c77
 8000bdc:	08000c77 	.word	0x08000c77
 8000be0:	08000c77 	.word	0x08000c77
 8000be4:	08000cab 	.word	0x08000cab
 8000be8:	08000cab 	.word	0x08000cab
 8000bec:	08000cab 	.word	0x08000cab
 8000bf0:	08000ce1 	.word	0x08000ce1
 8000bf4:	08000ce1 	.word	0x08000ce1
 8000bf8:	08000ce1 	.word	0x08000ce1
 8000bfc:	08000d17 	.word	0x08000d17
 8000c00:	08000d17 	.word	0x08000d17
 8000c04:	08000d17 	.word	0x08000d17
 8000c08:	08000d4d 	.word	0x08000d4d
 8000c0c:	08000d4d 	.word	0x08000d4d
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d83 	.word	0x08000d83
 8000c18:	08000df5 	.word	0x08000df5
 8000c1c:	08000d83 	.word	0x08000d83
 8000c20:	08000db9 	.word	0x08000db9
 8000c24:	08000df5 	.word	0x08000df5
 8000c28:	08000df5 	.word	0x08000df5
 8000c2c:	08000df5 	.word	0x08000df5
 8000c30:	08000df5 	.word	0x08000df5
 8000c34:	08000df5 	.word	0x08000df5
 8000c38:	08000df5 	.word	0x08000df5
 8000c3c:	08000df5 	.word	0x08000df5
 8000c40:	08000d83 	.word	0x08000d83
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000c44:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c50:	4413      	add	r3, r2
 8000c52:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c64:	440b      	add	r3, r1
 8000c66:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000c74:	e0bf      	b.n	8000df6 <ltc6811_test+0x396>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3] << 8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000c76:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	3303      	adds	r3, #3
 8000c7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c82:	4413      	add	r3, r2
 8000c84:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c90:	3301      	adds	r3, #1
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c98:	440b      	add	r3, r1
 8000c9a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000ca8:	e0a5      	b.n	8000df6 <ltc6811_test+0x396>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1] << 8)|tmp_data[(i+2)*2]);		// Register CVC umwandeln
 8000caa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cae:	3302      	adds	r3, #2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000cb8:	4413      	add	r3, r2
 8000cba:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000cce:	440b      	add	r3, r1
 8000cd0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000cde:	e08a      	b.n	8000df6 <ltc6811_test+0x396>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3] << 8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000ce0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	3303      	adds	r3, #3
 8000cea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000cee:	4413      	add	r3, r2
 8000cf0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cfc:	3303      	adds	r3, #3
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d04:	440b      	add	r3, r1
 8000d06:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d14:	e06f      	b.n	8000df6 <ltc6811_test+0x396>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1] << 8)|tmp_data[(i+4)*2]);		// Register AUXA umwandeln
 8000d16:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	3301      	adds	r3, #1
 8000d20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d24:	4413      	add	r3, r2
 8000d26:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d32:	3304      	adds	r3, #4
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d4a:	e054      	b.n	8000df6 <ltc6811_test+0x396>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3] << 8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000d4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d50:	3304      	adds	r3, #4
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	3303      	adds	r3, #3
 8000d56:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d68:	3305      	adds	r3, #5
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d70:	440b      	add	r3, r1
 8000d72:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d80:	e039      	b.n	8000df6 <ltc6811_test+0x396>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+1] << 8)|tmp_data[(i+6)*2]);		// Register STATA umwandeln
 8000d82:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d86:	3306      	adds	r3, #6
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d90:	4413      	add	r3, r2
 8000d92:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	b21a      	sxth	r2, r3
 8000d9a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d9e:	3306      	adds	r3, #6
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000da6:	440b      	add	r3, r1
 8000da8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000db6:	e01e      	b.n	8000df6 <ltc6811_test+0x396>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000db8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dbc:	3306      	adds	r3, #6
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000dc6:	4413      	add	r3, r2
 8000dc8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dd4:	3307      	adds	r3, #7
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000ddc:	440b      	add	r3, r1
 8000dde:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000dec:	e003      	b.n	8000df6 <ltc6811_test+0x396>
 8000dee:	bf00      	nop
 8000df0:	08007950 	.word	0x08007950
			// Kein Register
			default:
				break;
 8000df4:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000df6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000dfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d00c      	beq.n	8000e1c <ltc6811_test+0x3bc>
		{
			ITM_SendString("Test failed: ");
 8000e02:	480f      	ldr	r0, [pc, #60]	; (8000e40 <ltc6811_test+0x3e0>)
 8000e04:	f000 fd0d 	bl	8001822 <ITM_SendString>
			ITM_SendNumber(i);
 8000e08:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fd1f 	bl	8001850 <ITM_SendNumber>
			ITM_SendChar('\n');
 8000e12:	200a      	movs	r0, #10
 8000e14:	f7ff fbc8 	bl	80005a8 <ITM_SendChar>
			return 1;														// Selbsttest 1 nicht OK
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e00d      	b.n	8000e38 <ltc6811_test+0x3d8>
	for (uint8_t i=0; i<22; i++)
 8000e1c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e20:	3301      	adds	r3, #1
 8000e22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000e26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e2a:	2b15      	cmp	r3, #21
 8000e2c:	f67f aec5 	bls.w	8000bba <ltc6811_test+0x15a>
		}
	}

	ITM_SendString("Test passed");
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <ltc6811_test+0x3e4>)
 8000e32:	f000 fcf6 	bl	8001822 <ITM_SendString>
	return 0;																// Selbsttest 1 OK
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3750      	adds	r7, #80	; 0x50
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	0800796c 	.word	0x0800796c
 8000e44:	0800797c 	.word	0x0800797c

08000e48 <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Diagnostic LTC6811.\n");
 8000e4e:	4810      	ldr	r0, [pc, #64]	; (8000e90 <ltc6811_diagn+0x48>)
 8000e50:	f000 fce7 	bl	8001822 <ITM_SendString>
#endif

	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000e5c:	f7ff fbcc 	bl	80005f8 <wakeup_ltc6811>

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000e60:	f240 7015 	movw	r0, #1813	; 0x715
 8000e64:	f7ff fbf8 	bl	8000658 <ltc6811>

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000e68:	f7ff fbc6 	bl	80005f8 <wakeup_ltc6811>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2012      	movs	r0, #18
 8000e72:	f7ff fc6b 	bl	800074c <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1 << 1))
 8000e76:	797b      	ldrb	r3, [r7, #5]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <ltc6811_diagn+0x3c>
	{
		return 1;															// Multiplexertest nicht OK
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <ltc6811_diagn+0x3e>
	}

	return 0;																// Multiplexertest OK
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	08007988 	.word	0x08007988

08000e94 <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b09a      	sub	sp, #104	; 0x68
 8000e98:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Openwire LTC6811.\n");
 8000e9a:	48d7      	ldr	r0, [pc, #860]	; (80011f8 <ltc6811_openwire+0x364>)
 8000e9c:	f000 fcc1 	bl	8001822 <ITM_SendString>
#endif

	// Arrays definieren
	uint8_t pulldown[32] = {0}, pullup[32] = {0};							// Speicher Registerwerte
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8000ea4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]
 8000ece:	619a      	str	r2, [r3, #24]
	uint16_t cell[1] = {0}, openwire[13] = {0};								// Speicher Zelle, Openwire vergleic Threshold
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	843b      	strh	r3, [r7, #32]
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	831a      	strh	r2, [r3, #24]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000ee6:	f7ff fb87 	bl	80005f8 <wakeup_ltc6811>

	// Pullup Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ef0:	e00c      	b.n	8000f0c <ltc6811_openwire+0x78>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);										// Pullup Current
 8000ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef6:	f7ff fbaf 	bl	8000658 <ltc6811>
		HAL_Delay(300);
 8000efa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000efe:	f001 ff13 	bl	8002d28 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8000f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f06:	3301      	adds	r3, #1
 8000f08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000f0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d9ee      	bls.n	8000ef2 <ltc6811_openwire+0x5e>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pullup[0]);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	2004      	movs	r0, #4
 8000f1c:	f7ff fc16 	bl	800074c <ltc6811_read>
	ltc6811_read(RDCVB, &pullup[8]);
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	3308      	adds	r3, #8
 8000f26:	4619      	mov	r1, r3
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff fc0f 	bl	800074c <ltc6811_read>
	ltc6811_read(RDCVC, &pullup[16]);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	3310      	adds	r3, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	2008      	movs	r0, #8
 8000f38:	f7ff fc08 	bl	800074c <ltc6811_read>
	ltc6811_read(RDCVD, &pullup[24]);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	3318      	adds	r3, #24
 8000f42:	4619      	mov	r1, r3
 8000f44:	200a      	movs	r0, #10
 8000f46:	f7ff fc01 	bl	800074c <ltc6811_read>


	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000f4a:	f7ff fb55 	bl	80005f8 <wakeup_ltc6811>

	// Pulldown Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8000f54:	e00c      	b.n	8000f70 <ltc6811_openwire+0xdc>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);											// Pulldown Current
 8000f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f5a:	f7ff fb7d 	bl	8000658 <ltc6811>
		HAL_Delay(300);
 8000f5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f62:	f001 fee1 	bl	8002d28 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8000f66:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8000f70:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d9ee      	bls.n	8000f56 <ltc6811_openwire+0xc2>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pulldown[0]);
 8000f78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	2004      	movs	r0, #4
 8000f80:	f7ff fbe4 	bl	800074c <ltc6811_read>
	ltc6811_read(RDCVB, &pulldown[8]);
 8000f84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f88:	3308      	adds	r3, #8
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f7ff fbdd 	bl	800074c <ltc6811_read>
	ltc6811_read(RDCVC, &pulldown[16]);
 8000f92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f96:	3310      	adds	r3, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2008      	movs	r0, #8
 8000f9c:	f7ff fbd6 	bl	800074c <ltc6811_read>
	ltc6811_read(RDCVD, &pulldown[24]);
 8000fa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fa4:	3318      	adds	r3, #24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f7ff fbcf 	bl	800074c <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t i = 0; i < 13; i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8000fb4:	e13b      	b.n	800122e <ltc6811_openwire+0x39a>
	{
		// Auswahl welche Leitung
		switch (i)
 8000fb6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	f200 8131 	bhi.w	8001222 <ltc6811_openwire+0x38e>
 8000fc0:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <ltc6811_openwire+0x134>)
 8000fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc6:	bf00      	nop
 8000fc8:	08000ffd 	.word	0x08000ffd
 8000fcc:	08001023 	.word	0x08001023
 8000fd0:	08001023 	.word	0x08001023
 8000fd4:	08001095 	.word	0x08001095
 8000fd8:	08001095 	.word	0x08001095
 8000fdc:	08001095 	.word	0x08001095
 8000fe0:	0800110b 	.word	0x0800110b
 8000fe4:	0800110b 	.word	0x0800110b
 8000fe8:	0800110b 	.word	0x0800110b
 8000fec:	08001181 	.word	0x08001181
 8000ff0:	08001181 	.word	0x08001181
 8000ff4:	08001181 	.word	0x08001181
 8000ff8:	080011fd 	.word	0x080011fd
		{
			// Leitungen Zelle 1/2 bis 3/4
			case 0:
				openwire[i] = ((pulldown[1] << 8) + pulldown[0]);
 8000ffc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001000:	b29b      	uxth	r3, r3
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b299      	uxth	r1, r3
 8001006:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800100a:	b29a      	uxth	r2, r3
 800100c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001010:	440a      	add	r2, r1
 8001012:	b292      	uxth	r2, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800101a:	440b      	add	r3, r1
 800101c:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001020:	e100      	b.n	8001224 <ltc6811_openwire+0x390>
			case 1:
			case 2:
				openwire[i] = (((pullup[i*2+1] << 8) + pullup[i*2]) - ((pulldown[i*2+1] << 8) + pulldown[i*2]));
 8001022:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	3301      	adds	r3, #1
 800102a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800102e:	4413      	add	r3, r2
 8001030:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001034:	b29b      	uxth	r3, r3
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b29a      	uxth	r2, r3
 800103a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001044:	440b      	add	r3, r1
 8001046:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b299      	uxth	r1, r3
 8001050:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	3301      	adds	r3, #1
 8001058:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800105c:	4413      	add	r3, r2
 800105e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001062:	b29b      	uxth	r3, r3
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b29a      	uxth	r2, r3
 8001068:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001072:	4403      	add	r3, r0
 8001074:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001078:	b29b      	uxth	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b29a      	uxth	r2, r3
 800107e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001082:	1a8a      	subs	r2, r1, r2
 8001084:	b292      	uxth	r2, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800108c:	440b      	add	r3, r1
 800108e:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001092:	e0c7      	b.n	8001224 <ltc6811_openwire+0x390>
			// Leitungen Zelle 4/5 bis 6/7
			case 3:
			case 4:
			case 5:
				openwire[i] = (((pullup[i*2+3] << 8) + pullup[i*2+2]) - ((pulldown[i*2+3] << 8) + pulldown[i*2+2]));
 8001094:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	3303      	adds	r3, #3
 800109c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80010a0:	4413      	add	r3, r2
 80010a2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010b0:	3301      	adds	r3, #1
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80010b8:	440b      	add	r3, r1
 80010ba:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	b299      	uxth	r1, r3
 80010c4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	3303      	adds	r3, #3
 80010cc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80010d0:	4413      	add	r3, r2
 80010d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010e0:	3301      	adds	r3, #1
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80010e8:	4403      	add	r3, r0
 80010ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010f8:	1a8a      	subs	r2, r1, r2
 80010fa:	b292      	uxth	r2, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001102:	440b      	add	r3, r1
 8001104:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001108:	e08c      	b.n	8001224 <ltc6811_openwire+0x390>
			// Leitungen Zelle 7/8 bis 9/10
			case 6:
			case 7:
			case 8:
				openwire[i] = (((pullup[i*2+5] << 8) + pullup[i*2+4]) - ((pulldown[i*2+5] << 8) + pulldown[i*2+4]));
 800110a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	3305      	adds	r3, #5
 8001112:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001116:	4413      	add	r3, r2
 8001118:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800111c:	b29b      	uxth	r3, r3
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b29a      	uxth	r2, r3
 8001122:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001126:	3302      	adds	r3, #2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800112e:	440b      	add	r3, r1
 8001130:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001134:	b29b      	uxth	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b299      	uxth	r1, r3
 800113a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	3305      	adds	r3, #5
 8001142:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001146:	4413      	add	r3, r2
 8001148:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800114c:	b29b      	uxth	r3, r3
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b29a      	uxth	r2, r3
 8001152:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001156:	3302      	adds	r3, #2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800115e:	4403      	add	r3, r0
 8001160:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4413      	add	r3, r2
 8001168:	b29a      	uxth	r2, r3
 800116a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800116e:	1a8a      	subs	r2, r1, r2
 8001170:	b292      	uxth	r2, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001178:	440b      	add	r3, r1
 800117a:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800117e:	e051      	b.n	8001224 <ltc6811_openwire+0x390>
			// Leitungen Zelle 10/11 und 11/12
			case 9:
			case 10:
			case 11:
				openwire[i] = (((pullup[i*2+7] << 8) + pullup[i*2+6]) - ((pulldown[i*2+7] << 8) + pulldown[i*2+6]));
 8001180:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	3307      	adds	r3, #7
 8001188:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800118c:	4413      	add	r3, r2
 800118e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001192:	b29b      	uxth	r3, r3
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b29a      	uxth	r2, r3
 8001198:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800119c:	3303      	adds	r3, #3
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80011a4:	440b      	add	r3, r1
 80011a6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4413      	add	r3, r2
 80011ae:	b299      	uxth	r1, r3
 80011b0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	3307      	adds	r3, #7
 80011b8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80011bc:	4413      	add	r3, r2
 80011be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011cc:	3303      	adds	r3, #3
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80011d4:	4403      	add	r3, r0
 80011d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4413      	add	r3, r2
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011e4:	1a8a      	subs	r2, r1, r2
 80011e6:	b292      	uxth	r2, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80011ee:	440b      	add	r3, r1
 80011f0:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80011f4:	e016      	b.n	8001224 <ltc6811_openwire+0x390>
 80011f6:	bf00      	nop
 80011f8:	080079a8 	.word	0x080079a8
			case 12:
				openwire[i] = ((pullup[29] << 8) + pullup[28]);
 80011fc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001200:	b29b      	uxth	r3, r3
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b299      	uxth	r1, r3
 8001206:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800120a:	b29a      	uxth	r2, r3
 800120c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001210:	440a      	add	r2, r1
 8001212:	b292      	uxth	r2, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800121a:	440b      	add	r3, r1
 800121c:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001220:	e000      	b.n	8001224 <ltc6811_openwire+0x390>
			default:
				break;
 8001222:	bf00      	nop
	for (uint8_t i = 0; i < 13; i++)
 8001224:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001228:	3301      	adds	r3, #1
 800122a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800122e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001232:	2b0c      	cmp	r3, #12
 8001234:	f67f aebf 	bls.w	8000fb6 <ltc6811_openwire+0x122>
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t i = 1; i < 12; i++)
 8001238:	2301      	movs	r3, #1
 800123a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800123e:	e027      	b.n	8001290 <ltc6811_openwire+0x3fc>
	{
		// Vergleiche Messdaten mit Threshold
		if ((openwire[i] > OPENWIRE_THRESHOLD) && (openwire[i] < (65535 - OPENWIRE_THRESHOLD)))
 8001240:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800124a:	4413      	add	r3, r2
 800124c:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 8001250:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001254:	d917      	bls.n	8001286 <ltc6811_openwire+0x3f2>
 8001256:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001260:	4413      	add	r3, r2
 8001262:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 8001266:	f24f 025e 	movw	r2, #61534	; 0xf05e
 800126a:	4293      	cmp	r3, r2
 800126c:	d80b      	bhi.n	8001286 <ltc6811_openwire+0x3f2>
		{
			cell[0] |= (1 << i);											// Wenn Threshold ueberschritten, Offene Leitung
 800126e:	8c3b      	ldrh	r3, [r7, #32]
 8001270:	b21a      	sxth	r2, r3
 8001272:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001276:	2101      	movs	r1, #1
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	843b      	strh	r3, [r7, #32]
	for (uint8_t i = 1; i < 12; i++)
 8001286:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800128a:	3301      	adds	r3, #1
 800128c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001290:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001294:	2b0b      	cmp	r3, #11
 8001296:	d9d3      	bls.n	8001240 <ltc6811_openwire+0x3ac>
		}
	}

	// Offene Leitung erste Zelle messen
	if (openwire[0] == 0)
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <ltc6811_openwire+0x414>
	{
		cell[0] |= (1 << 0);												// Unterste Leitung Offen
 800129e:	8c3b      	ldrh	r3, [r7, #32]
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	843b      	strh	r3, [r7, #32]
	}

	// Offene Leitung letzte Zelle messen
	if (openwire[12] == 0)
 80012a8:	8bbb      	ldrh	r3, [r7, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <ltc6811_openwire+0x424>
	{
		cell[0] |= (1 << 12);												// Oberste Leitung offen
 80012ae:	8c3b      	ldrh	r3, [r7, #32]
 80012b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	843b      	strh	r3, [r7, #32]
	}

	// Wenn offene Leitung vorhanden
	if (cell[0] != 0)
 80012b8:	8c3b      	ldrh	r3, [r7, #32]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <ltc6811_openwire+0x42e>
	{
		return 1;															// Open Wire nicht OK
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <ltc6811_openwire+0x430>
	}

	return 0;																// Open Wire OK
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3768      	adds	r7, #104	; 0x68
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80012d2:	2115      	movs	r1, #21
 80012d4:	483b      	ldr	r0, [pc, #236]	; (80013c4 <collectHardwareInfo+0xf8>)
 80012d6:	f7ff f933 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80012da:	f001 fd5f 	bl	8002d9c <HAL_GetDEVID>
 80012de:	4603      	mov	r3, r0
 80012e0:	210a      	movs	r1, #10
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f940 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80012e8:	2117      	movs	r1, #23
 80012ea:	4837      	ldr	r0, [pc, #220]	; (80013c8 <collectHardwareInfo+0xfc>)
 80012ec:	f7ff f928 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80012f0:	f001 fd48 	bl	8002d84 <HAL_GetREVID>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f242 0201 	movw	r2, #8193	; 0x2001
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d016      	beq.n	800132c <collectHardwareInfo+0x60>
 80012fe:	f242 0201 	movw	r2, #8193	; 0x2001
 8001302:	4293      	cmp	r3, r2
 8001304:	d817      	bhi.n	8001336 <collectHardwareInfo+0x6a>
 8001306:	f241 0201 	movw	r2, #4097	; 0x1001
 800130a:	4293      	cmp	r3, r2
 800130c:	d004      	beq.n	8001318 <collectHardwareInfo+0x4c>
 800130e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001312:	4293      	cmp	r3, r2
 8001314:	d005      	beq.n	8001322 <collectHardwareInfo+0x56>
 8001316:	e00e      	b.n	8001336 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8001318:	2101      	movs	r1, #1
 800131a:	482c      	ldr	r0, [pc, #176]	; (80013cc <collectHardwareInfo+0x100>)
 800131c:	f7ff f910 	bl	8000540 <uartTransmit>
			break;
 8001320:	e011      	b.n	8001346 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8001322:	2101      	movs	r1, #1
 8001324:	482a      	ldr	r0, [pc, #168]	; (80013d0 <collectHardwareInfo+0x104>)
 8001326:	f7ff f90b 	bl	8000540 <uartTransmit>
			break;
 800132a:	e00c      	b.n	8001346 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 800132c:	2101      	movs	r1, #1
 800132e:	4829      	ldr	r0, [pc, #164]	; (80013d4 <collectHardwareInfo+0x108>)
 8001330:	f7ff f906 	bl	8000540 <uartTransmit>
			break;
 8001334:	e007      	b.n	8001346 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8001336:	f001 fd25 	bl	8002d84 <HAL_GetREVID>
 800133a:	4603      	mov	r3, r0
 800133c:	210a      	movs	r1, #10
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f912 	bl	8000568 <uartTransmitNumber>
			break;
 8001344:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8001346:	2115      	movs	r1, #21
 8001348:	4823      	ldr	r0, [pc, #140]	; (80013d8 <collectHardwareInfo+0x10c>)
 800134a:	f7ff f8f9 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800134e:	f002 ff95 	bl	800427c <HAL_RCC_GetSysClockFreq>
 8001352:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a21      	ldr	r2, [pc, #132]	; (80013dc <collectHardwareInfo+0x110>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	0c9b      	lsrs	r3, r3, #18
 800135e:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8001360:	210a      	movs	r1, #10
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff f900 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8001368:	2104      	movs	r1, #4
 800136a:	481d      	ldr	r0, [pc, #116]	; (80013e0 <collectHardwareInfo+0x114>)
 800136c:	f7ff f8e8 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8001370:	2111      	movs	r1, #17
 8001372:	481c      	ldr	r0, [pc, #112]	; (80013e4 <collectHardwareInfo+0x118>)
 8001374:	f7ff f8e4 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8001378:	f001 fd1e 	bl	8002db8 <HAL_GetUIDw0>
 800137c:	4603      	mov	r3, r0
 800137e:	2110      	movs	r1, #16
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8f1 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8001386:	2101      	movs	r1, #1
 8001388:	4817      	ldr	r0, [pc, #92]	; (80013e8 <collectHardwareInfo+0x11c>)
 800138a:	f7ff f8d9 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800138e:	f001 fd1f 	bl	8002dd0 <HAL_GetUIDw1>
 8001392:	4603      	mov	r3, r0
 8001394:	2110      	movs	r1, #16
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8e6 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 800139c:	2101      	movs	r1, #1
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <collectHardwareInfo+0x11c>)
 80013a0:	f7ff f8ce 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 80013a4:	f001 fd20 	bl	8002de8 <HAL_GetUIDw2>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2110      	movs	r1, #16
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8db 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80013b2:	2101      	movs	r1, #1
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <collectHardwareInfo+0x120>)
 80013b6:	f7ff f8c3 	bl	8000540 <uartTransmit>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	08007a00 	.word	0x08007a00
 80013c8:	08007a18 	.word	0x08007a18
 80013cc:	08007a30 	.word	0x08007a30
 80013d0:	08007a34 	.word	0x08007a34
 80013d4:	08007a38 	.word	0x08007a38
 80013d8:	08007a3c 	.word	0x08007a3c
 80013dc:	431bde83 	.word	0x431bde83
 80013e0:	08007a54 	.word	0x08007a54
 80013e4:	08007a5c 	.word	0x08007a5c
 80013e8:	08007a70 	.word	0x08007a70
 80013ec:	08007a74 	.word	0x08007a74

080013f0 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80013f4:	2114      	movs	r1, #20
 80013f6:	4824      	ldr	r0, [pc, #144]	; (8001488 <collectMiddlewareInfo+0x98>)
 80013f8:	f7ff f8a2 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80013fc:	210a      	movs	r1, #10
 80013fe:	2005      	movs	r0, #5
 8001400:	f7ff f8b2 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 8001404:	2101      	movs	r1, #1
 8001406:	4821      	ldr	r0, [pc, #132]	; (800148c <collectMiddlewareInfo+0x9c>)
 8001408:	f7ff f89a 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 800140c:	210a      	movs	r1, #10
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff f8aa 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8001414:	2112      	movs	r1, #18
 8001416:	481e      	ldr	r0, [pc, #120]	; (8001490 <collectMiddlewareInfo+0xa0>)
 8001418:	f7ff f892 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 800141c:	f001 fca8 	bl	8002d70 <HAL_GetHalVersion>
 8001420:	4603      	mov	r3, r0
 8001422:	0e1b      	lsrs	r3, r3, #24
 8001424:	b2db      	uxtb	r3, r3
 8001426:	210a      	movs	r1, #10
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f89d 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800142e:	2101      	movs	r1, #1
 8001430:	4816      	ldr	r0, [pc, #88]	; (800148c <collectMiddlewareInfo+0x9c>)
 8001432:	f7ff f885 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8001436:	f001 fc9b 	bl	8002d70 <HAL_GetHalVersion>
 800143a:	4603      	mov	r3, r0
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	b2db      	uxtb	r3, r3
 8001440:	210a      	movs	r1, #10
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f890 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001448:	2101      	movs	r1, #1
 800144a:	4810      	ldr	r0, [pc, #64]	; (800148c <collectMiddlewareInfo+0x9c>)
 800144c:	f7ff f878 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8001450:	f001 fc8e 	bl	8002d70 <HAL_GetHalVersion>
 8001454:	4603      	mov	r3, r0
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	b2db      	uxtb	r3, r3
 800145a:	210a      	movs	r1, #10
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f883 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001462:	2101      	movs	r1, #1
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <collectMiddlewareInfo+0x9c>)
 8001466:	f7ff f86b 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 800146a:	f001 fc81 	bl	8002d70 <HAL_GetHalVersion>
 800146e:	4603      	mov	r3, r0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	210a      	movs	r1, #10
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f877 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 800147a:	2101      	movs	r1, #1
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <collectMiddlewareInfo+0xa4>)
 800147e:	f7ff f85f 	bl	8000540 <uartTransmit>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	08007a78 	.word	0x08007a78
 800148c:	08007a8c 	.word	0x08007a8c
 8001490:	08007a90 	.word	0x08007a90
 8001494:	08007a74 	.word	0x08007a74

08001498 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 800149c:	2111      	movs	r1, #17
 800149e:	4826      	ldr	r0, [pc, #152]	; (8001538 <collectSoftwareInfo+0xa0>)
 80014a0:	f7ff f84e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 80014a4:	2108      	movs	r1, #8
 80014a6:	4825      	ldr	r0, [pc, #148]	; (800153c <collectSoftwareInfo+0xa4>)
 80014a8:	f7ff f84a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80014ac:	2111      	movs	r1, #17
 80014ae:	4824      	ldr	r0, [pc, #144]	; (8001540 <collectSoftwareInfo+0xa8>)
 80014b0:	f7ff f846 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 80014b4:	2108      	movs	r1, #8
 80014b6:	4823      	ldr	r0, [pc, #140]	; (8001544 <collectSoftwareInfo+0xac>)
 80014b8:	f7ff f842 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 80014bc:	210f      	movs	r1, #15
 80014be:	4822      	ldr	r0, [pc, #136]	; (8001548 <collectSoftwareInfo+0xb0>)
 80014c0:	f7ff f83e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80014c4:	2129      	movs	r1, #41	; 0x29
 80014c6:	4821      	ldr	r0, [pc, #132]	; (800154c <collectSoftwareInfo+0xb4>)
 80014c8:	f7ff f83a 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80014cc:	2101      	movs	r1, #1
 80014ce:	4820      	ldr	r0, [pc, #128]	; (8001550 <collectSoftwareInfo+0xb8>)
 80014d0:	f7ff f836 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80014d4:	2116      	movs	r1, #22
 80014d6:	481f      	ldr	r0, [pc, #124]	; (8001554 <collectSoftwareInfo+0xbc>)
 80014d8:	f7ff f832 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80014dc:	2105      	movs	r1, #5
 80014de:	481e      	ldr	r0, [pc, #120]	; (8001558 <collectSoftwareInfo+0xc0>)
 80014e0:	f7ff f82e 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80014e4:	2115      	movs	r1, #21
 80014e6:	481d      	ldr	r0, [pc, #116]	; (800155c <collectSoftwareInfo+0xc4>)
 80014e8:	f7ff f82a 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80014ec:	2108      	movs	r1, #8
 80014ee:	481c      	ldr	r0, [pc, #112]	; (8001560 <collectSoftwareInfo+0xc8>)
 80014f0:	f7ff f826 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80014f4:	2116      	movs	r1, #22
 80014f6:	481b      	ldr	r0, [pc, #108]	; (8001564 <collectSoftwareInfo+0xcc>)
 80014f8:	f7ff f822 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80014fc:	2111      	movs	r1, #17
 80014fe:	481a      	ldr	r0, [pc, #104]	; (8001568 <collectSoftwareInfo+0xd0>)
 8001500:	f7ff f81e 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001504:	2101      	movs	r1, #1
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <collectSoftwareInfo+0xb8>)
 8001508:	f7ff f81a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 800150c:	2111      	movs	r1, #17
 800150e:	4817      	ldr	r0, [pc, #92]	; (800156c <collectSoftwareInfo+0xd4>)
 8001510:	f7ff f816 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8001514:	210b      	movs	r1, #11
 8001516:	4816      	ldr	r0, [pc, #88]	; (8001570 <collectSoftwareInfo+0xd8>)
 8001518:	f7ff f812 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 800151c:	2111      	movs	r1, #17
 800151e:	4815      	ldr	r0, [pc, #84]	; (8001574 <collectSoftwareInfo+0xdc>)
 8001520:	f7ff f80e 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8001524:	2109      	movs	r1, #9
 8001526:	4814      	ldr	r0, [pc, #80]	; (8001578 <collectSoftwareInfo+0xe0>)
 8001528:	f7ff f80a 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800152c:	2101      	movs	r1, #1
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <collectSoftwareInfo+0xb8>)
 8001530:	f7ff f806 	bl	8000540 <uartTransmit>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	08007aa4 	.word	0x08007aa4
 800153c:	08007ab8 	.word	0x08007ab8
 8001540:	08007ac0 	.word	0x08007ac0
 8001544:	08007ad4 	.word	0x08007ad4
 8001548:	08007adc 	.word	0x08007adc
 800154c:	08007aec 	.word	0x08007aec
 8001550:	08007a74 	.word	0x08007a74
 8001554:	08007b18 	.word	0x08007b18
 8001558:	08007b30 	.word	0x08007b30
 800155c:	08007b38 	.word	0x08007b38
 8001560:	08007b50 	.word	0x08007b50
 8001564:	08007b58 	.word	0x08007b58
 8001568:	08007b70 	.word	0x08007b70
 800156c:	08007b84 	.word	0x08007b84
 8001570:	08007b98 	.word	0x08007b98
 8001574:	08007ba4 	.word	0x08007ba4
 8001578:	08007bb8 	.word	0x08007bb8

0800157c <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8001580:	2115      	movs	r1, #21
 8001582:	4814      	ldr	r0, [pc, #80]	; (80015d4 <collectGitcounts+0x58>)
 8001584:	f7fe ffdc 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8001588:	2103      	movs	r1, #3
 800158a:	4813      	ldr	r0, [pc, #76]	; (80015d8 <collectGitcounts+0x5c>)
 800158c:	f7fe ffd8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8001590:	2117      	movs	r1, #23
 8001592:	4812      	ldr	r0, [pc, #72]	; (80015dc <collectGitcounts+0x60>)
 8001594:	f7fe ffd4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8001598:	2103      	movs	r1, #3
 800159a:	4811      	ldr	r0, [pc, #68]	; (80015e0 <collectGitcounts+0x64>)
 800159c:	f7fe ffd0 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 80015a0:	211c      	movs	r1, #28
 80015a2:	4810      	ldr	r0, [pc, #64]	; (80015e4 <collectGitcounts+0x68>)
 80015a4:	f7fe ffcc 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 80015a8:	2103      	movs	r1, #3
 80015aa:	480f      	ldr	r0, [pc, #60]	; (80015e8 <collectGitcounts+0x6c>)
 80015ac:	f7fe ffc8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80015b0:	2116      	movs	r1, #22
 80015b2:	480e      	ldr	r0, [pc, #56]	; (80015ec <collectGitcounts+0x70>)
 80015b4:	f7fe ffc4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 80015b8:	2102      	movs	r1, #2
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <collectGitcounts+0x74>)
 80015bc:	f7fe ffc0 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80015c0:	2115      	movs	r1, #21
 80015c2:	480c      	ldr	r0, [pc, #48]	; (80015f4 <collectGitcounts+0x78>)
 80015c4:	f7fe ffbc 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 80015c8:	2102      	movs	r1, #2
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <collectGitcounts+0x7c>)
 80015cc:	f7fe ffb8 	bl	8000540 <uartTransmit>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	08007bc4 	.word	0x08007bc4
 80015d8:	08007bdc 	.word	0x08007bdc
 80015dc:	08007be0 	.word	0x08007be0
 80015e0:	08007bf8 	.word	0x08007bf8
 80015e4:	08007bfc 	.word	0x08007bfc
 80015e8:	08007c18 	.word	0x08007c18
 80015ec:	08007b18 	.word	0x08007b18
 80015f0:	08007c1c 	.word	0x08007c1c
 80015f4:	08007b38 	.word	0x08007b38
 80015f8:	08007c20 	.word	0x08007c20

080015fc <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8001600:	2111      	movs	r1, #17
 8001602:	480e      	ldr	r0, [pc, #56]	; (800163c <collectSystemInfo+0x40>)
 8001604:	f7fe ff9c 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8001608:	f7ff fe60 	bl	80012cc <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 800160c:	2111      	movs	r1, #17
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <collectSystemInfo+0x44>)
 8001610:	f7fe ff96 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8001614:	f7ff ff40 	bl	8001498 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8001618:	2113      	movs	r1, #19
 800161a:	480a      	ldr	r0, [pc, #40]	; (8001644 <collectSystemInfo+0x48>)
 800161c:	f7fe ff90 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8001620:	f7ff fee6 	bl	80013f0 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8001624:	2113      	movs	r1, #19
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <collectSystemInfo+0x4c>)
 8001628:	f7fe ff8a 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 800162c:	f7ff ffa6 	bl	800157c <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8001630:	2103      	movs	r1, #3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <collectSystemInfo+0x50>)
 8001634:	f7fe ff84 	bl	8000540 <uartTransmit>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	08007c24 	.word	0x08007c24
 8001640:	08007c38 	.word	0x08007c38
 8001644:	08007c4c 	.word	0x08007c4c
 8001648:	08007c60 	.word	0x08007c60
 800164c:	08007c74 	.word	0x08007c74

08001650 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8001656:	2300      	movs	r3, #0
 8001658:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <readResetSource+0xa0>)
 800165c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	3301      	adds	r3, #1
 800166a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 800166c:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <readResetSource+0xa0>)
 800166e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	3302      	adds	r3, #2
 800167c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <readResetSource+0xa0>)
 8001680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001682:	2b00      	cmp	r3, #0
 8001684:	da02      	bge.n	800168c <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	3304      	adds	r3, #4
 800168a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <readResetSource+0xa0>)
 800168e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	3308      	adds	r3, #8
 800169c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <readResetSource+0xa0>)
 80016a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	3310      	adds	r3, #16
 80016ae:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <readResetSource+0xa0>)
 80016b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	3320      	adds	r3, #32
 80016c0:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <readResetSource+0xa0>)
 80016c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	3340      	adds	r3, #64	; 0x40
 80016d2:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <readResetSource+0xa0>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d8:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <readResetSource+0xa0>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016de:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80016fe:	2106      	movs	r1, #6
 8001700:	482a      	ldr	r0, [pc, #168]	; (80017ac <printResetSource+0xb8>)
 8001702:	f7fe ff1d 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d104      	bne.n	8001716 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 800170c:	210f      	movs	r1, #15
 800170e:	4828      	ldr	r0, [pc, #160]	; (80017b0 <printResetSource+0xbc>)
 8001710:	f7fe ff16 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8001714:	e046      	b.n	80017a4 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8001720:	2118      	movs	r1, #24
 8001722:	4824      	ldr	r0, [pc, #144]	; (80017b4 <printResetSource+0xc0>)
 8001724:	f7fe ff0c 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8001732:	2116      	movs	r1, #22
 8001734:	4820      	ldr	r0, [pc, #128]	; (80017b8 <printResetSource+0xc4>)
 8001736:	f7fe ff03 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8001744:	210a      	movs	r1, #10
 8001746:	481d      	ldr	r0, [pc, #116]	; (80017bc <printResetSource+0xc8>)
 8001748:	f7fe fefa 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8001756:	2110      	movs	r1, #16
 8001758:	4819      	ldr	r0, [pc, #100]	; (80017c0 <printResetSource+0xcc>)
 800175a:	f7fe fef1 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8001768:	210f      	movs	r1, #15
 800176a:	4816      	ldr	r0, [pc, #88]	; (80017c4 <printResetSource+0xd0>)
 800176c:	f7fe fee8 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 800177a:	210f      	movs	r1, #15
 800177c:	4812      	ldr	r0, [pc, #72]	; (80017c8 <printResetSource+0xd4>)
 800177e:	f7fe fedf 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 800178c:	210a      	movs	r1, #10
 800178e:	480f      	ldr	r0, [pc, #60]	; (80017cc <printResetSource+0xd8>)
 8001790:	f7fe fed6 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	da03      	bge.n	80017a4 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 800179c:	2105      	movs	r1, #5
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <printResetSource+0xdc>)
 80017a0:	f7fe fece 	bl	8000540 <uartTransmit>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	08007c78 	.word	0x08007c78
 80017b0:	08007c80 	.word	0x08007c80
 80017b4:	08007c90 	.word	0x08007c90
 80017b8:	08007cac 	.word	0x08007cac
 80017bc:	08007cc4 	.word	0x08007cc4
 80017c0:	08007cd0 	.word	0x08007cd0
 80017c4:	08007ce4 	.word	0x08007ce4
 80017c8:	08007cf4 	.word	0x08007cf4
 80017cc:	08007d04 	.word	0x08007d04
 80017d0:	08007d10 	.word	0x08007d10

080017d4 <ITM_SendChar>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80017ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80017f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80017f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00b      	beq.n	8001814 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 80017fc:	e000      	b.n	8001800 <ITM_SendChar+0x2c>
      __NOP();
 80017fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f9      	beq.n	80017fe <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800180a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]
  return (ch);
 8001814:	687b      	ldr	r3, [r7, #4]
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	// So lange *text != '\0', also ungleich dem "String-Endezeichen(Terminator)"
	while(*text)															// Starte Pointerschleife
 800182a:	e007      	b.n	800183c <ITM_SendString+0x1a>
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ffcf 	bl	80017d4 <ITM_SendChar>
		text++;																// Pointer hochzaehlen
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
	while(*text)															// Starte Pointerschleife
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f3      	bne.n	800182c <ITM_SendString+0xa>
	}
#endif
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	// Variablen definieren
	unsigned char buf[8 * sizeof(long)];
	unsigned int i = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Wenn Nummer 0 ist
	if(number == 0)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d103      	bne.n	800186a <ITM_SendNumber+0x1a>
	{
		ITM_SendChar('0');													// Sende 0
 8001862:	2030      	movs	r0, #48	; 0x30
 8001864:	f7ff ffb6 	bl	80017d4 <ITM_SendChar>
 8001868:	e03b      	b.n	80018e2 <ITM_SendNumber+0x92>
		return;																// Beende Funktion
	}

	// Wenn Zahl negativ ist
	if(number < 0)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da23      	bge.n	80018b8 <ITM_SendNumber+0x68>
	{
		ITM_SendChar('-');													// Vorzeichen senden
 8001870:	202d      	movs	r0, #45	; 0x2d
 8001872:	f7ff ffaf 	bl	80017d4 <ITM_SendChar>
		number = number * -1;												// Nummer invertieren
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	425b      	negs	r3, r3
 800187a:	607b      	str	r3, [r7, #4]
	}

	// Berechne Ziffern bis Zahl 0 ist
	while(number > 0)
 800187c:	e01c      	b.n	80018b8 <ITM_SendNumber+0x68>
	{
		// Ziffern in Puffer schreiben
		buf[i++] = number % 10;												// Rest berechnen
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <ITM_SendNumber+0x98>)
 8001882:	fb83 1302 	smull	r1, r3, r3, r2
 8001886:	1099      	asrs	r1, r3, #2
 8001888:	17d3      	asrs	r3, r2, #31
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	1ad1      	subs	r1, r2, r3
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800189c:	b2ca      	uxtb	r2, r1
 800189e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80018a2:	440b      	add	r3, r1
 80018a4:	f803 2c24 	strb.w	r2, [r3, #-36]
		number = number / 10;												// Dividiere durch 10
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <ITM_SendNumber+0x98>)
 80018ac:	fb82 1203 	smull	r1, r2, r2, r3
 80018b0:	1092      	asrs	r2, r2, #2
 80018b2:	17db      	asrs	r3, r3, #31
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	607b      	str	r3, [r7, #4]
	while(number > 0)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dcdf      	bgt.n	800187e <ITM_SendNumber+0x2e>
	}

	// Sende Zeichen
	for(; i > 0; i--)
 80018be:	e00d      	b.n	80018dc <ITM_SendNumber+0x8c>
	{
		ITM_SendChar('0' + buf[i-1]);
 80018c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018c8:	4413      	add	r3, r2
 80018ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018ce:	3330      	adds	r3, #48	; 0x30
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff7f 	bl	80017d4 <ITM_SendChar>
	for(; i > 0; i--)
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	3b01      	subs	r3, #1
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ee      	bne.n	80018c0 <ITM_SendNumber+0x70>
	}
#endif
}
 80018e2:	3730      	adds	r7, #48	; 0x30
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	66666667 	.word	0x66666667

080018ec <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 80018f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f4:	4850      	ldr	r0, [pc, #320]	; (8001a38 <readall_inputs+0x14c>)
 80018f6:	f002 f8a5 	bl	8003a44 <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	b2d9      	uxtb	r1, r3
 8001902:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <readall_inputs+0x150>)
 8001904:	7813      	ldrb	r3, [r2, #0]
 8001906:	f361 0300 	bfi	r3, r1, #0, #1
 800190a:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 800190c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001910:	484b      	ldr	r0, [pc, #300]	; (8001a40 <readall_inputs+0x154>)
 8001912:	f002 f897 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001916:	4603      	mov	r3, r0
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	b2d9      	uxtb	r1, r3
 800191e:	4a47      	ldr	r2, [pc, #284]	; (8001a3c <readall_inputs+0x150>)
 8001920:	7813      	ldrb	r3, [r2, #0]
 8001922:	f361 0341 	bfi	r3, r1, #1, #1
 8001926:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800192c:	4845      	ldr	r0, [pc, #276]	; (8001a44 <readall_inputs+0x158>)
 800192e:	f002 f889 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001932:	4603      	mov	r3, r0
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	b2d9      	uxtb	r1, r3
 800193a:	4a40      	ldr	r2, [pc, #256]	; (8001a3c <readall_inputs+0x150>)
 800193c:	7813      	ldrb	r3, [r2, #0]
 800193e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001942:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001944:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001948:	483e      	ldr	r0, [pc, #248]	; (8001a44 <readall_inputs+0x158>)
 800194a:	f002 f87b 	bl	8003a44 <HAL_GPIO_ReadPin>
 800194e:	4603      	mov	r3, r0
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	b2d9      	uxtb	r1, r3
 8001956:	4a39      	ldr	r2, [pc, #228]	; (8001a3c <readall_inputs+0x150>)
 8001958:	7813      	ldrb	r3, [r2, #0]
 800195a:	f361 1304 	bfi	r3, r1, #4, #1
 800195e:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8001960:	2101      	movs	r1, #1
 8001962:	4838      	ldr	r0, [pc, #224]	; (8001a44 <readall_inputs+0x158>)
 8001964:	f002 f86e 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	b2d9      	uxtb	r1, r3
 8001970:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <readall_inputs+0x150>)
 8001972:	7813      	ldrb	r3, [r2, #0]
 8001974:	f361 1345 	bfi	r3, r1, #5, #1
 8001978:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 800197a:	2104      	movs	r1, #4
 800197c:	4831      	ldr	r0, [pc, #196]	; (8001a44 <readall_inputs+0x158>)
 800197e:	f002 f861 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	b2d9      	uxtb	r1, r3
 800198a:	4a2c      	ldr	r2, [pc, #176]	; (8001a3c <readall_inputs+0x150>)
 800198c:	7813      	ldrb	r3, [r2, #0]
 800198e:	f361 1386 	bfi	r3, r1, #6, #1
 8001992:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8001994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001998:	4827      	ldr	r0, [pc, #156]	; (8001a38 <readall_inputs+0x14c>)
 800199a:	f002 f853 	bl	8003a44 <HAL_GPIO_ReadPin>
 800199e:	4603      	mov	r3, r0
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	b2d9      	uxtb	r1, r3
 80019a6:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <readall_inputs+0x15c>)
 80019a8:	7813      	ldrb	r3, [r2, #0]
 80019aa:	f361 0300 	bfi	r3, r1, #0, #1
 80019ae:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 80019b0:	2108      	movs	r1, #8
 80019b2:	4821      	ldr	r0, [pc, #132]	; (8001a38 <readall_inputs+0x14c>)
 80019b4:	f002 f846 	bl	8003a44 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	b2d9      	uxtb	r1, r3
 80019c0:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <readall_inputs+0x15c>)
 80019c2:	7813      	ldrb	r3, [r2, #0]
 80019c4:	f361 0341 	bfi	r3, r1, #1, #1
 80019c8:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 80019ca:	2120      	movs	r1, #32
 80019cc:	481a      	ldr	r0, [pc, #104]	; (8001a38 <readall_inputs+0x14c>)
 80019ce:	f002 f839 	bl	8003a44 <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	b2d9      	uxtb	r1, r3
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <readall_inputs+0x15c>)
 80019dc:	7813      	ldrb	r3, [r2, #0]
 80019de:	f361 0382 	bfi	r3, r1, #2, #1
 80019e2:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80019e4:	2110      	movs	r1, #16
 80019e6:	4814      	ldr	r0, [pc, #80]	; (8001a38 <readall_inputs+0x14c>)
 80019e8:	f002 f82c 	bl	8003a44 <HAL_GPIO_ReadPin>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	b2d9      	uxtb	r1, r3
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <readall_inputs+0x15c>)
 80019f6:	7813      	ldrb	r3, [r2, #0]
 80019f8:	f361 03c3 	bfi	r3, r1, #3, #1
 80019fc:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 80019fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a02:	4812      	ldr	r0, [pc, #72]	; (8001a4c <readall_inputs+0x160>)
 8001a04:	f002 f81e 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	b2d9      	uxtb	r1, r3
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <readall_inputs+0x15c>)
 8001a12:	7813      	ldrb	r3, [r2, #0]
 8001a14:	f361 1304 	bfi	r3, r1, #4, #1
 8001a18:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <readall_inputs+0x160>)
 8001a1e:	f002 f811 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	b2d9      	uxtb	r1, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <readall_inputs+0x164>)
 8001a2c:	7813      	ldrb	r3, [r2, #0]
 8001a2e:	f361 0300 	bfi	r3, r1, #0, #1
 8001a32:	7013      	strb	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	20000060 	.word	0x20000060
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40020000 	.word	0x40020000
 8001a48:	20000068 	.word	0x20000068
 8001a4c:	40021400 	.word	0x40021400
 8001a50:	20000064 	.word	0x20000064

08001a54 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	481b      	ldr	r0, [pc, #108]	; (8001acc <testPCB_Leds+0x78>)
 8001a5e:	f002 f809 	bl	8003a74 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a66:	f001 f95f 	bl	8002d28 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	4817      	ldr	r0, [pc, #92]	; (8001acc <testPCB_Leds+0x78>)
 8001a70:	f002 f800 	bl	8003a74 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001a74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a78:	f001 f956 	bl	8002d28 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2104      	movs	r1, #4
 8001a80:	4812      	ldr	r0, [pc, #72]	; (8001acc <testPCB_Leds+0x78>)
 8001a82:	f001 fff7 	bl	8003a74 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a8a:	f001 f94d 	bl	8002d28 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2104      	movs	r1, #4
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <testPCB_Leds+0x78>)
 8001a94:	f001 ffee 	bl	8003a74 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a9c:	f001 f944 	bl	8002d28 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa6:	4809      	ldr	r0, [pc, #36]	; (8001acc <testPCB_Leds+0x78>)
 8001aa8:	f001 ffe4 	bl	8003a74 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ab0:	f001 f93a 	bl	8002d28 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aba:	4804      	ldr	r0, [pc, #16]	; (8001acc <testPCB_Leds+0x78>)
 8001abc:	f001 ffda 	bl	8003a74 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ac4:	f001 f930 	bl	8002d28 <HAL_Delay>
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40020400 	.word	0x40020400

08001ad0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <MX_ADC1_Init+0x9c>)
 8001ae6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001aea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <MX_ADC1_Init+0xa0>)
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b32:	f001 f965 	bl	8002e00 <HAL_ADC_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b3c:	f000 fc9a 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b40:	2304      	movs	r3, #4
 8001b42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_ADC1_Init+0x98>)
 8001b52:	f001 f999 	bl	8002e88 <HAL_ADC_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b5c:	f000 fc8a 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000006c 	.word	0x2000006c
 8001b6c:	40012000 	.word	0x40012000
 8001b70:	0f000001 	.word	0x0f000001

08001b74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <HAL_ADC_MspInit+0x74>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d123      	bne.n	8001bde <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_ADC_MspInit+0x78>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001bc6:	23f8      	movs	r3, #248	; 0xf8
 8001bc8:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_ADC_MspInit+0x7c>)
 8001bda:	f001 fd87 	bl	80036ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40012000 	.word	0x40012000
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <MX_CAN1_Init+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c00:	2210      	movs	r2, #16
 8001c02:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c16:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_CAN1_Init+0x64>)
 8001c44:	f001 fb70 	bl	8003328 <HAL_CAN_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001c4e:	f000 fc11 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200000dc 	.word	0x200000dc
 8001c5c:	40006400 	.word	0x40006400

08001c60 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <MX_CAN3_Init+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001c6c:	2206      	movs	r2, #6
 8001c6e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001c7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c82:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001c86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c8a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_CAN3_Init+0x64>)
 8001cb2:	f001 fb39 	bl	8003328 <HAL_CAN_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001cbc:	f000 fbda 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200000b4 	.word	0x200000b4
 8001cc8:	40003400 	.word	0x40003400

08001ccc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08e      	sub	sp, #56	; 0x38
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a43      	ldr	r2, [pc, #268]	; (8001df8 <HAL_CAN_MspInit+0x12c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d131      	bne.n	8001d52 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cee:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <HAL_CAN_MspInit+0x130>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	4a41      	ldr	r2, [pc, #260]	; (8001dfc <HAL_CAN_MspInit+0x130>)
 8001cf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_CAN_MspInit+0x130>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d10b      	bne.n	8001d18 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d00:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	4a3e      	ldr	r2, [pc, #248]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0c:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	623b      	str	r3, [r7, #32]
 8001d16:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	4a38      	ldr	r2, [pc, #224]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6313      	str	r3, [r2, #48]	; 0x30
 8001d24:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d30:	2303      	movs	r3, #3
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d40:	2309      	movs	r3, #9
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	482e      	ldr	r0, [pc, #184]	; (8001e04 <HAL_CAN_MspInit+0x138>)
 8001d4c:	f001 fcce 	bl	80036ec <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001d50:	e04e      	b.n	8001df0 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2c      	ldr	r2, [pc, #176]	; (8001e08 <HAL_CAN_MspInit+0x13c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d149      	bne.n	8001df0 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d66:	6413      	str	r3, [r2, #64]	; 0x40
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_CAN_MspInit+0x130>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a1a      	ldr	r2, [pc, #104]	; (8001dfc <HAL_CAN_MspInit+0x130>)
 8001d94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_CAN_MspInit+0x130>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10b      	bne.n	8001db6 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_CAN_MspInit+0x134>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001dce:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001de0:	230b      	movs	r3, #11
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	4619      	mov	r1, r3
 8001dea:	4808      	ldr	r0, [pc, #32]	; (8001e0c <HAL_CAN_MspInit+0x140>)
 8001dec:	f001 fc7e 	bl	80036ec <HAL_GPIO_Init>
}
 8001df0:	bf00      	nop
 8001df2:	3738      	adds	r7, #56	; 0x38
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40006400 	.word	0x40006400
 8001dfc:	20000028 	.word	0x20000028
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40003400 	.word	0x40003400
 8001e0c:	40020000 	.word	0x40020000

08001e10 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08e      	sub	sp, #56	; 0x38
 8001e14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e26:	4bb7      	ldr	r3, [pc, #732]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4ab6      	ldr	r2, [pc, #728]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4bb4      	ldr	r3, [pc, #720]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	623b      	str	r3, [r7, #32]
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4bb1      	ldr	r3, [pc, #708]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4ab0      	ldr	r2, [pc, #704]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4bae      	ldr	r3, [pc, #696]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e56:	4bab      	ldr	r3, [pc, #684]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4aaa      	ldr	r2, [pc, #680]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e5c:	f043 0320 	orr.w	r3, r3, #32
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4ba8      	ldr	r3, [pc, #672]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6e:	4ba5      	ldr	r3, [pc, #660]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4aa4      	ldr	r2, [pc, #656]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4ba2      	ldr	r3, [pc, #648]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	4b9f      	ldr	r3, [pc, #636]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a9e      	ldr	r2, [pc, #632]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b9c      	ldr	r3, [pc, #624]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	4b99      	ldr	r3, [pc, #612]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a98      	ldr	r2, [pc, #608]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b96      	ldr	r3, [pc, #600]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eb6:	4b93      	ldr	r3, [pc, #588]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a92      	ldr	r2, [pc, #584]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b90      	ldr	r3, [pc, #576]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ece:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a8c      	ldr	r2, [pc, #560]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b8a      	ldr	r3, [pc, #552]	; (8002104 <MX_GPIO_Init+0x2f4>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f248 0187 	movw	r1, #32903	; 0x8087
 8001eec:	4886      	ldr	r0, [pc, #536]	; (8002108 <MX_GPIO_Init+0x2f8>)
 8001eee:	f001 fdc1 	bl	8003a74 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef8:	4884      	ldr	r0, [pc, #528]	; (800210c <MX_GPIO_Init+0x2fc>)
 8001efa:	f001 fdbb 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f242 0102 	movw	r1, #8194	; 0x2002
 8001f04:	4882      	ldr	r0, [pc, #520]	; (8002110 <MX_GPIO_Init+0x300>)
 8001f06:	f001 fdb5 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f240 6102 	movw	r1, #1538	; 0x602
 8001f10:	4880      	ldr	r0, [pc, #512]	; (8002114 <MX_GPIO_Init+0x304>)
 8001f12:	f001 fdaf 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f244 0184 	movw	r1, #16516	; 0x4084
 8001f1c:	487e      	ldr	r0, [pc, #504]	; (8002118 <MX_GPIO_Init+0x308>)
 8001f1e:	f001 fda9 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f28:	4877      	ldr	r0, [pc, #476]	; (8002108 <MX_GPIO_Init+0x2f8>)
 8001f2a:	f001 fda3 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001f34:	4879      	ldr	r0, [pc, #484]	; (800211c <MX_GPIO_Init+0x30c>)
 8001f36:	f001 fd9d 	bl	8003a74 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2118      	movs	r1, #24
 8001f3e:	4878      	ldr	r0, [pc, #480]	; (8002120 <MX_GPIO_Init+0x310>)
 8001f40:	f001 fd98 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001f44:	f648 0387 	movw	r3, #34951	; 0x8887
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	486a      	ldr	r0, [pc, #424]	; (8002108 <MX_GPIO_Init+0x2f8>)
 8001f5e:	f001 fbc5 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001f62:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	4619      	mov	r1, r3
 8001f76:	4864      	ldr	r0, [pc, #400]	; (8002108 <MX_GPIO_Init+0x2f8>)
 8001f78:	f001 fbb8 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001f7c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f82:	2303      	movs	r3, #3
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	485d      	ldr	r0, [pc, #372]	; (8002108 <MX_GPIO_Init+0x2f8>)
 8001f92:	f001 fbab 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	4857      	ldr	r0, [pc, #348]	; (800210c <MX_GPIO_Init+0x2fc>)
 8001fb0:	f001 fb9c 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001fb4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4850      	ldr	r0, [pc, #320]	; (800210c <MX_GPIO_Init+0x2fc>)
 8001fca:	f001 fb8f 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001fce:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	484b      	ldr	r0, [pc, #300]	; (8002110 <MX_GPIO_Init+0x300>)
 8001fe4:	f001 fb82 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001fe8:	f242 0302 	movw	r3, #8194	; 0x2002
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	4843      	ldr	r0, [pc, #268]	; (8002110 <MX_GPIO_Init+0x300>)
 8002002:	f001 fb73 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8002006:	f248 0304 	movw	r3, #32772	; 0x8004
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	483d      	ldr	r0, [pc, #244]	; (8002110 <MX_GPIO_Init+0x300>)
 800201c:	f001 fb66 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8002020:	f641 0305 	movw	r3, #6149	; 0x1805
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002032:	4619      	mov	r1, r3
 8002034:	4837      	ldr	r0, [pc, #220]	; (8002114 <MX_GPIO_Init+0x304>)
 8002036:	f001 fb59 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 800203a:	f240 6302 	movw	r3, #1538	; 0x602
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	4619      	mov	r1, r3
 8002052:	4830      	ldr	r0, [pc, #192]	; (8002114 <MX_GPIO_Init+0x304>)
 8002054:	f001 fb4a 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002058:	f64b 7373 	movw	r3, #49011	; 0xbf73
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205e:	2303      	movs	r3, #3
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206a:	4619      	mov	r1, r3
 800206c:	482a      	ldr	r0, [pc, #168]	; (8002118 <MX_GPIO_Init+0x308>)
 800206e:	f001 fb3d 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8002072:	f244 0384 	movw	r3, #16516	; 0x4084
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002088:	4619      	mov	r1, r3
 800208a:	4823      	ldr	r0, [pc, #140]	; (8002118 <MX_GPIO_Init+0x308>)
 800208c:	f001 fb2e 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8002090:	f240 1343 	movw	r3, #323	; 0x143
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002096:	2303      	movs	r3, #3
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800209e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a2:	4619      	mov	r1, r3
 80020a4:	481d      	ldr	r0, [pc, #116]	; (800211c <MX_GPIO_Init+0x30c>)
 80020a6:	f001 fb21 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 80020aa:	f240 7304 	movw	r3, #1796	; 0x704
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b0:	2303      	movs	r3, #3
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	4619      	mov	r1, r3
 80020be:	4818      	ldr	r0, [pc, #96]	; (8002120 <MX_GPIO_Init+0x310>)
 80020c0:	f001 fb14 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 80020c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	4619      	mov	r1, r3
 80020d8:	4811      	ldr	r0, [pc, #68]	; (8002120 <MX_GPIO_Init+0x310>)
 80020da:	f001 fb07 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80020de:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f4:	4619      	mov	r1, r3
 80020f6:	4809      	ldr	r0, [pc, #36]	; (800211c <MX_GPIO_Init+0x30c>)
 80020f8:	f001 faf8 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80020fc:	2318      	movs	r3, #24
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	e010      	b.n	8002124 <MX_GPIO_Init+0x314>
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40021000 	.word	0x40021000
 800210c:	40020800 	.word	0x40020800
 8002110:	40021400 	.word	0x40021400
 8002114:	40020000 	.word	0x40020000
 8002118:	40020400 	.word	0x40020400
 800211c:	40021800 	.word	0x40021800
 8002120:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4803      	ldr	r0, [pc, #12]	; (8002144 <MX_GPIO_Init+0x334>)
 8002138:	f001 fad8 	bl	80036ec <HAL_GPIO_Init>

}
 800213c:	bf00      	nop
 800213e:	3738      	adds	r7, #56	; 0x38
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020c00 	.word	0x40020c00

08002148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800214e:	f000 fd8e 	bl	8002c6e <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t spannungen[12] = {0};
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
 8002160:	615a      	str	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002162:	f000 f917 	bl	8002394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002166:	f7ff fe53 	bl	8001e10 <MX_GPIO_Init>
  MX_CAN1_Init();
 800216a:	f7ff fd43 	bl	8001bf4 <MX_CAN1_Init>
  MX_SPI4_Init();
 800216e:	f000 f9ed 	bl	800254c <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8002172:	f000 fcc5 	bl	8002b00 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002176:	f7ff fcab 	bl	8001ad0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800217a:	f000 fb23 	bl	80027c4 <MX_TIM1_Init>
  MX_TIM4_Init();
 800217e:	f000 fba7 	bl	80028d0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002182:	f000 f9a5 	bl	80024d0 <MX_SPI1_Init>
  MX_CAN3_Init();
 8002186:	f7ff fd6b 	bl	8001c60 <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 800218a:	f7ff fa61 	bl	8001650 <readResetSource>
 800218e:	4603      	mov	r3, r0
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff faaf 	bl	80016f4 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8002196:	213a      	movs	r1, #58	; 0x3a
 8002198:	486e      	ldr	r0, [pc, #440]	; (8002354 <main+0x20c>)
 800219a:	f7fe f9d1 	bl	8000540 <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 800219e:	f7ff fa2d 	bl	80015fc <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 80021a2:	f7ff fc57 	bl	8001a54 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 80021a6:	f7ff fba1 	bl	80018ec <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b0:	4869      	ldr	r0, [pc, #420]	; (8002358 <main+0x210>)
 80021b2:	f001 fc5f 	bl	8003a74 <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 80021b6:	2014      	movs	r0, #20
 80021b8:	f000 fdb6 	bl	8002d28 <HAL_Delay>

    uartTransmit("\n", 1);
 80021bc:	2101      	movs	r1, #1
 80021be:	4867      	ldr	r0, [pc, #412]	; (800235c <main+0x214>)
 80021c0:	f7fe f9be 	bl	8000540 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 80021c4:	2122      	movs	r1, #34	; 0x22
 80021c6:	4866      	ldr	r0, [pc, #408]	; (8002360 <main+0x218>)
 80021c8:	f7fe f9ba 	bl	8000540 <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 80021cc:	f7fe fba6 	bl	800091c <ltc6811_check>
 80021d0:	4603      	mov	r3, r0
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b63      	ldr	r3, [pc, #396]	; (8002364 <main+0x21c>)
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	4b62      	ldr	r3, [pc, #392]	; (8002364 <main+0x21c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01e      	beq.n	800221e <main+0xd6>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 80021e0:	211f      	movs	r1, #31
 80021e2:	4861      	ldr	r0, [pc, #388]	; (8002368 <main+0x220>)
 80021e4:	f7fe f9ac 	bl	8000540 <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 80021e8:	4a60      	ldr	r2, [pc, #384]	; (800236c <main+0x224>)
 80021ea:	7813      	ldrb	r3, [r2, #0]
 80021ec:	f043 0320 	orr.w	r3, r3, #32
 80021f0:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 80021f2:	4b5e      	ldr	r3, [pc, #376]	; (800236c <main+0x224>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002202:	485b      	ldr	r0, [pc, #364]	; (8002370 <main+0x228>)
 8002204:	f001 fc36 	bl	8003a74 <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 8002208:	4b56      	ldr	r3, [pc, #344]	; (8002364 <main+0x21c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	210a      	movs	r1, #10
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f9aa 	bl	8000568 <uartTransmitNumber>
		uartTransmit("\n", 1);
 8002214:	2101      	movs	r1, #1
 8002216:	4851      	ldr	r0, [pc, #324]	; (800235c <main+0x214>)
 8002218:	f7fe f992 	bl	8000540 <uartTransmit>
 800221c:	e003      	b.n	8002226 <main+0xde>
		//return 0;														// Programm abbrechen
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 800221e:	2120      	movs	r1, #32
 8002220:	4854      	ldr	r0, [pc, #336]	; (8002374 <main+0x22c>)
 8002222:	f7fe f98d 	bl	8000540 <uartTransmit>
	}

	ltc6811_read(RDCFG, &data[0]);
 8002226:	4954      	ldr	r1, [pc, #336]	; (8002378 <main+0x230>)
 8002228:	2002      	movs	r0, #2
 800222a:	f7fe fa8f 	bl	800074c <ltc6811_read>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 800222e:	f240 7011 	movw	r0, #1809	; 0x711
 8002232:	f7fe fa11 	bl	8000658 <ltc6811>
	ltc6811(CLRSTAT);
 8002236:	f240 7013 	movw	r0, #1811	; 0x713
 800223a:	f7fe fa0d 	bl	8000658 <ltc6811>
	ltc6811(CLRAUX);
 800223e:	f240 7012 	movw	r0, #1810	; 0x712
 8002242:	f7fe fa09 	bl	8000658 <ltc6811>

	ltc6811(ADAX | MD262 | GPIOALL);
 8002246:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 800224a:	f7fe fa05 	bl	8000658 <ltc6811>
	ltc6811_read(RDAUXA, &data[0]);
 800224e:	494a      	ldr	r1, [pc, #296]	; (8002378 <main+0x230>)
 8002250:	200c      	movs	r0, #12
 8002252:	f7fe fa7b 	bl	800074c <ltc6811_read>
	ltc6811(ADCVC | MD73 | CELLALL);
 8002256:	f44f 7058 	mov.w	r0, #864	; 0x360
 800225a:	f7fe f9fd 	bl	8000658 <ltc6811>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 800225e:	f44f 7058 	mov.w	r0, #864	; 0x360
 8002262:	f7fe f9f9 	bl	8000658 <ltc6811>
		HAL_Delay(300);
 8002266:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800226a:	f000 fd5d 	bl	8002d28 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 800226e:	4942      	ldr	r1, [pc, #264]	; (8002378 <main+0x230>)
 8002270:	2004      	movs	r0, #4
 8002272:	f7fe fa6b 	bl	800074c <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 8002276:	4941      	ldr	r1, [pc, #260]	; (800237c <main+0x234>)
 8002278:	2006      	movs	r0, #6
 800227a:	f7fe fa67 	bl	800074c <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 800227e:	4940      	ldr	r1, [pc, #256]	; (8002380 <main+0x238>)
 8002280:	2008      	movs	r0, #8
 8002282:	f7fe fa63 	bl	800074c <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 8002286:	493f      	ldr	r1, [pc, #252]	; (8002384 <main+0x23c>)
 8002288:	200a      	movs	r0, #10
 800228a:	f7fe fa5f 	bl	800074c <ltc6811_read>

		for (uint8_t i = 0; i < 12; i++)
 800228e:	2300      	movs	r3, #0
 8002290:	77fb      	strb	r3, [r7, #31]
 8002292:	e018      	b.n	80022c6 <main+0x17e>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 8002294:	7ffb      	ldrb	r3, [r7, #31]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	3301      	adds	r3, #1
 800229a:	4a37      	ldr	r2, [pc, #220]	; (8002378 <main+0x230>)
 800229c:	5cd3      	ldrb	r3, [r2, r3]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4934      	ldr	r1, [pc, #208]	; (8002378 <main+0x230>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	7ffb      	ldrb	r3, [r7, #31]
 80022b2:	b292      	uxth	r2, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	f107 0120 	add.w	r1, r7, #32
 80022ba:	440b      	add	r3, r1
 80022bc:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < 12; i++)
 80022c0:	7ffb      	ldrb	r3, [r7, #31]
 80022c2:	3301      	adds	r3, #1
 80022c4:	77fb      	strb	r3, [r7, #31]
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
 80022c8:	2b0b      	cmp	r3, #11
 80022ca:	d9e3      	bls.n	8002294 <main+0x14c>
		}

		for (uint8_t i = 0; i < 12; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	77bb      	strb	r3, [r7, #30]
 80022d0:	e011      	b.n	80022f6 <main+0x1ae>
		{
			uartTransmitNumber(spannungen[i], 10);
 80022d2:	7fbb      	ldrb	r3, [r7, #30]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	f107 0220 	add.w	r2, r7, #32
 80022da:	4413      	add	r3, r2
 80022dc:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80022e0:	210a      	movs	r1, #10
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f940 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 80022e8:	2101      	movs	r1, #1
 80022ea:	4827      	ldr	r0, [pc, #156]	; (8002388 <main+0x240>)
 80022ec:	f7fe f928 	bl	8000540 <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 80022f0:	7fbb      	ldrb	r3, [r7, #30]
 80022f2:	3301      	adds	r3, #1
 80022f4:	77bb      	strb	r3, [r7, #30]
 80022f6:	7fbb      	ldrb	r3, [r7, #30]
 80022f8:	2b0b      	cmp	r3, #11
 80022fa:	d9ea      	bls.n	80022d2 <main+0x18a>
		}

		tmp = 0;
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <main+0x244>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 12; i++)
 8002302:	2300      	movs	r3, #0
 8002304:	777b      	strb	r3, [r7, #29]
 8002306:	e00f      	b.n	8002328 <main+0x1e0>
		{
			tmp += spannungen[i];
 8002308:	7f7b      	ldrb	r3, [r7, #29]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	f107 0220 	add.w	r2, r7, #32
 8002310:	4413      	add	r3, r2
 8002312:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8002316:	461a      	mov	r2, r3
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <main+0x244>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4413      	add	r3, r2
 800231e:	4a1b      	ldr	r2, [pc, #108]	; (800238c <main+0x244>)
 8002320:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 12; i++)
 8002322:	7f7b      	ldrb	r3, [r7, #29]
 8002324:	3301      	adds	r3, #1
 8002326:	777b      	strb	r3, [r7, #29]
 8002328:	7f7b      	ldrb	r3, [r7, #29]
 800232a:	2b0b      	cmp	r3, #11
 800232c:	d9ec      	bls.n	8002308 <main+0x1c0>
		}
		tmp /= 12;
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <main+0x244>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <main+0x248>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	08db      	lsrs	r3, r3, #3
 800233a:	4a14      	ldr	r2, [pc, #80]	; (800238c <main+0x244>)
 800233c:	6013      	str	r3, [r2, #0]
		uartTransmitNumber(tmp, 10);
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <main+0x244>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	210a      	movs	r1, #10
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f90f 	bl	8000568 <uartTransmitNumber>

		uartTransmit("\n", 1);
 800234a:	2101      	movs	r1, #1
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <main+0x214>)
 800234e:	f7fe f8f7 	bl	8000540 <uartTransmit>
		ltc6811(ADCVC | MD73 | CELLALL);
 8002352:	e784      	b.n	800225e <main+0x116>
 8002354:	08007d18 	.word	0x08007d18
 8002358:	40021000 	.word	0x40021000
 800235c:	08007d54 	.word	0x08007d54
 8002360:	08007d58 	.word	0x08007d58
 8002364:	20000108 	.word	0x20000108
 8002368:	08007d7c 	.word	0x08007d7c
 800236c:	2000005c 	.word	0x2000005c
 8002370:	40020400 	.word	0x40020400
 8002374:	08007d9c 	.word	0x08007d9c
 8002378:	2000002c 	.word	0x2000002c
 800237c:	20000032 	.word	0x20000032
 8002380:	20000038 	.word	0x20000038
 8002384:	2000003e 	.word	0x2000003e
 8002388:	08007dbc 	.word	0x08007dbc
 800238c:	20000104 	.word	0x20000104
 8002390:	aaaaaaab 	.word	0xaaaaaaab

08002394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b094      	sub	sp, #80	; 0x50
 8002398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	2234      	movs	r2, #52	; 0x34
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f005 f95e 	bl	8007664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <SystemClock_Config+0xd8>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	4a2b      	ldr	r2, [pc, #172]	; (800246c <SystemClock_Config+0xd8>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6413      	str	r3, [r2, #64]	; 0x40
 80023c4:	4b29      	ldr	r3, [pc, #164]	; (800246c <SystemClock_Config+0xd8>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <SystemClock_Config+0xdc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a26      	ldr	r2, [pc, #152]	; (8002470 <SystemClock_Config+0xdc>)
 80023d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <SystemClock_Config+0xdc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023e8:	2301      	movs	r3, #1
 80023ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f2:	2302      	movs	r3, #2
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80023fc:	2319      	movs	r3, #25
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002400:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002404:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002406:	2302      	movs	r3, #2
 8002408:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800240a:	2308      	movs	r3, #8
 800240c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800240e:	2302      	movs	r3, #2
 8002410:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fb96 	bl	8003b48 <HAL_RCC_OscConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002422:	f000 f827 	bl	8002474 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002426:	f001 fb3f 	bl	8003aa8 <HAL_PWREx_EnableOverDrive>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002430:	f000 f820 	bl	8002474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002434:	230f      	movs	r3, #15
 8002436:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002438:	2302      	movs	r3, #2
 800243a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002440:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	2107      	movs	r1, #7
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fe26 	bl	80040a4 <HAL_RCC_ClockConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800245e:	f000 f809 	bl	8002474 <Error_Handler>
  }
}
 8002462:	bf00      	nop
 8002464:	3750      	adds	r7, #80	; 0x50
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	40007000 	.word	0x40007000

08002474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002478:	b672      	cpsid	i
}
 800247a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <Error_Handler+0x50>)
 800247e:	7813      	ldrb	r3, [r2, #0]
 8002480:	f043 0320 	orr.w	r3, r3, #32
 8002484:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <Error_Handler+0x50>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002496:	480c      	ldr	r0, [pc, #48]	; (80024c8 <Error_Handler+0x54>)
 8002498:	f001 faec 	bl	8003a74 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 800249c:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <Error_Handler+0x50>)
 800249e:	7813      	ldrb	r3, [r2, #0]
 80024a0:	f36f 1386 	bfc	r3, #6, #1
 80024a4:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <Error_Handler+0x50>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	2104      	movs	r1, #4
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <Error_Handler+0x54>)
 80024b6:	f001 fadd 	bl	8003a74 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 80024ba:	2122      	movs	r1, #34	; 0x22
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <Error_Handler+0x58>)
 80024be:	f7fe f83f 	bl	8000540 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 80024c2:	e7fe      	b.n	80024c2 <Error_Handler+0x4e>
 80024c4:	2000005c 	.word	0x2000005c
 80024c8:	40020400 	.word	0x40020400
 80024cc:	08007dc0 	.word	0x08007dc0

080024d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <MX_SPI1_Init+0x74>)
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <MX_SPI1_Init+0x78>)
 80024d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_SPI1_Init+0x74>)
 80024dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <MX_SPI1_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <MX_SPI1_Init+0x74>)
 80024ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80024ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <MX_SPI1_Init+0x74>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <MX_SPI1_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_SPI1_Init+0x74>)
 80024fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002502:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <MX_SPI1_Init+0x74>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_SPI1_Init+0x74>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MX_SPI1_Init+0x74>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MX_SPI1_Init+0x74>)
 8002518:	2200      	movs	r2, #0
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MX_SPI1_Init+0x74>)
 800251e:	2207      	movs	r2, #7
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <MX_SPI1_Init+0x74>)
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_SPI1_Init+0x74>)
 800252a:	2208      	movs	r2, #8
 800252c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_SPI1_Init+0x74>)
 8002530:	f002 fbb6 	bl	8004ca0 <HAL_SPI_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800253a:	f7ff ff9b 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000170 	.word	0x20000170
 8002548:	40013000 	.word	0x40013000

0800254c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <MX_SPI4_Init+0x74>)
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <MX_SPI4_Init+0x78>)
 8002554:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <MX_SPI4_Init+0x74>)
 8002558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800255c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <MX_SPI4_Init+0x74>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <MX_SPI4_Init+0x74>)
 8002566:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800256a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <MX_SPI4_Init+0x74>)
 800256e:	2202      	movs	r2, #2
 8002570:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <MX_SPI4_Init+0x74>)
 8002574:	2201      	movs	r2, #1
 8002576:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <MX_SPI4_Init+0x74>)
 800257a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <MX_SPI4_Init+0x74>)
 8002582:	2230      	movs	r2, #48	; 0x30
 8002584:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <MX_SPI4_Init+0x74>)
 8002588:	2200      	movs	r2, #0
 800258a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <MX_SPI4_Init+0x74>)
 800258e:	2200      	movs	r2, #0
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <MX_SPI4_Init+0x74>)
 8002594:	2200      	movs	r2, #0
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <MX_SPI4_Init+0x74>)
 800259a:	2207      	movs	r2, #7
 800259c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <MX_SPI4_Init+0x74>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <MX_SPI4_Init+0x74>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <MX_SPI4_Init+0x74>)
 80025ac:	f002 fb78 	bl	8004ca0 <HAL_SPI_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80025b6:	f7ff ff5d 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000010c 	.word	0x2000010c
 80025c4:	40013400 	.word	0x40013400

080025c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08c      	sub	sp, #48	; 0x30
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a3d      	ldr	r2, [pc, #244]	; (80026dc <HAL_SPI_MspInit+0x114>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d145      	bne.n	8002676 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a3c      	ldr	r2, [pc, #240]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 80025f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002602:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a36      	ldr	r2, [pc, #216]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 8002608:	f043 0308 	orr.w	r3, r3, #8
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a30      	ldr	r2, [pc, #192]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 8002620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002642:	2305      	movs	r3, #5
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	4619      	mov	r1, r3
 800264c:	4825      	ldr	r0, [pc, #148]	; (80026e4 <HAL_SPI_MspInit+0x11c>)
 800264e:	f001 f84d 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8002652:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002664:	2305      	movs	r3, #5
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002668:	f107 031c 	add.w	r3, r7, #28
 800266c:	4619      	mov	r1, r3
 800266e:	481e      	ldr	r0, [pc, #120]	; (80026e8 <HAL_SPI_MspInit+0x120>)
 8002670:	f001 f83c 	bl	80036ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002674:	e02d      	b.n	80026d2 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_SPI_MspInit+0x124>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d128      	bne.n	80026d2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	4a16      	ldr	r2, [pc, #88]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 8002686:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800268a:	6453      	str	r3, [r2, #68]	; 0x44
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 800269e:	f043 0310 	orr.w	r3, r3, #16
 80026a2:	6313      	str	r3, [r2, #48]	; 0x30
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_SPI_MspInit+0x118>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 80026b0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80026c2:	2305      	movs	r3, #5
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4808      	ldr	r0, [pc, #32]	; (80026f0 <HAL_SPI_MspInit+0x128>)
 80026ce:	f001 f80d 	bl	80036ec <HAL_GPIO_Init>
}
 80026d2:	bf00      	nop
 80026d4:	3730      	adds	r7, #48	; 0x30
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40013000 	.word	0x40013000
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021800 	.word	0x40021800
 80026ec:	40013400 	.word	0x40013400
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_MspInit+0x44>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_MspInit+0x44>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_MspInit+0x44>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_MspInit+0x44>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_MspInit+0x44>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_MspInit+0x44>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <HardFault_Handler+0x4>

08002750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <MemManage_Handler+0x4>

08002756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <UsageFault_Handler+0x4>

08002762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002790:	f000 faaa 	bl	8002ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}

08002798 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <SystemInit+0x28>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <SystemInit+0x28>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <SystemInit+0x28>)
 80027ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027b2:	609a      	str	r2, [r3, #8]
#endif
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
 80027d8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	463b      	mov	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027f2:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <MX_TIM1_Init+0x104>)
 80027f4:	4a35      	ldr	r2, [pc, #212]	; (80028cc <MX_TIM1_Init+0x108>)
 80027f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027f8:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <MX_TIM1_Init+0x104>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fe:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <MX_TIM1_Init+0x104>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <MX_TIM1_Init+0x104>)
 8002806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800280a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280c:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <MX_TIM1_Init+0x104>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <MX_TIM1_Init+0x104>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <MX_TIM1_Init+0x104>)
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800281e:	482a      	ldr	r0, [pc, #168]	; (80028c8 <MX_TIM1_Init+0x104>)
 8002820:	f003 f9f5 	bl	8005c0e <HAL_TIM_IC_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800282a:	f7ff fe23 	bl	8002474 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800282e:	2304      	movs	r3, #4
 8002830:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002832:	2350      	movs	r3, #80	; 0x50
 8002834:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002842:	f107 031c 	add.w	r3, r7, #28
 8002846:	4619      	mov	r1, r3
 8002848:	481f      	ldr	r0, [pc, #124]	; (80028c8 <MX_TIM1_Init+0x104>)
 800284a:	f003 fbe7 	bl	800601c <HAL_TIM_SlaveConfigSynchro>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002854:	f7ff fe0e 	bl	8002474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800285c:	2301      	movs	r3, #1
 800285e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	2200      	movs	r2, #0
 800286e:	4619      	mov	r1, r3
 8002870:	4815      	ldr	r0, [pc, #84]	; (80028c8 <MX_TIM1_Init+0x104>)
 8002872:	f003 fa23 	bl	8005cbc <HAL_TIM_IC_ConfigChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800287c:	f7ff fdfa 	bl	8002474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002880:	2302      	movs	r3, #2
 8002882:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002884:	2302      	movs	r3, #2
 8002886:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2204      	movs	r2, #4
 800288e:	4619      	mov	r1, r3
 8002890:	480d      	ldr	r0, [pc, #52]	; (80028c8 <MX_TIM1_Init+0x104>)
 8002892:	f003 fa13 	bl	8005cbc <HAL_TIM_IC_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800289c:	f7ff fdea 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a0:	2300      	movs	r3, #0
 80028a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028a4:	2300      	movs	r3, #0
 80028a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028ac:	463b      	mov	r3, r7
 80028ae:	4619      	mov	r1, r3
 80028b0:	4805      	ldr	r0, [pc, #20]	; (80028c8 <MX_TIM1_Init+0x104>)
 80028b2:	f004 f931 	bl	8006b18 <HAL_TIMEx_MasterConfigSynchronization>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80028bc:	f7ff fdda 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	3730      	adds	r7, #48	; 0x30
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000220 	.word	0x20000220
 80028cc:	40010000 	.word	0x40010000

080028d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d6:	f107 031c 	add.w	r3, r7, #28
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028e2:	463b      	mov	r3, r7
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
 80028f0:	615a      	str	r2, [r3, #20]
 80028f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <MX_TIM4_Init+0xf0>)
 80028f6:	4a33      	ldr	r2, [pc, #204]	; (80029c4 <MX_TIM4_Init+0xf4>)
 80028f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028fa:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <MX_TIM4_Init+0xf0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <MX_TIM4_Init+0xf0>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <MX_TIM4_Init+0xf0>)
 8002908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800290c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290e:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <MX_TIM4_Init+0xf0>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <MX_TIM4_Init+0xf0>)
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800291a:	4829      	ldr	r0, [pc, #164]	; (80029c0 <MX_TIM4_Init+0xf0>)
 800291c:	f003 f920 	bl	8005b60 <HAL_TIM_PWM_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002926:	f7ff fda5 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	4821      	ldr	r0, [pc, #132]	; (80029c0 <MX_TIM4_Init+0xf0>)
 800293a:	f004 f8ed 	bl	8006b18 <HAL_TIMEx_MasterConfigSynchronization>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002944:	f7ff fd96 	bl	8002474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002948:	2360      	movs	r3, #96	; 0x60
 800294a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002958:	463b      	mov	r3, r7
 800295a:	2200      	movs	r2, #0
 800295c:	4619      	mov	r1, r3
 800295e:	4818      	ldr	r0, [pc, #96]	; (80029c0 <MX_TIM4_Init+0xf0>)
 8002960:	f003 fa48 	bl	8005df4 <HAL_TIM_PWM_ConfigChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800296a:	f7ff fd83 	bl	8002474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800296e:	463b      	mov	r3, r7
 8002970:	2204      	movs	r2, #4
 8002972:	4619      	mov	r1, r3
 8002974:	4812      	ldr	r0, [pc, #72]	; (80029c0 <MX_TIM4_Init+0xf0>)
 8002976:	f003 fa3d 	bl	8005df4 <HAL_TIM_PWM_ConfigChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002980:	f7ff fd78 	bl	8002474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002984:	463b      	mov	r3, r7
 8002986:	2208      	movs	r2, #8
 8002988:	4619      	mov	r1, r3
 800298a:	480d      	ldr	r0, [pc, #52]	; (80029c0 <MX_TIM4_Init+0xf0>)
 800298c:	f003 fa32 	bl	8005df4 <HAL_TIM_PWM_ConfigChannel>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002996:	f7ff fd6d 	bl	8002474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800299a:	463b      	mov	r3, r7
 800299c:	220c      	movs	r2, #12
 800299e:	4619      	mov	r1, r3
 80029a0:	4807      	ldr	r0, [pc, #28]	; (80029c0 <MX_TIM4_Init+0xf0>)
 80029a2:	f003 fa27 	bl	8005df4 <HAL_TIM_PWM_ConfigChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80029ac:	f7ff fd62 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029b0:	4803      	ldr	r0, [pc, #12]	; (80029c0 <MX_TIM4_Init+0xf0>)
 80029b2:	f000 f86d 	bl	8002a90 <HAL_TIM_MspPostInit>

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200001d4 	.word	0x200001d4
 80029c4:	40000800 	.word	0x40000800

080029c8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_TIM_IC_MspInit+0x7c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d128      	bne.n	8002a3c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 8002a08:	f043 0310 	orr.w	r3, r3, #16
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_TIM_IC_MspInit+0x80>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8002a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_TIM_IC_MspInit+0x84>)
 8002a38:	f000 fe58 	bl	80036ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40010000 	.word	0x40010000
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <HAL_TIM_PWM_MspInit+0x38>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d10b      	bne.n	8002a7a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <HAL_TIM_MspPostInit+0x64>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d11c      	bne.n	8002aec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_TIM_MspPostInit+0x68>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_TIM_MspPostInit+0x68>)
 8002ab8:	f043 0308 	orr.w	r3, r3, #8
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_TIM_MspPostInit+0x68>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 8002aca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002ace:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002adc:	2302      	movs	r3, #2
 8002ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4805      	ldr	r0, [pc, #20]	; (8002afc <HAL_TIM_MspPostInit+0x6c>)
 8002ae8:	f000 fe00 	bl	80036ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020c00 	.word	0x40020c00

08002b00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b06:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <MX_USART2_UART_Init+0x5c>)
 8002b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b26:	220c      	movs	r2, #12
 8002b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_USART2_UART_Init+0x58>)
 8002b44:	f004 f876 	bl	8006c34 <HAL_UART_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b4e:	f7ff fc91 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000026c 	.word	0x2000026c
 8002b5c:	40004400 	.word	0x40004400

08002b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b0ae      	sub	sp, #184	; 0xb8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	2290      	movs	r2, #144	; 0x90
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f004 fd6f 	bl	8007664 <memset>
  if(uartHandle->Instance==USART2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <HAL_UART_MspInit+0xb0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d13a      	bne.n	8002c06 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b94:	2300      	movs	r3, #0
 8002b96:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 fc57 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ba8:	f7ff fc64 	bl	8002474 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_UART_MspInit+0xb4>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_UART_MspInit+0xb4>)
 8002bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_UART_MspInit+0xb4>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_UART_MspInit+0xb4>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <HAL_UART_MspInit+0xb4>)
 8002bca:	f043 0308 	orr.w	r3, r3, #8
 8002bce:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_UART_MspInit+0xb4>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bdc:	2360      	movs	r3, #96	; 0x60
 8002bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bf4:	2307      	movs	r3, #7
 8002bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4805      	ldr	r0, [pc, #20]	; (8002c18 <HAL_UART_MspInit+0xb8>)
 8002c02:	f000 fd73 	bl	80036ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c06:	bf00      	nop
 8002c08:	37b8      	adds	r7, #184	; 0xb8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40004400 	.word	0x40004400
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020c00 	.word	0x40020c00

08002c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c22:	e003      	b.n	8002c2c <LoopCopyDataInit>

08002c24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c2a:	3104      	adds	r1, #4

08002c2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c2c:	480b      	ldr	r0, [pc, #44]	; (8002c5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c34:	d3f6      	bcc.n	8002c24 <CopyDataInit>
  ldr  r2, =_sbss
 8002c36:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c38:	e002      	b.n	8002c40 <LoopFillZerobss>

08002c3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c3c:	f842 3b04 	str.w	r3, [r2], #4

08002c40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c44:	d3f9      	bcc.n	8002c3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c46:	f7ff fda7 	bl	8002798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c4a:	f004 fce7 	bl	800761c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c4e:	f7ff fa7b 	bl	8002148 <main>
  bx  lr    
 8002c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c54:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002c58:	08008034 	.word	0x08008034
  ldr  r0, =_sdata
 8002c5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c60:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002c64:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002c68:	200002f4 	.word	0x200002f4

08002c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c6c:	e7fe      	b.n	8002c6c <ADC_IRQHandler>

08002c6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c72:	2003      	movs	r0, #3
 8002c74:	f000 fd06 	bl	8003684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f000 f805 	bl	8002c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c7e:	f7ff fd39 	bl	80026f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_InitTick+0x54>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_InitTick+0x58>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fd13 	bl	80036d2 <HAL_SYSTICK_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00e      	b.n	8002cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b0f      	cmp	r3, #15
 8002cba:	d80a      	bhi.n	8002cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	f000 fce9 	bl	800369a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc8:	4a06      	ldr	r2, [pc, #24]	; (8002ce4 <HAL_InitTick+0x5c>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000008 	.word	0x20000008
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_IncTick+0x20>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_IncTick+0x24>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_IncTick+0x24>)
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	200002f0 	.word	0x200002f0

08002d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return uwTick;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_GetTick+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	200002f0 	.word	0x200002f0

08002d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d30:	f7ff ffee 	bl	8002d10 <HAL_GetTick>
 8002d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d005      	beq.n	8002d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_Delay+0x44>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d4e:	bf00      	nop
 8002d50:	f7ff ffde 	bl	8002d10 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d8f7      	bhi.n	8002d50 <HAL_Delay+0x28>
  {
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000008 	.word	0x20000008

08002d70 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8002d74:	4b02      	ldr	r3, [pc, #8]	; (8002d80 <HAL_GetHalVersion+0x10>)
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	01020a00 	.word	0x01020a00

08002d84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_GetREVID+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e0042000 	.word	0xe0042000

08002d9c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <HAL_GetDEVID+0x18>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e0042000 	.word	0xe0042000

08002db8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_GetUIDw0+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	1ff0f420 	.word	0x1ff0f420

08002dd0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_GetUIDw1+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	1ff0f424 	.word	0x1ff0f424

08002de8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_GetUIDw2+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	1ff0f428 	.word	0x1ff0f428

08002e00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e031      	b.n	8002e7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe fea8 	bl	8001b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d116      	bne.n	8002e6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_ADC_Init+0x84>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	f043 0202 	orr.w	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f970 	bl	8003134 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
 8002e6a:	e001      	b.n	8002e70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	ffffeefd 	.word	0xffffeefd

08002e88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x1c>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e136      	b.n	8003112 <HAL_ADC_ConfigChannel+0x28a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	d93a      	bls.n	8002f2a <HAL_ADC_ConfigChannel+0xa2>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ebc:	d035      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68d9      	ldr	r1, [r3, #12]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b1e      	subs	r3, #30
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a8d      	ldr	r2, [pc, #564]	; (8003120 <HAL_ADC_ConfigChannel+0x298>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d10a      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68d9      	ldr	r1, [r3, #12]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	061a      	lsls	r2, r3, #24
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f02:	e035      	b.n	8002f70 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68d9      	ldr	r1, [r3, #12]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4403      	add	r3, r0
 8002f1c:	3b1e      	subs	r3, #30
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f28:	e022      	b.n	8002f70 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6919      	ldr	r1, [r3, #16]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	2207      	movs	r2, #7
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43da      	mvns	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6919      	ldr	r1, [r3, #16]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	4603      	mov	r3, r0
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4403      	add	r3, r0
 8002f66:	409a      	lsls	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b06      	cmp	r3, #6
 8002f76:	d824      	bhi.n	8002fc2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	3b05      	subs	r3, #5
 8002f8a:	221f      	movs	r2, #31
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43da      	mvns	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	400a      	ands	r2, r1
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b05      	subs	r3, #5
 8002fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc0:	e04c      	b.n	800305c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d824      	bhi.n	8003014 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b23      	subs	r3, #35	; 0x23
 8002fdc:	221f      	movs	r2, #31
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	400a      	ands	r2, r1
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b23      	subs	r3, #35	; 0x23
 8003006:	fa00 f203 	lsl.w	r2, r0, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
 8003012:	e023      	b.n	800305c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	3b41      	subs	r3, #65	; 0x41
 8003026:	221f      	movs	r2, #31
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43da      	mvns	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	400a      	ands	r2, r1
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	3b41      	subs	r3, #65	; 0x41
 8003050:	fa00 f203 	lsl.w	r2, r0, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a30      	ldr	r2, [pc, #192]	; (8003124 <HAL_ADC_ConfigChannel+0x29c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10a      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1f4>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800306e:	d105      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 8003076:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800307a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <HAL_ADC_ConfigChannel+0x29c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10f      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x21e>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b12      	cmp	r3, #18
 800308c:	d10b      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4a25      	ldr	r2, [pc, #148]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 8003094:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003098:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 80030a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <HAL_ADC_ConfigChannel+0x29c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d12b      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x280>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <HAL_ADC_ConfigChannel+0x298>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <HAL_ADC_ConfigChannel+0x23a>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b11      	cmp	r3, #17
 80030c0:	d122      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4a18      	ldr	r2, [pc, #96]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 80030c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a15      	ldr	r2, [pc, #84]	; (8003128 <HAL_ADC_ConfigChannel+0x2a0>)
 80030d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <HAL_ADC_ConfigChannel+0x298>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d111      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_ADC_ConfigChannel+0x2a4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a11      	ldr	r2, [pc, #68]	; (8003130 <HAL_ADC_ConfigChannel+0x2a8>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0c9a      	lsrs	r2, r3, #18
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030fa:	e002      	b.n	8003102 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3b01      	subs	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f9      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	10000012 	.word	0x10000012
 8003124:	40012000 	.word	0x40012000
 8003128:	40012300 	.word	0x40012300
 800312c:	20000000 	.word	0x20000000
 8003130:	431bde83 	.word	0x431bde83

08003134 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800313c:	4b78      	ldr	r3, [pc, #480]	; (8003320 <ADC_Init+0x1ec>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a77      	ldr	r2, [pc, #476]	; (8003320 <ADC_Init+0x1ec>)
 8003142:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003146:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003148:	4b75      	ldr	r3, [pc, #468]	; (8003320 <ADC_Init+0x1ec>)
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4973      	ldr	r1, [pc, #460]	; (8003320 <ADC_Init+0x1ec>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	021a      	lsls	r2, r3, #8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	4a58      	ldr	r2, [pc, #352]	; (8003324 <ADC_Init+0x1f0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6899      	ldr	r1, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	e00f      	b.n	800322e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800321c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800322c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0202 	bic.w	r2, r2, #2
 800323c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6899      	ldr	r1, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	005a      	lsls	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01b      	beq.n	8003294 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800327a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	3b01      	subs	r3, #1
 8003288:	035a      	lsls	r2, r3, #13
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	e007      	b.n	80032a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	3b01      	subs	r3, #1
 80032c0:	051a      	lsls	r2, r3, #20
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6899      	ldr	r1, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032e6:	025a      	lsls	r2, r3, #9
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6899      	ldr	r1, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	029a      	lsls	r2, r3, #10
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40012300 	.word	0x40012300
 8003324:	0f000001 	.word	0x0f000001

08003328 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0ed      	b.n	8003516 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe fcc0 	bl	8001ccc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800335c:	f7ff fcd8 	bl	8002d10 <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003362:	e012      	b.n	800338a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003364:	f7ff fcd4 	bl	8002d10 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b0a      	cmp	r3, #10
 8003370:	d90b      	bls.n	800338a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2205      	movs	r2, #5
 8003382:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0c5      	b.n	8003516 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0e5      	beq.n	8003364 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0202 	bic.w	r2, r2, #2
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033a8:	f7ff fcb2 	bl	8002d10 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033ae:	e012      	b.n	80033d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033b0:	f7ff fcae 	bl	8002d10 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b0a      	cmp	r3, #10
 80033bc:	d90b      	bls.n	80033d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2205      	movs	r2, #5
 80033ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e09f      	b.n	8003516 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e5      	bne.n	80033b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7e1b      	ldrb	r3, [r3, #24]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d108      	bne.n	80033fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e007      	b.n	800340e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800340c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7e5b      	ldrb	r3, [r3, #25]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d108      	bne.n	8003428 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e007      	b.n	8003438 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003436:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7e9b      	ldrb	r3, [r3, #26]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d108      	bne.n	8003452 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0220 	orr.w	r2, r2, #32
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e007      	b.n	8003462 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0220 	bic.w	r2, r2, #32
 8003460:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7edb      	ldrb	r3, [r3, #27]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d108      	bne.n	800347c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0210 	bic.w	r2, r2, #16
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e007      	b.n	800348c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0210 	orr.w	r2, r2, #16
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7f1b      	ldrb	r3, [r3, #28]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d108      	bne.n	80034a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0208 	orr.w	r2, r2, #8
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e007      	b.n	80034b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0208 	bic.w	r2, r2, #8
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7f5b      	ldrb	r3, [r3, #29]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d108      	bne.n	80034d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0204 	orr.w	r2, r2, #4
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e007      	b.n	80034e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0204 	bic.w	r2, r2, #4
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	ea42 0103 	orr.w	r1, r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <__NVIC_SetPriorityGrouping>:
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <__NVIC_SetPriorityGrouping+0x40>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800353c:	4013      	ands	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <__NVIC_SetPriorityGrouping+0x44>)
 800354a:	4313      	orrs	r3, r2
 800354c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800354e:	4a04      	ldr	r2, [pc, #16]	; (8003560 <__NVIC_SetPriorityGrouping+0x40>)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	60d3      	str	r3, [r2, #12]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000ed00 	.word	0xe000ed00
 8003564:	05fa0000 	.word	0x05fa0000

08003568 <__NVIC_GetPriorityGrouping>:
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <__NVIC_GetPriorityGrouping+0x18>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	f003 0307 	and.w	r3, r3, #7
}
 8003576:	4618      	mov	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <__NVIC_SetPriority>:
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	6039      	str	r1, [r7, #0]
 800358e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	2b00      	cmp	r3, #0
 8003596:	db0a      	blt.n	80035ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	490c      	ldr	r1, [pc, #48]	; (80035d0 <__NVIC_SetPriority+0x4c>)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	440b      	add	r3, r1
 80035a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035ac:	e00a      	b.n	80035c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4908      	ldr	r1, [pc, #32]	; (80035d4 <__NVIC_SetPriority+0x50>)
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	3b04      	subs	r3, #4
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	440b      	add	r3, r1
 80035c2:	761a      	strb	r2, [r3, #24]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000e100 	.word	0xe000e100
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <NVIC_EncodePriority>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f1c3 0307 	rsb	r3, r3, #7
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	bf28      	it	cs
 80035f6:	2304      	movcs	r3, #4
 80035f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2b06      	cmp	r3, #6
 8003600:	d902      	bls.n	8003608 <NVIC_EncodePriority+0x30>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3b03      	subs	r3, #3
 8003606:	e000      	b.n	800360a <NVIC_EncodePriority+0x32>
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	f04f 32ff 	mov.w	r2, #4294967295
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	401a      	ands	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003620:	f04f 31ff 	mov.w	r1, #4294967295
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	43d9      	mvns	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	4313      	orrs	r3, r2
}
 8003632:	4618      	mov	r0, r3
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <SysTick_Config>:
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3b01      	subs	r3, #1
 800364c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003650:	d301      	bcc.n	8003656 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003652:	2301      	movs	r3, #1
 8003654:	e00f      	b.n	8003676 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003656:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <SysTick_Config+0x40>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365e:	210f      	movs	r1, #15
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	f7ff ff8e 	bl	8003584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <SysTick_Config+0x40>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <SysTick_Config+0x40>)
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	e000e010 	.word	0xe000e010

08003684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff47 	bl	8003520 <__NVIC_SetPriorityGrouping>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ac:	f7ff ff5c 	bl	8003568 <__NVIC_GetPriorityGrouping>
 80036b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7ff ff8e 	bl	80035d8 <NVIC_EncodePriority>
 80036bc:	4602      	mov	r2, r0
 80036be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff5d 	bl	8003584 <__NVIC_SetPriority>
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff ffb0 	bl	8003640 <SysTick_Config>
 80036e0:	4603      	mov	r3, r0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	e175      	b.n	80039f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800370c:	2201      	movs	r2, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	f040 8164 	bne.w	80039f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d005      	beq.n	8003742 <HAL_GPIO_Init+0x56>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d130      	bne.n	80037a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2203      	movs	r2, #3
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003778:	2201      	movs	r2, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 0201 	and.w	r2, r3, #1
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d017      	beq.n	80037e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d123      	bne.n	8003834 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	08da      	lsrs	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3208      	adds	r2, #8
 80037f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	220f      	movs	r2, #15
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	08da      	lsrs	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3208      	adds	r2, #8
 800382e:	69b9      	ldr	r1, [r7, #24]
 8003830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0203 	and.w	r2, r3, #3
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80be 	beq.w	80039f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003876:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_GPIO_Init+0x324>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a65      	ldr	r2, [pc, #404]	; (8003a10 <HAL_GPIO_Init+0x324>)
 800387c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_GPIO_Init+0x324>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800388e:	4a61      	ldr	r2, [pc, #388]	; (8003a14 <HAL_GPIO_Init+0x328>)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	3302      	adds	r3, #2
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	220f      	movs	r2, #15
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_GPIO_Init+0x32c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d037      	beq.n	800392a <HAL_GPIO_Init+0x23e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a57      	ldr	r2, [pc, #348]	; (8003a1c <HAL_GPIO_Init+0x330>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d031      	beq.n	8003926 <HAL_GPIO_Init+0x23a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a56      	ldr	r2, [pc, #344]	; (8003a20 <HAL_GPIO_Init+0x334>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02b      	beq.n	8003922 <HAL_GPIO_Init+0x236>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a55      	ldr	r2, [pc, #340]	; (8003a24 <HAL_GPIO_Init+0x338>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d025      	beq.n	800391e <HAL_GPIO_Init+0x232>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a54      	ldr	r2, [pc, #336]	; (8003a28 <HAL_GPIO_Init+0x33c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01f      	beq.n	800391a <HAL_GPIO_Init+0x22e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a53      	ldr	r2, [pc, #332]	; (8003a2c <HAL_GPIO_Init+0x340>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d019      	beq.n	8003916 <HAL_GPIO_Init+0x22a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_GPIO_Init+0x344>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_GPIO_Init+0x226>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a51      	ldr	r2, [pc, #324]	; (8003a34 <HAL_GPIO_Init+0x348>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00d      	beq.n	800390e <HAL_GPIO_Init+0x222>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a50      	ldr	r2, [pc, #320]	; (8003a38 <HAL_GPIO_Init+0x34c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <HAL_GPIO_Init+0x21e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4f      	ldr	r2, [pc, #316]	; (8003a3c <HAL_GPIO_Init+0x350>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_GPIO_Init+0x21a>
 8003902:	2309      	movs	r3, #9
 8003904:	e012      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003906:	230a      	movs	r3, #10
 8003908:	e010      	b.n	800392c <HAL_GPIO_Init+0x240>
 800390a:	2308      	movs	r3, #8
 800390c:	e00e      	b.n	800392c <HAL_GPIO_Init+0x240>
 800390e:	2307      	movs	r3, #7
 8003910:	e00c      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003912:	2306      	movs	r3, #6
 8003914:	e00a      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003916:	2305      	movs	r3, #5
 8003918:	e008      	b.n	800392c <HAL_GPIO_Init+0x240>
 800391a:	2304      	movs	r3, #4
 800391c:	e006      	b.n	800392c <HAL_GPIO_Init+0x240>
 800391e:	2303      	movs	r3, #3
 8003920:	e004      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003922:	2302      	movs	r3, #2
 8003924:	e002      	b.n	800392c <HAL_GPIO_Init+0x240>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_GPIO_Init+0x240>
 800392a:	2300      	movs	r3, #0
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	f002 0203 	and.w	r2, r2, #3
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	4093      	lsls	r3, r2
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800393c:	4935      	ldr	r1, [pc, #212]	; (8003a14 <HAL_GPIO_Init+0x328>)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394a:	4b3d      	ldr	r3, [pc, #244]	; (8003a40 <HAL_GPIO_Init+0x354>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396e:	4a34      	ldr	r2, [pc, #208]	; (8003a40 <HAL_GPIO_Init+0x354>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003974:	4b32      	ldr	r3, [pc, #200]	; (8003a40 <HAL_GPIO_Init+0x354>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003998:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <HAL_GPIO_Init+0x354>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800399e:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <HAL_GPIO_Init+0x354>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c2:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <HAL_GPIO_Init+0x354>)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_GPIO_Init+0x354>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ec:	4a14      	ldr	r2, [pc, #80]	; (8003a40 <HAL_GPIO_Init+0x354>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3301      	adds	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b0f      	cmp	r3, #15
 80039fc:	f67f ae86 	bls.w	800370c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	3724      	adds	r7, #36	; 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40020800 	.word	0x40020800
 8003a24:	40020c00 	.word	0x40020c00
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40021400 	.word	0x40021400
 8003a30:	40021800 	.word	0x40021800
 8003a34:	40021c00 	.word	0x40021c00
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40022400 	.word	0x40022400
 8003a40:	40013c00 	.word	0x40013c00

08003a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e001      	b.n	8003a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
 8003a80:	4613      	mov	r3, r2
 8003a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a84:	787b      	ldrb	r3, [r7, #1]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a90:	e003      	b.n	8003a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	041a      	lsls	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	619a      	str	r2, [r3, #24]
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003aca:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad6:	f7ff f91b 	bl	8002d10 <HAL_GetTick>
 8003ada:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003adc:	e009      	b.n	8003af2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ade:	f7ff f917 	bl	8002d10 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aec:	d901      	bls.n	8003af2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e022      	b.n	8003b38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afe:	d1ee      	bne.n	8003ade <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b00:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0f      	ldr	r2, [pc, #60]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b0c:	f7ff f900 	bl	8002d10 <HAL_GetTick>
 8003b10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b12:	e009      	b.n	8003b28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b14:	f7ff f8fc 	bl	8002d10 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b22:	d901      	bls.n	8003b28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e007      	b.n	8003b38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b34:	d1ee      	bne.n	8003b14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40007000 	.word	0x40007000

08003b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b50:	2300      	movs	r3, #0
 8003b52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e29b      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8087 	beq.w	8003c7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b6c:	4b96      	ldr	r3, [pc, #600]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d00c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b78:	4b93      	ldr	r3, [pc, #588]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d112      	bne.n	8003baa <HAL_RCC_OscConfig+0x62>
 8003b84:	4b90      	ldr	r3, [pc, #576]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b90:	d10b      	bne.n	8003baa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b92:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d06c      	beq.n	8003c78 <HAL_RCC_OscConfig+0x130>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d168      	bne.n	8003c78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e275      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x7a>
 8003bb4:	4b84      	ldr	r3, [pc, #528]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a83      	ldr	r2, [pc, #524]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	e02e      	b.n	8003c20 <HAL_RCC_OscConfig+0xd8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x9c>
 8003bca:	4b7f      	ldr	r3, [pc, #508]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7e      	ldr	r2, [pc, #504]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b7c      	ldr	r3, [pc, #496]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a7b      	ldr	r2, [pc, #492]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e01d      	b.n	8003c20 <HAL_RCC_OscConfig+0xd8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0xc0>
 8003bee:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a75      	ldr	r2, [pc, #468]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a72      	ldr	r2, [pc, #456]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0xd8>
 8003c08:	4b6f      	ldr	r3, [pc, #444]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a6e      	ldr	r2, [pc, #440]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a6b      	ldr	r2, [pc, #428]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7ff f872 	bl	8002d10 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c30:	f7ff f86e 	bl	8002d10 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e229      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	4b61      	ldr	r3, [pc, #388]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0xe8>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7ff f85e 	bl	8002d10 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7ff f85a 	bl	8002d10 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e215      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x110>
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d069      	beq.n	8003d5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c86:	4b50      	ldr	r3, [pc, #320]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c92:	4b4d      	ldr	r3, [pc, #308]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d11c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x190>
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x17a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1e9      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc2:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	493d      	ldr	r1, [pc, #244]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	e040      	b.n	8003d5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d023      	beq.n	8003d28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce0:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a38      	ldr	r2, [pc, #224]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7ff f810 	bl	8002d10 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf4:	f7ff f80c 	bl	8002d10 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e1c7      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4929      	ldr	r1, [pc, #164]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]
 8003d26:	e018      	b.n	8003d5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d28:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fe ffec 	bl	8002d10 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3c:	f7fe ffe8 	bl	8002d10 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1a3      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d038      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d019      	beq.n	8003da2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6e:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d72:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fe ffc9 	bl	8002d10 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fe ffc5 	bl	8002d10 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e180      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x23a>
 8003da0:	e01a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <HAL_RCC_OscConfig+0x280>)
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dae:	f7fe ffaf 	bl	8002d10 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fe ffab 	bl	8002d10 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d903      	bls.n	8003dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e166      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
 8003dc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dcc:	4b92      	ldr	r3, [pc, #584]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1ee      	bne.n	8003db6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80a4 	beq.w	8003f2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b8c      	ldr	r3, [pc, #560]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	4b89      	ldr	r3, [pc, #548]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a88      	ldr	r2, [pc, #544]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b86      	ldr	r3, [pc, #536]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0e:	4b83      	ldr	r3, [pc, #524]	; (800401c <HAL_RCC_OscConfig+0x4d4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e1a:	4b80      	ldr	r3, [pc, #512]	; (800401c <HAL_RCC_OscConfig+0x4d4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a7f      	ldr	r2, [pc, #508]	; (800401c <HAL_RCC_OscConfig+0x4d4>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fe ff73 	bl	8002d10 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fe ff6f 	bl	8002d10 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b64      	cmp	r3, #100	; 0x64
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e12a      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e40:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCC_OscConfig+0x4d4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x31a>
 8003e54:	4b70      	ldr	r3, [pc, #448]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a6f      	ldr	r2, [pc, #444]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	e02d      	b.n	8003ebe <HAL_RCC_OscConfig+0x376>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x33c>
 8003e6a:	4b6b      	ldr	r3, [pc, #428]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a6a      	ldr	r2, [pc, #424]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	4b68      	ldr	r3, [pc, #416]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a67      	ldr	r2, [pc, #412]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x376>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x35e>
 8003e8c:	4b62      	ldr	r3, [pc, #392]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a61      	ldr	r2, [pc, #388]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	4b5f      	ldr	r3, [pc, #380]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a5e      	ldr	r2, [pc, #376]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x376>
 8003ea6:	4b5c      	ldr	r3, [pc, #368]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a5b      	ldr	r2, [pc, #364]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a58      	ldr	r2, [pc, #352]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe ff23 	bl	8002d10 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fe ff1f 	bl	8002d10 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0d8      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	4b4c      	ldr	r3, [pc, #304]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ee      	beq.n	8003ece <HAL_RCC_OscConfig+0x386>
 8003ef0:	e014      	b.n	8003f1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fe ff0d 	bl	8002d10 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fe ff09 	bl	8002d10 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0c2      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	4b41      	ldr	r3, [pc, #260]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a3c      	ldr	r2, [pc, #240]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80ae 	beq.w	8004094 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f38:	4b37      	ldr	r3, [pc, #220]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d06d      	beq.n	8004020 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d14b      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b32      	ldr	r3, [pc, #200]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a31      	ldr	r2, [pc, #196]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fe feda 	bl	8002d10 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fe fed6 	bl	8002d10 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e091      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	019b      	lsls	r3, r3, #6
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	3b01      	subs	r3, #1
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	491b      	ldr	r1, [pc, #108]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a18      	ldr	r2, [pc, #96]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fea8 	bl	8002d10 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fe fea4 	bl	8002d10 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e05f      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x47c>
 8003fe2:	e057      	b.n	8004094 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 8003fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fe fe8e 	bl	8002d10 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fe fe8a 	bl	8002d10 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e045      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_RCC_OscConfig+0x4d0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4b0>
 8004016:	e03d      	b.n	8004094 <HAL_RCC_OscConfig+0x54c>
 8004018:	40023800 	.word	0x40023800
 800401c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004020:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <HAL_RCC_OscConfig+0x558>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d030      	beq.n	8004090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d129      	bne.n	8004090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d122      	bne.n	8004090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004050:	4013      	ands	r3, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004056:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004058:	4293      	cmp	r3, r2
 800405a:	d119      	bne.n	8004090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	3b01      	subs	r3, #1
 800406a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d10f      	bne.n	8004090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d107      	bne.n	8004090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800

080040a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0d0      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d910      	bls.n	80040ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b67      	ldr	r3, [pc, #412]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 020f 	bic.w	r2, r3, #15
 80040d2:	4965      	ldr	r1, [pc, #404]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b63      	ldr	r3, [pc, #396]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0b8      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d020      	beq.n	800413a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004104:	4b59      	ldr	r3, [pc, #356]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a58      	ldr	r2, [pc, #352]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 800410a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800410e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800411c:	4b53      	ldr	r3, [pc, #332]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a52      	ldr	r2, [pc, #328]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b50      	ldr	r3, [pc, #320]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	494d      	ldr	r1, [pc, #308]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d040      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d115      	bne.n	8004186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e07f      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e073      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004176:	4b3d      	ldr	r3, [pc, #244]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06b      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4936      	ldr	r1, [pc, #216]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004198:	f7fe fdba 	bl	8002d10 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a0:	f7fe fdb6 	bl	8002d10 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e053      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 020c 	and.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d1eb      	bne.n	80041a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d210      	bcs.n	80041f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 020f 	bic.w	r2, r3, #15
 80041de:	4922      	ldr	r1, [pc, #136]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e032      	b.n	800425e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4916      	ldr	r1, [pc, #88]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	490e      	ldr	r1, [pc, #56]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004236:	f000 f821 	bl	800427c <HAL_RCC_GetSysClockFreq>
 800423a:	4602      	mov	r2, r0
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	490a      	ldr	r1, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x1cc>)
 8004248:	5ccb      	ldrb	r3, [r1, r3]
 800424a:	fa22 f303 	lsr.w	r3, r2, r3
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1d0>)
 8004250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_ClockConfig+0x1d4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fd16 	bl	8002c88 <HAL_InitTick>

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023c00 	.word	0x40023c00
 800426c:	40023800 	.word	0x40023800
 8004270:	08007fe4 	.word	0x08007fe4
 8004274:	20000000 	.word	0x20000000
 8004278:	20000004 	.word	0x20000004

0800427c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800427c:	b5b0      	push	{r4, r5, r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004282:	2100      	movs	r1, #0
 8004284:	6079      	str	r1, [r7, #4]
 8004286:	2100      	movs	r1, #0
 8004288:	60f9      	str	r1, [r7, #12]
 800428a:	2100      	movs	r1, #0
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800428e:	2100      	movs	r1, #0
 8004290:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004292:	4952      	ldr	r1, [pc, #328]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 8004294:	6889      	ldr	r1, [r1, #8]
 8004296:	f001 010c 	and.w	r1, r1, #12
 800429a:	2908      	cmp	r1, #8
 800429c:	d00d      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0x3e>
 800429e:	2908      	cmp	r1, #8
 80042a0:	f200 8094 	bhi.w	80043cc <HAL_RCC_GetSysClockFreq+0x150>
 80042a4:	2900      	cmp	r1, #0
 80042a6:	d002      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x32>
 80042a8:	2904      	cmp	r1, #4
 80042aa:	d003      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x38>
 80042ac:	e08e      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ae:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80042b0:	60bb      	str	r3, [r7, #8]
      break;
 80042b2:	e08e      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042b4:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80042b6:	60bb      	str	r3, [r7, #8]
      break;
 80042b8:	e08b      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042ba:	4948      	ldr	r1, [pc, #288]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042bc:	6849      	ldr	r1, [r1, #4]
 80042be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80042c2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042c4:	4945      	ldr	r1, [pc, #276]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042c6:	6849      	ldr	r1, [r1, #4]
 80042c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80042cc:	2900      	cmp	r1, #0
 80042ce:	d024      	beq.n	800431a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d0:	4942      	ldr	r1, [pc, #264]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042d2:	6849      	ldr	r1, [r1, #4]
 80042d4:	0989      	lsrs	r1, r1, #6
 80042d6:	4608      	mov	r0, r1
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80042e0:	f04f 0500 	mov.w	r5, #0
 80042e4:	ea00 0204 	and.w	r2, r0, r4
 80042e8:	ea01 0305 	and.w	r3, r1, r5
 80042ec:	493d      	ldr	r1, [pc, #244]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80042ee:	fb01 f003 	mul.w	r0, r1, r3
 80042f2:	2100      	movs	r1, #0
 80042f4:	fb01 f102 	mul.w	r1, r1, r2
 80042f8:	1844      	adds	r4, r0, r1
 80042fa:	493a      	ldr	r1, [pc, #232]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80042fc:	fba2 0101 	umull	r0, r1, r2, r1
 8004300:	1863      	adds	r3, r4, r1
 8004302:	4619      	mov	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	461a      	mov	r2, r3
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	f7fb ff9c 	bl	8000248 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	e04a      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431a:	4b30      	ldr	r3, [pc, #192]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	099b      	lsrs	r3, r3, #6
 8004320:	461a      	mov	r2, r3
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	f240 10ff 	movw	r0, #511	; 0x1ff
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	ea02 0400 	and.w	r4, r2, r0
 8004332:	ea03 0501 	and.w	r5, r3, r1
 8004336:	4620      	mov	r0, r4
 8004338:	4629      	mov	r1, r5
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	014b      	lsls	r3, r1, #5
 8004344:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004348:	0142      	lsls	r2, r0, #5
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	1b00      	subs	r0, r0, r4
 8004350:	eb61 0105 	sbc.w	r1, r1, r5
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	018b      	lsls	r3, r1, #6
 800435e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004362:	0182      	lsls	r2, r0, #6
 8004364:	1a12      	subs	r2, r2, r0
 8004366:	eb63 0301 	sbc.w	r3, r3, r1
 800436a:	f04f 0000 	mov.w	r0, #0
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	00d9      	lsls	r1, r3, #3
 8004374:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004378:	00d0      	lsls	r0, r2, #3
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	1912      	adds	r2, r2, r4
 8004380:	eb45 0303 	adc.w	r3, r5, r3
 8004384:	f04f 0000 	mov.w	r0, #0
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	0299      	lsls	r1, r3, #10
 800438e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004392:	0290      	lsls	r0, r2, #10
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	461a      	mov	r2, r3
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	f7fb ff50 	bl	8000248 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4613      	mov	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_RCC_GetSysClockFreq+0x160>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	3301      	adds	r3, #1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	60bb      	str	r3, [r7, #8]
      break;
 80043ca:	e002      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80043ce:	60bb      	str	r3, [r7, #8]
      break;
 80043d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d2:	68bb      	ldr	r3, [r7, #8]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bdb0      	pop	{r4, r5, r7, pc}
 80043dc:	40023800 	.word	0x40023800
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	017d7840 	.word	0x017d7840

080043e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004404:	f7ff fff0 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0a9b      	lsrs	r3, r3, #10
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	08007ff4 	.word	0x08007ff4

08004428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800442c:	f7ff ffdc 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	0b5b      	lsrs	r3, r3, #13
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4903      	ldr	r1, [pc, #12]	; (800444c <HAL_RCC_GetPCLK2Freq+0x24>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40023800 	.word	0x40023800
 800444c:	08007ff4 	.word	0x08007ff4

08004450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d012      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004478:	4b69      	ldr	r3, [pc, #420]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4a68      	ldr	r2, [pc, #416]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004482:	6093      	str	r3, [r2, #8]
 8004484:	4b66      	ldr	r3, [pc, #408]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	4964      	ldr	r1, [pc, #400]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800449a:	2301      	movs	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d017      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044aa:	4b5d      	ldr	r3, [pc, #372]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	4959      	ldr	r1, [pc, #356]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c8:	d101      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d017      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044e6:	4b4e      	ldr	r3, [pc, #312]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	494a      	ldr	r1, [pc, #296]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004504:	d101      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004506:	2301      	movs	r3, #1
 8004508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 808b 	beq.w	800464a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004534:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	4a39      	ldr	r2, [pc, #228]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	6413      	str	r3, [r2, #64]	; 0x40
 8004540:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800454c:	4b35      	ldr	r3, [pc, #212]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a34      	ldr	r2, [pc, #208]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004558:	f7fe fbda 	bl	8002d10 <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004560:	f7fe fbd6 	bl	8002d10 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	; 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e38f      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004572:	4b2c      	ldr	r3, [pc, #176]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800457e:	4b28      	ldr	r3, [pc, #160]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d035      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	429a      	cmp	r2, r3
 800459a:	d02e      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b2:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045c4:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d114      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fe fb9e 	bl	8002d10 <HAL_GetTick>
 80045d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	e00a      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fe fb9a 	bl	8002d10 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e351      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ee      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004606:	d111      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004616:	400b      	ands	r3, r1
 8004618:	4901      	ldr	r1, [pc, #4]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
 800461e:	e00b      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004620:	40023800 	.word	0x40023800
 8004624:	40007000 	.word	0x40007000
 8004628:	0ffffcff 	.word	0x0ffffcff
 800462c:	4bb3      	ldr	r3, [pc, #716]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4ab2      	ldr	r2, [pc, #712]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004632:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004636:	6093      	str	r3, [r2, #8]
 8004638:	4bb0      	ldr	r3, [pc, #704]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	49ad      	ldr	r1, [pc, #692]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004646:	4313      	orrs	r3, r2
 8004648:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b00      	cmp	r3, #0
 8004654:	d010      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004656:	4ba9      	ldr	r3, [pc, #676]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465c:	4aa7      	ldr	r2, [pc, #668]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004662:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004666:	4ba5      	ldr	r3, [pc, #660]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004668:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	49a2      	ldr	r1, [pc, #648]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004684:	4b9d      	ldr	r3, [pc, #628]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004692:	499a      	ldr	r1, [pc, #616]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046a6:	4b95      	ldr	r3, [pc, #596]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b4:	4991      	ldr	r1, [pc, #580]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046c8:	4b8c      	ldr	r3, [pc, #560]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d6:	4989      	ldr	r1, [pc, #548]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046ea:	4b84      	ldr	r3, [pc, #528]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4980      	ldr	r1, [pc, #512]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800470c:	4b7b      	ldr	r3, [pc, #492]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f023 0203 	bic.w	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	4978      	ldr	r1, [pc, #480]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800472e:	4b73      	ldr	r3, [pc, #460]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f023 020c 	bic.w	r2, r3, #12
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473c:	496f      	ldr	r1, [pc, #444]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004750:	4b6a      	ldr	r3, [pc, #424]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475e:	4967      	ldr	r1, [pc, #412]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004772:	4b62      	ldr	r3, [pc, #392]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004780:	495e      	ldr	r1, [pc, #376]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	4956      	ldr	r1, [pc, #344]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047b6:	4b51      	ldr	r3, [pc, #324]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	494d      	ldr	r1, [pc, #308]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047d8:	4b48      	ldr	r3, [pc, #288]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	4945      	ldr	r1, [pc, #276]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047fa:	4b40      	ldr	r3, [pc, #256]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004808:	493c      	ldr	r1, [pc, #240]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800481c:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482a:	4934      	ldr	r1, [pc, #208]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d011      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800483e:	4b2f      	ldr	r3, [pc, #188]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484c:	492b      	ldr	r1, [pc, #172]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485c:	d101      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800486e:	2301      	movs	r3, #1
 8004870:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800487e:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488c:	491b      	ldr	r1, [pc, #108]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048a0:	4b16      	ldr	r3, [pc, #88]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b0:	4912      	ldr	r1, [pc, #72]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d4:	4909      	ldr	r1, [pc, #36]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00f      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	e002      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	4986      	ldr	r1, [pc, #536]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004914:	4b81      	ldr	r3, [pc, #516]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004924:	497d      	ldr	r1, [pc, #500]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d006      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80d6 	beq.w	8004aec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004940:	4b76      	ldr	r3, [pc, #472]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a75      	ldr	r2, [pc, #468]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fe f9e0 	bl	8002d10 <HAL_GetTick>
 8004950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004954:	f7fe f9dc 	bl	8002d10 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e195      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004966:	4b6d      	ldr	r3, [pc, #436]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d021      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11d      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004986:	4b65      	ldr	r3, [pc, #404]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004994:	4b61      	ldr	r3, [pc, #388]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	0e1b      	lsrs	r3, r3, #24
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	019a      	lsls	r2, r3, #6
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	071b      	lsls	r3, r3, #28
 80049ba:	4958      	ldr	r1, [pc, #352]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d02e      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ec:	d129      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049ee:	4b4b      	ldr	r3, [pc, #300]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049fc:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a02:	0f1b      	lsrs	r3, r3, #28
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	019a      	lsls	r2, r3, #6
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	041b      	lsls	r3, r3, #16
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	493e      	ldr	r1, [pc, #248]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a2a:	4b3c      	ldr	r3, [pc, #240]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a30:	f023 021f 	bic.w	r2, r3, #31
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	4938      	ldr	r1, [pc, #224]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01d      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a4e:	4b33      	ldr	r3, [pc, #204]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a5c:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a62:	0f1b      	lsrs	r3, r3, #28
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	019a      	lsls	r2, r3, #6
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	431a      	orrs	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	061b      	lsls	r3, r3, #24
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	071b      	lsls	r3, r3, #28
 8004a82:	4926      	ldr	r1, [pc, #152]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d011      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	019a      	lsls	r2, r3, #6
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	071b      	lsls	r3, r3, #28
 8004ab2:	491a      	ldr	r1, [pc, #104]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac6:	f7fe f923 	bl	8002d10 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ace:	f7fe f91f 	bl	8002d10 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b64      	cmp	r3, #100	; 0x64
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0d8      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	f040 80ce 	bne.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b00:	f7fe f906 	bl	8002d10 <HAL_GetTick>
 8004b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b06:	e00b      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b08:	f7fe f902 	bl	8002d10 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d904      	bls.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0bb      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b20:	4b5e      	ldr	r3, [pc, #376]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2c:	d0ec      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d02e      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d12a      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b56:	4b51      	ldr	r3, [pc, #324]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b64:	4b4d      	ldr	r3, [pc, #308]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	0f1b      	lsrs	r3, r3, #28
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	019a      	lsls	r2, r3, #6
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	071b      	lsls	r3, r3, #28
 8004b8a:	4944      	ldr	r1, [pc, #272]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b92:	4b42      	ldr	r3, [pc, #264]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	493d      	ldr	r1, [pc, #244]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d022      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc0:	d11d      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bc2:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	0e1b      	lsrs	r3, r3, #24
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bd0:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	0f1b      	lsrs	r3, r3, #28
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	019a      	lsls	r2, r3, #6
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	431a      	orrs	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	071b      	lsls	r3, r3, #28
 8004bf6:	4929      	ldr	r1, [pc, #164]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d028      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c0a:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	0e1b      	lsrs	r3, r3, #24
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c18:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	019a      	lsls	r2, r3, #6
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	061b      	lsls	r3, r3, #24
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	071b      	lsls	r3, r3, #28
 8004c3e:	4917      	ldr	r1, [pc, #92]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4911      	ldr	r1, [pc, #68]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0e      	ldr	r2, [pc, #56]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c68:	f7fe f852 	bl	8002d10 <HAL_GetTick>
 8004c6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c70:	f7fe f84e 	bl	8002d10 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e007      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8e:	d1ef      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800

08004ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e09d      	b.n	8004dee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d108      	bne.n	8004ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc2:	d009      	beq.n	8004cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	61da      	str	r2, [r3, #28]
 8004cca:	e005      	b.n	8004cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd fc68 	bl	80025c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d18:	d902      	bls.n	8004d20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e002      	b.n	8004d26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d2e:	d007      	beq.n	8004d40 <HAL_SPI_Init+0xa0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d82:	ea42 0103 	orr.w	r1, r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	0c1b      	lsrs	r3, r3, #16
 8004d9c:	f003 0204 	and.w	r2, r3, #4
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dbc:	ea42 0103 	orr.w	r1, r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b088      	sub	sp, #32
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_SPI_Transmit+0x22>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e158      	b.n	80050ca <HAL_SPI_Transmit+0x2d4>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e20:	f7fd ff76 	bl	8002d10 <HAL_GetTick>
 8004e24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d002      	beq.n	8004e3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e3a:	e13d      	b.n	80050b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_SPI_Transmit+0x52>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e4c:	e134      	b.n	80050b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2203      	movs	r2, #3
 8004e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e98:	d10f      	bne.n	8004eba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	2b40      	cmp	r3, #64	; 0x40
 8004ec6:	d007      	beq.n	8004ed8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ee0:	d94b      	bls.n	8004f7a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Transmit+0xfa>
 8004eea:	8afb      	ldrh	r3, [r7, #22]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d13e      	bne.n	8004f6e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	881a      	ldrh	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	1c9a      	adds	r2, r3, #2
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f14:	e02b      	b.n	8004f6e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d112      	bne.n	8004f4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f48:	e011      	b.n	8004f6e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f4a:	f7fd fee1 	bl	8002d10 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d803      	bhi.n	8004f62 <HAL_SPI_Transmit+0x16c>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d102      	bne.n	8004f68 <HAL_SPI_Transmit+0x172>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f6c:	e0a4      	b.n	80050b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ce      	bne.n	8004f16 <HAL_SPI_Transmit+0x120>
 8004f78:	e07c      	b.n	8005074 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_SPI_Transmit+0x192>
 8004f82:	8afb      	ldrh	r3, [r7, #22]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d170      	bne.n	800506a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d912      	bls.n	8004fb8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	881a      	ldrh	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	1c9a      	adds	r2, r3, #2
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b02      	subs	r3, #2
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb6:	e058      	b.n	800506a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	7812      	ldrb	r2, [r2, #0]
 8004fc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004fde:	e044      	b.n	800506a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d12b      	bne.n	8005046 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d912      	bls.n	800501e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	881a      	ldrh	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	1c9a      	adds	r2, r3, #2
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b02      	subs	r3, #2
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800501c:	e025      	b.n	800506a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	7812      	ldrb	r2, [r2, #0]
 800502a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005044:	e011      	b.n	800506a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005046:	f7fd fe63 	bl	8002d10 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d803      	bhi.n	800505e <HAL_SPI_Transmit+0x268>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d102      	bne.n	8005064 <HAL_SPI_Transmit+0x26e>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005068:	e026      	b.n	80050b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1b5      	bne.n	8004fe0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fd07 	bl	8005a8c <SPI_EndRxTxTransaction>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e000      	b.n	80050b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80050b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b088      	sub	sp, #32
 80050d6:	af02      	add	r7, sp, #8
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	603b      	str	r3, [r7, #0]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ee:	d112      	bne.n	8005116 <HAL_SPI_Receive+0x44>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10e      	bne.n	8005116 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2204      	movs	r2, #4
 80050fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	4613      	mov	r3, r2
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f910 	bl	8005332 <HAL_SPI_TransmitReceive>
 8005112:	4603      	mov	r3, r0
 8005114:	e109      	b.n	800532a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_SPI_Receive+0x52>
 8005120:	2302      	movs	r3, #2
 8005122:	e102      	b.n	800532a <HAL_SPI_Receive+0x258>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800512c:	f7fd fdf0 	bl	8002d10 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b01      	cmp	r3, #1
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800513e:	2302      	movs	r3, #2
 8005140:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005142:	e0e9      	b.n	8005318 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_SPI_Receive+0x7e>
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005154:	e0e0      	b.n	8005318 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2204      	movs	r2, #4
 800515a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051a0:	d908      	bls.n	80051b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	e007      	b.n	80051c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051cc:	d10f      	bne.n	80051ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d007      	beq.n	800520c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800520a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005214:	d867      	bhi.n	80052e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005216:	e030      	b.n	800527a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d117      	bne.n	8005256 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f103 020c 	add.w	r2, r3, #12
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	7812      	ldrb	r2, [r2, #0]
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005254:	e011      	b.n	800527a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005256:	f7fd fd5b 	bl	8002d10 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d803      	bhi.n	800526e <HAL_SPI_Receive+0x19c>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d102      	bne.n	8005274 <HAL_SPI_Receive+0x1a2>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005278:	e04e      	b.n	8005318 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1c8      	bne.n	8005218 <HAL_SPI_Receive+0x146>
 8005286:	e034      	b.n	80052f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b01      	cmp	r3, #1
 8005294:	d115      	bne.n	80052c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	b292      	uxth	r2, r2
 80052a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	1c9a      	adds	r2, r3, #2
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80052c0:	e011      	b.n	80052e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052c2:	f7fd fd25 	bl	8002d10 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d803      	bhi.n	80052da <HAL_SPI_Receive+0x208>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d102      	bne.n	80052e0 <HAL_SPI_Receive+0x20e>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052e4:	e018      	b.n	8005318 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ca      	bne.n	8005288 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fb4c 	bl	8005994 <SPI_EndRxTransaction>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	75fb      	strb	r3, [r7, #23]
 8005314:	e000      	b.n	8005318 <HAL_SPI_Receive+0x246>
  }

error :
 8005316:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005328:	7dfb      	ldrb	r3, [r7, #23]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b08a      	sub	sp, #40	; 0x28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005340:	2301      	movs	r3, #1
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_SPI_TransmitReceive+0x26>
 8005354:	2302      	movs	r3, #2
 8005356:	e1fb      	b.n	8005750 <HAL_SPI_TransmitReceive+0x41e>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005360:	f7fd fcd6 	bl	8002d10 <HAL_GetTick>
 8005364:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800536c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005378:	887b      	ldrh	r3, [r7, #2]
 800537a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800537c:	7efb      	ldrb	r3, [r7, #27]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d00e      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0x6e>
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005388:	d106      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x66>
 8005392:	7efb      	ldrb	r3, [r7, #27]
 8005394:	2b04      	cmp	r3, #4
 8005396:	d003      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005398:	2302      	movs	r3, #2
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800539e:	e1cd      	b.n	800573c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0x80>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0x80>
 80053ac:	887b      	ldrh	r3, [r7, #2]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80053b8:	e1c0      	b.n	800573c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d003      	beq.n	80053ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2205      	movs	r2, #5
 80053ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	887a      	ldrh	r2, [r7, #2]
 80053de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	887a      	ldrh	r2, [r7, #2]
 80053e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	887a      	ldrh	r2, [r7, #2]
 80053fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005410:	d802      	bhi.n	8005418 <HAL_SPI_TransmitReceive+0xe6>
 8005412:	8a3b      	ldrh	r3, [r7, #16]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d908      	bls.n	800542a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005426:	605a      	str	r2, [r3, #4]
 8005428:	e007      	b.n	800543a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005438:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d007      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005460:	d97c      	bls.n	800555c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_SPI_TransmitReceive+0x13e>
 800546a:	8a7b      	ldrh	r3, [r7, #18]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d169      	bne.n	8005544 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	881a      	ldrh	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	1c9a      	adds	r2, r3, #2
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005494:	e056      	b.n	8005544 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d11b      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x1aa>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x1aa>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d113      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	881a      	ldrh	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	1c9a      	adds	r2, r3, #2
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d11c      	bne.n	8005524 <HAL_SPI_TransmitReceive+0x1f2>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d016      	beq.n	8005524 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	b292      	uxth	r2, r2
 8005502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	1c9a      	adds	r2, r3, #2
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005520:	2301      	movs	r3, #1
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005524:	f7fd fbf4 	bl	8002d10 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005530:	429a      	cmp	r2, r3
 8005532:	d807      	bhi.n	8005544 <HAL_SPI_TransmitReceive+0x212>
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d003      	beq.n	8005544 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005542:	e0fb      	b.n	800573c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1a3      	bne.n	8005496 <HAL_SPI_TransmitReceive+0x164>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d19d      	bne.n	8005496 <HAL_SPI_TransmitReceive+0x164>
 800555a:	e0df      	b.n	800571c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_SPI_TransmitReceive+0x23a>
 8005564:	8a7b      	ldrh	r3, [r7, #18]
 8005566:	2b01      	cmp	r3, #1
 8005568:	f040 80cb 	bne.w	8005702 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b01      	cmp	r3, #1
 8005574:	d912      	bls.n	800559c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	1c9a      	adds	r2, r3, #2
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b02      	subs	r3, #2
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	87da      	strh	r2, [r3, #62]	; 0x3e
 800559a:	e0b2      	b.n	8005702 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	7812      	ldrb	r2, [r2, #0]
 80055a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055c2:	e09e      	b.n	8005702 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d134      	bne.n	800563c <HAL_SPI_TransmitReceive+0x30a>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d02f      	beq.n	800563c <HAL_SPI_TransmitReceive+0x30a>
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d12c      	bne.n	800563c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d912      	bls.n	8005612 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	881a      	ldrh	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	1c9a      	adds	r2, r3, #2
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b02      	subs	r3, #2
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005610:	e012      	b.n	8005638 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d148      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x3aa>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d042      	beq.n	80056dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	d923      	bls.n	80056aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	b292      	uxth	r2, r2
 800566e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	1c9a      	adds	r2, r3, #2
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b02      	subs	r3, #2
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d81f      	bhi.n	80056d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	e016      	b.n	80056d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f103 020c 	add.w	r2, r3, #12
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	7812      	ldrb	r2, [r2, #0]
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056d8:	2301      	movs	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056dc:	f7fd fb18 	bl	8002d10 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d803      	bhi.n	80056f4 <HAL_SPI_TransmitReceive+0x3c2>
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d102      	bne.n	80056fa <HAL_SPI_TransmitReceive+0x3c8>
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d103      	bne.n	8005702 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005700:	e01c      	b.n	800573c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	f47f af5b 	bne.w	80055c4 <HAL_SPI_TransmitReceive+0x292>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	f47f af54 	bne.w	80055c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f9b3 	bl	8005a8c <SPI_EndRxTxTransaction>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d006      	beq.n	800573a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	661a      	str	r2, [r3, #96]	; 0x60
 8005738:	e000      	b.n	800573c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800573a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800574c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005750:	4618      	mov	r0, r3
 8005752:	3728      	adds	r7, #40	; 0x28
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005768:	f7fd fad2 	bl	8002d10 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	4413      	add	r3, r2
 8005776:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005778:	f7fd faca 	bl	8002d10 <HAL_GetTick>
 800577c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800577e:	4b39      	ldr	r3, [pc, #228]	; (8005864 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	015b      	lsls	r3, r3, #5
 8005784:	0d1b      	lsrs	r3, r3, #20
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800578e:	e054      	b.n	800583a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d050      	beq.n	800583a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005798:	f7fd faba 	bl	8002d10 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d902      	bls.n	80057ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d13d      	bne.n	800582a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c6:	d111      	bne.n	80057ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d0:	d004      	beq.n	80057dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057da:	d107      	bne.n	80057ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d10f      	bne.n	8005816 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005814:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e017      	b.n	800585a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	3b01      	subs	r3, #1
 8005838:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4013      	ands	r3, r2
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	429a      	cmp	r2, r3
 8005848:	bf0c      	ite	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	2300      	movne	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	429a      	cmp	r2, r3
 8005856:	d19b      	bne.n	8005790 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000000 	.word	0x20000000

08005868 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	; 0x28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800587a:	f7fd fa49 	bl	8002d10 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	4413      	add	r3, r2
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800588a:	f7fd fa41 	bl	8002d10 <HAL_GetTick>
 800588e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005898:	4b3d      	ldr	r3, [pc, #244]	; (8005990 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	00da      	lsls	r2, r3, #3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	0d1b      	lsrs	r3, r3, #20
 80058a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058aa:	fb02 f303 	mul.w	r3, r2, r3
 80058ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80058b0:	e060      	b.n	8005974 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80058b8:	d107      	bne.n	80058ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d050      	beq.n	8005974 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058d2:	f7fd fa1d 	bl	8002d10 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058de:	429a      	cmp	r2, r3
 80058e0:	d902      	bls.n	80058e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d13d      	bne.n	8005964 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005900:	d111      	bne.n	8005926 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800590a:	d004      	beq.n	8005916 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005914:	d107      	bne.n	8005926 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005924:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592e:	d10f      	bne.n	8005950 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800594e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e010      	b.n	8005986 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	3b01      	subs	r3, #1
 8005972:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4013      	ands	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d196      	bne.n	80058b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3728      	adds	r7, #40	; 0x28
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000000 	.word	0x20000000

08005994 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a8:	d111      	bne.n	80059ce <SPI_EndRxTransaction+0x3a>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b2:	d004      	beq.n	80059be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059bc:	d107      	bne.n	80059ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d6:	d112      	bne.n	80059fe <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2200      	movs	r2, #0
 80059e0:	2180      	movs	r1, #128	; 0x80
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff feb8 	bl	8005758 <SPI_WaitFlagStateUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d021      	beq.n	8005a32 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e03d      	b.n	8005a7a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059fe:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <SPI_EndRxTransaction+0xf0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a21      	ldr	r2, [pc, #132]	; (8005a88 <SPI_EndRxTransaction+0xf4>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	0d5b      	lsrs	r3, r3, #21
 8005a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b80      	cmp	r3, #128	; 0x80
 8005a2c:	d0f2      	beq.n	8005a14 <SPI_EndRxTransaction+0x80>
 8005a2e:	e000      	b.n	8005a32 <SPI_EndRxTransaction+0x9e>
        break;
 8005a30:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a3a:	d11d      	bne.n	8005a78 <SPI_EndRxTransaction+0xe4>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a44:	d004      	beq.n	8005a50 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4e:	d113      	bne.n	8005a78 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7ff ff03 	bl	8005868 <SPI_WaitFifoStateUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	f043 0220 	orr.w	r2, r3, #32
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e000      	b.n	8005a7a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000000 	.word	0x20000000
 8005a88:	165e9f81 	.word	0x165e9f81

08005a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fedf 	bl	8005868 <SPI_WaitFifoStateUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab4:	f043 0220 	orr.w	r2, r3, #32
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e046      	b.n	8005b4e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ac0:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <SPI_EndRxTxTransaction+0xcc>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a25      	ldr	r2, [pc, #148]	; (8005b5c <SPI_EndRxTxTransaction+0xd0>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	0d5b      	lsrs	r3, r3, #21
 8005acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ad0:	fb02 f303 	mul.w	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ade:	d112      	bne.n	8005b06 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2180      	movs	r1, #128	; 0x80
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fe34 	bl	8005758 <SPI_WaitFlagStateUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d016      	beq.n	8005b24 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afa:	f043 0220 	orr.w	r2, r3, #32
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e023      	b.n	8005b4e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1c:	2b80      	cmp	r3, #128	; 0x80
 8005b1e:	d0f2      	beq.n	8005b06 <SPI_EndRxTxTransaction+0x7a>
 8005b20:	e000      	b.n	8005b24 <SPI_EndRxTxTransaction+0x98>
        break;
 8005b22:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff fe99 	bl	8005868 <SPI_WaitFifoStateUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b40:	f043 0220 	orr.w	r2, r3, #32
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e000      	b.n	8005b4e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	165e9f81 	.word	0x165e9f81

08005b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e049      	b.n	8005c06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fc ff62 	bl	8002a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	f000 fa7e 	bl	80060a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e049      	b.n	8005cb4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7fc fec7 	bl	80029c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f000 fa27 	bl	80060a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_IC_ConfigChannel+0x1e>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e088      	b.n	8005dec <HAL_TIM_IC_ConfigChannel+0x130>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d11b      	bne.n	8005d20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6819      	ldr	r1, [r3, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f000 fd64 	bl	80067c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 020c 	bic.w	r2, r2, #12
 8005d0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6999      	ldr	r1, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	619a      	str	r2, [r3, #24]
 8005d1e:	e060      	b.n	8005de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d11c      	bne.n	8005d60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f000 fde8 	bl	800690a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6999      	ldr	r1, [r3, #24]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	021a      	lsls	r2, r3, #8
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	619a      	str	r2, [r3, #24]
 8005d5e:	e040      	b.n	8005de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d11b      	bne.n	8005d9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6819      	ldr	r1, [r3, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f000 fe35 	bl	80069e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 020c 	bic.w	r2, r2, #12
 8005d88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69d9      	ldr	r1, [r3, #28]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	61da      	str	r2, [r3, #28]
 8005d9c:	e021      	b.n	8005de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b0c      	cmp	r3, #12
 8005da2:	d11c      	bne.n	8005dde <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	6819      	ldr	r1, [r3, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f000 fe52 	bl	8006a5c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69da      	ldr	r2, [r3, #28]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005dc6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69d9      	ldr	r1, [r3, #28]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	021a      	lsls	r2, r3, #8
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	61da      	str	r2, [r3, #28]
 8005ddc:	e001      	b.n	8005de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e0ff      	b.n	8006012 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b14      	cmp	r3, #20
 8005e1e:	f200 80f0 	bhi.w	8006002 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e22:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e28:	08005e7d 	.word	0x08005e7d
 8005e2c:	08006003 	.word	0x08006003
 8005e30:	08006003 	.word	0x08006003
 8005e34:	08006003 	.word	0x08006003
 8005e38:	08005ebd 	.word	0x08005ebd
 8005e3c:	08006003 	.word	0x08006003
 8005e40:	08006003 	.word	0x08006003
 8005e44:	08006003 	.word	0x08006003
 8005e48:	08005eff 	.word	0x08005eff
 8005e4c:	08006003 	.word	0x08006003
 8005e50:	08006003 	.word	0x08006003
 8005e54:	08006003 	.word	0x08006003
 8005e58:	08005f3f 	.word	0x08005f3f
 8005e5c:	08006003 	.word	0x08006003
 8005e60:	08006003 	.word	0x08006003
 8005e64:	08006003 	.word	0x08006003
 8005e68:	08005f81 	.word	0x08005f81
 8005e6c:	08006003 	.word	0x08006003
 8005e70:	08006003 	.word	0x08006003
 8005e74:	08006003 	.word	0x08006003
 8005e78:	08005fc1 	.word	0x08005fc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f9ac 	bl	80061e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0208 	orr.w	r2, r2, #8
 8005e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0204 	bic.w	r2, r2, #4
 8005ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6999      	ldr	r1, [r3, #24]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	619a      	str	r2, [r3, #24]
      break;
 8005eba:	e0a5      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f9fe 	bl	80062c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6999      	ldr	r1, [r3, #24]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	021a      	lsls	r2, r3, #8
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	619a      	str	r2, [r3, #24]
      break;
 8005efc:	e084      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fa55 	bl	80063b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69da      	ldr	r2, [r3, #28]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f042 0208 	orr.w	r2, r2, #8
 8005f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0204 	bic.w	r2, r2, #4
 8005f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69d9      	ldr	r1, [r3, #28]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	61da      	str	r2, [r3, #28]
      break;
 8005f3c:	e064      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 faab 	bl	80064a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69d9      	ldr	r1, [r3, #28]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	021a      	lsls	r2, r3, #8
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	61da      	str	r2, [r3, #28]
      break;
 8005f7e:	e043      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fae2 	bl	8006550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0208 	orr.w	r2, r2, #8
 8005f9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0204 	bic.w	r2, r2, #4
 8005faa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fbe:	e023      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fb14 	bl	80065f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	021a      	lsls	r2, r3, #8
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006000:	e002      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	75fb      	strb	r3, [r7, #23]
      break;
 8006006:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006010:	7dfb      	ldrb	r3, [r7, #23]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop

0800601c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006030:	2302      	movs	r3, #2
 8006032:	e031      	b.n	8006098 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fb28 	bl	800669c <TIM_SlaveTimer_SetConfig>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e018      	b.n	8006098 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006074:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006084:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a40      	ldr	r2, [pc, #256]	; (80061b4 <TIM_Base_SetConfig+0x114>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d013      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060be:	d00f      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a3d      	ldr	r2, [pc, #244]	; (80061b8 <TIM_Base_SetConfig+0x118>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a3c      	ldr	r2, [pc, #240]	; (80061bc <TIM_Base_SetConfig+0x11c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d007      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a3b      	ldr	r2, [pc, #236]	; (80061c0 <TIM_Base_SetConfig+0x120>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a3a      	ldr	r2, [pc, #232]	; (80061c4 <TIM_Base_SetConfig+0x124>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2f      	ldr	r2, [pc, #188]	; (80061b4 <TIM_Base_SetConfig+0x114>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d02b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d027      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a2c      	ldr	r2, [pc, #176]	; (80061b8 <TIM_Base_SetConfig+0x118>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d023      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a2b      	ldr	r2, [pc, #172]	; (80061bc <TIM_Base_SetConfig+0x11c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d01f      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a2a      	ldr	r2, [pc, #168]	; (80061c0 <TIM_Base_SetConfig+0x120>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a29      	ldr	r2, [pc, #164]	; (80061c4 <TIM_Base_SetConfig+0x124>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d017      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a28      	ldr	r2, [pc, #160]	; (80061c8 <TIM_Base_SetConfig+0x128>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a27      	ldr	r2, [pc, #156]	; (80061cc <TIM_Base_SetConfig+0x12c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00f      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <TIM_Base_SetConfig+0x130>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a25      	ldr	r2, [pc, #148]	; (80061d4 <TIM_Base_SetConfig+0x134>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a24      	ldr	r2, [pc, #144]	; (80061d8 <TIM_Base_SetConfig+0x138>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a23      	ldr	r2, [pc, #140]	; (80061dc <TIM_Base_SetConfig+0x13c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <TIM_Base_SetConfig+0x114>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_Base_SetConfig+0xf8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a0c      	ldr	r2, [pc, #48]	; (80061c4 <TIM_Base_SetConfig+0x124>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	615a      	str	r2, [r3, #20]
}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	40010400 	.word	0x40010400
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800
 80061d4:	40001800 	.word	0x40001800
 80061d8:	40001c00 	.word	0x40001c00
 80061dc:	40002000 	.word	0x40002000

080061e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0201 	bic.w	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <TIM_OC1_SetConfig+0xd8>)
 800620c:	4013      	ands	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 0302 	bic.w	r3, r3, #2
 8006228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a21      	ldr	r2, [pc, #132]	; (80062bc <TIM_OC1_SetConfig+0xdc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_OC1_SetConfig+0x64>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <TIM_OC1_SetConfig+0xe0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10c      	bne.n	800625e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0308 	bic.w	r3, r3, #8
 800624a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 0304 	bic.w	r3, r3, #4
 800625c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a16      	ldr	r2, [pc, #88]	; (80062bc <TIM_OC1_SetConfig+0xdc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d003      	beq.n	800626e <TIM_OC1_SetConfig+0x8e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <TIM_OC1_SetConfig+0xe0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d111      	bne.n	8006292 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800627c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	621a      	str	r2, [r3, #32]
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	fffeff8f 	.word	0xfffeff8f
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40010400 	.word	0x40010400

080062c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f023 0210 	bic.w	r2, r3, #16
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4b2e      	ldr	r3, [pc, #184]	; (80063a8 <TIM_OC2_SetConfig+0xe4>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0320 	bic.w	r3, r3, #32
 800630e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a23      	ldr	r2, [pc, #140]	; (80063ac <TIM_OC2_SetConfig+0xe8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC2_SetConfig+0x68>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a22      	ldr	r2, [pc, #136]	; (80063b0 <TIM_OC2_SetConfig+0xec>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10d      	bne.n	8006348 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a18      	ldr	r2, [pc, #96]	; (80063ac <TIM_OC2_SetConfig+0xe8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC2_SetConfig+0x94>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <TIM_OC2_SetConfig+0xec>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d113      	bne.n	8006380 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800635e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	feff8fff 	.word	0xfeff8fff
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40010400 	.word	0x40010400

080063b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4b2d      	ldr	r3, [pc, #180]	; (8006494 <TIM_OC3_SetConfig+0xe0>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a22      	ldr	r2, [pc, #136]	; (8006498 <TIM_OC3_SetConfig+0xe4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d003      	beq.n	800641a <TIM_OC3_SetConfig+0x66>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a21      	ldr	r2, [pc, #132]	; (800649c <TIM_OC3_SetConfig+0xe8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d10d      	bne.n	8006436 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a17      	ldr	r2, [pc, #92]	; (8006498 <TIM_OC3_SetConfig+0xe4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_OC3_SetConfig+0x92>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a16      	ldr	r2, [pc, #88]	; (800649c <TIM_OC3_SetConfig+0xe8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d113      	bne.n	800646e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800644c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	621a      	str	r2, [r3, #32]
}
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	fffeff8f 	.word	0xfffeff8f
 8006498:	40010000 	.word	0x40010000
 800649c:	40010400 	.word	0x40010400

080064a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <TIM_OC4_SetConfig+0xa4>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	031b      	lsls	r3, r3, #12
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a13      	ldr	r2, [pc, #76]	; (8006548 <TIM_OC4_SetConfig+0xa8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_OC4_SetConfig+0x68>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a12      	ldr	r2, [pc, #72]	; (800654c <TIM_OC4_SetConfig+0xac>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d109      	bne.n	800651c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	019b      	lsls	r3, r3, #6
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	feff8fff 	.word	0xfeff8fff
 8006548:	40010000 	.word	0x40010000
 800654c:	40010400 	.word	0x40010400

08006550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <TIM_OC5_SetConfig+0x98>)
 800657c:	4013      	ands	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a12      	ldr	r2, [pc, #72]	; (80065ec <TIM_OC5_SetConfig+0x9c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d003      	beq.n	80065ae <TIM_OC5_SetConfig+0x5e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a11      	ldr	r2, [pc, #68]	; (80065f0 <TIM_OC5_SetConfig+0xa0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d109      	bne.n	80065c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	021b      	lsls	r3, r3, #8
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	fffeff8f 	.word	0xfffeff8f
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40010400 	.word	0x40010400

080065f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <TIM_OC6_SetConfig+0x9c>)
 8006620:	4013      	ands	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	051b      	lsls	r3, r3, #20
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a13      	ldr	r2, [pc, #76]	; (8006694 <TIM_OC6_SetConfig+0xa0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_OC6_SetConfig+0x60>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a12      	ldr	r2, [pc, #72]	; (8006698 <TIM_OC6_SetConfig+0xa4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d109      	bne.n	8006668 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	029b      	lsls	r3, r3, #10
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	feff8fff 	.word	0xfeff8fff
 8006694:	40010000 	.word	0x40010000
 8006698:	40010400 	.word	0x40010400

0800669c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <TIM_SlaveTimer_SetConfig+0x124>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b70      	cmp	r3, #112	; 0x70
 80066e4:	d01a      	beq.n	800671c <TIM_SlaveTimer_SetConfig+0x80>
 80066e6:	2b70      	cmp	r3, #112	; 0x70
 80066e8:	d860      	bhi.n	80067ac <TIM_SlaveTimer_SetConfig+0x110>
 80066ea:	2b60      	cmp	r3, #96	; 0x60
 80066ec:	d054      	beq.n	8006798 <TIM_SlaveTimer_SetConfig+0xfc>
 80066ee:	2b60      	cmp	r3, #96	; 0x60
 80066f0:	d85c      	bhi.n	80067ac <TIM_SlaveTimer_SetConfig+0x110>
 80066f2:	2b50      	cmp	r3, #80	; 0x50
 80066f4:	d046      	beq.n	8006784 <TIM_SlaveTimer_SetConfig+0xe8>
 80066f6:	2b50      	cmp	r3, #80	; 0x50
 80066f8:	d858      	bhi.n	80067ac <TIM_SlaveTimer_SetConfig+0x110>
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d019      	beq.n	8006732 <TIM_SlaveTimer_SetConfig+0x96>
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d854      	bhi.n	80067ac <TIM_SlaveTimer_SetConfig+0x110>
 8006702:	2b30      	cmp	r3, #48	; 0x30
 8006704:	d055      	beq.n	80067b2 <TIM_SlaveTimer_SetConfig+0x116>
 8006706:	2b30      	cmp	r3, #48	; 0x30
 8006708:	d850      	bhi.n	80067ac <TIM_SlaveTimer_SetConfig+0x110>
 800670a:	2b20      	cmp	r3, #32
 800670c:	d051      	beq.n	80067b2 <TIM_SlaveTimer_SetConfig+0x116>
 800670e:	2b20      	cmp	r3, #32
 8006710:	d84c      	bhi.n	80067ac <TIM_SlaveTimer_SetConfig+0x110>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d04d      	beq.n	80067b2 <TIM_SlaveTimer_SetConfig+0x116>
 8006716:	2b10      	cmp	r3, #16
 8006718:	d04b      	beq.n	80067b2 <TIM_SlaveTimer_SetConfig+0x116>
 800671a:	e047      	b.n	80067ac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68d9      	ldr	r1, [r3, #12]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f000 f9d3 	bl	8006ad6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006730:	e040      	b.n	80067b4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b05      	cmp	r3, #5
 8006738:	d101      	bne.n	800673e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e03b      	b.n	80067b6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6a1a      	ldr	r2, [r3, #32]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0201 	bic.w	r2, r2, #1
 8006754:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006764:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	4313      	orrs	r3, r2
 8006770:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	621a      	str	r2, [r3, #32]
      break;
 8006782:	e017      	b.n	80067b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	6899      	ldr	r1, [r3, #8]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	461a      	mov	r2, r3
 8006792:	f000 f88b 	bl	80068ac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006796:	e00d      	b.n	80067b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	6899      	ldr	r1, [r3, #8]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	461a      	mov	r2, r3
 80067a6:	f000 f8ed 	bl	8006984 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80067aa:	e003      	b.n	80067b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	75fb      	strb	r3, [r7, #23]
      break;
 80067b0:	e000      	b.n	80067b4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80067b2:	bf00      	nop
  }

  return status;
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	fffefff8 	.word	0xfffefff8

080067c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f023 0201 	bic.w	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4a28      	ldr	r2, [pc, #160]	; (8006890 <TIM_TI1_SetConfig+0xcc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01b      	beq.n	800682a <TIM_TI1_SetConfig+0x66>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f8:	d017      	beq.n	800682a <TIM_TI1_SetConfig+0x66>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4a25      	ldr	r2, [pc, #148]	; (8006894 <TIM_TI1_SetConfig+0xd0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <TIM_TI1_SetConfig+0x66>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4a24      	ldr	r2, [pc, #144]	; (8006898 <TIM_TI1_SetConfig+0xd4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00f      	beq.n	800682a <TIM_TI1_SetConfig+0x66>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4a23      	ldr	r2, [pc, #140]	; (800689c <TIM_TI1_SetConfig+0xd8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00b      	beq.n	800682a <TIM_TI1_SetConfig+0x66>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <TIM_TI1_SetConfig+0xdc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d007      	beq.n	800682a <TIM_TI1_SetConfig+0x66>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4a21      	ldr	r2, [pc, #132]	; (80068a4 <TIM_TI1_SetConfig+0xe0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d003      	beq.n	800682a <TIM_TI1_SetConfig+0x66>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a20      	ldr	r2, [pc, #128]	; (80068a8 <TIM_TI1_SetConfig+0xe4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d101      	bne.n	800682e <TIM_TI1_SetConfig+0x6a>
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <TIM_TI1_SetConfig+0x6c>
 800682e:	2300      	movs	r3, #0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e003      	b.n	800684e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	b2db      	uxtb	r3, r3
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f023 030a 	bic.w	r3, r3, #10
 8006868:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f003 030a 	and.w	r3, r3, #10
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	621a      	str	r2, [r3, #32]
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40010000 	.word	0x40010000
 8006894:	40000400 	.word	0x40000400
 8006898:	40000800 	.word	0x40000800
 800689c:	40000c00 	.word	0x40000c00
 80068a0:	40010400 	.word	0x40010400
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40001800 	.word	0x40001800

080068ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0201 	bic.w	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f023 030a 	bic.w	r3, r3, #10
 80068e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800690a:	b480      	push	{r7}
 800690c:	b087      	sub	sp, #28
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	f023 0210 	bic.w	r2, r3, #16
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006936:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	031b      	lsls	r3, r3, #12
 800694e:	b29b      	uxth	r3, r3
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800695c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	621a      	str	r2, [r3, #32]
}
 8006978:	bf00      	nop
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f023 0210 	bic.w	r2, r3, #16
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	031b      	lsls	r3, r3, #12
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	621a      	str	r2, [r3, #32]
}
 80069d8:	bf00      	nop
 80069da:	371c      	adds	r7, #28
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f023 0303 	bic.w	r3, r3, #3
 8006a10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006a34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	621a      	str	r2, [r3, #32]
}
 8006a50:	bf00      	nop
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	031b      	lsls	r3, r3, #12
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006aae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	031b      	lsls	r3, r3, #12
 8006ab4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b087      	sub	sp, #28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
 8006ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006af0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	021a      	lsls	r2, r3, #8
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	609a      	str	r2, [r3, #8]
}
 8006b0a:	bf00      	nop
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
	...

08006b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e06d      	b.n	8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a30      	ldr	r2, [pc, #192]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d004      	beq.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a2f      	ldr	r2, [pc, #188]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d108      	bne.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a20      	ldr	r2, [pc, #128]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d022      	beq.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba2:	d01d      	beq.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d018      	beq.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1c      	ldr	r2, [pc, #112]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1a      	ldr	r2, [pc, #104]	; (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a15      	ldr	r2, [pc, #84]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d009      	beq.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a16      	ldr	r2, [pc, #88]	; (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a15      	ldr	r2, [pc, #84]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d10c      	bne.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40010400 	.word	0x40010400
 8006c20:	40000400 	.word	0x40000400
 8006c24:	40000800 	.word	0x40000800
 8006c28:	40000c00 	.word	0x40000c00
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40001800 	.word	0x40001800

08006c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e040      	b.n	8006cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fb ff82 	bl	8002b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2224      	movs	r2, #36	; 0x24
 8006c60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8c0 	bl	8006df8 <UART_SetConfig>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e022      	b.n	8006cc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fb16 	bl	80072bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb9d 	bl	8007400 <UART_CheckIdleState>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	f040 8081 	bne.w	8006dec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <HAL_UART_Transmit+0x26>
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e079      	b.n	8006dee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_UART_Transmit+0x38>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e072      	b.n	8006dee <HAL_UART_Transmit+0x11e>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2221      	movs	r2, #33	; 0x21
 8006d1c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d1e:	f7fb fff7 	bl	8002d10 <HAL_GetTick>
 8006d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3c:	d108      	bne.n	8006d50 <HAL_UART_Transmit+0x80>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e003      	b.n	8006d58 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006d60:	e02c      	b.n	8006dbc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2180      	movs	r1, #128	; 0x80
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fb90 	bl	8007492 <UART_WaitOnFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e038      	b.n	8006dee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10b      	bne.n	8006d9a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	3302      	adds	r3, #2
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	e007      	b.n	8006daa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1cc      	bne.n	8006d62 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2140      	movs	r1, #64	; 0x40
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 fb5d 	bl	8007492 <UART_WaitOnFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e005      	b.n	8006dee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e000      	b.n	8006dee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006dec:	2302      	movs	r3, #2
  }
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4ba7      	ldr	r3, [pc, #668]	; (80070c0 <UART_SetConfig+0x2c8>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	6979      	ldr	r1, [r7, #20]
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a95      	ldr	r2, [pc, #596]	; (80070c4 <UART_SetConfig+0x2cc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d120      	bne.n	8006eb6 <UART_SetConfig+0xbe>
 8006e74:	4b94      	ldr	r3, [pc, #592]	; (80070c8 <UART_SetConfig+0x2d0>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d816      	bhi.n	8006eb0 <UART_SetConfig+0xb8>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <UART_SetConfig+0x90>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006e99 	.word	0x08006e99
 8006e8c:	08006ea5 	.word	0x08006ea5
 8006e90:	08006e9f 	.word	0x08006e9f
 8006e94:	08006eab 	.word	0x08006eab
 8006e98:	2301      	movs	r3, #1
 8006e9a:	77fb      	strb	r3, [r7, #31]
 8006e9c:	e14f      	b.n	800713e <UART_SetConfig+0x346>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	77fb      	strb	r3, [r7, #31]
 8006ea2:	e14c      	b.n	800713e <UART_SetConfig+0x346>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	e149      	b.n	800713e <UART_SetConfig+0x346>
 8006eaa:	2308      	movs	r3, #8
 8006eac:	77fb      	strb	r3, [r7, #31]
 8006eae:	e146      	b.n	800713e <UART_SetConfig+0x346>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	e143      	b.n	800713e <UART_SetConfig+0x346>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a84      	ldr	r2, [pc, #528]	; (80070cc <UART_SetConfig+0x2d4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d132      	bne.n	8006f26 <UART_SetConfig+0x12e>
 8006ec0:	4b81      	ldr	r3, [pc, #516]	; (80070c8 <UART_SetConfig+0x2d0>)
 8006ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec6:	f003 030c 	and.w	r3, r3, #12
 8006eca:	2b0c      	cmp	r3, #12
 8006ecc:	d828      	bhi.n	8006f20 <UART_SetConfig+0x128>
 8006ece:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <UART_SetConfig+0xdc>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006f09 	.word	0x08006f09
 8006ed8:	08006f21 	.word	0x08006f21
 8006edc:	08006f21 	.word	0x08006f21
 8006ee0:	08006f21 	.word	0x08006f21
 8006ee4:	08006f15 	.word	0x08006f15
 8006ee8:	08006f21 	.word	0x08006f21
 8006eec:	08006f21 	.word	0x08006f21
 8006ef0:	08006f21 	.word	0x08006f21
 8006ef4:	08006f0f 	.word	0x08006f0f
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f21 	.word	0x08006f21
 8006f04:	08006f1b 	.word	0x08006f1b
 8006f08:	2300      	movs	r3, #0
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e117      	b.n	800713e <UART_SetConfig+0x346>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	e114      	b.n	800713e <UART_SetConfig+0x346>
 8006f14:	2304      	movs	r3, #4
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e111      	b.n	800713e <UART_SetConfig+0x346>
 8006f1a:	2308      	movs	r3, #8
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	e10e      	b.n	800713e <UART_SetConfig+0x346>
 8006f20:	2310      	movs	r3, #16
 8006f22:	77fb      	strb	r3, [r7, #31]
 8006f24:	e10b      	b.n	800713e <UART_SetConfig+0x346>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a69      	ldr	r2, [pc, #420]	; (80070d0 <UART_SetConfig+0x2d8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d120      	bne.n	8006f72 <UART_SetConfig+0x17a>
 8006f30:	4b65      	ldr	r3, [pc, #404]	; (80070c8 <UART_SetConfig+0x2d0>)
 8006f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f3a:	2b30      	cmp	r3, #48	; 0x30
 8006f3c:	d013      	beq.n	8006f66 <UART_SetConfig+0x16e>
 8006f3e:	2b30      	cmp	r3, #48	; 0x30
 8006f40:	d814      	bhi.n	8006f6c <UART_SetConfig+0x174>
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d009      	beq.n	8006f5a <UART_SetConfig+0x162>
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d810      	bhi.n	8006f6c <UART_SetConfig+0x174>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <UART_SetConfig+0x15c>
 8006f4e:	2b10      	cmp	r3, #16
 8006f50:	d006      	beq.n	8006f60 <UART_SetConfig+0x168>
 8006f52:	e00b      	b.n	8006f6c <UART_SetConfig+0x174>
 8006f54:	2300      	movs	r3, #0
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e0f1      	b.n	800713e <UART_SetConfig+0x346>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e0ee      	b.n	800713e <UART_SetConfig+0x346>
 8006f60:	2304      	movs	r3, #4
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e0eb      	b.n	800713e <UART_SetConfig+0x346>
 8006f66:	2308      	movs	r3, #8
 8006f68:	77fb      	strb	r3, [r7, #31]
 8006f6a:	e0e8      	b.n	800713e <UART_SetConfig+0x346>
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	77fb      	strb	r3, [r7, #31]
 8006f70:	e0e5      	b.n	800713e <UART_SetConfig+0x346>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a57      	ldr	r2, [pc, #348]	; (80070d4 <UART_SetConfig+0x2dc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d120      	bne.n	8006fbe <UART_SetConfig+0x1c6>
 8006f7c:	4b52      	ldr	r3, [pc, #328]	; (80070c8 <UART_SetConfig+0x2d0>)
 8006f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f86:	2bc0      	cmp	r3, #192	; 0xc0
 8006f88:	d013      	beq.n	8006fb2 <UART_SetConfig+0x1ba>
 8006f8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f8c:	d814      	bhi.n	8006fb8 <UART_SetConfig+0x1c0>
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d009      	beq.n	8006fa6 <UART_SetConfig+0x1ae>
 8006f92:	2b80      	cmp	r3, #128	; 0x80
 8006f94:	d810      	bhi.n	8006fb8 <UART_SetConfig+0x1c0>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <UART_SetConfig+0x1a8>
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d006      	beq.n	8006fac <UART_SetConfig+0x1b4>
 8006f9e:	e00b      	b.n	8006fb8 <UART_SetConfig+0x1c0>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	77fb      	strb	r3, [r7, #31]
 8006fa4:	e0cb      	b.n	800713e <UART_SetConfig+0x346>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	77fb      	strb	r3, [r7, #31]
 8006faa:	e0c8      	b.n	800713e <UART_SetConfig+0x346>
 8006fac:	2304      	movs	r3, #4
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e0c5      	b.n	800713e <UART_SetConfig+0x346>
 8006fb2:	2308      	movs	r3, #8
 8006fb4:	77fb      	strb	r3, [r7, #31]
 8006fb6:	e0c2      	b.n	800713e <UART_SetConfig+0x346>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	77fb      	strb	r3, [r7, #31]
 8006fbc:	e0bf      	b.n	800713e <UART_SetConfig+0x346>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a45      	ldr	r2, [pc, #276]	; (80070d8 <UART_SetConfig+0x2e0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d125      	bne.n	8007014 <UART_SetConfig+0x21c>
 8006fc8:	4b3f      	ldr	r3, [pc, #252]	; (80070c8 <UART_SetConfig+0x2d0>)
 8006fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd6:	d017      	beq.n	8007008 <UART_SetConfig+0x210>
 8006fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fdc:	d817      	bhi.n	800700e <UART_SetConfig+0x216>
 8006fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe2:	d00b      	beq.n	8006ffc <UART_SetConfig+0x204>
 8006fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe8:	d811      	bhi.n	800700e <UART_SetConfig+0x216>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <UART_SetConfig+0x1fe>
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff2:	d006      	beq.n	8007002 <UART_SetConfig+0x20a>
 8006ff4:	e00b      	b.n	800700e <UART_SetConfig+0x216>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	77fb      	strb	r3, [r7, #31]
 8006ffa:	e0a0      	b.n	800713e <UART_SetConfig+0x346>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e09d      	b.n	800713e <UART_SetConfig+0x346>
 8007002:	2304      	movs	r3, #4
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	e09a      	b.n	800713e <UART_SetConfig+0x346>
 8007008:	2308      	movs	r3, #8
 800700a:	77fb      	strb	r3, [r7, #31]
 800700c:	e097      	b.n	800713e <UART_SetConfig+0x346>
 800700e:	2310      	movs	r3, #16
 8007010:	77fb      	strb	r3, [r7, #31]
 8007012:	e094      	b.n	800713e <UART_SetConfig+0x346>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a30      	ldr	r2, [pc, #192]	; (80070dc <UART_SetConfig+0x2e4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d125      	bne.n	800706a <UART_SetConfig+0x272>
 800701e:	4b2a      	ldr	r3, [pc, #168]	; (80070c8 <UART_SetConfig+0x2d0>)
 8007020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007024:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007028:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800702c:	d017      	beq.n	800705e <UART_SetConfig+0x266>
 800702e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007032:	d817      	bhi.n	8007064 <UART_SetConfig+0x26c>
 8007034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007038:	d00b      	beq.n	8007052 <UART_SetConfig+0x25a>
 800703a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800703e:	d811      	bhi.n	8007064 <UART_SetConfig+0x26c>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <UART_SetConfig+0x254>
 8007044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007048:	d006      	beq.n	8007058 <UART_SetConfig+0x260>
 800704a:	e00b      	b.n	8007064 <UART_SetConfig+0x26c>
 800704c:	2301      	movs	r3, #1
 800704e:	77fb      	strb	r3, [r7, #31]
 8007050:	e075      	b.n	800713e <UART_SetConfig+0x346>
 8007052:	2302      	movs	r3, #2
 8007054:	77fb      	strb	r3, [r7, #31]
 8007056:	e072      	b.n	800713e <UART_SetConfig+0x346>
 8007058:	2304      	movs	r3, #4
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e06f      	b.n	800713e <UART_SetConfig+0x346>
 800705e:	2308      	movs	r3, #8
 8007060:	77fb      	strb	r3, [r7, #31]
 8007062:	e06c      	b.n	800713e <UART_SetConfig+0x346>
 8007064:	2310      	movs	r3, #16
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	e069      	b.n	800713e <UART_SetConfig+0x346>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1c      	ldr	r2, [pc, #112]	; (80070e0 <UART_SetConfig+0x2e8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d137      	bne.n	80070e4 <UART_SetConfig+0x2ec>
 8007074:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <UART_SetConfig+0x2d0>)
 8007076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800707e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007082:	d017      	beq.n	80070b4 <UART_SetConfig+0x2bc>
 8007084:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007088:	d817      	bhi.n	80070ba <UART_SetConfig+0x2c2>
 800708a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800708e:	d00b      	beq.n	80070a8 <UART_SetConfig+0x2b0>
 8007090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007094:	d811      	bhi.n	80070ba <UART_SetConfig+0x2c2>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <UART_SetConfig+0x2aa>
 800709a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800709e:	d006      	beq.n	80070ae <UART_SetConfig+0x2b6>
 80070a0:	e00b      	b.n	80070ba <UART_SetConfig+0x2c2>
 80070a2:	2300      	movs	r3, #0
 80070a4:	77fb      	strb	r3, [r7, #31]
 80070a6:	e04a      	b.n	800713e <UART_SetConfig+0x346>
 80070a8:	2302      	movs	r3, #2
 80070aa:	77fb      	strb	r3, [r7, #31]
 80070ac:	e047      	b.n	800713e <UART_SetConfig+0x346>
 80070ae:	2304      	movs	r3, #4
 80070b0:	77fb      	strb	r3, [r7, #31]
 80070b2:	e044      	b.n	800713e <UART_SetConfig+0x346>
 80070b4:	2308      	movs	r3, #8
 80070b6:	77fb      	strb	r3, [r7, #31]
 80070b8:	e041      	b.n	800713e <UART_SetConfig+0x346>
 80070ba:	2310      	movs	r3, #16
 80070bc:	77fb      	strb	r3, [r7, #31]
 80070be:	e03e      	b.n	800713e <UART_SetConfig+0x346>
 80070c0:	efff69f3 	.word	0xefff69f3
 80070c4:	40011000 	.word	0x40011000
 80070c8:	40023800 	.word	0x40023800
 80070cc:	40004400 	.word	0x40004400
 80070d0:	40004800 	.word	0x40004800
 80070d4:	40004c00 	.word	0x40004c00
 80070d8:	40005000 	.word	0x40005000
 80070dc:	40011400 	.word	0x40011400
 80070e0:	40007800 	.word	0x40007800
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a71      	ldr	r2, [pc, #452]	; (80072b0 <UART_SetConfig+0x4b8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d125      	bne.n	800713a <UART_SetConfig+0x342>
 80070ee:	4b71      	ldr	r3, [pc, #452]	; (80072b4 <UART_SetConfig+0x4bc>)
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070fc:	d017      	beq.n	800712e <UART_SetConfig+0x336>
 80070fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007102:	d817      	bhi.n	8007134 <UART_SetConfig+0x33c>
 8007104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007108:	d00b      	beq.n	8007122 <UART_SetConfig+0x32a>
 800710a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710e:	d811      	bhi.n	8007134 <UART_SetConfig+0x33c>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <UART_SetConfig+0x324>
 8007114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007118:	d006      	beq.n	8007128 <UART_SetConfig+0x330>
 800711a:	e00b      	b.n	8007134 <UART_SetConfig+0x33c>
 800711c:	2300      	movs	r3, #0
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e00d      	b.n	800713e <UART_SetConfig+0x346>
 8007122:	2302      	movs	r3, #2
 8007124:	77fb      	strb	r3, [r7, #31]
 8007126:	e00a      	b.n	800713e <UART_SetConfig+0x346>
 8007128:	2304      	movs	r3, #4
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e007      	b.n	800713e <UART_SetConfig+0x346>
 800712e:	2308      	movs	r3, #8
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e004      	b.n	800713e <UART_SetConfig+0x346>
 8007134:	2310      	movs	r3, #16
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	e001      	b.n	800713e <UART_SetConfig+0x346>
 800713a:	2310      	movs	r3, #16
 800713c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007146:	d15a      	bne.n	80071fe <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007148:	7ffb      	ldrb	r3, [r7, #31]
 800714a:	2b08      	cmp	r3, #8
 800714c:	d827      	bhi.n	800719e <UART_SetConfig+0x3a6>
 800714e:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0x35c>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	08007179 	.word	0x08007179
 8007158:	08007181 	.word	0x08007181
 800715c:	08007189 	.word	0x08007189
 8007160:	0800719f 	.word	0x0800719f
 8007164:	0800718f 	.word	0x0800718f
 8007168:	0800719f 	.word	0x0800719f
 800716c:	0800719f 	.word	0x0800719f
 8007170:	0800719f 	.word	0x0800719f
 8007174:	08007197 	.word	0x08007197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007178:	f7fd f942 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 800717c:	61b8      	str	r0, [r7, #24]
        break;
 800717e:	e013      	b.n	80071a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007180:	f7fd f952 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 8007184:	61b8      	str	r0, [r7, #24]
        break;
 8007186:	e00f      	b.n	80071a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007188:	4b4b      	ldr	r3, [pc, #300]	; (80072b8 <UART_SetConfig+0x4c0>)
 800718a:	61bb      	str	r3, [r7, #24]
        break;
 800718c:	e00c      	b.n	80071a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718e:	f7fd f875 	bl	800427c <HAL_RCC_GetSysClockFreq>
 8007192:	61b8      	str	r0, [r7, #24]
        break;
 8007194:	e008      	b.n	80071a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800719a:	61bb      	str	r3, [r7, #24]
        break;
 800719c:	e004      	b.n	80071a8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	77bb      	strb	r3, [r7, #30]
        break;
 80071a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d074      	beq.n	8007298 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	005a      	lsls	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	085b      	lsrs	r3, r3, #1
 80071b8:	441a      	add	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b0f      	cmp	r3, #15
 80071c8:	d916      	bls.n	80071f8 <UART_SetConfig+0x400>
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d0:	d212      	bcs.n	80071f8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f023 030f 	bic.w	r3, r3, #15
 80071da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	89fb      	ldrh	r3, [r7, #14]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	89fa      	ldrh	r2, [r7, #14]
 80071f4:	60da      	str	r2, [r3, #12]
 80071f6:	e04f      	b.n	8007298 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	77bb      	strb	r3, [r7, #30]
 80071fc:	e04c      	b.n	8007298 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071fe:	7ffb      	ldrb	r3, [r7, #31]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d828      	bhi.n	8007256 <UART_SetConfig+0x45e>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <UART_SetConfig+0x414>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	08007231 	.word	0x08007231
 8007210:	08007239 	.word	0x08007239
 8007214:	08007241 	.word	0x08007241
 8007218:	08007257 	.word	0x08007257
 800721c:	08007247 	.word	0x08007247
 8007220:	08007257 	.word	0x08007257
 8007224:	08007257 	.word	0x08007257
 8007228:	08007257 	.word	0x08007257
 800722c:	0800724f 	.word	0x0800724f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007230:	f7fd f8e6 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8007234:	61b8      	str	r0, [r7, #24]
        break;
 8007236:	e013      	b.n	8007260 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007238:	f7fd f8f6 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 800723c:	61b8      	str	r0, [r7, #24]
        break;
 800723e:	e00f      	b.n	8007260 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007240:	4b1d      	ldr	r3, [pc, #116]	; (80072b8 <UART_SetConfig+0x4c0>)
 8007242:	61bb      	str	r3, [r7, #24]
        break;
 8007244:	e00c      	b.n	8007260 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007246:	f7fd f819 	bl	800427c <HAL_RCC_GetSysClockFreq>
 800724a:	61b8      	str	r0, [r7, #24]
        break;
 800724c:	e008      	b.n	8007260 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007252:	61bb      	str	r3, [r7, #24]
        break;
 8007254:	e004      	b.n	8007260 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	77bb      	strb	r3, [r7, #30]
        break;
 800725e:	bf00      	nop
    }

    if (pclk != 0U)
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d018      	beq.n	8007298 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	085a      	lsrs	r2, r3, #1
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	441a      	add	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b0f      	cmp	r3, #15
 800727e:	d909      	bls.n	8007294 <UART_SetConfig+0x49c>
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007286:	d205      	bcs.n	8007294 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	b29a      	uxth	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60da      	str	r2, [r3, #12]
 8007292:	e001      	b.n	8007298 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80072a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3720      	adds	r7, #32
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40007c00 	.word	0x40007c00
 80072b4:	40023800 	.word	0x40023800
 80072b8:	00f42400 	.word	0x00f42400

080072bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01a      	beq.n	80073d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ba:	d10a      	bne.n	80073d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	605a      	str	r2, [r3, #4]
  }
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af02      	add	r7, sp, #8
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007410:	f7fb fc7e 	bl	8002d10 <HAL_GetTick>
 8007414:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b08      	cmp	r3, #8
 8007422:	d10e      	bne.n	8007442 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f82d 	bl	8007492 <UART_WaitOnFlagUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e023      	b.n	800748a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b04      	cmp	r3, #4
 800744e:	d10e      	bne.n	800746e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f817 	bl	8007492 <UART_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e00d      	b.n	800748a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b09c      	sub	sp, #112	; 0x70
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	603b      	str	r3, [r7, #0]
 800749e:	4613      	mov	r3, r2
 80074a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a2:	e0a5      	b.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074aa:	f000 80a1 	beq.w	80075f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ae:	f7fb fc2f 	bl	8002d10 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d302      	bcc.n	80074c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80074be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d13e      	bne.n	8007542 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074d8:	667b      	str	r3, [r7, #100]	; 0x64
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e6      	bne.n	80074c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3308      	adds	r3, #8
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	f023 0301 	bic.w	r3, r3, #1
 800750c:	663b      	str	r3, [r7, #96]	; 0x60
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007516:	64ba      	str	r2, [r7, #72]	; 0x48
 8007518:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800751c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e5      	bne.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e067      	b.n	8007612 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d04f      	beq.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800755a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755e:	d147      	bne.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007568:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800757e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007588:	637b      	str	r3, [r7, #52]	; 0x34
 800758a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800758e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e6      	bne.n	800756a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	613b      	str	r3, [r7, #16]
   return(result);
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075bc:	623a      	str	r2, [r7, #32]
 80075be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	69f9      	ldr	r1, [r7, #28]
 80075c2:	6a3a      	ldr	r2, [r7, #32]
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e5      	bne.n	800759c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2220      	movs	r2, #32
 80075d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2220      	movs	r2, #32
 80075da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2220      	movs	r2, #32
 80075e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e010      	b.n	8007612 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69da      	ldr	r2, [r3, #28]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	4013      	ands	r3, r2
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	429a      	cmp	r2, r3
 800760c:	f43f af4a 	beq.w	80074a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3770      	adds	r7, #112	; 0x70
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <__libc_init_array>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4d0d      	ldr	r5, [pc, #52]	; (8007654 <__libc_init_array+0x38>)
 8007620:	4c0d      	ldr	r4, [pc, #52]	; (8007658 <__libc_init_array+0x3c>)
 8007622:	1b64      	subs	r4, r4, r5
 8007624:	10a4      	asrs	r4, r4, #2
 8007626:	2600      	movs	r6, #0
 8007628:	42a6      	cmp	r6, r4
 800762a:	d109      	bne.n	8007640 <__libc_init_array+0x24>
 800762c:	4d0b      	ldr	r5, [pc, #44]	; (800765c <__libc_init_array+0x40>)
 800762e:	4c0c      	ldr	r4, [pc, #48]	; (8007660 <__libc_init_array+0x44>)
 8007630:	f000 f864 	bl	80076fc <_init>
 8007634:	1b64      	subs	r4, r4, r5
 8007636:	10a4      	asrs	r4, r4, #2
 8007638:	2600      	movs	r6, #0
 800763a:	42a6      	cmp	r6, r4
 800763c:	d105      	bne.n	800764a <__libc_init_array+0x2e>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	f855 3b04 	ldr.w	r3, [r5], #4
 8007644:	4798      	blx	r3
 8007646:	3601      	adds	r6, #1
 8007648:	e7ee      	b.n	8007628 <__libc_init_array+0xc>
 800764a:	f855 3b04 	ldr.w	r3, [r5], #4
 800764e:	4798      	blx	r3
 8007650:	3601      	adds	r6, #1
 8007652:	e7f2      	b.n	800763a <__libc_init_array+0x1e>
 8007654:	0800802c 	.word	0x0800802c
 8007658:	0800802c 	.word	0x0800802c
 800765c:	0800802c 	.word	0x0800802c
 8007660:	08008030 	.word	0x08008030

08007664 <memset>:
 8007664:	4402      	add	r2, r0
 8007666:	4603      	mov	r3, r0
 8007668:	4293      	cmp	r3, r2
 800766a:	d100      	bne.n	800766e <memset+0xa>
 800766c:	4770      	bx	lr
 800766e:	f803 1b01 	strb.w	r1, [r3], #1
 8007672:	e7f9      	b.n	8007668 <memset+0x4>

08007674 <__utoa>:
 8007674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007676:	4c1f      	ldr	r4, [pc, #124]	; (80076f4 <__utoa+0x80>)
 8007678:	b08b      	sub	sp, #44	; 0x2c
 800767a:	4605      	mov	r5, r0
 800767c:	460b      	mov	r3, r1
 800767e:	466e      	mov	r6, sp
 8007680:	f104 0c20 	add.w	ip, r4, #32
 8007684:	6820      	ldr	r0, [r4, #0]
 8007686:	6861      	ldr	r1, [r4, #4]
 8007688:	4637      	mov	r7, r6
 800768a:	c703      	stmia	r7!, {r0, r1}
 800768c:	3408      	adds	r4, #8
 800768e:	4564      	cmp	r4, ip
 8007690:	463e      	mov	r6, r7
 8007692:	d1f7      	bne.n	8007684 <__utoa+0x10>
 8007694:	7921      	ldrb	r1, [r4, #4]
 8007696:	7139      	strb	r1, [r7, #4]
 8007698:	1e91      	subs	r1, r2, #2
 800769a:	6820      	ldr	r0, [r4, #0]
 800769c:	6038      	str	r0, [r7, #0]
 800769e:	2922      	cmp	r1, #34	; 0x22
 80076a0:	f04f 0100 	mov.w	r1, #0
 80076a4:	d904      	bls.n	80076b0 <__utoa+0x3c>
 80076a6:	7019      	strb	r1, [r3, #0]
 80076a8:	460b      	mov	r3, r1
 80076aa:	4618      	mov	r0, r3
 80076ac:	b00b      	add	sp, #44	; 0x2c
 80076ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b0:	1e58      	subs	r0, r3, #1
 80076b2:	4684      	mov	ip, r0
 80076b4:	fbb5 f7f2 	udiv	r7, r5, r2
 80076b8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80076bc:	fb02 5617 	mls	r6, r2, r7, r5
 80076c0:	4476      	add	r6, lr
 80076c2:	460c      	mov	r4, r1
 80076c4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80076c8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80076cc:	462e      	mov	r6, r5
 80076ce:	42b2      	cmp	r2, r6
 80076d0:	f101 0101 	add.w	r1, r1, #1
 80076d4:	463d      	mov	r5, r7
 80076d6:	d9ed      	bls.n	80076b4 <__utoa+0x40>
 80076d8:	2200      	movs	r2, #0
 80076da:	545a      	strb	r2, [r3, r1]
 80076dc:	1919      	adds	r1, r3, r4
 80076de:	1aa5      	subs	r5, r4, r2
 80076e0:	42aa      	cmp	r2, r5
 80076e2:	dae2      	bge.n	80076aa <__utoa+0x36>
 80076e4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80076e8:	780e      	ldrb	r6, [r1, #0]
 80076ea:	7006      	strb	r6, [r0, #0]
 80076ec:	3201      	adds	r2, #1
 80076ee:	f801 5901 	strb.w	r5, [r1], #-1
 80076f2:	e7f4      	b.n	80076de <__utoa+0x6a>
 80076f4:	08007ffc 	.word	0x08007ffc

080076f8 <utoa>:
 80076f8:	f7ff bfbc 	b.w	8007674 <__utoa>

080076fc <_init>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr

08007708 <_fini>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	bf00      	nop
 800770c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770e:	bc08      	pop	{r3}
 8007710:	469e      	mov	lr, r3
 8007712:	4770      	bx	lr
