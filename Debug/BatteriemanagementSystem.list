
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c230  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800c428  0800c428  0001c428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca38  0800ca38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca38  0800ca38  0001ca38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca40  0800ca40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca40  0800ca40  0001ca40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca44  0800ca44  0001ca44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800ca48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  2000000c  0800ca54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200008a0  0800ca54  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027954  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005070  00000000  00000000  0004798e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  0004ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  0004e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f3dc  00000000  00000000  0004fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026655  00000000  00000000  0007f0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f54a  00000000  00000000  000a5729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4c73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf4  00000000  00000000  001b4cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800c410 	.word	0x0800c410

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800c410 	.word	0x0800c410

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f007 fc85 	bl	8007e64 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200003b0 	.word	0x200003b0

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f00b ff46 	bl	800c40c <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f007 fc64 	bl	8007e64 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200003b0 	.word	0x200003b0

080005a8 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80005ae:	2113      	movs	r1, #19
 80005b0:	483b      	ldr	r0, [pc, #236]	; (80006a0 <collectHardwareInfo+0xf8>)
 80005b2:	f7ff ffc5 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80005b6:	f002 f80d 	bl	80025d4 <HAL_GetDEVID>
 80005ba:	4603      	mov	r3, r0
 80005bc:	210a      	movs	r1, #10
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffd2 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80005c4:	2115      	movs	r1, #21
 80005c6:	4837      	ldr	r0, [pc, #220]	; (80006a4 <collectHardwareInfo+0xfc>)
 80005c8:	f7ff ffba 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80005cc:	f001 fff6 	bl	80025bc <HAL_GetREVID>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f242 0201 	movw	r2, #8193	; 0x2001
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d016      	beq.n	8000608 <collectHardwareInfo+0x60>
 80005da:	f242 0201 	movw	r2, #8193	; 0x2001
 80005de:	4293      	cmp	r3, r2
 80005e0:	d817      	bhi.n	8000612 <collectHardwareInfo+0x6a>
 80005e2:	f241 0201 	movw	r2, #4097	; 0x1001
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d004      	beq.n	80005f4 <collectHardwareInfo+0x4c>
 80005ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d005      	beq.n	80005fe <collectHardwareInfo+0x56>
 80005f2:	e00e      	b.n	8000612 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80005f4:	2101      	movs	r1, #1
 80005f6:	482c      	ldr	r0, [pc, #176]	; (80006a8 <collectHardwareInfo+0x100>)
 80005f8:	f7ff ffa2 	bl	8000540 <uartTransmit>
			break;
 80005fc:	e011      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <collectHardwareInfo+0x104>)
 8000602:	f7ff ff9d 	bl	8000540 <uartTransmit>
			break;
 8000606:	e00c      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000608:	2101      	movs	r1, #1
 800060a:	4829      	ldr	r0, [pc, #164]	; (80006b0 <collectHardwareInfo+0x108>)
 800060c:	f7ff ff98 	bl	8000540 <uartTransmit>
			break;
 8000610:	e007      	b.n	8000622 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000612:	f001 ffd3 	bl	80025bc <HAL_GetREVID>
 8000616:	4603      	mov	r3, r0
 8000618:	210a      	movs	r1, #10
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffa4 	bl	8000568 <uartTransmitNumber>
			break;
 8000620:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000622:	2113      	movs	r1, #19
 8000624:	4823      	ldr	r0, [pc, #140]	; (80006b4 <collectHardwareInfo+0x10c>)
 8000626:	f7ff ff8b 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800062a:	f004 f847 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800062e:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <collectHardwareInfo+0x110>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	0c9b      	lsrs	r3, r3, #18
 800063a:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 800063c:	210a      	movs	r1, #10
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff92 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000644:	2104      	movs	r1, #4
 8000646:	481d      	ldr	r0, [pc, #116]	; (80006bc <collectHardwareInfo+0x114>)
 8000648:	f7ff ff7a 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 800064c:	210f      	movs	r1, #15
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <collectHardwareInfo+0x118>)
 8000650:	f7ff ff76 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000654:	f001 ffcc 	bl	80025f0 <HAL_GetUIDw0>
 8000658:	4603      	mov	r3, r0
 800065a:	2110      	movs	r1, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff83 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000662:	2101      	movs	r1, #1
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <collectHardwareInfo+0x11c>)
 8000666:	f7ff ff6b 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800066a:	f001 ffcd 	bl	8002608 <HAL_GetUIDw1>
 800066e:	4603      	mov	r3, r0
 8000670:	2110      	movs	r1, #16
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff78 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000678:	2101      	movs	r1, #1
 800067a:	4812      	ldr	r0, [pc, #72]	; (80006c4 <collectHardwareInfo+0x11c>)
 800067c:	f7ff ff60 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000680:	f001 ffce 	bl	8002620 <HAL_GetUIDw2>
 8000684:	4603      	mov	r3, r0
 8000686:	2110      	movs	r1, #16
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff6d 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800068e:	2101      	movs	r1, #1
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <collectHardwareInfo+0x120>)
 8000692:	f7ff ff55 	bl	8000540 <uartTransmit>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	0800c428 	.word	0x0800c428
 80006a4:	0800c43c 	.word	0x0800c43c
 80006a8:	0800c454 	.word	0x0800c454
 80006ac:	0800c458 	.word	0x0800c458
 80006b0:	0800c45c 	.word	0x0800c45c
 80006b4:	0800c460 	.word	0x0800c460
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	0800c474 	.word	0x0800c474
 80006c0:	0800c47c 	.word	0x0800c47c
 80006c4:	0800c48c 	.word	0x0800c48c
 80006c8:	0800c490 	.word	0x0800c490

080006cc <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80006d0:	2112      	movs	r1, #18
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <collectMiddlewareInfo+0x98>)
 80006d4:	f7ff ff34 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80006d8:	210a      	movs	r1, #10
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff44 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <collectMiddlewareInfo+0x9c>)
 80006e4:	f7ff ff2c 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80006e8:	210a      	movs	r1, #10
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff3c 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80006f0:	2110      	movs	r1, #16
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <collectMiddlewareInfo+0xa0>)
 80006f4:	f7ff ff24 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80006f8:	f001 ff56 	bl	80025a8 <HAL_GetHalVersion>
 80006fc:	4603      	mov	r3, r0
 80006fe:	0e1b      	lsrs	r3, r3, #24
 8000700:	b2db      	uxtb	r3, r3
 8000702:	210a      	movs	r1, #10
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff2f 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800070a:	2101      	movs	r1, #1
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <collectMiddlewareInfo+0x9c>)
 800070e:	f7ff ff17 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000712:	f001 ff49 	bl	80025a8 <HAL_GetHalVersion>
 8000716:	4603      	mov	r3, r0
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	b2db      	uxtb	r3, r3
 800071c:	210a      	movs	r1, #10
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff22 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000724:	2101      	movs	r1, #1
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000728:	f7ff ff0a 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 800072c:	f001 ff3c 	bl	80025a8 <HAL_GetHalVersion>
 8000730:	4603      	mov	r3, r0
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	b2db      	uxtb	r3, r3
 8000736:	210a      	movs	r1, #10
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff15 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800073e:	2101      	movs	r1, #1
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000742:	f7ff fefd 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000746:	f001 ff2f 	bl	80025a8 <HAL_GetHalVersion>
 800074a:	4603      	mov	r3, r0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	210a      	movs	r1, #10
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff09 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000756:	2101      	movs	r1, #1
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <collectMiddlewareInfo+0xa4>)
 800075a:	f7ff fef1 	bl	8000540 <uartTransmit>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	0800c494 	.word	0x0800c494
 8000768:	0800c4a8 	.word	0x0800c4a8
 800076c:	0800c4ac 	.word	0x0800c4ac
 8000770:	0800c490 	.word	0x0800c490

08000774 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000778:	210f      	movs	r1, #15
 800077a:	4826      	ldr	r0, [pc, #152]	; (8000814 <collectSoftwareInfo+0xa0>)
 800077c:	f7ff fee0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000780:	2108      	movs	r1, #8
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <collectSoftwareInfo+0xa4>)
 8000784:	f7ff fedc 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000788:	210f      	movs	r1, #15
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <collectSoftwareInfo+0xa8>)
 800078c:	f7ff fed8 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000790:	2109      	movs	r1, #9
 8000792:	4823      	ldr	r0, [pc, #140]	; (8000820 <collectSoftwareInfo+0xac>)
 8000794:	f7ff fed4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000798:	210d      	movs	r1, #13
 800079a:	4822      	ldr	r0, [pc, #136]	; (8000824 <collectSoftwareInfo+0xb0>)
 800079c:	f7ff fed0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80007a0:	2129      	movs	r1, #41	; 0x29
 80007a2:	4821      	ldr	r0, [pc, #132]	; (8000828 <collectSoftwareInfo+0xb4>)
 80007a4:	f7ff fecc 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007a8:	2101      	movs	r1, #1
 80007aa:	4820      	ldr	r0, [pc, #128]	; (800082c <collectSoftwareInfo+0xb8>)
 80007ac:	f7ff fec8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80007b0:	2115      	movs	r1, #21
 80007b2:	481f      	ldr	r0, [pc, #124]	; (8000830 <collectSoftwareInfo+0xbc>)
 80007b4:	f7ff fec4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80007b8:	2105      	movs	r1, #5
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <collectSoftwareInfo+0xc0>)
 80007bc:	f7ff fec0 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80007c0:	2114      	movs	r1, #20
 80007c2:	481d      	ldr	r0, [pc, #116]	; (8000838 <collectSoftwareInfo+0xc4>)
 80007c4:	f7ff febc 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80007c8:	2108      	movs	r1, #8
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <collectSoftwareInfo+0xc8>)
 80007cc:	f7ff feb8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80007d0:	2115      	movs	r1, #21
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <collectSoftwareInfo+0xcc>)
 80007d4:	f7ff feb4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80007d8:	2111      	movs	r1, #17
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <collectSoftwareInfo+0xd0>)
 80007dc:	f7ff feb0 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007e0:	2101      	movs	r1, #1
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <collectSoftwareInfo+0xb8>)
 80007e4:	f7ff feac 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80007e8:	210f      	movs	r1, #15
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <collectSoftwareInfo+0xd4>)
 80007ec:	f7ff fea8 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80007f0:	210b      	movs	r1, #11
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <collectSoftwareInfo+0xd8>)
 80007f4:	f7ff fea4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80007f8:	210f      	movs	r1, #15
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <collectSoftwareInfo+0xdc>)
 80007fc:	f7ff fea0 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000800:	2109      	movs	r1, #9
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <collectSoftwareInfo+0xe0>)
 8000804:	f7ff fe9c 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000808:	2101      	movs	r1, #1
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <collectSoftwareInfo+0xb8>)
 800080c:	f7ff fe98 	bl	8000540 <uartTransmit>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	0800c4bc 	.word	0x0800c4bc
 8000818:	0800c4cc 	.word	0x0800c4cc
 800081c:	0800c4d4 	.word	0x0800c4d4
 8000820:	0800c4e4 	.word	0x0800c4e4
 8000824:	0800c4f0 	.word	0x0800c4f0
 8000828:	0800c500 	.word	0x0800c500
 800082c:	0800c490 	.word	0x0800c490
 8000830:	0800c52c 	.word	0x0800c52c
 8000834:	0800c544 	.word	0x0800c544
 8000838:	0800c54c 	.word	0x0800c54c
 800083c:	0800c560 	.word	0x0800c560
 8000840:	0800c568 	.word	0x0800c568
 8000844:	0800c580 	.word	0x0800c580
 8000848:	0800c594 	.word	0x0800c594
 800084c:	0800c5a4 	.word	0x0800c5a4
 8000850:	0800c5b0 	.word	0x0800c5b0
 8000854:	0800c5c0 	.word	0x0800c5c0

08000858 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 800085c:	2114      	movs	r1, #20
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <collectGitcounts+0x58>)
 8000860:	f7ff fe6e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000864:	2103      	movs	r1, #3
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <collectGitcounts+0x5c>)
 8000868:	f7ff fe6a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 800086c:	2116      	movs	r1, #22
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <collectGitcounts+0x60>)
 8000870:	f7ff fe66 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000874:	2103      	movs	r1, #3
 8000876:	4811      	ldr	r0, [pc, #68]	; (80008bc <collectGitcounts+0x64>)
 8000878:	f7ff fe62 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 800087c:	211c      	movs	r1, #28
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <collectGitcounts+0x68>)
 8000880:	f7ff fe5e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000884:	2103      	movs	r1, #3
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <collectGitcounts+0x6c>)
 8000888:	f7ff fe5a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800088c:	2115      	movs	r1, #21
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <collectGitcounts+0x70>)
 8000890:	f7ff fe56 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000894:	2102      	movs	r1, #2
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <collectGitcounts+0x74>)
 8000898:	f7ff fe52 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800089c:	2114      	movs	r1, #20
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <collectGitcounts+0x78>)
 80008a0:	f7ff fe4e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 80008a4:	2102      	movs	r1, #2
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <collectGitcounts+0x7c>)
 80008a8:	f7ff fe4a 	bl	8000540 <uartTransmit>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800c5cc 	.word	0x0800c5cc
 80008b4:	0800c5e0 	.word	0x0800c5e0
 80008b8:	0800c5e4 	.word	0x0800c5e4
 80008bc:	0800c5fc 	.word	0x0800c5fc
 80008c0:	0800c600 	.word	0x0800c600
 80008c4:	0800c61c 	.word	0x0800c61c
 80008c8:	0800c52c 	.word	0x0800c52c
 80008cc:	0800c620 	.word	0x0800c620
 80008d0:	0800c54c 	.word	0x0800c54c
 80008d4:	0800c624 	.word	0x0800c624

080008d8 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80008dc:	2111      	movs	r1, #17
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <collectSystemInfo+0x40>)
 80008e0:	f7ff fe2e 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 80008e4:	f7ff fe60 	bl	80005a8 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 80008e8:	2111      	movs	r1, #17
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <collectSystemInfo+0x44>)
 80008ec:	f7ff fe28 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 80008f0:	f7ff ff40 	bl	8000774 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80008f4:	2113      	movs	r1, #19
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <collectSystemInfo+0x48>)
 80008f8:	f7ff fe22 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80008fc:	f7ff fee6 	bl	80006cc <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000900:	2113      	movs	r1, #19
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <collectSystemInfo+0x4c>)
 8000904:	f7ff fe1c 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000908:	f7ff ffa6 	bl	8000858 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 800090c:	2103      	movs	r1, #3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <collectSystemInfo+0x50>)
 8000910:	f7ff fe16 	bl	8000540 <uartTransmit>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	0800c628 	.word	0x0800c628
 800091c:	0800c63c 	.word	0x0800c63c
 8000920:	0800c650 	.word	0x0800c650
 8000924:	0800c664 	.word	0x0800c664
 8000928:	0800c678 	.word	0x0800c678

0800092c <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <readResetSource+0xa0>)
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3301      	adds	r3, #1
 8000946:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <readResetSource+0xa0>)
 800094a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800094c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3302      	adds	r3, #2
 8000958:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <readResetSource+0xa0>)
 800095c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800095e:	2b00      	cmp	r3, #0
 8000960:	da02      	bge.n	8000968 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	3304      	adds	r3, #4
 8000966:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <readResetSource+0xa0>)
 800096a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3308      	adds	r3, #8
 8000978:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <readResetSource+0xa0>)
 800097c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800097e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3310      	adds	r3, #16
 800098a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <readResetSource+0xa0>)
 800098e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3320      	adds	r3, #32
 800099c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <readResetSource+0xa0>)
 80009a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	3340      	adds	r3, #64	; 0x40
 80009ae:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <readResetSource+0xa0>)
 80009b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <readResetSource+0xa0>)
 80009b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ba:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80009da:	2106      	movs	r1, #6
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <printResetSource+0xb8>)
 80009de:	f7ff fdaf 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80009e8:	210f      	movs	r1, #15
 80009ea:	4828      	ldr	r0, [pc, #160]	; (8000a8c <printResetSource+0xbc>)
 80009ec:	f7ff fda8 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80009f0:	e046      	b.n	8000a80 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80009fc:	2118      	movs	r1, #24
 80009fe:	4824      	ldr	r0, [pc, #144]	; (8000a90 <printResetSource+0xc0>)
 8000a00:	f7ff fd9e 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000a0e:	2116      	movs	r1, #22
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <printResetSource+0xc4>)
 8000a12:	f7ff fd95 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000a20:	210a      	movs	r1, #10
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <printResetSource+0xc8>)
 8000a24:	f7ff fd8c 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000a32:	2110      	movs	r1, #16
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <printResetSource+0xcc>)
 8000a36:	f7ff fd83 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000a44:	210f      	movs	r1, #15
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <printResetSource+0xd0>)
 8000a48:	f7ff fd7a 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000a56:	210f      	movs	r1, #15
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <printResetSource+0xd4>)
 8000a5a:	f7ff fd71 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000a68:	210a      	movs	r1, #10
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <printResetSource+0xd8>)
 8000a6c:	f7ff fd68 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	da03      	bge.n	8000a80 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000a78:	2105      	movs	r1, #5
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <printResetSource+0xdc>)
 8000a7c:	f7ff fd60 	bl	8000540 <uartTransmit>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	0800c67c 	.word	0x0800c67c
 8000a8c:	0800c684 	.word	0x0800c684
 8000a90:	0800c694 	.word	0x0800c694
 8000a94:	0800c6b0 	.word	0x0800c6b0
 8000a98:	0800c6c8 	.word	0x0800c6c8
 8000a9c:	0800c6d4 	.word	0x0800c6d4
 8000aa0:	0800c6e8 	.word	0x0800c6e8
 8000aa4:	0800c6f8 	.word	0x0800c6f8
 8000aa8:	0800c708 	.word	0x0800c708
 8000aac:	0800c714 	.word	0x0800c714

08000ab0 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000ac0:	2107      	movs	r1, #7
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <hal_error+0x50>)
 8000ac4:	f7ff fd3c 	bl	8000540 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000ac8:	e016      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d104      	bne.n	8000ada <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <hal_error+0x54>)
 8000ad4:	f7ff fd34 	bl	8000540 <uartTransmit>
}
 8000ad8:	e00e      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d104      	bne.n	8000aea <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000ae0:	2109      	movs	r1, #9
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <hal_error+0x58>)
 8000ae4:	f7ff fd2c 	bl	8000540 <uartTransmit>
}
 8000ae8:	e006      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d103      	bne.n	8000af8 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000af0:	210c      	movs	r1, #12
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <hal_error+0x5c>)
 8000af4:	f7ff fd24 	bl	8000540 <uartTransmit>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	0800c71c 	.word	0x0800c71c
 8000b04:	0800c724 	.word	0x0800c724
 8000b08:	0800c730 	.word	0x0800c730
 8000b0c:	0800c73c 	.word	0x0800c73c

08000b10 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	4850      	ldr	r0, [pc, #320]	; (8000c5c <readall_inputs+0x14c>)
 8000b1a:	f003 f9b3 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	4a4e      	ldr	r2, [pc, #312]	; (8000c60 <readall_inputs+0x150>)
 8000b28:	7813      	ldrb	r3, [r2, #0]
 8000b2a:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b2e:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b34:	484b      	ldr	r0, [pc, #300]	; (8000c64 <readall_inputs+0x154>)
 8000b36:	f003 f9a5 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	b2d9      	uxtb	r1, r3
 8000b42:	4a47      	ldr	r2, [pc, #284]	; (8000c60 <readall_inputs+0x150>)
 8000b44:	7813      	ldrb	r3, [r2, #0]
 8000b46:	f361 1304 	bfi	r3, r1, #4, #1
 8000b4a:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4846      	ldr	r0, [pc, #280]	; (8000c68 <readall_inputs+0x158>)
 8000b50:	f003 f998 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	b2d9      	uxtb	r1, r3
 8000b5c:	4a40      	ldr	r2, [pc, #256]	; (8000c60 <readall_inputs+0x150>)
 8000b5e:	7813      	ldrb	r3, [r2, #0]
 8000b60:	f361 1345 	bfi	r3, r1, #5, #1
 8000b64:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000b66:	2104      	movs	r1, #4
 8000b68:	483f      	ldr	r0, [pc, #252]	; (8000c68 <readall_inputs+0x158>)
 8000b6a:	f003 f98b 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	4a3a      	ldr	r2, [pc, #232]	; (8000c60 <readall_inputs+0x150>)
 8000b78:	7813      	ldrb	r3, [r2, #0]
 8000b7a:	f361 1386 	bfi	r3, r1, #6, #1
 8000b7e:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	4835      	ldr	r0, [pc, #212]	; (8000c5c <readall_inputs+0x14c>)
 8000b86:	f003 f97d 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	b2d9      	uxtb	r1, r3
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <readall_inputs+0x15c>)
 8000b94:	7813      	ldrb	r3, [r2, #0]
 8000b96:	f361 0300 	bfi	r3, r1, #0, #1
 8000b9a:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	482f      	ldr	r0, [pc, #188]	; (8000c5c <readall_inputs+0x14c>)
 8000ba0:	f003 f970 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2d9      	uxtb	r1, r3
 8000bac:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <readall_inputs+0x15c>)
 8000bae:	7813      	ldrb	r3, [r2, #0]
 8000bb0:	f361 0341 	bfi	r3, r1, #1, #1
 8000bb4:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <readall_inputs+0x14c>)
 8000bba:	f003 f963 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	b2d9      	uxtb	r1, r3
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <readall_inputs+0x15c>)
 8000bc8:	7813      	ldrb	r3, [r2, #0]
 8000bca:	f361 0382 	bfi	r3, r1, #2, #1
 8000bce:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	4822      	ldr	r0, [pc, #136]	; (8000c5c <readall_inputs+0x14c>)
 8000bd4:	f003 f956 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	b2d9      	uxtb	r1, r3
 8000be0:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <readall_inputs+0x15c>)
 8000be2:	7813      	ldrb	r3, [r2, #0]
 8000be4:	f361 03c3 	bfi	r3, r1, #3, #1
 8000be8:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bee:	4820      	ldr	r0, [pc, #128]	; (8000c70 <readall_inputs+0x160>)
 8000bf0:	f003 f948 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	b2d9      	uxtb	r1, r3
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <readall_inputs+0x15c>)
 8000bfe:	7813      	ldrb	r3, [r2, #0]
 8000c00:	f361 1304 	bfi	r3, r1, #4, #1
 8000c04:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8000c06:	2104      	movs	r1, #4
 8000c08:	4819      	ldr	r0, [pc, #100]	; (8000c70 <readall_inputs+0x160>)
 8000c0a:	f003 f93b 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2d9      	uxtb	r1, r3
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <readall_inputs+0x164>)
 8000c18:	7813      	ldrb	r3, [r2, #0]
 8000c1a:	f361 0300 	bfi	r3, r1, #0, #1
 8000c1e:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c24:	4810      	ldr	r0, [pc, #64]	; (8000c68 <readall_inputs+0x158>)
 8000c26:	f003 f92d 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	b2d9      	uxtb	r1, r3
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <readall_inputs+0x164>)
 8000c34:	7813      	ldrb	r3, [r2, #0]
 8000c36:	f361 0341 	bfi	r3, r1, #1, #1
 8000c3a:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <readall_inputs+0x158>)
 8000c42:	f003 f91f 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	b2d9      	uxtb	r1, r3
 8000c4e:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <readall_inputs+0x164>)
 8000c50:	7813      	ldrb	r3, [r2, #0]
 8000c52:	f361 0382 	bfi	r3, r1, #2, #1
 8000c56:	7013      	strb	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	2000006c 	.word	0x2000006c
 8000c64:	40020c00 	.word	0x40020c00
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	20000074 	.word	0x20000074
 8000c70:	40021400 	.word	0x40021400
 8000c74:	20000070 	.word	0x20000070

08000c78 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <testPCB_Leds+0x78>)
 8000c82:	f003 f917 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8a:	f001 fc69 	bl	8002560 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <testPCB_Leds+0x78>)
 8000c94:	f003 f90e 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c9c:	f001 fc60 	bl	8002560 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <testPCB_Leds+0x78>)
 8000ca6:	f003 f905 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cae:	f001 fc57 	bl	8002560 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <testPCB_Leds+0x78>)
 8000cb8:	f003 f8fc 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f001 fc4e 	bl	8002560 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <testPCB_Leds+0x78>)
 8000ccc:	f003 f8f2 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd4:	f001 fc44 	bl	8002560 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <testPCB_Leds+0x78>)
 8000ce0:	f003 f8e8 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce8:	f001 fc3a 	bl	8002560 <HAL_Delay>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d06:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d08:	4a44      	ldr	r2, [pc, #272]	; (8000e1c <MX_ADC1_Init+0x128>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d0c:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d14:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d20:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d36:	4a3a      	ldr	r2, [pc, #232]	; (8000e20 <MX_ADC1_Init+0x12c>)
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3a:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000d40:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d42:	2206      	movs	r2, #6
 8000d44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d54:	4830      	ldr	r0, [pc, #192]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d56:	f001 fc6f 	bl	8002638 <HAL_ADC_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d60:	f000 fe4e 	bl	8001a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d64:	2307      	movs	r3, #7
 8000d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4828      	ldr	r0, [pc, #160]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d76:	f001 fca3 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d80:	f000 fe3e 	bl	8001a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d84:	2303      	movs	r3, #3
 8000d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4821      	ldr	r0, [pc, #132]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d92:	f001 fc95 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d9c:	f000 fe30 	bl	8001a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000da0:	2304      	movs	r3, #4
 8000da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000da4:	2303      	movs	r3, #3
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	481a      	ldr	r0, [pc, #104]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000dae:	f001 fc87 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000db8:	f000 fe22 	bl	8001a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dbc:	2305      	movs	r3, #5
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000dca:	f001 fc79 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000dd4:	f000 fe14 	bl	8001a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000de6:	f001 fc6b 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000df0:	f000 fe06 	bl	8001a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_ADC1_Init+0x130>)
 8000df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000e02:	f001 fc5d 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e0c:	f000 fdf8 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000088 	.word	0x20000088
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	0f000001 	.word	0x0f000001
 8000e24:	10000012 	.word	0x10000012

08000e28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <HAL_ADC_MspInit+0x74>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d123      	bne.n	8000e92 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8000e7a:	23f8      	movs	r3, #248	; 0xf8
 8000e7c:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_ADC_MspInit+0x7c>)
 8000e8e:	f002 fe4d 	bl	8003b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012000 	.word	0x40012000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <MX_CAN1_Init+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ef8:	f001 fe32 	bl	8002b60 <HAL_CAN_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f02:	f000 fd7d 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000f8 	.word	0x200000f8
 8000f10:	40006400 	.word	0x40006400

08000f14 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <MX_CAN3_Init+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f20:	2206      	movs	r2, #6
 8000f22:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f32:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f36:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f3e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f66:	f001 fdfb 	bl	8002b60 <HAL_CAN_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000f70:	f000 fd46 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000d0 	.word	0x200000d0
 8000f7c:	40003400 	.word	0x40003400

08000f80 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a43      	ldr	r2, [pc, #268]	; (80010ac <HAL_CAN_MspInit+0x12c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d131      	bne.n	8001006 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fa2:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_CAN_MspInit+0x130>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a41      	ldr	r2, [pc, #260]	; (80010b0 <HAL_CAN_MspInit+0x130>)
 8000faa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fac:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_CAN_MspInit+0x130>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d10b      	bne.n	8000fcc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fb4:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a3e      	ldr	r2, [pc, #248]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8000fba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	623b      	str	r3, [r7, #32]
 8000fca:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a38      	ldr	r2, [pc, #224]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ff4:	2309      	movs	r3, #9
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	482e      	ldr	r0, [pc, #184]	; (80010b8 <HAL_CAN_MspInit+0x138>)
 8001000:	f002 fd94 	bl	8003b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001004:	e04e      	b.n	80010a4 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a2c      	ldr	r2, [pc, #176]	; (80010bc <HAL_CAN_MspInit+0x13c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d149      	bne.n	80010a4 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8001016:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 800102e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_CAN_MspInit+0x130>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <HAL_CAN_MspInit+0x130>)
 8001048:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_CAN_MspInit+0x130>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d10b      	bne.n	800106a <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8001058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_CAN_MspInit+0x134>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001082:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001094:	230b      	movs	r3, #11
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4808      	ldr	r0, [pc, #32]	; (80010c0 <HAL_CAN_MspInit+0x140>)
 80010a0:	f002 fd44 	bl	8003b2c <HAL_GPIO_Init>
}
 80010a4:	bf00      	nop
 80010a6:	3738      	adds	r7, #56	; 0x38
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40006400 	.word	0x40006400
 80010b0:	20000028 	.word	0x20000028
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	40003400 	.word	0x40003400
 80010c0:	40020000 	.word	0x40020000

080010c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_DMA_Init+0x38>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <MX_DMA_Init+0x38>)
 80010d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_DMA_Init+0x38>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	203b      	movs	r0, #59	; 0x3b
 80010e8:	f002 f943 	bl	8003372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010ec:	203b      	movs	r0, #59	; 0x3b
 80010ee:	f002 f95c 	bl	80033aa <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08e      	sub	sp, #56	; 0x38
 8001104:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	4bb6      	ldr	r3, [pc, #728]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4ab5      	ldr	r2, [pc, #724]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4bb3      	ldr	r3, [pc, #716]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	623b      	str	r3, [r7, #32]
 800112c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4bb0      	ldr	r3, [pc, #704]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4aaf      	ldr	r2, [pc, #700]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4bad      	ldr	r3, [pc, #692]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001146:	4baa      	ldr	r3, [pc, #680]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4aa9      	ldr	r2, [pc, #676]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4ba7      	ldr	r3, [pc, #668]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0320 	and.w	r3, r3, #32
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	4ba4      	ldr	r3, [pc, #656]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4aa3      	ldr	r2, [pc, #652]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4ba1      	ldr	r3, [pc, #644]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b9e      	ldr	r3, [pc, #632]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a9d      	ldr	r2, [pc, #628]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b9b      	ldr	r3, [pc, #620]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b98      	ldr	r3, [pc, #608]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a97      	ldr	r2, [pc, #604]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b95      	ldr	r3, [pc, #596]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a6:	4b92      	ldr	r3, [pc, #584]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a91      	ldr	r2, [pc, #580]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b8f      	ldr	r3, [pc, #572]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011be:	4b8c      	ldr	r3, [pc, #560]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a8b      	ldr	r2, [pc, #556]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b89      	ldr	r3, [pc, #548]	; (80013f0 <MX_GPIO_Init+0x2f0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80011d6:	2200      	movs	r2, #0
 80011d8:	f248 0187 	movw	r1, #32903	; 0x8087
 80011dc:	4885      	ldr	r0, [pc, #532]	; (80013f4 <MX_GPIO_Init+0x2f4>)
 80011de:	f002 fe69 	bl	8003eb4 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e8:	4883      	ldr	r0, [pc, #524]	; (80013f8 <MX_GPIO_Init+0x2f8>)
 80011ea:	f002 fe63 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f242 0102 	movw	r1, #8194	; 0x2002
 80011f4:	4881      	ldr	r0, [pc, #516]	; (80013fc <MX_GPIO_Init+0x2fc>)
 80011f6:	f002 fe5d 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f240 6102 	movw	r1, #1538	; 0x602
 8001200:	487f      	ldr	r0, [pc, #508]	; (8001400 <MX_GPIO_Init+0x300>)
 8001202:	f002 fe57 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f244 0184 	movw	r1, #16516	; 0x4084
 800120c:	487d      	ldr	r0, [pc, #500]	; (8001404 <MX_GPIO_Init+0x304>)
 800120e:	f002 fe51 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001212:	2200      	movs	r2, #0
 8001214:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001218:	487b      	ldr	r0, [pc, #492]	; (8001408 <MX_GPIO_Init+0x308>)
 800121a:	f002 fe4b 	bl	8003eb4 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2118      	movs	r1, #24
 8001222:	487a      	ldr	r0, [pc, #488]	; (800140c <MX_GPIO_Init+0x30c>)
 8001224:	f002 fe46 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001228:	f248 0387 	movw	r3, #32903	; 0x8087
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	4619      	mov	r1, r3
 8001240:	486c      	ldr	r0, [pc, #432]	; (80013f4 <MX_GPIO_Init+0x2f4>)
 8001242:	f002 fc73 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001246:	f44f 739c 	mov.w	r3, #312	; 0x138
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	4619      	mov	r1, r3
 800125a:	4866      	ldr	r0, [pc, #408]	; (80013f4 <MX_GPIO_Init+0x2f4>)
 800125c:	f002 fc66 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001260:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	485f      	ldr	r0, [pc, #380]	; (80013f4 <MX_GPIO_Init+0x2f4>)
 8001276:	f002 fc59 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800127a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	4859      	ldr	r0, [pc, #356]	; (80013f8 <MX_GPIO_Init+0x2f8>)
 8001294:	f002 fc4a 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001298:	f24c 03bf 	movw	r3, #49343	; 0xc0bf
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	4619      	mov	r1, r3
 80012ac:	4852      	ldr	r0, [pc, #328]	; (80013f8 <MX_GPIO_Init+0x2f8>)
 80012ae:	f002 fc3d 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80012b2:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b8:	2303      	movs	r3, #3
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	484d      	ldr	r0, [pc, #308]	; (80013fc <MX_GPIO_Init+0x2fc>)
 80012c8:	f002 fc30 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80012cc:	f242 0302 	movw	r3, #8194	; 0x2002
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	4619      	mov	r1, r3
 80012e4:	4845      	ldr	r0, [pc, #276]	; (80013fc <MX_GPIO_Init+0x2fc>)
 80012e6:	f002 fc21 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 80012ea:	f248 0304 	movw	r3, #32772	; 0x8004
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	483f      	ldr	r0, [pc, #252]	; (80013fc <MX_GPIO_Init+0x2fc>)
 8001300:	f002 fc14 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001304:	f641 0305 	movw	r3, #6149	; 0x1805
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4839      	ldr	r0, [pc, #228]	; (8001400 <MX_GPIO_Init+0x300>)
 800131a:	f002 fc07 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 800131e:	f240 6302 	movw	r3, #1538	; 0x602
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	4832      	ldr	r0, [pc, #200]	; (8001400 <MX_GPIO_Init+0x300>)
 8001338:	f002 fbf8 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800133c:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001342:	2303      	movs	r3, #3
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	482c      	ldr	r0, [pc, #176]	; (8001404 <MX_GPIO_Init+0x304>)
 8001352:	f002 fbeb 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001356:	f244 0384 	movw	r3, #16516	; 0x4084
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4825      	ldr	r0, [pc, #148]	; (8001404 <MX_GPIO_Init+0x304>)
 8001370:	f002 fbdc 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8001374:	f240 1343 	movw	r3, #323	; 0x143
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	4619      	mov	r1, r3
 8001388:	481f      	ldr	r0, [pc, #124]	; (8001408 <MX_GPIO_Init+0x308>)
 800138a:	f002 fbcf 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800138e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001394:	2303      	movs	r3, #3
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <MX_GPIO_Init+0x30c>)
 80013a4:	f002 fbc2 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 80013a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	; (800140c <MX_GPIO_Init+0x30c>)
 80013be:	f002 fbb5 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80013c2:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <MX_GPIO_Init+0x308>)
 80013dc:	f002 fba6 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_SW_Pin;
 80013e0:	2340      	movs	r3, #64	; 0x40
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ec:	e010      	b.n	8001410 <MX_GPIO_Init+0x310>
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40021400 	.word	0x40021400
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400
 8001408:	40021800 	.word	0x40021800
 800140c:	40020c00 	.word	0x40020c00
  HAL_GPIO_Init(SD_SW_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	480a      	ldr	r0, [pc, #40]	; (8001440 <MX_GPIO_Init+0x340>)
 8001418:	f002 fb88 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 800141c:	2318      	movs	r3, #24
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_GPIO_Init+0x344>)
 8001434:	f002 fb7a 	bl	8003b2c <HAL_GPIO_Init>

}
 8001438:	bf00      	nop
 800143a:	3738      	adds	r7, #56	; 0x38
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 800144e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!\r"; /* File write buffer */
 8001450:	4bbc      	ldr	r3, [pc, #752]	; (8001744 <main+0x2fc>)
 8001452:	f507 7420 	add.w	r4, r7, #640	; 0x280
 8001456:	461d      	mov	r5, r3
 8001458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001460:	c403      	stmia	r4!, {r0, r1}
 8001462:	8022      	strh	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f001 f81f 	bl	80024a6 <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
//	uint16_t dutyCycle, timerPeriod, frequency, R_IMD;
	uint16_t count = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
	uint8_t start_flag = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001478:	4ab3      	ldr	r2, [pc, #716]	; (8001748 <main+0x300>)
 800147a:	461c      	mov	r4, r3
 800147c:	4615      	mov	r5, r2
 800147e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001482:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001486:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	4aaf      	ldr	r2, [pc, #700]	; (800174c <main+0x304>)
 8001490:	461c      	mov	r4, r3
 8001492:	4615      	mov	r5, r2
 8001494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001498:	e895 0003 	ldmia.w	r5, {r0, r1}
 800149c:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80014a0:	463b      	mov	r3, r7
 80014a2:	4aab      	ldr	r2, [pc, #684]	; (8001750 <main+0x308>)
 80014a4:	461c      	mov	r4, r3
 80014a6:	4615      	mov	r5, r2
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014b0:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b4:	f000 fa16 	bl	80018e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b8:	f7ff fe22 	bl	8001100 <MX_GPIO_Init>
  MX_CAN1_Init();
 80014bc:	f7ff fcf4 	bl	8000ea8 <MX_CAN1_Init>
  MX_SPI4_Init();
 80014c0:	f000 fbe6 	bl	8001c90 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80014c4:	f000 ff38 	bl	8002338 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014c8:	f7ff fc14 	bl	8000cf4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014cc:	f000 fd3a 	bl	8001f44 <MX_TIM1_Init>
  MX_TIM4_Init();
 80014d0:	f000 fdbe 	bl	8002050 <MX_TIM4_Init>
  MX_SPI1_Init();
 80014d4:	f000 fb9e 	bl	8001c14 <MX_SPI1_Init>
  MX_CAN3_Init();
 80014d8:	f7ff fd1c 	bl	8000f14 <MX_CAN3_Init>
  MX_TIM6_Init();
 80014dc:	f000 fe34 	bl	8002148 <MX_TIM6_Init>
  MX_SDMMC1_SD_Init();
 80014e0:	f000 fa96 	bl	8001a10 <MX_SDMMC1_SD_Init>
  MX_DMA_Init();
 80014e4:	f7ff fdee 	bl	80010c4 <MX_DMA_Init>
  MX_FATFS_Init();
 80014e8:	f007 fed8 	bl	800929c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80014ec:	f7ff fa1e 	bl	800092c <readResetSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fa6c 	bl	80009d0 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80014f8:	213a      	movs	r1, #58	; 0x3a
 80014fa:	4896      	ldr	r0, [pc, #600]	; (8001754 <main+0x30c>)
 80014fc:	f7ff f820 	bl	8000540 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001500:	f7ff f9ea 	bl	80008d8 <collectSystemInfo>
#endif

  	// Start timer
  	HAL_TIM_Base_Start_IT(&htim6);
 8001504:	4894      	ldr	r0, [pc, #592]	; (8001758 <main+0x310>)
 8001506:	f005 fa17 	bl	8006938 <HAL_TIM_Base_Start_IT>

	// Leds Testen
	testPCB_Leds();
 800150a:	f7ff fbb5 	bl	8000c78 <testPCB_Leds>
//	testLeds();

	// Lese alle Eingaenge
	readall_inputs();
 800150e:	f7ff faff 	bl	8000b10 <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001512:	4892      	ldr	r0, [pc, #584]	; (800175c <main+0x314>)
 8001514:	f001 fd0c 	bl	8002f30 <HAL_CAN_Start>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
 800151e:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <main+0xec>
  	{
  		/* Start Error */
  		hal_error(status);
 8001526:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fac0 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001530:	f000 fa66 	bl	8001a00 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8001534:	210a      	movs	r1, #10
 8001536:	488a      	ldr	r0, [pc, #552]	; (8001760 <main+0x318>)
 8001538:	f7ff f802 	bl	8000540 <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 800153c:	2102      	movs	r1, #2
 800153e:	4887      	ldr	r0, [pc, #540]	; (800175c <main+0x314>)
 8001540:	f001 fe15 	bl	800316e <HAL_CAN_ActivateNotification>
 8001544:	4603      	mov	r3, r0
 8001546:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
 800154a:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <main+0x118>
  	{
  		/* Notification Error */
  		hal_error(status);
 8001552:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff faaa 	bl	8000ab0 <hal_error>
  		Error_Handler();
 800155c:	f000 fa50 	bl	8001a00 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8001560:	210d      	movs	r1, #13
 8001562:	4880      	ldr	r0, [pc, #512]	; (8001764 <main+0x31c>)
 8001564:	f7fe ffec 	bl	8000540 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001578:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800157c:	2201      	movs	r2, #1
 800157e:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8001580:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8001588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8001598:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = 0;
 80015a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80015a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ac:	2201      	movs	r2, #1
 80015ae:	621a      	str	r2, [r3, #32]

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 80015b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015b4:	4619      	mov	r1, r3
 80015b6:	4869      	ldr	r0, [pc, #420]	; (800175c <main+0x314>)
 80015b8:	f001 fbce 	bl	8002d58 <HAL_CAN_ConfigFilter>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
 80015c2:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <main+0x190>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 80015ca:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fa6e 	bl	8000ab0 <hal_error>
  		Error_Handler();
 80015d4:	f000 fa14 	bl	8001a00 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
 80015de:	e00d      	b.n	80015fc <main+0x1b4>
    {
    	TxData[j] = (j + 1);
 80015e0:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 80015e4:	f897 22a4 	ldrb.w	r2, [r7, #676]	; 0x2a4
 80015e8:	3201      	adds	r2, #1
 80015ea:	b2d1      	uxtb	r1, r2
 80015ec:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80015f0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < 8; j++)
 80015f2:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 80015f6:	3301      	adds	r3, #1
 80015f8:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
 80015fc:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 8001600:	2b07      	cmp	r3, #7
 8001602:	d9ed      	bls.n	80015e0 <main+0x198>
    }

	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8001604:	2200      	movs	r2, #0
 8001606:	4958      	ldr	r1, [pc, #352]	; (8001768 <main+0x320>)
 8001608:	4858      	ldr	r0, [pc, #352]	; (800176c <main+0x324>)
 800160a:	f009 fde7 	bl	800b1dc <f_mount>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <main+0x1da>
	{
		uartTransmit("FS Mount schlaegt fehlt\n", 24);
 8001614:	2118      	movs	r1, #24
 8001616:	4856      	ldr	r0, [pc, #344]	; (8001770 <main+0x328>)
 8001618:	f7fe ff92 	bl	8000540 <uartTransmit>
		Error_Handler();
 800161c:	f000 f9f0 	bl	8001a00 <Error_Handler>
 8001620:	e04c      	b.n	80016bc <main+0x274>
	}
	else
	{
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8001622:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162a:	9200      	str	r2, [sp, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	2107      	movs	r1, #7
 8001630:	484d      	ldr	r0, [pc, #308]	; (8001768 <main+0x320>)
 8001632:	f00a f9f5 	bl	800ba20 <f_mkfs>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <main+0x202>
		{
			uartTransmit("FS make Filesystem schlaegt fehlt\n", 34);
 800163c:	2122      	movs	r1, #34	; 0x22
 800163e:	484d      	ldr	r0, [pc, #308]	; (8001774 <main+0x32c>)
 8001640:	f7fe ff7e 	bl	8000540 <uartTransmit>
			Error_Handler();
 8001644:	f000 f9dc 	bl	8001a00 <Error_Handler>
 8001648:	e038      	b.n	80016bc <main+0x274>
		}
		else
		{
			//Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800164a:	220a      	movs	r2, #10
 800164c:	494a      	ldr	r1, [pc, #296]	; (8001778 <main+0x330>)
 800164e:	484b      	ldr	r0, [pc, #300]	; (800177c <main+0x334>)
 8001650:	f009 fe0a 	bl	800b268 <f_open>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <main+0x220>
			{
				uartTransmit("FS Open schlaegt fehlt\n", 23);
 800165a:	2117      	movs	r1, #23
 800165c:	4848      	ldr	r0, [pc, #288]	; (8001780 <main+0x338>)
 800165e:	f7fe ff6f 	bl	8000540 <uartTransmit>
				Error_Handler();
 8001662:	f000 f9cd 	bl	8001a00 <Error_Handler>
 8001666:	e029      	b.n	80016bc <main+0x274>
			}
			else
			{

				//Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8001668:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fde3 	bl	8000238 <strlen>
 8001672:	4602      	mov	r2, r0
 8001674:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8001678:	f507 7120 	add.w	r1, r7, #640	; 0x280
 800167c:	483f      	ldr	r0, [pc, #252]	; (800177c <main+0x334>)
 800167e:	f009 ffb1 	bl	800b5e4 <f_write>
 8001682:	4603      	mov	r3, r0
 8001684:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
				uartTransmit("SD Karte beschreiben\n", 21);
 8001688:	2115      	movs	r1, #21
 800168a:	483e      	ldr	r0, [pc, #248]	; (8001784 <main+0x33c>)
 800168c:	f7fe ff58 	bl	8000540 <uartTransmit>
				if((byteswritten == 0) || (res != FR_OK))
 8001690:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <main+0x258>
 8001698:	f897 32a2 	ldrb.w	r3, [r7, #674]	; 0x2a2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <main+0x266>
				{
					uartTransmit("FS Write schlaegt fehlt\n", 24);
 80016a0:	2118      	movs	r1, #24
 80016a2:	4839      	ldr	r0, [pc, #228]	; (8001788 <main+0x340>)
 80016a4:	f7fe ff4c 	bl	8000540 <uartTransmit>
					Error_Handler();
 80016a8:	f000 f9aa 	bl	8001a00 <Error_Handler>
 80016ac:	e006      	b.n	80016bc <main+0x274>
				}
				else
				{

					f_close(&SDFile);
 80016ae:	4833      	ldr	r0, [pc, #204]	; (800177c <main+0x334>)
 80016b0:	f00a f98b 	bl	800b9ca <f_close>
					uartTransmit("FS Close\n", 9);
 80016b4:	2109      	movs	r1, #9
 80016b6:	4835      	ldr	r0, [pc, #212]	; (800178c <main+0x344>)
 80016b8:	f7fe ff42 	bl	8000540 <uartTransmit>
				}
			}
		}
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	482a      	ldr	r0, [pc, #168]	; (800176c <main+0x324>)
 80016c2:	f009 fd8b 	bl	800b1dc <f_mount>
	uartTransmit("FS Unmount\n", 11);
 80016c6:	210b      	movs	r1, #11
 80016c8:	4831      	ldr	r0, [pc, #196]	; (8001790 <main+0x348>)
 80016ca:	f7fe ff39 	bl	8000540 <uartTransmit>

	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80016ce:	2200      	movs	r2, #0
 80016d0:	4925      	ldr	r1, [pc, #148]	; (8001768 <main+0x320>)
 80016d2:	4826      	ldr	r0, [pc, #152]	; (800176c <main+0x324>)
 80016d4:	f009 fd82 	bl	800b1dc <f_mount>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <main+0x2a4>
		{
			uartTransmit("FS Mount schlaegt fehlt\n", 24);
 80016de:	2118      	movs	r1, #24
 80016e0:	4823      	ldr	r0, [pc, #140]	; (8001770 <main+0x328>)
 80016e2:	f7fe ff2d 	bl	8000540 <uartTransmit>
			Error_Handler();
 80016e6:	f000 f98b 	bl	8001a00 <Error_Handler>
 80016ea:	e05c      	b.n	80017a6 <main+0x35e>
		}
		else
		{
			//Open file for writing (Exists)
			if(f_open(&SDFile, "STM32.TXT", FA_OPEN_APPEND | FA_OPEN_EXISTING | FA_WRITE) != FR_OK)
 80016ec:	2232      	movs	r2, #50	; 0x32
 80016ee:	4922      	ldr	r1, [pc, #136]	; (8001778 <main+0x330>)
 80016f0:	4822      	ldr	r0, [pc, #136]	; (800177c <main+0x334>)
 80016f2:	f009 fdb9 	bl	800b268 <f_open>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <main+0x2c2>
			{
				uartTransmit("FS Open schlaegt fehlt\n", 23);
 80016fc:	2117      	movs	r1, #23
 80016fe:	4820      	ldr	r0, [pc, #128]	; (8001780 <main+0x338>)
 8001700:	f7fe ff1e 	bl	8000540 <uartTransmit>
				Error_Handler();
 8001704:	f000 f97c 	bl	8001a00 <Error_Handler>
 8001708:	e04d      	b.n	80017a6 <main+0x35e>
			}
			else
			{

				//Write to the text file
				res = f_write(&SDFile, "Test 2, update File!", strlen("Test 2, update File!"), (void *)&byteswritten);
 800170a:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800170e:	2214      	movs	r2, #20
 8001710:	4920      	ldr	r1, [pc, #128]	; (8001794 <main+0x34c>)
 8001712:	481a      	ldr	r0, [pc, #104]	; (800177c <main+0x334>)
 8001714:	f009 ff66 	bl	800b5e4 <f_write>
 8001718:	4603      	mov	r3, r0
 800171a:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
				uartTransmit("SD Karte beschreiben\n", 21);
 800171e:	2115      	movs	r1, #21
 8001720:	4818      	ldr	r0, [pc, #96]	; (8001784 <main+0x33c>)
 8001722:	f7fe ff0d 	bl	8000540 <uartTransmit>
				if((byteswritten == 0) || (res != FR_OK))
 8001726:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <main+0x2ee>
 800172e:	f897 32a2 	ldrb.w	r3, [r7, #674]	; 0x2a2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d030      	beq.n	8001798 <main+0x350>
				{
					uartTransmit("FS Write schlaegt fehlt\n", 24);
 8001736:	2118      	movs	r1, #24
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <main+0x340>)
 800173a:	f7fe ff01 	bl	8000540 <uartTransmit>
					Error_Handler();
 800173e:	f000 f95f 	bl	8001a00 <Error_Handler>
 8001742:	e030      	b.n	80017a6 <main+0x35e>
 8001744:	0800c898 	.word	0x0800c898
 8001748:	0800c8b4 	.word	0x0800c8b4
 800174c:	0800c8cc 	.word	0x0800c8cc
 8001750:	0800c8e4 	.word	0x0800c8e4
 8001754:	0800c778 	.word	0x0800c778
 8001758:	20000318 	.word	0x20000318
 800175c:	200000d0 	.word	0x200000d0
 8001760:	0800c7b4 	.word	0x0800c7b4
 8001764:	0800c7c0 	.word	0x0800c7c0
 8001768:	2000043c 	.word	0x2000043c
 800176c:	20000670 	.word	0x20000670
 8001770:	0800c7d0 	.word	0x0800c7d0
 8001774:	0800c7ec 	.word	0x0800c7ec
 8001778:	0800c810 	.word	0x0800c810
 800177c:	20000440 	.word	0x20000440
 8001780:	0800c81c 	.word	0x0800c81c
 8001784:	0800c834 	.word	0x0800c834
 8001788:	0800c84c 	.word	0x0800c84c
 800178c:	0800c868 	.word	0x0800c868
 8001790:	0800c874 	.word	0x0800c874
 8001794:	0800c880 	.word	0x0800c880
				}
				else
				{

					f_close(&SDFile);
 8001798:	4844      	ldr	r0, [pc, #272]	; (80018ac <main+0x464>)
 800179a:	f00a f916 	bl	800b9ca <f_close>
					uartTransmit("FS Close\n", 9);
 800179e:	2109      	movs	r1, #9
 80017a0:	4843      	ldr	r0, [pc, #268]	; (80018b0 <main+0x468>)
 80017a2:	f7fe fecd 	bl	8000540 <uartTransmit>
				}
			}
		}
		f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	4842      	ldr	r0, [pc, #264]	; (80018b4 <main+0x46c>)
 80017ac:	f009 fd16 	bl	800b1dc <f_mount>
		uartTransmit("FS Unmount\n", 11);
 80017b0:	210b      	movs	r1, #11
 80017b2:	4841      	ldr	r0, [pc, #260]	; (80018b8 <main+0x470>)
 80017b4:	f7fe fec4 	bl	8000540 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 80017b8:	4b40      	ldr	r3, [pc, #256]	; (80018bc <main+0x474>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10a      	bne.n	80017d8 <main+0x390>
		{
			count++;													// Zaehler count hochzaehlen
 80017c2:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 80017c6:	3301      	adds	r3, #1
 80017c8:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <main+0x474>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]

			// Setzen des Start Flags,  damit Tasks nur einmal pro ms aufgerufen werden kann
			start_flag = 1;												// Setze Start Flag
 80017d2:	2301      	movs	r3, #1
 80017d4:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
		}
		
		// Task wird alle 250 Millisekunden ausgefuehrt
		if ((count % 250) == 0)
 80017d8:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 80017dc:	4a38      	ldr	r2, [pc, #224]	; (80018c0 <main+0x478>)
 80017de:	fba2 1203 	umull	r1, r2, r2, r3
 80017e2:	0912      	lsrs	r2, r2, #4
 80017e4:	21fa      	movs	r1, #250	; 0xfa
 80017e6:	fb01 f202 	mul.w	r2, r1, r2
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d142      	bne.n	8001878 <main+0x430>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 80017f2:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <main+0x47c>)
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017fa:	701a      	strb	r2, [r3, #0]
			OutData[1] = highcurrent_out.high_out;
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <main+0x480>)
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001804:	705a      	strb	r2, [r3, #1]
			OutData[2] = leuchten_out.ledoutput;
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <main+0x484>)
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800180e:	709a      	strb	r2, [r3, #2]
			OutData[3] = komfort_out.komfortoutput;
 8001810:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <main+0x488>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001818:	70da      	strb	r2, [r3, #3]
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 800181a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800181e:	f107 0118 	add.w	r1, r7, #24
 8001822:	2301      	movs	r3, #1
 8001824:	482b      	ldr	r0, [pc, #172]	; (80018d4 <main+0x48c>)
 8001826:	f001 fbc7 	bl	8002fb8 <HAL_CAN_AddTxMessage>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
			//hal_error(status);

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <main+0x490>)
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001838:	701a      	strb	r2, [r3, #0]
			InData[1] = sdc_in.sdcinput;
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <main+0x494>)
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001842:	705a      	strb	r2, [r3, #1]
			InData[2] = komfort_in.komfortinput;
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <main+0x498>)
 8001846:	781a      	ldrb	r2, [r3, #0]
 8001848:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800184c:	709a      	strb	r2, [r3, #2]
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 800184e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001852:	4639      	mov	r1, r7
 8001854:	2301      	movs	r3, #1
 8001856:	481f      	ldr	r0, [pc, #124]	; (80018d4 <main+0x48c>)
 8001858:	f001 fbae 	bl	8002fb8 <HAL_CAN_AddTxMessage>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
			//hal_error(status);
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001862:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001866:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800186a:	2301      	movs	r3, #1
 800186c:	4819      	ldr	r0, [pc, #100]	; (80018d4 <main+0x48c>)
 800186e:	f001 fba3 	bl	8002fb8 <HAL_CAN_AddTxMessage>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
			//hal_error(status);
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (((count % 500) == 0) && (start_flag == 1))
 8001878:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 800187c:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <main+0x478>)
 800187e:	fba2 1203 	umull	r1, r2, r2, r3
 8001882:	0952      	lsrs	r2, r2, #5
 8001884:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001888:	fb01 f202 	mul.w	r2, r1, r2
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d106      	bne.n	80018a2 <main+0x45a>
 8001894:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 8001898:	2b01      	cmp	r3, #1
 800189a:	d102      	bne.n	80018a2 <main+0x45a>
		{


			count = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
		}

		// Zuruecksetzen des Start Flags, damit Tasks erst nach einer ms wieder aufgerufen werden kann
		start_flag = 0;																		// Zuruechsetze Start Flag
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
		if (millisekunden_flag_1 == 1)
 80018a8:	e786      	b.n	80017b8 <main+0x370>
 80018aa:	bf00      	nop
 80018ac:	20000440 	.word	0x20000440
 80018b0:	0800c868 	.word	0x0800c868
 80018b4:	20000670 	.word	0x20000670
 80018b8:	0800c874 	.word	0x0800c874
 80018bc:	2000002c 	.word	0x2000002c
 80018c0:	10624dd3 	.word	0x10624dd3
 80018c4:	2000007c 	.word	0x2000007c
 80018c8:	20000080 	.word	0x20000080
 80018cc:	20000084 	.word	0x20000084
 80018d0:	20000078 	.word	0x20000078
 80018d4:	200000d0 	.word	0x200000d0
 80018d8:	2000006c 	.word	0x2000006c
 80018dc:	20000074 	.word	0x20000074
 80018e0:	20000070 	.word	0x20000070

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b094      	sub	sp, #80	; 0x50
 80018e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2234      	movs	r2, #52	; 0x34
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00a fd40 	bl	800c378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <SystemClock_Config+0xd8>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a2b      	ldr	r2, [pc, #172]	; (80019bc <SystemClock_Config+0xd8>)
 800190e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001912:	6413      	str	r3, [r2, #64]	; 0x40
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <SystemClock_Config+0xd8>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <SystemClock_Config+0xdc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <SystemClock_Config+0xdc>)
 8001926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <SystemClock_Config+0xdc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001938:	2301      	movs	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800193c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001940:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001942:	2302      	movs	r3, #2
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001946:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800194c:	2319      	movs	r3, #25
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001950:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001954:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001956:	2302      	movs	r3, #2
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800195a:	2308      	movs	r3, #8
 800195c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800195e:	2302      	movs	r3, #2
 8001960:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fb0e 	bl	8003f88 <HAL_RCC_OscConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001972:	f000 f845 	bl	8001a00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001976:	f002 fab7 	bl	8003ee8 <HAL_PWREx_EnableOverDrive>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001980:	f000 f83e 	bl	8001a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001984:	230f      	movs	r3, #15
 8001986:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001988:	2302      	movs	r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001990:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	2107      	movs	r1, #7
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fd9e 	bl	80044e4 <HAL_RCC_ClockConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80019ae:	f000 f827 	bl	8001a00 <Error_Handler>
  }
}
 80019b2:	bf00      	nop
 80019b4:	3750      	adds	r7, #80	; 0x50
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000

080019c4 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d102      	bne.n	80019da <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d102      	bne.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7f1b      	ldrb	r3, [r3, #28]
 80019e6:	2b01      	cmp	r3, #1
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{

		}
	}
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000318 	.word	0x20000318
 80019f8:	2000002c 	.word	0x2000002c
 80019fc:	20000364 	.word	0x20000364

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_SDMMC1_SD_Init+0x38>)
 8001a16:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <MX_SDMMC1_SD_Init+0x3c>)
 8001a18:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_SDMMC1_SD_Init+0x38>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_SDMMC1_SD_Init+0x38>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_SDMMC1_SD_Init+0x38>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_SDMMC1_SD_Init+0x38>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <MX_SDMMC1_SD_Init+0x38>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <MX_SDMMC1_SD_Init+0x38>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000120 	.word	0x20000120
 8001a4c:	40012c00 	.word	0x40012c00

08001a50 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0ae      	sub	sp, #184	; 0xb8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2290      	movs	r2, #144	; 0x90
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00a fc81 	bl	800c378 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a60      	ldr	r2, [pc, #384]	; (8001bfc <HAL_SD_MspInit+0x1ac>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	f040 80b8 	bne.w	8001bf2 <HAL_SD_MspInit+0x1a2>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001a82:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001a86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a88:	23c0      	movs	r3, #192	; 0xc0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a94:	2303      	movs	r3, #3
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001aa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 feec 	bl	8004890 <HAL_RCCEx_PeriphCLKConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_SD_MspInit+0x72>
    {
      Error_Handler();
 8001abe:	f7ff ff9f 	bl	8001a00 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ac2:	4b4f      	ldr	r3, [pc, #316]	; (8001c00 <HAL_SD_MspInit+0x1b0>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a4e      	ldr	r2, [pc, #312]	; (8001c00 <HAL_SD_MspInit+0x1b0>)
 8001ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_SD_MspInit+0x1b0>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <HAL_SD_MspInit+0x1b0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_SD_MspInit+0x1b0>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_SD_MspInit+0x1b0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <HAL_SD_MspInit+0x1b0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a42      	ldr	r2, [pc, #264]	; (8001c00 <HAL_SD_MspInit+0x1b0>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <HAL_SD_MspInit+0x1b0>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001b0a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SD_SCK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b24:	230c      	movs	r3, #12
 8001b26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4834      	ldr	r0, [pc, #208]	; (8001c04 <HAL_SD_MspInit+0x1b4>)
 8001b32:	f001 fffb 	bl	8003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001b36:	2304      	movs	r3, #4
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	482b      	ldr	r0, [pc, #172]	; (8001c08 <HAL_SD_MspInit+0x1b8>)
 8001b5c:	f001 ffe6 	bl	8003b2c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Stream3;
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001b62:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <HAL_SD_MspInit+0x1c0>)
 8001b64:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Channel = DMA_CHANNEL_4;
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001b68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b80:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_PFCTRL;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001b94:	2220      	movs	r2, #32
 8001b96:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1.Init.MemBurst = DMA_MBURST_INC4;
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001bac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1.Init.PeriphBurst = DMA_PBURST_INC4;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001bb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8001bba:	4814      	ldr	r0, [pc, #80]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001bbc:	f001 fc10 	bl	80033e0 <HAL_DMA_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_SD_MspInit+0x17a>
    {
      Error_Handler();
 8001bc6:	f7ff ff1b 	bl	8001a00 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bdc:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <HAL_SD_MspInit+0x1bc>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2031      	movs	r0, #49	; 0x31
 8001be8:	f001 fbc3 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001bec:	2031      	movs	r0, #49	; 0x31
 8001bee:	f001 fbdc 	bl	80033aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	37b8      	adds	r7, #184	; 0xb8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	200001a4 	.word	0x200001a4
 8001c10:	40026458 	.word	0x40026458

08001c14 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <MX_SPI1_Init+0x78>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c62:	2207      	movs	r2, #7
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c6e:	2208      	movs	r2, #8
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_SPI1_Init+0x74>)
 8001c74:	f004 fd5d 	bl	8006732 <HAL_SPI_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c7e:	f7ff febf 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000268 	.word	0x20000268
 8001c8c:	40013000 	.word	0x40013000

08001c90 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <MX_SPI4_Init+0x78>)
 8001c98:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ca0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001caa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001cae:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001cbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cc2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001cde:	2207      	movs	r2, #7
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001cea:	2208      	movs	r2, #8
 8001cec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_SPI4_Init+0x74>)
 8001cf0:	f004 fd1f 	bl	8006732 <HAL_SPI_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001cfa:	f7ff fe81 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000204 	.word	0x20000204
 8001d08:	40013400 	.word	0x40013400

08001d0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	; 0x30
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a3d      	ldr	r2, [pc, #244]	; (8001e20 <HAL_SPI_MspInit+0x114>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d145      	bne.n	8001dba <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a3c      	ldr	r2, [pc, #240]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a36      	ldr	r2, [pc, #216]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d5e:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d86:	2305      	movs	r3, #5
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4825      	ldr	r0, [pc, #148]	; (8001e28 <HAL_SPI_MspInit+0x11c>)
 8001d92:	f001 fecb 	bl	8003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001d96:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001da8:	2305      	movs	r3, #5
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4619      	mov	r1, r3
 8001db2:	481e      	ldr	r0, [pc, #120]	; (8001e2c <HAL_SPI_MspInit+0x120>)
 8001db4:	f001 feba 	bl	8003b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001db8:	e02d      	b.n	8001e16 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_SPI_MspInit+0x124>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d128      	bne.n	8001e16 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001dca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dce:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001de2:	f043 0310 	orr.w	r3, r3, #16
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_SPI_MspInit+0x118>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001df4:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e06:	2305      	movs	r3, #5
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4808      	ldr	r0, [pc, #32]	; (8001e34 <HAL_SPI_MspInit+0x128>)
 8001e12:	f001 fe8b 	bl	8003b2c <HAL_GPIO_Init>
}
 8001e16:	bf00      	nop
 8001e18:	3730      	adds	r7, #48	; 0x30
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40013000 	.word	0x40013000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020c00 	.word	0x40020c00
 8001e2c:	40021800 	.word	0x40021800
 8001e30:	40013400 	.word	0x40013400
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_MspInit+0x44>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_MspInit+0x44>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_MspInit+0x44>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_MspInit+0x44>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_MspInit+0x44>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_MspInit+0x44>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <HardFault_Handler+0x4>

08001e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <MemManage_Handler+0x4>

08001e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <BusFault_Handler+0x4>

08001ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <UsageFault_Handler+0x4>

08001ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed4:	f000 fb24 	bl	8002520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <SDMMC1_IRQHandler+0x10>)
 8001ee2:	f003 fb7d 	bl	80055e0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000120 	.word	0x20000120

08001ef0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <TIM6_DAC_IRQHandler+0x10>)
 8001ef6:	f004 fe45 	bl	8006b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000318 	.word	0x20000318

08001f04 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <DMA2_Stream3_IRQHandler+0x10>)
 8001f0a:	f001 fb99 	bl	8003640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200001a4 	.word	0x200001a4

08001f18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <SystemInit+0x28>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <SystemInit+0x28>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SystemInit+0x28>)
 8001f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f32:	609a      	str	r2, [r3, #8]
#endif
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	; 0x30
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	463b      	mov	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f72:	4b35      	ldr	r3, [pc, #212]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f74:	4a35      	ldr	r2, [pc, #212]	; (800204c <MX_TIM1_Init+0x108>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <MX_TIM1_Init+0x104>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f9e:	482a      	ldr	r0, [pc, #168]	; (8002048 <MX_TIM1_Init+0x104>)
 8001fa0:	f004 fd99 	bl	8006ad6 <HAL_TIM_IC_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001faa:	f7ff fd29 	bl	8001a00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001fb2:	2350      	movs	r3, #80	; 0x50
 8001fb4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	481f      	ldr	r0, [pc, #124]	; (8002048 <MX_TIM1_Init+0x104>)
 8001fca:	f005 f8ab 	bl	8007124 <HAL_TIM_SlaveConfigSynchro>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fd4:	f7ff fd14 	bl	8001a00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2200      	movs	r2, #0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4815      	ldr	r0, [pc, #84]	; (8002048 <MX_TIM1_Init+0x104>)
 8001ff2:	f004 fee6 	bl	8006dc2 <HAL_TIM_IC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001ffc:	f7ff fd00 	bl	8001a00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002000:	2302      	movs	r3, #2
 8002002:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002004:	2302      	movs	r3, #2
 8002006:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	2204      	movs	r2, #4
 800200e:	4619      	mov	r1, r3
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <MX_TIM1_Init+0x104>)
 8002012:	f004 fed6 	bl	8006dc2 <HAL_TIM_IC_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800201c:	f7ff fcf0 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_TIM1_Init+0x104>)
 8002032:	f005 fe1d 	bl	8007c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800203c:	f7ff fce0 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	3730      	adds	r7, #48	; 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000364 	.word	0x20000364
 800204c:	40010000 	.word	0x40010000

08002050 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002062:	463b      	mov	r3, r7
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
 8002070:	615a      	str	r2, [r3, #20]
 8002072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002074:	4b32      	ldr	r3, [pc, #200]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002076:	4a33      	ldr	r2, [pc, #204]	; (8002144 <MX_TIM4_Init+0xf4>)
 8002078:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800207a:	4b31      	ldr	r3, [pc, #196]	; (8002140 <MX_TIM4_Init+0xf0>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002086:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800209a:	4829      	ldr	r0, [pc, #164]	; (8002140 <MX_TIM4_Init+0xf0>)
 800209c:	f004 fcc4 	bl	8006a28 <HAL_TIM_PWM_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80020a6:	f7ff fcab 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	4821      	ldr	r0, [pc, #132]	; (8002140 <MX_TIM4_Init+0xf0>)
 80020ba:	f005 fdd9 	bl	8007c70 <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80020c4:	f7ff fc9c 	bl	8001a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c8:	2360      	movs	r3, #96	; 0x60
 80020ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	4818      	ldr	r0, [pc, #96]	; (8002140 <MX_TIM4_Init+0xf0>)
 80020e0:	f004 ff0c 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80020ea:	f7ff fc89 	bl	8001a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ee:	463b      	mov	r3, r7
 80020f0:	2204      	movs	r2, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4812      	ldr	r0, [pc, #72]	; (8002140 <MX_TIM4_Init+0xf0>)
 80020f6:	f004 ff01 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002100:	f7ff fc7e 	bl	8001a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002104:	463b      	mov	r3, r7
 8002106:	2208      	movs	r2, #8
 8002108:	4619      	mov	r1, r3
 800210a:	480d      	ldr	r0, [pc, #52]	; (8002140 <MX_TIM4_Init+0xf0>)
 800210c:	f004 fef6 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002116:	f7ff fc73 	bl	8001a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800211a:	463b      	mov	r3, r7
 800211c:	220c      	movs	r2, #12
 800211e:	4619      	mov	r1, r3
 8002120:	4807      	ldr	r0, [pc, #28]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002122:	f004 feeb 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800212c:	f7ff fc68 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002130:	4803      	ldr	r0, [pc, #12]	; (8002140 <MX_TIM4_Init+0xf0>)
 8002132:	f000 f8c9 	bl	80022c8 <HAL_TIM_MspPostInit>

}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200002cc 	.word	0x200002cc
 8002144:	40000800 	.word	0x40000800

08002148 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <MX_TIM6_Init+0x64>)
 800215a:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <MX_TIM6_Init+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <MX_TIM6_Init+0x64>)
 8002160:	221b      	movs	r2, #27
 8002162:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_TIM6_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <MX_TIM6_Init+0x64>)
 800216c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002170:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_TIM6_Init+0x64>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <MX_TIM6_Init+0x64>)
 800217a:	f004 fb85 	bl	8006888 <HAL_TIM_Base_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002184:	f7ff fc3c 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_TIM6_Init+0x64>)
 8002196:	f005 fd6b 	bl	8007c70 <HAL_TIMEx_MasterConfigSynchronization>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80021a0:	f7ff fc2e 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000318 	.word	0x20000318
 80021b0:	40001000 	.word	0x40001000

080021b4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_TIM_IC_MspInit+0x7c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d128      	bne.n	8002228 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_TIM_IC_MspInit+0x80>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_TIM_IC_MspInit+0x80>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_TIM_IC_MspInit+0x80>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_TIM_IC_MspInit+0x80>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_TIM_IC_MspInit+0x80>)
 80021f4:	f043 0310 	orr.w	r3, r3, #16
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_TIM_IC_MspInit+0x80>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8002206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002218:	2301      	movs	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <HAL_TIM_IC_MspInit+0x84>)
 8002224:	f001 fc82 	bl	8003b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002228:	bf00      	nop
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40010000 	.word	0x40010000
 8002234:	40023800 	.word	0x40023800
 8002238:	40021000 	.word	0x40021000

0800223c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_TIM_PWM_MspInit+0x38>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10b      	bne.n	8002266 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40000800 	.word	0x40000800
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_TIM_Base_MspInit+0x44>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d113      	bne.n	80022b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_TIM_Base_MspInit+0x48>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_TIM_Base_MspInit+0x48>)
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_TIM_Base_MspInit+0x48>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2036      	movs	r0, #54	; 0x36
 80022ac:	f001 f861 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022b0:	2036      	movs	r0, #54	; 0x36
 80022b2:	f001 f87a 	bl	80033aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40001000 	.word	0x40001000
 80022c4:	40023800 	.word	0x40023800

080022c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_TIM_MspPostInit+0x64>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d11c      	bne.n	8002324 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_TIM_MspPostInit+0x68>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_TIM_MspPostInit+0x68>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_TIM_MspPostInit+0x68>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 8002302:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002314:	2302      	movs	r3, #2
 8002316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	4619      	mov	r1, r3
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <HAL_TIM_MspPostInit+0x6c>)
 8002320:	f001 fc04 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40000800 	.word	0x40000800
 8002330:	40023800 	.word	0x40023800
 8002334:	40020c00 	.word	0x40020c00

08002338 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_USART2_UART_Init+0x58>)
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <MX_USART2_UART_Init+0x5c>)
 8002340:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MX_USART2_UART_Init+0x58>)
 8002344:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002348:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_USART2_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_USART2_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_USART2_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_USART2_UART_Init+0x58>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MX_USART2_UART_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_USART2_UART_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <MX_USART2_UART_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_USART2_UART_Init+0x58>)
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_USART2_UART_Init+0x58>)
 800237c:	f005 fd24 	bl	8007dc8 <HAL_UART_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002386:	f7ff fb3b 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200003b0 	.word	0x200003b0
 8002394:	40004400 	.word	0x40004400

08002398 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b0ae      	sub	sp, #184	; 0xb8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2290      	movs	r2, #144	; 0x90
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f009 ffdd 	bl	800c378 <memset>
  if(uartHandle->Instance==USART2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a21      	ldr	r2, [pc, #132]	; (8002448 <HAL_UART_MspInit+0xb0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d13a      	bne.n	800243e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fa5b 	bl	8004890 <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023e0:	f7ff fb0e 	bl	8001a00 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_UART_MspInit+0xb4>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_UART_MspInit+0xb4>)
 80023ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ee:	6413      	str	r3, [r2, #64]	; 0x40
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_UART_MspInit+0xb4>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_UART_MspInit+0xb4>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	4a12      	ldr	r2, [pc, #72]	; (800244c <HAL_UART_MspInit+0xb4>)
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	6313      	str	r3, [r2, #48]	; 0x30
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_UART_MspInit+0xb4>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002414:	2360      	movs	r3, #96	; 0x60
 8002416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800242c:	2307      	movs	r3, #7
 800242e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002432:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002436:	4619      	mov	r1, r3
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_UART_MspInit+0xb8>)
 800243a:	f001 fb77 	bl	8003b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800243e:	bf00      	nop
 8002440:	37b8      	adds	r7, #184	; 0xb8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40004400 	.word	0x40004400
 800244c:	40023800 	.word	0x40023800
 8002450:	40020c00 	.word	0x40020c00

08002454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800248c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002458:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800245a:	e003      	b.n	8002464 <LoopCopyDataInit>

0800245c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800245e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002460:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002462:	3104      	adds	r1, #4

08002464 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002468:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800246a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800246c:	d3f6      	bcc.n	800245c <CopyDataInit>
  ldr  r2, =_sbss
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002470:	e002      	b.n	8002478 <LoopFillZerobss>

08002472 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002472:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002474:	f842 3b04 	str.w	r3, [r2], #4

08002478 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800247a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800247c:	d3f9      	bcc.n	8002472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800247e:	f7ff fd4b 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002482:	f009 ff55 	bl	800c330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002486:	f7fe ffdf 	bl	8001448 <main>
  bx  lr    
 800248a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800248c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002490:	0800ca48 	.word	0x0800ca48
  ldr  r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002498:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800249c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80024a0:	200008a0 	.word	0x200008a0

080024a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC_IRQHandler>

080024a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024aa:	2003      	movs	r0, #3
 80024ac:	f000 ff56 	bl	800335c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f000 f805 	bl	80024c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b6:	f7ff fcbf 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x54>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_InitTick+0x58>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 ff71 	bl	80033c6 <HAL_SYSTICK_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00e      	b.n	800250c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b0f      	cmp	r3, #15
 80024f2:	d80a      	bhi.n	800250a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f4:	2200      	movs	r2, #0
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f000 ff39 	bl	8003372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_InitTick+0x5c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000000 	.word	0x20000000
 8002518:	20000008 	.word	0x20000008
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x20>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x24>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_IncTick+0x24>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000008 	.word	0x20000008
 8002544:	20000434 	.word	0x20000434

08002548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return uwTick;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_GetTick+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000434 	.word	0x20000434

08002560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff ffee 	bl	8002548 <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d005      	beq.n	8002586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_Delay+0x44>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002586:	bf00      	nop
 8002588:	f7ff ffde 	bl	8002548 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d8f7      	bhi.n	8002588 <HAL_Delay+0x28>
  {
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000008 	.word	0x20000008

080025a8 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 80025ac:	4b02      	ldr	r3, [pc, #8]	; (80025b8 <HAL_GetHalVersion+0x10>)
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	01020a00 	.word	0x01020a00

080025bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_GetREVID+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0c1b      	lsrs	r3, r3, #16
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e0042000 	.word	0xe0042000

080025d4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_GetDEVID+0x18>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e0042000 	.word	0xe0042000

080025f0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_GetUIDw0+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	1ff0f420 	.word	0x1ff0f420

08002608 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_GetUIDw1+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	1ff0f424 	.word	0x1ff0f424

08002620 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_GetUIDw2+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	1ff0f428 	.word	0x1ff0f428

08002638 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e031      	b.n	80026b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fbe6 	bl	8000e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_ADC_Init+0x84>)
 800267c:	4013      	ands	r3, r2
 800267e:	f043 0202 	orr.w	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f970 	bl	800296c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
 80026a2:	e001      	b.n	80026a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	ffffeefd 	.word	0xffffeefd

080026c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x1c>
 80026d8:	2302      	movs	r3, #2
 80026da:	e136      	b.n	800294a <HAL_ADC_ConfigChannel+0x28a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	d93a      	bls.n	8002762 <HAL_ADC_ConfigChannel+0xa2>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026f4:	d035      	beq.n	8002762 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68d9      	ldr	r1, [r3, #12]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	3b1e      	subs	r3, #30
 800270c:	2207      	movs	r2, #7
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	400a      	ands	r2, r1
 800271a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a8d      	ldr	r2, [pc, #564]	; (8002958 <HAL_ADC_ConfigChannel+0x298>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10a      	bne.n	800273c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68d9      	ldr	r1, [r3, #12]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	061a      	lsls	r2, r3, #24
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273a:	e035      	b.n	80027a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68d9      	ldr	r1, [r3, #12]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	4603      	mov	r3, r0
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4403      	add	r3, r0
 8002754:	3b1e      	subs	r3, #30
 8002756:	409a      	lsls	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002760:	e022      	b.n	80027a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6919      	ldr	r1, [r3, #16]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	2207      	movs	r2, #7
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43da      	mvns	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	400a      	ands	r2, r1
 8002784:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6919      	ldr	r1, [r3, #16]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4618      	mov	r0, r3
 8002798:	4603      	mov	r3, r0
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4403      	add	r3, r0
 800279e:	409a      	lsls	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d824      	bhi.n	80027fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	3b05      	subs	r3, #5
 80027c2:	221f      	movs	r2, #31
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	400a      	ands	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	3b05      	subs	r3, #5
 80027ec:	fa00 f203 	lsl.w	r2, r0, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34
 80027f8:	e04c      	b.n	8002894 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d824      	bhi.n	800284c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	3b23      	subs	r3, #35	; 0x23
 8002814:	221f      	movs	r2, #31
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	400a      	ands	r2, r1
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b23      	subs	r3, #35	; 0x23
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
 800284a:	e023      	b.n	8002894 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	3b41      	subs	r3, #65	; 0x41
 800285e:	221f      	movs	r2, #31
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43da      	mvns	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	400a      	ands	r2, r1
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	4618      	mov	r0, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	3b41      	subs	r3, #65	; 0x41
 8002888:	fa00 f203 	lsl.w	r2, r0, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a30      	ldr	r2, [pc, #192]	; (800295c <HAL_ADC_ConfigChannel+0x29c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10a      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1f4>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a28      	ldr	r2, [pc, #160]	; (800295c <HAL_ADC_ConfigChannel+0x29c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10f      	bne.n	80028de <HAL_ADC_ConfigChannel+0x21e>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b12      	cmp	r3, #18
 80028c4:	d10b      	bne.n	80028de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a25      	ldr	r2, [pc, #148]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 80028cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028d2:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4a22      	ldr	r2, [pc, #136]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 80028d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_ADC_ConfigChannel+0x29c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d12b      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x280>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1a      	ldr	r2, [pc, #104]	; (8002958 <HAL_ADC_ConfigChannel+0x298>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x23a>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b11      	cmp	r3, #17
 80028f8:	d122      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4a18      	ldr	r2, [pc, #96]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 8002900:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002904:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4a15      	ldr	r2, [pc, #84]	; (8002960 <HAL_ADC_ConfigChannel+0x2a0>)
 800290c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002910:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_ADC_ConfigChannel+0x298>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_ADC_ConfigChannel+0x2a4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a11      	ldr	r2, [pc, #68]	; (8002968 <HAL_ADC_ConfigChannel+0x2a8>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0c9a      	lsrs	r2, r3, #18
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002932:	e002      	b.n	800293a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3b01      	subs	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f9      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	10000012 	.word	0x10000012
 800295c:	40012000 	.word	0x40012000
 8002960:	40012300 	.word	0x40012300
 8002964:	20000000 	.word	0x20000000
 8002968:	431bde83 	.word	0x431bde83

0800296c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002974:	4b78      	ldr	r3, [pc, #480]	; (8002b58 <ADC_Init+0x1ec>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a77      	ldr	r2, [pc, #476]	; (8002b58 <ADC_Init+0x1ec>)
 800297a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800297e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002980:	4b75      	ldr	r3, [pc, #468]	; (8002b58 <ADC_Init+0x1ec>)
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4973      	ldr	r1, [pc, #460]	; (8002b58 <ADC_Init+0x1ec>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800299c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	021a      	lsls	r2, r3, #8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <ADC_Init+0x1f0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	e00f      	b.n	8002a66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0202 	bic.w	r2, r2, #2
 8002a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	005a      	lsls	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ab2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	035a      	lsls	r2, r3, #13
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	e007      	b.n	8002adc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ada:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	051a      	lsls	r2, r3, #20
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b1e:	025a      	lsls	r2, r3, #9
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	029a      	lsls	r2, r3, #10
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40012300 	.word	0x40012300
 8002b5c:	0f000001 	.word	0x0f000001

08002b60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0ed      	b.n	8002d4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe f9fe 	bl	8000f80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b94:	f7ff fcd8 	bl	8002548 <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b9a:	e012      	b.n	8002bc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b9c:	f7ff fcd4 	bl	8002548 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b0a      	cmp	r3, #10
 8002ba8:	d90b      	bls.n	8002bc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2205      	movs	r2, #5
 8002bba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0c5      	b.n	8002d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0e5      	beq.n	8002b9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0202 	bic.w	r2, r2, #2
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be0:	f7ff fcb2 	bl	8002548 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002be6:	e012      	b.n	8002c0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002be8:	f7ff fcae 	bl	8002548 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b0a      	cmp	r3, #10
 8002bf4:	d90b      	bls.n	8002c0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2205      	movs	r2, #5
 8002c06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e09f      	b.n	8002d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e5      	bne.n	8002be8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7e1b      	ldrb	r3, [r3, #24]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d108      	bne.n	8002c36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e007      	b.n	8002c46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7e5b      	ldrb	r3, [r3, #25]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d108      	bne.n	8002c60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e007      	b.n	8002c70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7e9b      	ldrb	r3, [r3, #26]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d108      	bne.n	8002c8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0220 	orr.w	r2, r2, #32
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e007      	b.n	8002c9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0220 	bic.w	r2, r2, #32
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7edb      	ldrb	r3, [r3, #27]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d108      	bne.n	8002cb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0210 	bic.w	r2, r2, #16
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e007      	b.n	8002cc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0210 	orr.w	r2, r2, #16
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7f1b      	ldrb	r3, [r3, #28]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d108      	bne.n	8002cde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0208 	orr.w	r2, r2, #8
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e007      	b.n	8002cee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0208 	bic.w	r2, r2, #8
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7f5b      	ldrb	r3, [r3, #29]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d108      	bne.n	8002d08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0204 	orr.w	r2, r2, #4
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e007      	b.n	8002d18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d003      	beq.n	8002d7e <HAL_CAN_ConfigFilter+0x26>
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	f040 80c7 	bne.w	8002f0c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a69      	ldr	r2, [pc, #420]	; (8002f28 <HAL_CAN_ConfigFilter+0x1d0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d001      	beq.n	8002d8c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002d88:	4b68      	ldr	r3, [pc, #416]	; (8002f2c <HAL_CAN_ConfigFilter+0x1d4>)
 8002d8a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	4a63      	ldr	r2, [pc, #396]	; (8002f2c <HAL_CAN_ConfigFilter+0x1d4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d111      	bne.n	8002dc8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002daa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d123      	bne.n	8002e3a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3248      	adds	r2, #72	; 0x48
 8002e1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e30:	6979      	ldr	r1, [r7, #20]
 8002e32:	3348      	adds	r3, #72	; 0x48
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d122      	bne.n	8002e88 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3248      	adds	r2, #72	; 0x48
 8002e68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e7e:	6979      	ldr	r1, [r7, #20]
 8002e80:	3348      	adds	r3, #72	; 0x48
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ea2:	e007      	b.n	8002eb4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ece:	e007      	b.n	8002ee0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002efe:	f023 0201 	bic.w	r2, r3, #1
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e006      	b.n	8002f1a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40003400 	.word	0x40003400
 8002f2c:	40006400 	.word	0x40006400

08002f30 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d12e      	bne.n	8002fa2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7ff faf4 	bl	8002548 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f62:	e012      	b.n	8002f8a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f64:	f7ff faf0 	bl	8002548 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b0a      	cmp	r3, #10
 8002f70:	d90b      	bls.n	8002f8a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2205      	movs	r2, #5
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e012      	b.n	8002fb0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e5      	bne.n	8002f64 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e006      	b.n	8002fb0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fcc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fd6:	7ffb      	ldrb	r3, [r7, #31]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d003      	beq.n	8002fe4 <HAL_CAN_AddTxMessage+0x2c>
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	f040 80b8 	bne.w	8003154 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80a0 	beq.w	8003144 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	0e1b      	lsrs	r3, r3, #24
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d907      	bls.n	8003024 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e09e      	b.n	8003162 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003024:	2201      	movs	r2, #1
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	409a      	lsls	r2, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	6809      	ldr	r1, [r1, #0]
 8003044:	431a      	orrs	r2, r3
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3318      	adds	r3, #24
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	440b      	add	r3, r1
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e00f      	b.n	8003072 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800305c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003062:	68f9      	ldr	r1, [r7, #12]
 8003064:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003066:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3318      	adds	r3, #24
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	440b      	add	r3, r1
 8003070:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3318      	adds	r3, #24
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	440b      	add	r3, r1
 8003082:	3304      	adds	r3, #4
 8003084:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	7d1b      	ldrb	r3, [r3, #20]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d111      	bne.n	80030b2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3318      	adds	r3, #24
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	6811      	ldr	r1, [r2, #0]
 80030a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	3318      	adds	r3, #24
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	440b      	add	r3, r1
 80030ae:	3304      	adds	r3, #4
 80030b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3307      	adds	r3, #7
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	061a      	lsls	r2, r3, #24
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3306      	adds	r3, #6
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3305      	adds	r3, #5
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	4313      	orrs	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	3204      	adds	r2, #4
 80030d2:	7812      	ldrb	r2, [r2, #0]
 80030d4:	4610      	mov	r0, r2
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	6811      	ldr	r1, [r2, #0]
 80030da:	ea43 0200 	orr.w	r2, r3, r0
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	440b      	add	r3, r1
 80030e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3303      	adds	r3, #3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	061a      	lsls	r2, r3, #24
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3302      	adds	r3, #2
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3301      	adds	r3, #1
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	4313      	orrs	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	7812      	ldrb	r2, [r2, #0]
 800310a:	4610      	mov	r0, r2
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	6811      	ldr	r1, [r2, #0]
 8003110:	ea43 0200 	orr.w	r2, r3, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	440b      	add	r3, r1
 800311a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800311e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3318      	adds	r3, #24
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	4413      	add	r3, r2
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	6811      	ldr	r1, [r2, #0]
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3318      	adds	r3, #24
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	440b      	add	r3, r1
 800313e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e00e      	b.n	8003162 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e006      	b.n	8003162 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	; 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800317e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d002      	beq.n	800318c <HAL_CAN_ActivateNotification+0x1e>
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d109      	bne.n	80031a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6959      	ldr	r1, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e006      	b.n	80031ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <__NVIC_SetPriorityGrouping+0x40>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d8:	4013      	ands	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <__NVIC_SetPriorityGrouping+0x40>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00
 8003200:	05fa0000 	.word	0x05fa0000

08003204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <__NVIC_GetPriorityGrouping+0x18>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	f003 0307 	and.w	r3, r3, #7
}
 8003212:	4618      	mov	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	2b00      	cmp	r3, #0
 8003230:	db0b      	blt.n	800324a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	f003 021f 	and.w	r2, r3, #31
 8003238:	4907      	ldr	r1, [pc, #28]	; (8003258 <__NVIC_EnableIRQ+0x38>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2001      	movs	r0, #1
 8003242:	fa00 f202 	lsl.w	r2, r0, r2
 8003246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000e100 	.word	0xe000e100

0800325c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	2b00      	cmp	r3, #0
 800326e:	db0a      	blt.n	8003286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	490c      	ldr	r1, [pc, #48]	; (80032a8 <__NVIC_SetPriority+0x4c>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	0112      	lsls	r2, r2, #4
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	440b      	add	r3, r1
 8003280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003284:	e00a      	b.n	800329c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4908      	ldr	r1, [pc, #32]	; (80032ac <__NVIC_SetPriority+0x50>)
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	3b04      	subs	r3, #4
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	440b      	add	r3, r1
 800329a:	761a      	strb	r2, [r3, #24]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000e100 	.word	0xe000e100
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f1c3 0307 	rsb	r3, r3, #7
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	bf28      	it	cs
 80032ce:	2304      	movcs	r3, #4
 80032d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d902      	bls.n	80032e0 <NVIC_EncodePriority+0x30>
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3b03      	subs	r3, #3
 80032de:	e000      	b.n	80032e2 <NVIC_EncodePriority+0x32>
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	401a      	ands	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f8:	f04f 31ff 	mov.w	r1, #4294967295
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	43d9      	mvns	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	4313      	orrs	r3, r2
         );
}
 800330a:	4618      	mov	r0, r3
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003328:	d301      	bcc.n	800332e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332a:	2301      	movs	r3, #1
 800332c:	e00f      	b.n	800334e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332e:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <SysTick_Config+0x40>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003336:	210f      	movs	r1, #15
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f7ff ff8e 	bl	800325c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <SysTick_Config+0x40>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <SysTick_Config+0x40>)
 8003348:	2207      	movs	r2, #7
 800334a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000e010 	.word	0xe000e010

0800335c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff29 	bl	80031bc <__NVIC_SetPriorityGrouping>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003384:	f7ff ff3e 	bl	8003204 <__NVIC_GetPriorityGrouping>
 8003388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	f7ff ff8e 	bl	80032b0 <NVIC_EncodePriority>
 8003394:	4602      	mov	r2, r0
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff5d 	bl	800325c <__NVIC_SetPriority>
}
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff31 	bl	8003220 <__NVIC_EnableIRQ>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ffa2 	bl	8003318 <SysTick_Config>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff f8ac 	bl	8002548 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e099      	b.n	8003530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341c:	e00f      	b.n	800343e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800341e:	f7ff f893 	bl	8002548 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b05      	cmp	r3, #5
 800342a:	d908      	bls.n	800343e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2203      	movs	r2, #3
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e078      	b.n	8003530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e8      	bne.n	800341e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4b38      	ldr	r3, [pc, #224]	; (8003538 <HAL_DMA_Init+0x158>)
 8003458:	4013      	ands	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b04      	cmp	r3, #4
 8003496:	d107      	bne.n	80034a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	4313      	orrs	r3, r2
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0307 	bic.w	r3, r3, #7
 80034be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d117      	bne.n	8003502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 faa5 	bl	8003a34 <DMA_CheckFifoParam>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034fe:	2301      	movs	r3, #1
 8003500:	e016      	b.n	8003530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa5c 	bl	80039c8 <DMA_CalcBaseAndBitshift>
 8003510:	4603      	mov	r3, r0
 8003512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	223f      	movs	r2, #63	; 0x3f
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	e010803f 	.word	0xe010803f

0800353c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_DMA_Start_IT+0x26>
 800355e:	2302      	movs	r3, #2
 8003560:	e048      	b.n	80035f4 <HAL_DMA_Start_IT+0xb8>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d137      	bne.n	80035e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f9ee 	bl	800396c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	223f      	movs	r2, #63	; 0x3f
 8003596:	409a      	lsls	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0216 	orr.w	r2, r2, #22
 80035aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0208 	orr.w	r2, r2, #8
 80035d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e005      	b.n	80035f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
 80035f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d004      	beq.n	800361a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e00c      	b.n	8003634 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2205      	movs	r2, #5
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800364c:	4b92      	ldr	r3, [pc, #584]	; (8003898 <HAL_DMA_IRQHandler+0x258>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a92      	ldr	r2, [pc, #584]	; (800389c <HAL_DMA_IRQHandler+0x25c>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0a9b      	lsrs	r3, r3, #10
 8003658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2208      	movs	r2, #8
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01a      	beq.n	80036ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0204 	bic.w	r2, r2, #4
 8003692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2208      	movs	r2, #8
 800369a:	409a      	lsls	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	2201      	movs	r2, #1
 80036b2:	409a      	lsls	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d012      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2201      	movs	r2, #1
 80036d0:	409a      	lsls	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 0202 	orr.w	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	2204      	movs	r2, #4
 80036e8:	409a      	lsls	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d012      	beq.n	8003718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	2204      	movs	r2, #4
 8003706:	409a      	lsls	r2, r3
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	f043 0204 	orr.w	r2, r3, #4
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	2210      	movs	r2, #16
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d043      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d03c      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	2210      	movs	r2, #16
 800373c:	409a      	lsls	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d018      	beq.n	8003782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d024      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
 800376e:	e01f      	b.n	80037b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
 8003780:	e016      	b.n	80037b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0208 	bic.w	r2, r2, #8
 800379e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b4:	2220      	movs	r2, #32
 80037b6:	409a      	lsls	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 808e 	beq.w	80038de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8086 	beq.w	80038de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	2220      	movs	r2, #32
 80037d8:	409a      	lsls	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d136      	bne.n	8003858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0216 	bic.w	r2, r2, #22
 80037f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <HAL_DMA_IRQHandler+0x1da>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0208 	bic.w	r2, r2, #8
 8003828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	223f      	movs	r2, #63	; 0x3f
 8003830:	409a      	lsls	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	2b00      	cmp	r3, #0
 800384c:	d07d      	beq.n	800394a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
        }
        return;
 8003856:	e078      	b.n	800394a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01c      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d108      	bne.n	8003886 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	2b00      	cmp	r3, #0
 800387a:	d030      	beq.n	80038de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
 8003884:	e02b      	b.n	80038de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d027      	beq.n	80038de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
 8003896:	e022      	b.n	80038de <HAL_DMA_IRQHandler+0x29e>
 8003898:	20000000 	.word	0x20000000
 800389c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0210 	bic.w	r2, r2, #16
 80038bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d032      	beq.n	800394c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d022      	beq.n	8003938 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2205      	movs	r2, #5
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3301      	adds	r3, #1
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	429a      	cmp	r2, r3
 8003914:	d307      	bcc.n	8003926 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f2      	bne.n	800390a <HAL_DMA_IRQHandler+0x2ca>
 8003924:	e000      	b.n	8003928 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003926:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
 8003948:	e000      	b.n	800394c <HAL_DMA_IRQHandler+0x30c>
        return;
 800394a:	bf00      	nop
    }
  }
}
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop

08003954 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003988:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d108      	bne.n	80039ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039aa:	e007      	b.n	80039bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3b10      	subs	r3, #16
 80039d8:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <DMA_CalcBaseAndBitshift+0x60>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039e2:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <DMA_CalcBaseAndBitshift+0x64>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d908      	bls.n	8003a08 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <DMA_CalcBaseAndBitshift+0x68>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	1d1a      	adds	r2, r3, #4
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	659a      	str	r2, [r3, #88]	; 0x58
 8003a06:	e006      	b.n	8003a16 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <DMA_CalcBaseAndBitshift+0x68>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	aaaaaaab 	.word	0xaaaaaaab
 8003a2c:	0800c958 	.word	0x0800c958
 8003a30:	fffffc00 	.word	0xfffffc00

08003a34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d11f      	bne.n	8003a8e <DMA_CheckFifoParam+0x5a>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d856      	bhi.n	8003b02 <DMA_CheckFifoParam+0xce>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <DMA_CheckFifoParam+0x28>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a7f 	.word	0x08003a7f
 8003a64:	08003a6d 	.word	0x08003a6d
 8003a68:	08003b03 	.word	0x08003b03
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d046      	beq.n	8003b06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7c:	e043      	b.n	8003b06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a86:	d140      	bne.n	8003b0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8c:	e03d      	b.n	8003b0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a96:	d121      	bne.n	8003adc <DMA_CheckFifoParam+0xa8>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d837      	bhi.n	8003b0e <DMA_CheckFifoParam+0xda>
 8003a9e:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <DMA_CheckFifoParam+0x70>)
 8003aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003abb 	.word	0x08003abb
 8003aac:	08003ab5 	.word	0x08003ab5
 8003ab0:	08003acd 	.word	0x08003acd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e030      	b.n	8003b1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d025      	beq.n	8003b12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aca:	e022      	b.n	8003b12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ad4:	d11f      	bne.n	8003b16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ada:	e01c      	b.n	8003b16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d903      	bls.n	8003aea <DMA_CheckFifoParam+0xb6>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d003      	beq.n	8003af0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ae8:	e018      	b.n	8003b1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
      break;
 8003aee:	e015      	b.n	8003b1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00e      	beq.n	8003b1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
      break;
 8003b00:	e00b      	b.n	8003b1a <DMA_CheckFifoParam+0xe6>
      break;
 8003b02:	bf00      	nop
 8003b04:	e00a      	b.n	8003b1c <DMA_CheckFifoParam+0xe8>
      break;
 8003b06:	bf00      	nop
 8003b08:	e008      	b.n	8003b1c <DMA_CheckFifoParam+0xe8>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e006      	b.n	8003b1c <DMA_CheckFifoParam+0xe8>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e004      	b.n	8003b1c <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <DMA_CheckFifoParam+0xe8>
      break;
 8003b1a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop

08003b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	e175      	b.n	8003e38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	f040 8164 	bne.w	8003e32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d005      	beq.n	8003b82 <HAL_GPIO_Init+0x56>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d130      	bne.n	8003be4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb8:	2201      	movs	r2, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 0201 	and.w	r2, r3, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d017      	beq.n	8003c20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d123      	bne.n	8003c74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	08da      	lsrs	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3208      	adds	r2, #8
 8003c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	220f      	movs	r2, #15
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	08da      	lsrs	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3208      	adds	r2, #8
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80be 	beq.w	8003e32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb6:	4b66      	ldr	r3, [pc, #408]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4a65      	ldr	r2, [pc, #404]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cce:	4a61      	ldr	r2, [pc, #388]	; (8003e54 <HAL_GPIO_Init+0x328>)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_GPIO_Init+0x32c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d037      	beq.n	8003d6a <HAL_GPIO_Init+0x23e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <HAL_GPIO_Init+0x330>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d031      	beq.n	8003d66 <HAL_GPIO_Init+0x23a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a56      	ldr	r2, [pc, #344]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02b      	beq.n	8003d62 <HAL_GPIO_Init+0x236>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a55      	ldr	r2, [pc, #340]	; (8003e64 <HAL_GPIO_Init+0x338>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d025      	beq.n	8003d5e <HAL_GPIO_Init+0x232>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a54      	ldr	r2, [pc, #336]	; (8003e68 <HAL_GPIO_Init+0x33c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01f      	beq.n	8003d5a <HAL_GPIO_Init+0x22e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a53      	ldr	r2, [pc, #332]	; (8003e6c <HAL_GPIO_Init+0x340>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d019      	beq.n	8003d56 <HAL_GPIO_Init+0x22a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a52      	ldr	r2, [pc, #328]	; (8003e70 <HAL_GPIO_Init+0x344>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_GPIO_Init+0x226>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a51      	ldr	r2, [pc, #324]	; (8003e74 <HAL_GPIO_Init+0x348>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00d      	beq.n	8003d4e <HAL_GPIO_Init+0x222>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a50      	ldr	r2, [pc, #320]	; (8003e78 <HAL_GPIO_Init+0x34c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <HAL_GPIO_Init+0x21e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a4f      	ldr	r2, [pc, #316]	; (8003e7c <HAL_GPIO_Init+0x350>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_GPIO_Init+0x21a>
 8003d42:	2309      	movs	r3, #9
 8003d44:	e012      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d46:	230a      	movs	r3, #10
 8003d48:	e010      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	e00e      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e00c      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d52:	2306      	movs	r3, #6
 8003d54:	e00a      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d56:	2305      	movs	r3, #5
 8003d58:	e008      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	e006      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e004      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	f002 0203 	and.w	r2, r2, #3
 8003d72:	0092      	lsls	r2, r2, #2
 8003d74:	4093      	lsls	r3, r2
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d7c:	4935      	ldr	r1, [pc, #212]	; (8003e54 <HAL_GPIO_Init+0x328>)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	3302      	adds	r3, #2
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dae:	4a34      	ldr	r2, [pc, #208]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db4:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dd8:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dde:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e02:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e2c:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3301      	adds	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b0f      	cmp	r3, #15
 8003e3c:	f67f ae86 	bls.w	8003b4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40013800 	.word	0x40013800
 8003e58:	40020000 	.word	0x40020000
 8003e5c:	40020400 	.word	0x40020400
 8003e60:	40020800 	.word	0x40020800
 8003e64:	40020c00 	.word	0x40020c00
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40021400 	.word	0x40021400
 8003e70:	40021800 	.word	0x40021800
 8003e74:	40021c00 	.word	0x40021c00
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40022400 	.word	0x40022400
 8003e80:	40013c00 	.word	0x40013c00

08003e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e001      	b.n	8003ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec4:	787b      	ldrb	r3, [r7, #1]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ed0:	e003      	b.n	8003eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ed2:	887b      	ldrh	r3, [r7, #2]
 8003ed4:	041a      	lsls	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	619a      	str	r2, [r3, #24]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f16:	f7fe fb17 	bl	8002548 <HAL_GetTick>
 8003f1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f1c:	e009      	b.n	8003f32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f1e:	f7fe fb13 	bl	8002548 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f2c:	d901      	bls.n	8003f32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e022      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d1ee      	bne.n	8003f1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f4c:	f7fe fafc 	bl	8002548 <HAL_GetTick>
 8003f50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f52:	e009      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f54:	f7fe faf8 	bl	8002548 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f62:	d901      	bls.n	8003f68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e007      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f74:	d1ee      	bne.n	8003f54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000

08003f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e29b      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8087 	beq.w	80040ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fac:	4b96      	ldr	r3, [pc, #600]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb8:	4b93      	ldr	r3, [pc, #588]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d112      	bne.n	8003fea <HAL_RCC_OscConfig+0x62>
 8003fc4:	4b90      	ldr	r3, [pc, #576]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	4b8d      	ldr	r3, [pc, #564]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d06c      	beq.n	80040b8 <HAL_RCC_OscConfig+0x130>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d168      	bne.n	80040b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e275      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x7a>
 8003ff4:	4b84      	ldr	r3, [pc, #528]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a83      	ldr	r2, [pc, #524]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e02e      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x9c>
 800400a:	4b7f      	ldr	r3, [pc, #508]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7e      	ldr	r2, [pc, #504]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7b      	ldr	r2, [pc, #492]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800401c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e01d      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0xc0>
 800402e:	4b76      	ldr	r3, [pc, #472]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a75      	ldr	r2, [pc, #468]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a72      	ldr	r2, [pc, #456]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004048:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6b      	ldr	r2, [pc, #428]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe fa6e 	bl	8002548 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fe fa6a 	bl	8002548 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e229      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b61      	ldr	r3, [pc, #388]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0xe8>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fe fa5a 	bl	8002548 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fe fa56 	bl	8002548 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e215      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	4b57      	ldr	r3, [pc, #348]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x110>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d069      	beq.n	800419a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040c6:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d2:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d11c      	bne.n	8004118 <HAL_RCC_OscConfig+0x190>
 80040de:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d116      	bne.n	8004118 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_RCC_OscConfig+0x17a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1e9      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004102:	4b41      	ldr	r3, [pc, #260]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	493d      	ldr	r1, [pc, #244]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004116:	e040      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d023      	beq.n	8004168 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a38      	ldr	r2, [pc, #224]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fe fa0c 	bl	8002548 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004134:	f7fe fa08 	bl	8002548 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1c7      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004146:	4b30      	ldr	r3, [pc, #192]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
 8004166:	e018      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe f9e8 	bl	8002548 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe f9e4 	bl	8002548 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1a3      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d038      	beq.n	8004218 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d019      	beq.n	80041e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fe f9c5 	bl	8002548 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c2:	f7fe f9c1 	bl	8002548 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e180      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x23a>
 80041e0:	e01a      	b.n	8004218 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fe f9ab 	bl	8002548 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fe f9a7 	bl	8002548 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d903      	bls.n	800420c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e166      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
 8004208:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b92      	ldr	r3, [pc, #584]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ee      	bne.n	80041f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a4 	beq.w	800436e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b8c      	ldr	r3, [pc, #560]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4b89      	ldr	r3, [pc, #548]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a88      	ldr	r2, [pc, #544]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b86      	ldr	r3, [pc, #536]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424e:	4b83      	ldr	r3, [pc, #524]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800425a:	4b80      	ldr	r3, [pc, #512]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7f      	ldr	r2, [pc, #508]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fe f96f 	bl	8002548 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fe f96b 	bl	8002548 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b64      	cmp	r3, #100	; 0x64
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e12a      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004280:	4b76      	ldr	r3, [pc, #472]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x31a>
 8004294:	4b70      	ldr	r3, [pc, #448]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a6f      	ldr	r2, [pc, #444]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e02d      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x33c>
 80042aa:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
 80042b6:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a67      	ldr	r2, [pc, #412]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	e01c      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x35e>
 80042cc:	4b62      	ldr	r3, [pc, #392]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a61      	ldr	r2, [pc, #388]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a5e      	ldr	r2, [pc, #376]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	e00b      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042e6:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a5b      	ldr	r2, [pc, #364]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6713      	str	r3, [r2, #112]	; 0x70
 80042f2:	4b59      	ldr	r3, [pc, #356]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a58      	ldr	r2, [pc, #352]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fe f91f 	bl	8002548 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe f91b 	bl	8002548 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0d8      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RCC_OscConfig+0x386>
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fe f909 	bl	8002548 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fe f905 	bl	8002548 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0c2      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ee      	bne.n	800433a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80ae 	beq.w	80044d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004378:	4b37      	ldr	r3, [pc, #220]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d06d      	beq.n	8004460 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d14b      	bne.n	8004424 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438c:	4b32      	ldr	r3, [pc, #200]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a31      	ldr	r2, [pc, #196]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe f8d6 	bl	8002548 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe f8d2 	bl	8002548 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e091      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	4b29      	ldr	r3, [pc, #164]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	491b      	ldr	r1, [pc, #108]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fe f8a4 	bl	8002548 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fe f8a0 	bl	8002548 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e05f      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x47c>
 8004422:	e057      	b.n	80044d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a0b      	ldr	r2, [pc, #44]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800442a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fe f88a 	bl	8002548 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fe f886 	bl	8002548 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e045      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x4b0>
 8004456:	e03d      	b.n	80044d4 <HAL_RCC_OscConfig+0x54c>
 8004458:	40023800 	.word	0x40023800
 800445c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004460:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <HAL_RCC_OscConfig+0x558>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d030      	beq.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d129      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d122      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004496:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004498:	4293      	cmp	r3, r2
 800449a:	d119      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	3b01      	subs	r3, #1
 80044aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d10f      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800

080044e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0d0      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b6a      	ldr	r3, [pc, #424]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d910      	bls.n	800452c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b67      	ldr	r3, [pc, #412]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 020f 	bic.w	r2, r3, #15
 8004512:	4965      	ldr	r1, [pc, #404]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0b8      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d020      	beq.n	800457a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4a58      	ldr	r2, [pc, #352]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800454a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800454e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a52      	ldr	r2, [pc, #328]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	494d      	ldr	r1, [pc, #308]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d040      	beq.n	8004608 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d115      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e07f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b41      	ldr	r3, [pc, #260]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e073      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e06b      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b39      	ldr	r3, [pc, #228]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4936      	ldr	r1, [pc, #216]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d8:	f7fd ffb6 	bl	8002548 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fd ffb2 	bl	8002548 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e053      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d210      	bcs.n	8004638 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 020f 	bic.w	r2, r3, #15
 800461e:	4922      	ldr	r1, [pc, #136]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e032      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4916      	ldr	r1, [pc, #88]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	490e      	ldr	r1, [pc, #56]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004676:	f000 f821 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800467a:	4602      	mov	r2, r0
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	490a      	ldr	r1, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004688:	5ccb      	ldrb	r3, [r1, r3]
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fd ff12 	bl	80024c0 <HAL_InitTick>

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023c00 	.word	0x40023c00
 80046ac:	40023800 	.word	0x40023800
 80046b0:	0800c940 	.word	0x0800c940
 80046b4:	20000000 	.word	0x20000000
 80046b8:	20000004 	.word	0x20000004

080046bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046bc:	b5b0      	push	{r4, r5, r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046c2:	2100      	movs	r1, #0
 80046c4:	6079      	str	r1, [r7, #4]
 80046c6:	2100      	movs	r1, #0
 80046c8:	60f9      	str	r1, [r7, #12]
 80046ca:	2100      	movs	r1, #0
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80046ce:	2100      	movs	r1, #0
 80046d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d2:	4952      	ldr	r1, [pc, #328]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 80046d4:	6889      	ldr	r1, [r1, #8]
 80046d6:	f001 010c 	and.w	r1, r1, #12
 80046da:	2908      	cmp	r1, #8
 80046dc:	d00d      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0x3e>
 80046de:	2908      	cmp	r1, #8
 80046e0:	f200 8094 	bhi.w	800480c <HAL_RCC_GetSysClockFreq+0x150>
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d002      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x32>
 80046e8:	2904      	cmp	r1, #4
 80046ea:	d003      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x38>
 80046ec:	e08e      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ee:	4b4c      	ldr	r3, [pc, #304]	; (8004820 <HAL_RCC_GetSysClockFreq+0x164>)
 80046f0:	60bb      	str	r3, [r7, #8]
      break;
 80046f2:	e08e      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f4:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <HAL_RCC_GetSysClockFreq+0x168>)
 80046f6:	60bb      	str	r3, [r7, #8]
      break;
 80046f8:	e08b      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046fa:	4948      	ldr	r1, [pc, #288]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 80046fc:	6849      	ldr	r1, [r1, #4]
 80046fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004702:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004704:	4945      	ldr	r1, [pc, #276]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 8004706:	6849      	ldr	r1, [r1, #4]
 8004708:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800470c:	2900      	cmp	r1, #0
 800470e:	d024      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004710:	4942      	ldr	r1, [pc, #264]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 8004712:	6849      	ldr	r1, [r1, #4]
 8004714:	0989      	lsrs	r1, r1, #6
 8004716:	4608      	mov	r0, r1
 8004718:	f04f 0100 	mov.w	r1, #0
 800471c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004720:	f04f 0500 	mov.w	r5, #0
 8004724:	ea00 0204 	and.w	r2, r0, r4
 8004728:	ea01 0305 	and.w	r3, r1, r5
 800472c:	493d      	ldr	r1, [pc, #244]	; (8004824 <HAL_RCC_GetSysClockFreq+0x168>)
 800472e:	fb01 f003 	mul.w	r0, r1, r3
 8004732:	2100      	movs	r1, #0
 8004734:	fb01 f102 	mul.w	r1, r1, r2
 8004738:	1844      	adds	r4, r0, r1
 800473a:	493a      	ldr	r1, [pc, #232]	; (8004824 <HAL_RCC_GetSysClockFreq+0x168>)
 800473c:	fba2 0101 	umull	r0, r1, r2, r1
 8004740:	1863      	adds	r3, r4, r1
 8004742:	4619      	mov	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	461a      	mov	r2, r3
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f7fb fd7c 	bl	8000248 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4613      	mov	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e04a      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b30      	ldr	r3, [pc, #192]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	461a      	mov	r2, r3
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	ea02 0400 	and.w	r4, r2, r0
 8004772:	ea03 0501 	and.w	r5, r3, r1
 8004776:	4620      	mov	r0, r4
 8004778:	4629      	mov	r1, r5
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	014b      	lsls	r3, r1, #5
 8004784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004788:	0142      	lsls	r2, r0, #5
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	1b00      	subs	r0, r0, r4
 8004790:	eb61 0105 	sbc.w	r1, r1, r5
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	018b      	lsls	r3, r1, #6
 800479e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047a2:	0182      	lsls	r2, r0, #6
 80047a4:	1a12      	subs	r2, r2, r0
 80047a6:	eb63 0301 	sbc.w	r3, r3, r1
 80047aa:	f04f 0000 	mov.w	r0, #0
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	00d9      	lsls	r1, r3, #3
 80047b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b8:	00d0      	lsls	r0, r2, #3
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	1912      	adds	r2, r2, r4
 80047c0:	eb45 0303 	adc.w	r3, r5, r3
 80047c4:	f04f 0000 	mov.w	r0, #0
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	0299      	lsls	r1, r3, #10
 80047ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047d2:	0290      	lsls	r0, r2, #10
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	461a      	mov	r2, r3
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	f7fb fd30 	bl	8000248 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	3301      	adds	r3, #1
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	60bb      	str	r3, [r7, #8]
      break;
 800480a:	e002      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <HAL_RCC_GetSysClockFreq+0x164>)
 800480e:	60bb      	str	r3, [r7, #8]
      break;
 8004810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004812:	68bb      	ldr	r3, [r7, #8]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bdb0      	pop	{r4, r5, r7, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	00f42400 	.word	0x00f42400
 8004824:	017d7840 	.word	0x017d7840

08004828 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_GetHCLKFreq+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000000 	.word	0x20000000

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004844:	f7ff fff0 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0a9b      	lsrs	r3, r3, #10
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	0800c950 	.word	0x0800c950

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800486c:	f7ff ffdc 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0b5b      	lsrs	r3, r3, #13
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	; (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	0800c950 	.word	0x0800c950

08004890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d012      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048b8:	4b69      	ldr	r3, [pc, #420]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a68      	ldr	r2, [pc, #416]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048c2:	6093      	str	r3, [r2, #8]
 80048c4:	4b66      	ldr	r3, [pc, #408]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	4964      	ldr	r1, [pc, #400]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048da:	2301      	movs	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d017      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ea:	4b5d      	ldr	r3, [pc, #372]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f8:	4959      	ldr	r1, [pc, #356]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004908:	d101      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800490a:	2301      	movs	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004916:	2301      	movs	r3, #1
 8004918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d017      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004926:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	494a      	ldr	r1, [pc, #296]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004944:	d101      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004946:	2301      	movs	r3, #1
 8004948:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004952:	2301      	movs	r3, #1
 8004954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004962:	2301      	movs	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 808b 	beq.w	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004974:	4b3a      	ldr	r3, [pc, #232]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	4a39      	ldr	r2, [pc, #228]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497e:	6413      	str	r3, [r2, #64]	; 0x40
 8004980:	4b37      	ldr	r3, [pc, #220]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800498c:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a34      	ldr	r2, [pc, #208]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fd fdd6 	bl	8002548 <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a0:	f7fd fdd2 	bl	8002548 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e38f      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049b2:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049be:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d035      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d02e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049dc:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049e6:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a1d      	ldr	r2, [pc, #116]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049f2:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049fe:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a04:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d114      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fd fd9a 	bl	8002548 <HAL_GetTick>
 8004a14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fd fd96 	bl	8002548 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e351      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ee      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a46:	d111      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a56:	400b      	ands	r3, r1
 8004a58:	4901      	ldr	r1, [pc, #4]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000
 8004a68:	0ffffcff 	.word	0x0ffffcff
 8004a6c:	4bb3      	ldr	r3, [pc, #716]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4ab2      	ldr	r2, [pc, #712]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a76:	6093      	str	r3, [r2, #8]
 8004a78:	4bb0      	ldr	r3, [pc, #704]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a84:	49ad      	ldr	r1, [pc, #692]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d010      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a96:	4ba9      	ldr	r3, [pc, #676]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9c:	4aa7      	ldr	r2, [pc, #668]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004aa6:	4ba5      	ldr	r3, [pc, #660]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	49a2      	ldr	r1, [pc, #648]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ac4:	4b9d      	ldr	r3, [pc, #628]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad2:	499a      	ldr	r1, [pc, #616]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ae6:	4b95      	ldr	r3, [pc, #596]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af4:	4991      	ldr	r1, [pc, #580]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b08:	4b8c      	ldr	r3, [pc, #560]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b16:	4989      	ldr	r1, [pc, #548]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b2a:	4b84      	ldr	r3, [pc, #528]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4980      	ldr	r1, [pc, #512]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b4c:	4b7b      	ldr	r3, [pc, #492]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	f023 0203 	bic.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	4978      	ldr	r1, [pc, #480]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b6e:	4b73      	ldr	r3, [pc, #460]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	f023 020c 	bic.w	r2, r3, #12
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	496f      	ldr	r1, [pc, #444]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b90:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9e:	4967      	ldr	r1, [pc, #412]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bb2:	4b62      	ldr	r3, [pc, #392]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	495e      	ldr	r1, [pc, #376]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	4956      	ldr	r1, [pc, #344]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bf6:	4b51      	ldr	r3, [pc, #324]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	494d      	ldr	r1, [pc, #308]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c18:	4b48      	ldr	r3, [pc, #288]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c26:	4945      	ldr	r1, [pc, #276]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c3a:	4b40      	ldr	r3, [pc, #256]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c48:	493c      	ldr	r1, [pc, #240]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c5c:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c6a:	4934      	ldr	r1, [pc, #208]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d011      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8c:	492b      	ldr	r1, [pc, #172]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cbe:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ccc:	491b      	ldr	r1, [pc, #108]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ce0:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf0:	4912      	ldr	r1, [pc, #72]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d04:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d14:	4909      	ldr	r1, [pc, #36]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00f      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	e002      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	4986      	ldr	r1, [pc, #536]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d54:	4b81      	ldr	r3, [pc, #516]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	497d      	ldr	r1, [pc, #500]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d006      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80d6 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d80:	4b76      	ldr	r3, [pc, #472]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a75      	ldr	r2, [pc, #468]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8c:	f7fd fbdc 	bl	8002548 <HAL_GetTick>
 8004d90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d94:	f7fd fbd8 	bl	8002548 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e195      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004da6:	4b6d      	ldr	r3, [pc, #436]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d021      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11d      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dc6:	4b65      	ldr	r3, [pc, #404]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dd4:	4b61      	ldr	r3, [pc, #388]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dda:	0e1b      	lsrs	r3, r3, #24
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	019a      	lsls	r2, r3, #6
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	061b      	lsls	r3, r3, #24
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	071b      	lsls	r3, r3, #28
 8004dfa:	4958      	ldr	r1, [pc, #352]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d02e      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2c:	d129      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e2e:	4b4b      	ldr	r3, [pc, #300]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e3c:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e42:	0f1b      	lsrs	r3, r3, #28
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	019a      	lsls	r2, r3, #6
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	071b      	lsls	r3, r3, #28
 8004e62:	493e      	ldr	r1, [pc, #248]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e6a:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e70:	f023 021f 	bic.w	r2, r3, #31
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	4938      	ldr	r1, [pc, #224]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01d      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e8e:	4b33      	ldr	r3, [pc, #204]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e94:	0e1b      	lsrs	r3, r3, #24
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e9c:	4b2f      	ldr	r3, [pc, #188]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea2:	0f1b      	lsrs	r3, r3, #28
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	019a      	lsls	r2, r3, #6
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	061b      	lsls	r3, r3, #24
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	071b      	lsls	r3, r3, #28
 8004ec2:	4926      	ldr	r1, [pc, #152]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d011      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	019a      	lsls	r2, r3, #6
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	071b      	lsls	r3, r3, #28
 8004ef2:	491a      	ldr	r1, [pc, #104]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a17      	ldr	r2, [pc, #92]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f06:	f7fd fb1f 	bl	8002548 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f0e:	f7fd fb1b 	bl	8002548 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b64      	cmp	r3, #100	; 0x64
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e0d8      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	f040 80ce 	bne.w	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f40:	f7fd fb02 	bl	8002548 <HAL_GetTick>
 8004f44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f46:	e00b      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f48:	f7fd fafe 	bl	8002548 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d904      	bls.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e0bb      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f60:	4b5e      	ldr	r3, [pc, #376]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f6c:	d0ec      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d02e      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d12a      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f96:	4b51      	ldr	r3, [pc, #324]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fa4:	4b4d      	ldr	r3, [pc, #308]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	0f1b      	lsrs	r3, r3, #28
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	019a      	lsls	r2, r3, #6
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	041b      	lsls	r3, r3, #16
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	061b      	lsls	r3, r3, #24
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	071b      	lsls	r3, r3, #28
 8004fca:	4944      	ldr	r1, [pc, #272]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fd2:	4b42      	ldr	r3, [pc, #264]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	493d      	ldr	r1, [pc, #244]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d022      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005000:	d11d      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005002:	4b36      	ldr	r3, [pc, #216]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005010:	4b32      	ldr	r3, [pc, #200]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	0f1b      	lsrs	r3, r3, #28
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	019a      	lsls	r2, r3, #6
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	431a      	orrs	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	061b      	lsls	r3, r3, #24
 8005030:	431a      	orrs	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	4929      	ldr	r1, [pc, #164]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d028      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005050:	0e1b      	lsrs	r3, r3, #24
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005058:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	0c1b      	lsrs	r3, r3, #16
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	019a      	lsls	r2, r3, #6
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	431a      	orrs	r2, r3
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	061b      	lsls	r3, r3, #24
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	071b      	lsls	r3, r3, #28
 800507e:	4917      	ldr	r1, [pc, #92]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	4911      	ldr	r1, [pc, #68]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a8:	f7fd fa4e 	bl	8002548 <HAL_GetTick>
 80050ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050b0:	f7fd fa4a 	bl	8002548 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e007      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050c2:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ce:	d1ef      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800

080050e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e022      	b.n	8005138 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7fc fca3 	bl	8001a50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2203      	movs	r2, #3
 800510e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f814 	bl	8005140 <HAL_SD_InitCard>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e00a      	b.n	8005138 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005140:	b5b0      	push	{r4, r5, r7, lr}
 8005142:	b08e      	sub	sp, #56	; 0x38
 8005144:	af04      	add	r7, sp, #16
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800515c:	2376      	movs	r3, #118	; 0x76
 800515e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681d      	ldr	r5, [r3, #0]
 8005164:	466c      	mov	r4, sp
 8005166:	f107 0314 	add.w	r3, r7, #20
 800516a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800516e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005172:	f107 0308 	add.w	r3, r7, #8
 8005176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005178:	4628      	mov	r0, r5
 800517a:	f003 fb19 	bl	80087b0 <SDMMC_Init>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e059      	b.n	8005244 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800519e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f003 fb4d 	bl	8008844 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80051ba:	2002      	movs	r0, #2
 80051bc:	f7fd f9d0 	bl	8002560 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fff1 	bl	80061a8 <SD_PowerON>
 80051c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00b      	beq.n	80051e6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e02e      	b.n	8005244 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 ff12 	bl	8006010 <SD_InitCard>
 80051ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e01b      	b.n	8005244 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005214:	4618      	mov	r0, r3
 8005216:	f003 fba7 	bl	8008968 <SDMMC_CmdBlockLength>
 800521a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00f      	beq.n	8005242 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <HAL_SD_InitCard+0x10c>)
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3728      	adds	r7, #40	; 0x28
 8005248:	46bd      	mov	sp, r7
 800524a:	bdb0      	pop	{r4, r5, r7, pc}
 800524c:	004005ff 	.word	0x004005ff

08005250 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08c      	sub	sp, #48	; 0x30
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0c3      	b.n	8005400 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	f040 80bc 	bne.w	80053fe <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800528c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	441a      	add	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005296:	429a      	cmp	r2, r3
 8005298:	d907      	bls.n	80052aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e0aa      	b.n	8005400 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2203      	movs	r2, #3
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80052c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	4a4e      	ldr	r2, [pc, #312]	; (8005408 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80052d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a4d      	ldr	r2, [pc, #308]	; (800540c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80052d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	2200      	movs	r2, #0
 80052e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3380      	adds	r3, #128	; 0x80
 8005310:	4619      	mov	r1, r3
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	025b      	lsls	r3, r3, #9
 8005318:	089b      	lsrs	r3, r3, #2
 800531a:	f7fe f90f 	bl	800353c <HAL_DMA_Start_IT>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d017      	beq.n	8005354 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005332:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a35      	ldr	r2, [pc, #212]	; (8005410 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e055      	b.n	8005400 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0208 	orr.w	r2, r2, #8
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	2b01      	cmp	r3, #1
 800536a:	d002      	beq.n	8005372 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	025b      	lsls	r3, r3, #9
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005372:	f04f 33ff 	mov.w	r3, #4294967295
 8005376:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	025b      	lsls	r3, r3, #9
 800537c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800537e:	2390      	movs	r3, #144	; 0x90
 8005380:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005382:	2302      	movs	r3, #2
 8005384:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005386:	2300      	movs	r3, #0
 8005388:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800538a:	2301      	movs	r3, #1
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f107 0210 	add.w	r2, r7, #16
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f003 fab9 	bl	8008910 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d90a      	bls.n	80053ba <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2282      	movs	r2, #130	; 0x82
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b0:	4618      	mov	r0, r3
 80053b2:	f003 fb1d 	bl	80089f0 <SDMMC_CmdReadMultiBlock>
 80053b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80053b8:	e009      	b.n	80053ce <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2281      	movs	r2, #129	; 0x81
 80053be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053c6:	4618      	mov	r0, r3
 80053c8:	f003 faf0 	bl	80089ac <SDMMC_CmdReadSingleBlock>
 80053cc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a0d      	ldr	r2, [pc, #52]	; (8005410 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80053da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	431a      	orrs	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e002      	b.n	8005400 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	; 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	08005e1f 	.word	0x08005e1f
 800540c:	08005e91 	.word	0x08005e91
 8005410:	004005ff 	.word	0x004005ff

08005414 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d107      	bne.n	800543c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0c6      	b.n	80055ca <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	f040 80bf 	bne.w	80055c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	441a      	add	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	429a      	cmp	r2, r3
 800545c:	d907      	bls.n	800546e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e0ad      	b.n	80055ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2203      	movs	r2, #3
 8005472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2200      	movs	r2, #0
 800547c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 021a 	orr.w	r2, r2, #26
 800548c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	4a50      	ldr	r2, [pc, #320]	; (80055d4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	4a4f      	ldr	r2, [pc, #316]	; (80055d8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800549c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	2200      	movs	r2, #0
 80054a4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d002      	beq.n	80054b4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	025b      	lsls	r3, r3, #9
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d90a      	bls.n	80054d0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	22a0      	movs	r2, #160	; 0xa0
 80054be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c6:	4618      	mov	r0, r3
 80054c8:	f003 fad6 	bl	8008a78 <SDMMC_CmdWriteMultiBlock>
 80054cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80054ce:	e009      	b.n	80054e4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2290      	movs	r2, #144	; 0x90
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054dc:	4618      	mov	r0, r3
 80054de:	f003 faa9 	bl	8008a34 <SDMMC_CmdWriteSingleBlock>
 80054e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d012      	beq.n	8005510 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3b      	ldr	r2, [pc, #236]	; (80055dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e05c      	b.n	80055ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0208 	orr.w	r2, r2, #8
 800551e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005524:	2240      	movs	r2, #64	; 0x40
 8005526:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3380      	adds	r3, #128	; 0x80
 8005550:	461a      	mov	r2, r3
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	025b      	lsls	r3, r3, #9
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	f7fd fff0 	bl	800353c <HAL_DMA_Start_IT>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01a      	beq.n	8005598 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 021a 	bic.w	r2, r2, #26
 8005570:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e018      	b.n	80055ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005598:	f04f 33ff 	mov.w	r3, #4294967295
 800559c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	025b      	lsls	r3, r3, #9
 80055a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80055a4:	2390      	movs	r3, #144	; 0x90
 80055a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80055b0:	2301      	movs	r3, #1
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f107 0210 	add.w	r2, r7, #16
 80055bc:	4611      	mov	r1, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f003 f9a6 	bl	8008910 <SDMMC_ConfigData>

      return HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e000      	b.n	80055ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3730      	adds	r7, #48	; 0x30
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	08005df5 	.word	0x08005df5
 80055d8:	08005e91 	.word	0x08005e91
 80055dc:	004005ff 	.word	0x004005ff

080055e0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_SD_IRQHandler+0x2e>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 ffed 	bl	80065e6 <SD_Read_IT>
 800560c:	e153      	b.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 808d 	beq.w	8005738 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4ba3      	ldr	r3, [pc, #652]	; (80058c0 <HAL_SD_IRQHandler+0x2e0>)
 8005634:	400b      	ands	r3, r1
 8005636:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d039      	beq.n	80056c6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <HAL_SD_IRQHandler+0x86>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	d011      	beq.n	800568a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f003 fa26 	bl	8008abc <SDMMC_CmdStopTransfer>
 8005670:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f921 	bl	80058cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005692:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <HAL_SD_IRQHandler+0xd6>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f003 fe96 	bl	80093e8 <HAL_SD_RxCpltCallback>
 80056bc:	e0fb      	b.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f003 fe88 	bl	80093d4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80056c4:	e0f7      	b.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80f2 	beq.w	80058b6 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d011      	beq.n	8005700 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f003 f9eb 	bl	8008abc <SDMMC_CmdStopTransfer>
 80056e6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8e6 	bl	80058cc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 80d5 	bne.w	80058b6 <HAL_SD_IRQHandler+0x2d6>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 80cf 	bne.w	80058b6 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0208 	bic.w	r2, r2, #8
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f003 fe4f 	bl	80093d4 <HAL_SD_TxCpltCallback>
}
 8005736:	e0be      	b.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_SD_IRQHandler+0x178>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 ff99 	bl	8006688 <SD_Write_IT>
 8005756:	e0ae      	b.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 80a7 	beq.w	80058b6 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	f043 0202 	orr.w	r2, r3, #2
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	f043 0208 	orr.w	r2, r3, #8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	f043 0220 	orr.w	r2, r3, #32
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	f043 0210 	orr.w	r2, r3, #16
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80057e8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f003 f964 	bl	8008abc <SDMMC_CmdStopTransfer>
 80057f4:	4602      	mov	r2, r0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f857 	bl	80058cc <HAL_SD_ErrorCallback>
}
 800581e:	e04a      	b.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005826:	2b00      	cmp	r3, #0
 8005828:	d045      	beq.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <HAL_SD_IRQHandler+0x25e>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d011      	beq.n	8005862 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <HAL_SD_IRQHandler+0x2e4>)
 8005844:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	4618      	mov	r0, r3
 800584c:	f7fd fed6 	bl	80035fc <HAL_DMA_Abort_IT>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02f      	beq.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fb6a 	bl	8005f34 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005860:	e029      	b.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d104      	bne.n	8005876 <HAL_SD_IRQHandler+0x296>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d011      	beq.n	800589a <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <HAL_SD_IRQHandler+0x2e8>)
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	4618      	mov	r0, r3
 8005884:	f7fd feba 	bl	80035fc <HAL_DMA_Abort_IT>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d013      	beq.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fb85 	bl	8005fa2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005898:	e00d      	b.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f003 fd86 	bl	80093c0 <HAL_SD_AbortCallback>
}
 80058b4:	e7ff      	b.n	80058b6 <HAL_SD_IRQHandler+0x2d6>
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	ffff3ec5 	.word	0xffff3ec5
 80058c4:	08005f35 	.word	0x08005f35
 80058c8:	08005fa3 	.word	0x08005fa3

080058cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ee:	0f9b      	lsrs	r3, r3, #30
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058fa:	0e9b      	lsrs	r3, r3, #26
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	b2da      	uxtb	r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800590c:	0e1b      	lsrs	r3, r3, #24
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	b2da      	uxtb	r2, r3
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	b2da      	uxtb	r2, r3
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	b2da      	uxtb	r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005936:	b2da      	uxtb	r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005940:	0d1b      	lsrs	r3, r3, #20
 8005942:	b29a      	uxth	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800594c:	0c1b      	lsrs	r3, r3, #16
 800594e:	b2db      	uxtb	r3, r3
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	b2da      	uxtb	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800595e:	0bdb      	lsrs	r3, r3, #15
 8005960:	b2db      	uxtb	r3, r3
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005970:	0b9b      	lsrs	r3, r3, #14
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	b2da      	uxtb	r2, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005982:	0b5b      	lsrs	r3, r3, #13
 8005984:	b2db      	uxtb	r3, r3
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	b2da      	uxtb	r2, r3
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005994:	0b1b      	lsrs	r3, r3, #12
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	b2da      	uxtb	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2200      	movs	r2, #0
 80059a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d163      	bne.n	8005a78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b4:	009a      	lsls	r2, r3, #2
 80059b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059ba:	4013      	ands	r3, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80059c0:	0f92      	lsrs	r2, r2, #30
 80059c2:	431a      	orrs	r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059cc:	0edb      	lsrs	r3, r3, #27
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059de:	0e1b      	lsrs	r3, r3, #24
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f0:	0d5b      	lsrs	r3, r3, #21
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a02:	0c9b      	lsrs	r3, r3, #18
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a14:	0bdb      	lsrs	r3, r3, #15
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	7e1b      	ldrb	r3, [r3, #24]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	3302      	adds	r3, #2
 8005a38:	2201      	movs	r2, #1
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005a42:	fb02 f203 	mul.w	r2, r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	7a1b      	ldrb	r3, [r3, #8]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	2201      	movs	r2, #1
 8005a56:	409a      	lsls	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005a64:	0a52      	lsrs	r2, r2, #9
 8005a66:	fb02 f203 	mul.w	r2, r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a74:	661a      	str	r2, [r3, #96]	; 0x60
 8005a76:	e031      	b.n	8005adc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d11d      	bne.n	8005abc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a8e:	0c1b      	lsrs	r3, r3, #16
 8005a90:	431a      	orrs	r2, r3
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	029a      	lsls	r2, r3, #10
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	661a      	str	r2, [r3, #96]	; 0x60
 8005aba:	e00f      	b.n	8005adc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a58      	ldr	r2, [pc, #352]	; (8005c24 <HAL_SD_GetCardCSD+0x344>)
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e09d      	b.n	8005c18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae0:	0b9b      	lsrs	r3, r3, #14
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af2:	09db      	lsrs	r3, r3, #7
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	0fdb      	lsrs	r3, r3, #31
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	0f5b      	lsrs	r3, r3, #29
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	0e9b      	lsrs	r3, r3, #26
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	0d9b      	lsrs	r3, r3, #22
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	0d5b      	lsrs	r3, r3, #21
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	0bdb      	lsrs	r3, r3, #15
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9a:	0b9b      	lsrs	r3, r3, #14
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	0b5b      	lsrs	r3, r3, #13
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	0b1b      	lsrs	r3, r3, #12
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	0a9b      	lsrs	r3, r3, #10
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	085b      	lsrs	r3, r3, #1
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	004005ff 	.word	0x004005ff

08005c28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005c80:	b5b0      	push	{r4, r5, r7, lr}
 8005c82:	b08e      	sub	sp, #56	; 0x38
 8005c84:	af04      	add	r7, sp, #16
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2203      	movs	r2, #3
 8005c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d02e      	beq.n	8005cfe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	d106      	bne.n	8005cb6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8005cb4:	e029      	b.n	8005d0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbc:	d10a      	bne.n	8005cd4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fb28 	bl	8006314 <SD_WideBus_Enable>
 8005cc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
 8005cd2:	e01a      	b.n	8005d0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fb65 	bl	80063aa <SD_WideBus_Disable>
 8005ce0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
 8005cee:	e00c      	b.n	8005d0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8005cfc:	e005      	b.n	8005d0a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00b      	beq.n	8005d2a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a26      	ldr	r2, [pc, #152]	; (8005db0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d28:	e01f      	b.n	8005d6a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681d      	ldr	r5, [r3, #0]
 8005d50:	466c      	mov	r4, sp
 8005d52:	f107 0314 	add.w	r3, r7, #20
 8005d56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d5e:	f107 0308 	add.w	r3, r7, #8
 8005d62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d64:	4628      	mov	r0, r5
 8005d66:	f002 fd23 	bl	80087b0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d72:	4618      	mov	r0, r3
 8005d74:	f002 fdf8 	bl	8008968 <SDMMC_CmdBlockLength>
 8005d78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00c      	beq.n	8005d9a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3728      	adds	r7, #40	; 0x28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bdb0      	pop	{r4, r5, r7, pc}
 8005dae:	bf00      	nop
 8005db0:	004005ff 	.word	0x004005ff

08005db4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005dc0:	f107 030c 	add.w	r3, r7, #12
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa7c 	bl	80062c4 <SD_SendStatus>
 8005dcc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	0a5b      	lsrs	r3, r3, #9
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005dea:	693b      	ldr	r3, [r7, #16]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e10:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	2b82      	cmp	r3, #130	; 0x82
 8005e32:	d111      	bne.n	8005e58 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f002 fe3f 	bl	8008abc <SDMMC_CmdStopTransfer>
 8005e3e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff fd3a 	bl	80058cc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0208 	bic.w	r2, r2, #8
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f003 fab1 	bl	80093e8 <HAL_SD_RxCpltCallback>
#endif
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fd fd58 	bl	8003954 <HAL_DMA_GetError>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d03e      	beq.n	8005f28 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d002      	beq.n	8005ec6 <SD_DMAError+0x36>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d12d      	bne.n	8005f22 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a19      	ldr	r2, [pc, #100]	; (8005f30 <SD_DMAError+0xa0>)
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005edc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005eea:	6978      	ldr	r0, [r7, #20]
 8005eec:	f7ff ff62 	bl	8005db4 <HAL_SD_GetCardState>
 8005ef0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b06      	cmp	r3, #6
 8005ef6:	d002      	beq.n	8005efe <SD_DMAError+0x6e>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b05      	cmp	r3, #5
 8005efc:	d10a      	bne.n	8005f14 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f002 fdda 	bl	8008abc <SDMMC_CmdStopTransfer>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005f22:	6978      	ldr	r0, [r7, #20]
 8005f24:	f7ff fcd2 	bl	80058cc <HAL_SD_ErrorCallback>
#endif
  }
}
 8005f28:	bf00      	nop
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	004005ff 	.word	0x004005ff

08005f34 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7ff ff31 	bl	8005db4 <HAL_SD_GetCardState>
 8005f52:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b06      	cmp	r3, #6
 8005f66:	d002      	beq.n	8005f6e <SD_DMATxAbort+0x3a>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b05      	cmp	r3, #5
 8005f6c:	d10a      	bne.n	8005f84 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f002 fda2 	bl	8008abc <SDMMC_CmdStopTransfer>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f003 fa17 	bl	80093c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005f92:	e002      	b.n	8005f9a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff fc99 	bl	80058cc <HAL_SD_ErrorCallback>
}
 8005f9a:	bf00      	nop
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff fefa 	bl	8005db4 <HAL_SD_GetCardState>
 8005fc0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b06      	cmp	r3, #6
 8005fd4:	d002      	beq.n	8005fdc <SD_DMARxAbort+0x3a>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b05      	cmp	r3, #5
 8005fda:	d10a      	bne.n	8005ff2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f002 fd6b 	bl	8008abc <SDMMC_CmdStopTransfer>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	431a      	orrs	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d103      	bne.n	8006002 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f003 f9e0 	bl	80093c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006000:	e002      	b.n	8006008 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f7ff fc62 	bl	80058cc <HAL_SD_ErrorCallback>
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006010:	b5b0      	push	{r4, r5, r7, lr}
 8006012:	b094      	sub	sp, #80	; 0x50
 8006014:	af04      	add	r7, sp, #16
 8006016:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006018:	2301      	movs	r3, #1
 800601a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f002 fc1d 	bl	8008860 <SDMMC_GetPowerState>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800602c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006030:	e0b6      	b.n	80061a0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006036:	2b03      	cmp	r3, #3
 8006038:	d02f      	beq.n	800609a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f002 fe47 	bl	8008cd2 <SDMMC_CmdSendCID>
 8006044:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <SD_InitCard+0x40>
    {
      return errorstate;
 800604c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604e:	e0a7      	b.n	80061a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f002 fc47 	bl	80088ea <SDMMC_GetResponse>
 800605c:	4602      	mov	r2, r0
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2104      	movs	r1, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f002 fc3e 	bl	80088ea <SDMMC_GetResponse>
 800606e:	4602      	mov	r2, r0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2108      	movs	r1, #8
 800607a:	4618      	mov	r0, r3
 800607c:	f002 fc35 	bl	80088ea <SDMMC_GetResponse>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	210c      	movs	r1, #12
 800608c:	4618      	mov	r0, r3
 800608e:	f002 fc2c 	bl	80088ea <SDMMC_GetResponse>
 8006092:	4602      	mov	r2, r0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d00d      	beq.n	80060be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f107 020e 	add.w	r2, r7, #14
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f002 fe4d 	bl	8008d4c <SDMMC_CmdSetRelAdd>
 80060b2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <SD_InitCard+0xae>
    {
      return errorstate;
 80060ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060bc:	e070      	b.n	80061a0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d036      	beq.n	8006134 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80060c6:	89fb      	ldrh	r3, [r7, #14]
 80060c8:	461a      	mov	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d6:	041b      	lsls	r3, r3, #16
 80060d8:	4619      	mov	r1, r3
 80060da:	4610      	mov	r0, r2
 80060dc:	f002 fe17 	bl	8008d0e <SDMMC_CmdSendCSD>
 80060e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <SD_InitCard+0xdc>
    {
      return errorstate;
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	e059      	b.n	80061a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f002 fbf9 	bl	80088ea <SDMMC_GetResponse>
 80060f8:	4602      	mov	r2, r0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2104      	movs	r1, #4
 8006104:	4618      	mov	r0, r3
 8006106:	f002 fbf0 	bl	80088ea <SDMMC_GetResponse>
 800610a:	4602      	mov	r2, r0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2108      	movs	r1, #8
 8006116:	4618      	mov	r0, r3
 8006118:	f002 fbe7 	bl	80088ea <SDMMC_GetResponse>
 800611c:	4602      	mov	r2, r0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	210c      	movs	r1, #12
 8006128:	4618      	mov	r0, r3
 800612a:	f002 fbde 	bl	80088ea <SDMMC_GetResponse>
 800612e:	4602      	mov	r2, r0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2104      	movs	r1, #4
 800613a:	4618      	mov	r0, r3
 800613c:	f002 fbd5 	bl	80088ea <SDMMC_GetResponse>
 8006140:	4603      	mov	r3, r0
 8006142:	0d1a      	lsrs	r2, r3, #20
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006148:	f107 0310 	add.w	r3, r7, #16
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fbc6 	bl	80058e0 <HAL_SD_GetCardCSD>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800615a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800615e:	e01f      	b.n	80061a0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6819      	ldr	r1, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006168:	041b      	lsls	r3, r3, #16
 800616a:	461a      	mov	r2, r3
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	4608      	mov	r0, r1
 8006172:	f002 fcc5 	bl	8008b00 <SDMMC_CmdSelDesel>
 8006176:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <SD_InitCard+0x172>
  {
    return errorstate;
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	e00e      	b.n	80061a0 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681d      	ldr	r5, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	466c      	mov	r4, sp
 800618a:	f103 0210 	add.w	r2, r3, #16
 800618e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006194:	3304      	adds	r3, #4
 8006196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006198:	4628      	mov	r0, r5
 800619a:	f002 fb09 	bl	80087b0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3740      	adds	r7, #64	; 0x40
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bdb0      	pop	{r4, r5, r7, pc}

080061a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f002 fcc0 	bl	8008b46 <SDMMC_CmdGoIdleState>
 80061c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	e072      	b.n	80062b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f002 fcd3 	bl	8008b82 <SDMMC_CmdOperCond>
 80061dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00d      	beq.n	8006200 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 fca9 	bl	8008b46 <SDMMC_CmdGoIdleState>
 80061f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <SD_PowerON+0x5e>
    {
      return errorstate;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	e05b      	b.n	80062b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620a:	2b01      	cmp	r3, #1
 800620c:	d137      	bne.n	800627e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f002 fcd3 	bl	8008bc0 <SDMMC_CmdAppCommand>
 800621a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d02d      	beq.n	800627e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006222:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006226:	e047      	b.n	80062b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2100      	movs	r1, #0
 800622e:	4618      	mov	r0, r3
 8006230:	f002 fcc6 	bl	8008bc0 <SDMMC_CmdAppCommand>
 8006234:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <SD_PowerON+0x98>
    {
      return errorstate;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	e03b      	b.n	80062b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	491e      	ldr	r1, [pc, #120]	; (80062c0 <SD_PowerON+0x118>)
 8006246:	4618      	mov	r0, r3
 8006248:	f002 fcdc 	bl	8008c04 <SDMMC_CmdAppOperCommand>
 800624c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006254:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006258:	e02e      	b.n	80062b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f002 fb42 	bl	80088ea <SDMMC_GetResponse>
 8006266:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	0fdb      	lsrs	r3, r3, #31
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <SD_PowerON+0xcc>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <SD_PowerON+0xce>
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]

    count++;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	3301      	adds	r3, #1
 800627c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006284:	4293      	cmp	r3, r2
 8006286:	d802      	bhi.n	800628e <SD_PowerON+0xe6>
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0cc      	beq.n	8006228 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006294:	4293      	cmp	r3, r2
 8006296:	d902      	bls.n	800629e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800629c:	e00c      	b.n	80062b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	645a      	str	r2, [r3, #68]	; 0x44
 80062ae:	e002      	b.n	80062b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	c1100000 	.word	0xc1100000

080062c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80062d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062d8:	e018      	b.n	800630c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f002 fd51 	bl	8008d8e <SDMMC_CmdSendStatus>
 80062ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	e009      	b.n	800630c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2100      	movs	r1, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f002 faf3 	bl	80088ea <SDMMC_GetResponse>
 8006304:	4602      	mov	r2, r0
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f002 fadd 	bl	80088ea <SDMMC_GetResponse>
 8006330:	4603      	mov	r3, r0
 8006332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800633a:	d102      	bne.n	8006342 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800633c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006340:	e02f      	b.n	80063a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006342:	f107 030c 	add.w	r3, r7, #12
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f879 	bl	8006440 <SD_FindSCR>
 800634e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	e023      	b.n	80063a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01c      	beq.n	800639e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	041b      	lsls	r3, r3, #16
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f002 fc25 	bl	8008bc0 <SDMMC_CmdAppCommand>
 8006376:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	e00f      	b.n	80063a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2102      	movs	r1, #2
 8006388:	4618      	mov	r0, r3
 800638a:	f002 fc5f 	bl	8008c4c <SDMMC_CmdBusWidth>
 800638e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	e003      	b.n	80063a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800639a:	2300      	movs	r3, #0
 800639c:	e001      	b.n	80063a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800639e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f002 fa92 	bl	80088ea <SDMMC_GetResponse>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063d0:	d102      	bne.n	80063d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80063d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063d6:	e02f      	b.n	8006438 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80063d8:	f107 030c 	add.w	r3, r7, #12
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f82e 	bl	8006440 <SD_FindSCR>
 80063e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	e023      	b.n	8006438 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d01c      	beq.n	8006434 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006402:	041b      	lsls	r3, r3, #16
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f002 fbda 	bl	8008bc0 <SDMMC_CmdAppCommand>
 800640c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	e00f      	b.n	8006438 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2100      	movs	r1, #0
 800641e:	4618      	mov	r0, r3
 8006420:	f002 fc14 	bl	8008c4c <SDMMC_CmdBusWidth>
 8006424:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	e003      	b.n	8006438 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006430:	2300      	movs	r3, #0
 8006432:	e001      	b.n	8006438 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006434:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006440:	b590      	push	{r4, r7, lr}
 8006442:	b08f      	sub	sp, #60	; 0x3c
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800644a:	f7fc f87d 	bl	8002548 <HAL_GetTick>
 800644e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006454:	2300      	movs	r3, #0
 8006456:	60bb      	str	r3, [r7, #8]
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2108      	movs	r1, #8
 8006466:	4618      	mov	r0, r3
 8006468:	f002 fa7e 	bl	8008968 <SDMMC_CmdBlockLength>
 800646c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	e0b2      	b.n	80065de <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	041b      	lsls	r3, r3, #16
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f002 fb9b 	bl	8008bc0 <SDMMC_CmdAppCommand>
 800648a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	e0a3      	b.n	80065de <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006496:	f04f 33ff 	mov.w	r3, #4294967295
 800649a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800649c:	2308      	movs	r3, #8
 800649e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80064a0:	2330      	movs	r3, #48	; 0x30
 80064a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80064a4:	2302      	movs	r3, #2
 80064a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f107 0210 	add.w	r2, r7, #16
 80064b8:	4611      	mov	r1, r2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f002 fa28 	bl	8008910 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f002 fbe3 	bl	8008c90 <SDMMC_CmdSendSCR>
 80064ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d02a      	beq.n	8006528 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	e083      	b.n	80065de <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00f      	beq.n	8006504 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6819      	ldr	r1, [r3, #0]
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	f107 0208 	add.w	r2, r7, #8
 80064f0:	18d4      	adds	r4, r2, r3
 80064f2:	4608      	mov	r0, r1
 80064f4:	f002 f988 	bl	8008808 <SDMMC_ReadFIFO>
 80064f8:	4603      	mov	r3, r0
 80064fa:	6023      	str	r3, [r4, #0]
      index++;
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fe:	3301      	adds	r3, #1
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
 8006502:	e006      	b.n	8006512 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d012      	beq.n	8006538 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006512:	f7fc f819 	bl	8002548 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d102      	bne.n	8006528 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006522:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006526:	e05a      	b.n	80065de <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0cf      	beq.n	80064d6 <SD_FindSCR+0x96>
 8006536:	e000      	b.n	800653a <SD_FindSCR+0xfa>
      break;
 8006538:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2208      	movs	r2, #8
 800654e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006550:	2308      	movs	r3, #8
 8006552:	e044      	b.n	80065de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2202      	movs	r2, #2
 8006568:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800656a:	2302      	movs	r3, #2
 800656c:	e037      	b.n	80065de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2220      	movs	r2, #32
 8006582:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006584:	2320      	movs	r3, #32
 8006586:	e02a      	b.n	80065de <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006590:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	061a      	lsls	r2, r3, #24
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800659e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	0e1b      	lsrs	r3, r3, #24
 80065ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	601a      	str	r2, [r3, #0]
    scr++;
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	3304      	adds	r3, #4
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	061a      	lsls	r2, r3, #24
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	0a1b      	lsrs	r3, r3, #8
 80065cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	373c      	adds	r7, #60	; 0x3c
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd90      	pop	{r4, r7, pc}

080065e6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b086      	sub	sp, #24
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d03f      	beq.n	8006680 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e033      	b.n	800666e <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f002 f8fc 	bl	8008808 <SDMMC_ReadFIFO>
 8006610:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	701a      	strb	r2, [r3, #0]
      tmp++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	3b01      	subs	r3, #1
 8006624:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	b2da      	uxtb	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	3b01      	subs	r3, #1
 800663a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	0c1b      	lsrs	r3, r3, #16
 8006640:	b2da      	uxtb	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3b01      	subs	r3, #1
 8006650:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	0e1b      	lsrs	r3, r3, #24
 8006656:	b2da      	uxtb	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3b01      	subs	r3, #1
 8006666:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	3301      	adds	r3, #1
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b07      	cmp	r3, #7
 8006672:	d9c8      	bls.n	8006606 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006680:	bf00      	nop
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d043      	beq.n	800672a <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e037      	b.n	8006718 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	021a      	lsls	r2, r3, #8
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	041a      	lsls	r2, r3, #16
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	061a      	lsls	r2, r3, #24
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f107 0208 	add.w	r2, r7, #8
 800670a:	4611      	mov	r1, r2
 800670c:	4618      	mov	r0, r3
 800670e:	f002 f888 	bl	8008822 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	3301      	adds	r3, #1
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b07      	cmp	r3, #7
 800671c:	d9c4      	bls.n	80066a8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800672a:	bf00      	nop
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e09d      	b.n	8006880 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d108      	bne.n	800675e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006754:	d009      	beq.n	800676a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	61da      	str	r2, [r3, #28]
 800675c:	e005      	b.n	800676a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fb fac1 	bl	8001d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067aa:	d902      	bls.n	80067b2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	e002      	b.n	80067b8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067c0:	d007      	beq.n	80067d2 <HAL_SPI_Init+0xa0>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067ca:	d002      	beq.n	80067d2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	ea42 0103 	orr.w	r1, r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	f003 0204 	and.w	r2, r3, #4
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800684e:	ea42 0103 	orr.w	r1, r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69da      	ldr	r2, [r3, #28]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800686e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e049      	b.n	800692e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fb fce4 	bl	800227c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f000 fc96 	bl	80071f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	d001      	beq.n	8006950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e054      	b.n	80069fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a26      	ldr	r2, [pc, #152]	; (8006a08 <HAL_TIM_Base_Start_IT+0xd0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d022      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697a:	d01d      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a22      	ldr	r2, [pc, #136]	; (8006a0c <HAL_TIM_Base_Start_IT+0xd4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d018      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a21      	ldr	r2, [pc, #132]	; (8006a10 <HAL_TIM_Base_Start_IT+0xd8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d013      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <HAL_TIM_Base_Start_IT+0xdc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00e      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1e      	ldr	r2, [pc, #120]	; (8006a18 <HAL_TIM_Base_Start_IT+0xe0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d009      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1c      	ldr	r2, [pc, #112]	; (8006a1c <HAL_TIM_Base_Start_IT+0xe4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d004      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1b      	ldr	r2, [pc, #108]	; (8006a20 <HAL_TIM_Base_Start_IT+0xe8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d115      	bne.n	80069e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <HAL_TIM_Base_Start_IT+0xec>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b06      	cmp	r3, #6
 80069c8:	d015      	beq.n	80069f6 <HAL_TIM_Base_Start_IT+0xbe>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d0:	d011      	beq.n	80069f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f042 0201 	orr.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e2:	e008      	b.n	80069f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e000      	b.n	80069f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40010400 	.word	0x40010400
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	40001800 	.word	0x40001800
 8006a24:	00010007 	.word	0x00010007

08006a28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e049      	b.n	8006ace <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fb fbf4 	bl	800223c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f000 fbc6 	bl	80071f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e049      	b.n	8006b7c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d106      	bne.n	8006b02 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7fb fb59 	bl	80021b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f000 fb6f 	bl	80071f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d122      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d11b      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0202 	mvn.w	r2, #2
 8006bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 faf8 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
 8006bcc:	e005      	b.n	8006bda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 faea 	bl	80071a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fafb 	bl	80071d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	d122      	bne.n	8006c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d11b      	bne.n	8006c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0204 	mvn.w	r2, #4
 8006c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 face 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
 8006c20:	e005      	b.n	8006c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fac0 	bl	80071a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fad1 	bl	80071d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d122      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d11b      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f06f 0208 	mvn.w	r2, #8
 8006c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 faa4 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
 8006c74:	e005      	b.n	8006c82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa96 	bl	80071a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 faa7 	bl	80071d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	2b10      	cmp	r3, #16
 8006c94:	d122      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b10      	cmp	r3, #16
 8006ca2:	d11b      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f06f 0210 	mvn.w	r2, #16
 8006cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa7a 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
 8006cc8:	e005      	b.n	8006cd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa6c 	bl	80071a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa7d 	bl	80071d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d10e      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d107      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f06f 0201 	mvn.w	r2, #1
 8006d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fa fe5e 	bl	80019c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d12:	2b80      	cmp	r3, #128	; 0x80
 8006d14:	d10e      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d20:	2b80      	cmp	r3, #128	; 0x80
 8006d22:	d107      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 f836 	bl	8007da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d42:	d10e      	bne.n	8006d62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b80      	cmp	r3, #128	; 0x80
 8006d50:	d107      	bne.n	8006d62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 f829 	bl	8007db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6c:	2b40      	cmp	r3, #64	; 0x40
 8006d6e:	d10e      	bne.n	8006d8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d107      	bne.n	8006d8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fa2b 	bl	80071e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d10e      	bne.n	8006dba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d107      	bne.n	8006dba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f06f 0220 	mvn.w	r2, #32
 8006db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 ffe9 	bl	8007d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b086      	sub	sp, #24
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e088      	b.n	8006ef2 <HAL_TIM_IC_ConfigChannel+0x130>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d11b      	bne.n	8006e26 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6819      	ldr	r1, [r3, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f000 fd8d 	bl	800791c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699a      	ldr	r2, [r3, #24]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 020c 	bic.w	r2, r2, #12
 8006e10:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6999      	ldr	r1, [r3, #24]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	619a      	str	r2, [r3, #24]
 8006e24:	e060      	b.n	8006ee8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d11c      	bne.n	8006e66 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f000 fe11 	bl	8007a62 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e4e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6999      	ldr	r1, [r3, #24]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	021a      	lsls	r2, r3, #8
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	619a      	str	r2, [r3, #24]
 8006e64:	e040      	b.n	8006ee8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d11b      	bne.n	8006ea4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	6819      	ldr	r1, [r3, #0]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f000 fe5e 	bl	8007b3c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69da      	ldr	r2, [r3, #28]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 020c 	bic.w	r2, r2, #12
 8006e8e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	69d9      	ldr	r1, [r3, #28]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	61da      	str	r2, [r3, #28]
 8006ea2:	e021      	b.n	8006ee8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	d11c      	bne.n	8006ee4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f000 fe7b 	bl	8007bb4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ecc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69d9      	ldr	r1, [r3, #28]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	021a      	lsls	r2, r3, #8
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	61da      	str	r2, [r3, #28]
 8006ee2:	e001      	b.n	8006ee8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e0ff      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b14      	cmp	r3, #20
 8006f26:	f200 80f0 	bhi.w	800710a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	0800710b 	.word	0x0800710b
 8006f38:	0800710b 	.word	0x0800710b
 8006f3c:	0800710b 	.word	0x0800710b
 8006f40:	08006fc5 	.word	0x08006fc5
 8006f44:	0800710b 	.word	0x0800710b
 8006f48:	0800710b 	.word	0x0800710b
 8006f4c:	0800710b 	.word	0x0800710b
 8006f50:	08007007 	.word	0x08007007
 8006f54:	0800710b 	.word	0x0800710b
 8006f58:	0800710b 	.word	0x0800710b
 8006f5c:	0800710b 	.word	0x0800710b
 8006f60:	08007047 	.word	0x08007047
 8006f64:	0800710b 	.word	0x0800710b
 8006f68:	0800710b 	.word	0x0800710b
 8006f6c:	0800710b 	.word	0x0800710b
 8006f70:	08007089 	.word	0x08007089
 8006f74:	0800710b 	.word	0x0800710b
 8006f78:	0800710b 	.word	0x0800710b
 8006f7c:	0800710b 	.word	0x0800710b
 8006f80:	080070c9 	.word	0x080070c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 f9d4 	bl	8007338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0208 	orr.w	r2, r2, #8
 8006f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0204 	bic.w	r2, r2, #4
 8006fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6999      	ldr	r1, [r3, #24]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	619a      	str	r2, [r3, #24]
      break;
 8006fc2:	e0a5      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fa26 	bl	800741c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699a      	ldr	r2, [r3, #24]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6999      	ldr	r1, [r3, #24]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	021a      	lsls	r2, r3, #8
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	619a      	str	r2, [r3, #24]
      break;
 8007004:	e084      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fa7d 	bl	800750c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69da      	ldr	r2, [r3, #28]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0208 	orr.w	r2, r2, #8
 8007020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0204 	bic.w	r2, r2, #4
 8007030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69d9      	ldr	r1, [r3, #28]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	61da      	str	r2, [r3, #28]
      break;
 8007044:	e064      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fad3 	bl	80075f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69da      	ldr	r2, [r3, #28]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69d9      	ldr	r1, [r3, #28]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	021a      	lsls	r2, r3, #8
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	61da      	str	r2, [r3, #28]
      break;
 8007086:	e043      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fb0a 	bl	80076a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0208 	orr.w	r2, r2, #8
 80070a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0204 	bic.w	r2, r2, #4
 80070b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070c6:	e023      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fb3c 	bl	800774c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	021a      	lsls	r2, r3, #8
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007108:	e002      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]
      break;
 800710e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop

08007124 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007138:	2302      	movs	r3, #2
 800713a:	e031      	b.n	80071a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fb50 	bl	80077f4 <TIM_SlaveTimer_SetConfig>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e018      	b.n	80071a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800717c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800718c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a40      	ldr	r2, [pc, #256]	; (800730c <TIM_Base_SetConfig+0x114>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d013      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007216:	d00f      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a3d      	ldr	r2, [pc, #244]	; (8007310 <TIM_Base_SetConfig+0x118>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00b      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a3c      	ldr	r2, [pc, #240]	; (8007314 <TIM_Base_SetConfig+0x11c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d007      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a3b      	ldr	r2, [pc, #236]	; (8007318 <TIM_Base_SetConfig+0x120>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d003      	beq.n	8007238 <TIM_Base_SetConfig+0x40>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a3a      	ldr	r2, [pc, #232]	; (800731c <TIM_Base_SetConfig+0x124>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d108      	bne.n	800724a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a2f      	ldr	r2, [pc, #188]	; (800730c <TIM_Base_SetConfig+0x114>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d02b      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007258:	d027      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a2c      	ldr	r2, [pc, #176]	; (8007310 <TIM_Base_SetConfig+0x118>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d023      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a2b      	ldr	r2, [pc, #172]	; (8007314 <TIM_Base_SetConfig+0x11c>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d01f      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a2a      	ldr	r2, [pc, #168]	; (8007318 <TIM_Base_SetConfig+0x120>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01b      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a29      	ldr	r2, [pc, #164]	; (800731c <TIM_Base_SetConfig+0x124>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d017      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a28      	ldr	r2, [pc, #160]	; (8007320 <TIM_Base_SetConfig+0x128>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a27      	ldr	r2, [pc, #156]	; (8007324 <TIM_Base_SetConfig+0x12c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00f      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a26      	ldr	r2, [pc, #152]	; (8007328 <TIM_Base_SetConfig+0x130>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00b      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a25      	ldr	r2, [pc, #148]	; (800732c <TIM_Base_SetConfig+0x134>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d007      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a24      	ldr	r2, [pc, #144]	; (8007330 <TIM_Base_SetConfig+0x138>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d003      	beq.n	80072aa <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a23      	ldr	r2, [pc, #140]	; (8007334 <TIM_Base_SetConfig+0x13c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d108      	bne.n	80072bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a0a      	ldr	r2, [pc, #40]	; (800730c <TIM_Base_SetConfig+0x114>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d003      	beq.n	80072f0 <TIM_Base_SetConfig+0xf8>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a0c      	ldr	r2, [pc, #48]	; (800731c <TIM_Base_SetConfig+0x124>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d103      	bne.n	80072f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	615a      	str	r2, [r3, #20]
}
 80072fe:	bf00      	nop
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40010000 	.word	0x40010000
 8007310:	40000400 	.word	0x40000400
 8007314:	40000800 	.word	0x40000800
 8007318:	40000c00 	.word	0x40000c00
 800731c:	40010400 	.word	0x40010400
 8007320:	40014000 	.word	0x40014000
 8007324:	40014400 	.word	0x40014400
 8007328:	40014800 	.word	0x40014800
 800732c:	40001800 	.word	0x40001800
 8007330:	40001c00 	.word	0x40001c00
 8007334:	40002000 	.word	0x40002000

08007338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0201 	bic.w	r2, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4b2b      	ldr	r3, [pc, #172]	; (8007410 <TIM_OC1_SetConfig+0xd8>)
 8007364:	4013      	ands	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f023 0302 	bic.w	r3, r3, #2
 8007380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a21      	ldr	r2, [pc, #132]	; (8007414 <TIM_OC1_SetConfig+0xdc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d003      	beq.n	800739c <TIM_OC1_SetConfig+0x64>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a20      	ldr	r2, [pc, #128]	; (8007418 <TIM_OC1_SetConfig+0xe0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d10c      	bne.n	80073b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f023 0308 	bic.w	r3, r3, #8
 80073a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f023 0304 	bic.w	r3, r3, #4
 80073b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a16      	ldr	r2, [pc, #88]	; (8007414 <TIM_OC1_SetConfig+0xdc>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d003      	beq.n	80073c6 <TIM_OC1_SetConfig+0x8e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a15      	ldr	r2, [pc, #84]	; (8007418 <TIM_OC1_SetConfig+0xe0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d111      	bne.n	80073ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	621a      	str	r2, [r3, #32]
}
 8007404:	bf00      	nop
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	fffeff8f 	.word	0xfffeff8f
 8007414:	40010000 	.word	0x40010000
 8007418:	40010400 	.word	0x40010400

0800741c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 0210 	bic.w	r2, r3, #16
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4b2e      	ldr	r3, [pc, #184]	; (8007500 <TIM_OC2_SetConfig+0xe4>)
 8007448:	4013      	ands	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f023 0320 	bic.w	r3, r3, #32
 8007466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	011b      	lsls	r3, r3, #4
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a23      	ldr	r2, [pc, #140]	; (8007504 <TIM_OC2_SetConfig+0xe8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d003      	beq.n	8007484 <TIM_OC2_SetConfig+0x68>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a22      	ldr	r2, [pc, #136]	; (8007508 <TIM_OC2_SetConfig+0xec>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d10d      	bne.n	80074a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800748a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800749e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <TIM_OC2_SetConfig+0xe8>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_OC2_SetConfig+0x94>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a17      	ldr	r2, [pc, #92]	; (8007508 <TIM_OC2_SetConfig+0xec>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d113      	bne.n	80074d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	621a      	str	r2, [r3, #32]
}
 80074f2:	bf00      	nop
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	feff8fff 	.word	0xfeff8fff
 8007504:	40010000 	.word	0x40010000
 8007508:	40010400 	.word	0x40010400

0800750c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <TIM_OC3_SetConfig+0xe0>)
 8007538:	4013      	ands	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0303 	bic.w	r3, r3, #3
 8007542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a22      	ldr	r2, [pc, #136]	; (80075f0 <TIM_OC3_SetConfig+0xe4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d003      	beq.n	8007572 <TIM_OC3_SetConfig+0x66>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a21      	ldr	r2, [pc, #132]	; (80075f4 <TIM_OC3_SetConfig+0xe8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d10d      	bne.n	800758e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800758c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a17      	ldr	r2, [pc, #92]	; (80075f0 <TIM_OC3_SetConfig+0xe4>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_OC3_SetConfig+0x92>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a16      	ldr	r2, [pc, #88]	; (80075f4 <TIM_OC3_SetConfig+0xe8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d113      	bne.n	80075c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	621a      	str	r2, [r3, #32]
}
 80075e0:	bf00      	nop
 80075e2:	371c      	adds	r7, #28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	fffeff8f 	.word	0xfffeff8f
 80075f0:	40010000 	.word	0x40010000
 80075f4:	40010400 	.word	0x40010400

080075f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4b1e      	ldr	r3, [pc, #120]	; (800769c <TIM_OC4_SetConfig+0xa4>)
 8007624:	4013      	ands	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800762e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	031b      	lsls	r3, r3, #12
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a13      	ldr	r2, [pc, #76]	; (80076a0 <TIM_OC4_SetConfig+0xa8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_OC4_SetConfig+0x68>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a12      	ldr	r2, [pc, #72]	; (80076a4 <TIM_OC4_SetConfig+0xac>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d109      	bne.n	8007674 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	019b      	lsls	r3, r3, #6
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	621a      	str	r2, [r3, #32]
}
 800768e:	bf00      	nop
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	feff8fff 	.word	0xfeff8fff
 80076a0:	40010000 	.word	0x40010000
 80076a4:	40010400 	.word	0x40010400

080076a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4b1b      	ldr	r3, [pc, #108]	; (8007740 <TIM_OC5_SetConfig+0x98>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	041b      	lsls	r3, r3, #16
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a12      	ldr	r2, [pc, #72]	; (8007744 <TIM_OC5_SetConfig+0x9c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_OC5_SetConfig+0x5e>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a11      	ldr	r2, [pc, #68]	; (8007748 <TIM_OC5_SetConfig+0xa0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d109      	bne.n	800771a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	621a      	str	r2, [r3, #32]
}
 8007734:	bf00      	nop
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	fffeff8f 	.word	0xfffeff8f
 8007744:	40010000 	.word	0x40010000
 8007748:	40010400 	.word	0x40010400

0800774c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4b1c      	ldr	r3, [pc, #112]	; (80077e8 <TIM_OC6_SetConfig+0x9c>)
 8007778:	4013      	ands	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	4313      	orrs	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800778e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	051b      	lsls	r3, r3, #20
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a13      	ldr	r2, [pc, #76]	; (80077ec <TIM_OC6_SetConfig+0xa0>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_OC6_SetConfig+0x60>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <TIM_OC6_SetConfig+0xa4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d109      	bne.n	80077c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	029b      	lsls	r3, r3, #10
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	621a      	str	r2, [r3, #32]
}
 80077da:	bf00      	nop
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	feff8fff 	.word	0xfeff8fff
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40010400 	.word	0x40010400

080077f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007810:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4b3e      	ldr	r3, [pc, #248]	; (8007918 <TIM_SlaveTimer_SetConfig+0x124>)
 8007820:	4013      	ands	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4313      	orrs	r3, r2
 800782c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2b70      	cmp	r3, #112	; 0x70
 800783c:	d01a      	beq.n	8007874 <TIM_SlaveTimer_SetConfig+0x80>
 800783e:	2b70      	cmp	r3, #112	; 0x70
 8007840:	d860      	bhi.n	8007904 <TIM_SlaveTimer_SetConfig+0x110>
 8007842:	2b60      	cmp	r3, #96	; 0x60
 8007844:	d054      	beq.n	80078f0 <TIM_SlaveTimer_SetConfig+0xfc>
 8007846:	2b60      	cmp	r3, #96	; 0x60
 8007848:	d85c      	bhi.n	8007904 <TIM_SlaveTimer_SetConfig+0x110>
 800784a:	2b50      	cmp	r3, #80	; 0x50
 800784c:	d046      	beq.n	80078dc <TIM_SlaveTimer_SetConfig+0xe8>
 800784e:	2b50      	cmp	r3, #80	; 0x50
 8007850:	d858      	bhi.n	8007904 <TIM_SlaveTimer_SetConfig+0x110>
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	d019      	beq.n	800788a <TIM_SlaveTimer_SetConfig+0x96>
 8007856:	2b40      	cmp	r3, #64	; 0x40
 8007858:	d854      	bhi.n	8007904 <TIM_SlaveTimer_SetConfig+0x110>
 800785a:	2b30      	cmp	r3, #48	; 0x30
 800785c:	d055      	beq.n	800790a <TIM_SlaveTimer_SetConfig+0x116>
 800785e:	2b30      	cmp	r3, #48	; 0x30
 8007860:	d850      	bhi.n	8007904 <TIM_SlaveTimer_SetConfig+0x110>
 8007862:	2b20      	cmp	r3, #32
 8007864:	d051      	beq.n	800790a <TIM_SlaveTimer_SetConfig+0x116>
 8007866:	2b20      	cmp	r3, #32
 8007868:	d84c      	bhi.n	8007904 <TIM_SlaveTimer_SetConfig+0x110>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d04d      	beq.n	800790a <TIM_SlaveTimer_SetConfig+0x116>
 800786e:	2b10      	cmp	r3, #16
 8007870:	d04b      	beq.n	800790a <TIM_SlaveTimer_SetConfig+0x116>
 8007872:	e047      	b.n	8007904 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	68d9      	ldr	r1, [r3, #12]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f000 f9d3 	bl	8007c2e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007888:	e040      	b.n	800790c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b05      	cmp	r3, #5
 8007890:	d101      	bne.n	8007896 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e03b      	b.n	800790e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6a1a      	ldr	r2, [r3, #32]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0201 	bic.w	r2, r2, #1
 80078ac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078bc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	621a      	str	r2, [r3, #32]
      break;
 80078da:	e017      	b.n	800790c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6899      	ldr	r1, [r3, #8]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	461a      	mov	r2, r3
 80078ea:	f000 f88b 	bl	8007a04 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80078ee:	e00d      	b.n	800790c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	6899      	ldr	r1, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	461a      	mov	r2, r3
 80078fe:	f000 f8ed 	bl	8007adc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007902:	e003      	b.n	800790c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	e000      	b.n	800790c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800790a:	bf00      	nop
  }

  return status;
 800790c:	7dfb      	ldrb	r3, [r7, #23]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	fffefff8 	.word	0xfffefff8

0800791c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0201 	bic.w	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4a28      	ldr	r2, [pc, #160]	; (80079e8 <TIM_TI1_SetConfig+0xcc>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01b      	beq.n	8007982 <TIM_TI1_SetConfig+0x66>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007950:	d017      	beq.n	8007982 <TIM_TI1_SetConfig+0x66>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4a25      	ldr	r2, [pc, #148]	; (80079ec <TIM_TI1_SetConfig+0xd0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d013      	beq.n	8007982 <TIM_TI1_SetConfig+0x66>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4a24      	ldr	r2, [pc, #144]	; (80079f0 <TIM_TI1_SetConfig+0xd4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00f      	beq.n	8007982 <TIM_TI1_SetConfig+0x66>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a23      	ldr	r2, [pc, #140]	; (80079f4 <TIM_TI1_SetConfig+0xd8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00b      	beq.n	8007982 <TIM_TI1_SetConfig+0x66>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <TIM_TI1_SetConfig+0xdc>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d007      	beq.n	8007982 <TIM_TI1_SetConfig+0x66>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a21      	ldr	r2, [pc, #132]	; (80079fc <TIM_TI1_SetConfig+0xe0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d003      	beq.n	8007982 <TIM_TI1_SetConfig+0x66>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4a20      	ldr	r2, [pc, #128]	; (8007a00 <TIM_TI1_SetConfig+0xe4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d101      	bne.n	8007986 <TIM_TI1_SetConfig+0x6a>
 8007982:	2301      	movs	r3, #1
 8007984:	e000      	b.n	8007988 <TIM_TI1_SetConfig+0x6c>
 8007986:	2300      	movs	r3, #0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	e003      	b.n	80079a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f043 0301 	orr.w	r3, r3, #1
 80079a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f023 030a 	bic.w	r3, r3, #10
 80079c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f003 030a 	and.w	r3, r3, #10
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40010000 	.word	0x40010000
 80079ec:	40000400 	.word	0x40000400
 80079f0:	40000800 	.word	0x40000800
 80079f4:	40000c00 	.word	0x40000c00
 80079f8:	40010400 	.word	0x40010400
 80079fc:	40014000 	.word	0x40014000
 8007a00:	40001800 	.word	0x40001800

08007a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f023 0201 	bic.w	r2, r3, #1
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f023 030a 	bic.w	r3, r3, #10
 8007a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b087      	sub	sp, #28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	607a      	str	r2, [r7, #4]
 8007a6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	f023 0210 	bic.w	r2, r3, #16
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	031b      	lsls	r3, r3, #12
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	621a      	str	r2, [r3, #32]
}
 8007ad0:	bf00      	nop
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	f023 0210 	bic.w	r2, r3, #16
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	031b      	lsls	r3, r3, #12
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	621a      	str	r2, [r3, #32]
}
 8007b30:	bf00      	nop
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f023 0303 	bic.w	r3, r3, #3
 8007b68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007b8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	621a      	str	r2, [r3, #32]
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	031b      	lsls	r3, r3, #12
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	031b      	lsls	r3, r3, #12
 8007c0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b087      	sub	sp, #28
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	021a      	lsls	r2, r3, #8
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	431a      	orrs	r2, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	609a      	str	r2, [r3, #8]
}
 8007c62:	bf00      	nop
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
	...

08007c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e06d      	b.n	8007d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a30      	ldr	r2, [pc, #192]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d004      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a2f      	ldr	r2, [pc, #188]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d108      	bne.n	8007cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a20      	ldr	r2, [pc, #128]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d022      	beq.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cfa:	d01d      	beq.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d018      	beq.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d013      	beq.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1a      	ldr	r2, [pc, #104]	; (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d00e      	beq.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a15      	ldr	r2, [pc, #84]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d009      	beq.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a16      	ldr	r2, [pc, #88]	; (8007d84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d004      	beq.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d10c      	bne.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40010400 	.word	0x40010400
 8007d78:	40000400 	.word	0x40000400
 8007d7c:	40000800 	.word	0x40000800
 8007d80:	40000c00 	.word	0x40000c00
 8007d84:	40014000 	.word	0x40014000
 8007d88:	40001800 	.word	0x40001800

08007d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e040      	b.n	8007e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fa fad4 	bl	8002398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2224      	movs	r2, #36	; 0x24
 8007df4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f8c0 	bl	8007f8c <UART_SetConfig>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e022      	b.n	8007e5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fb16 	bl	8008450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0201 	orr.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fb9d 	bl	8008594 <UART_CheckIdleState>
 8007e5a:	4603      	mov	r3, r0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	; 0x28
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	603b      	str	r3, [r7, #0]
 8007e70:	4613      	mov	r3, r2
 8007e72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	f040 8081 	bne.w	8007f80 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_UART_Transmit+0x26>
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e079      	b.n	8007f82 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_UART_Transmit+0x38>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e072      	b.n	8007f82 <HAL_UART_Transmit+0x11e>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2221      	movs	r2, #33	; 0x21
 8007eb0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eb2:	f7fa fb49 	bl	8002548 <HAL_GetTick>
 8007eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	88fa      	ldrh	r2, [r7, #6]
 8007ebc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	88fa      	ldrh	r2, [r7, #6]
 8007ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed0:	d108      	bne.n	8007ee4 <HAL_UART_Transmit+0x80>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d104      	bne.n	8007ee4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	61bb      	str	r3, [r7, #24]
 8007ee2:	e003      	b.n	8007eec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007ef4:	e02c      	b.n	8007f50 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2200      	movs	r2, #0
 8007efe:	2180      	movs	r1, #128	; 0x80
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fb90 	bl	8008626 <UART_WaitOnFlagUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e038      	b.n	8007f82 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10b      	bne.n	8007f2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	3302      	adds	r3, #2
 8007f2a:	61bb      	str	r3, [r7, #24]
 8007f2c:	e007      	b.n	8007f3e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	781a      	ldrb	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1cc      	bne.n	8007ef6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2200      	movs	r2, #0
 8007f64:	2140      	movs	r1, #64	; 0x40
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fb5d 	bl	8008626 <UART_WaitOnFlagUntilTimeout>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e005      	b.n	8007f82 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e000      	b.n	8007f82 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007f80:	2302      	movs	r3, #2
  }
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4ba7      	ldr	r3, [pc, #668]	; (8008254 <UART_SetConfig+0x2c8>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6812      	ldr	r2, [r2, #0]
 8007fbe:	6979      	ldr	r1, [r7, #20]
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a95      	ldr	r2, [pc, #596]	; (8008258 <UART_SetConfig+0x2cc>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d120      	bne.n	800804a <UART_SetConfig+0xbe>
 8008008:	4b94      	ldr	r3, [pc, #592]	; (800825c <UART_SetConfig+0x2d0>)
 800800a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	2b03      	cmp	r3, #3
 8008014:	d816      	bhi.n	8008044 <UART_SetConfig+0xb8>
 8008016:	a201      	add	r2, pc, #4	; (adr r2, 800801c <UART_SetConfig+0x90>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	0800802d 	.word	0x0800802d
 8008020:	08008039 	.word	0x08008039
 8008024:	08008033 	.word	0x08008033
 8008028:	0800803f 	.word	0x0800803f
 800802c:	2301      	movs	r3, #1
 800802e:	77fb      	strb	r3, [r7, #31]
 8008030:	e14f      	b.n	80082d2 <UART_SetConfig+0x346>
 8008032:	2302      	movs	r3, #2
 8008034:	77fb      	strb	r3, [r7, #31]
 8008036:	e14c      	b.n	80082d2 <UART_SetConfig+0x346>
 8008038:	2304      	movs	r3, #4
 800803a:	77fb      	strb	r3, [r7, #31]
 800803c:	e149      	b.n	80082d2 <UART_SetConfig+0x346>
 800803e:	2308      	movs	r3, #8
 8008040:	77fb      	strb	r3, [r7, #31]
 8008042:	e146      	b.n	80082d2 <UART_SetConfig+0x346>
 8008044:	2310      	movs	r3, #16
 8008046:	77fb      	strb	r3, [r7, #31]
 8008048:	e143      	b.n	80082d2 <UART_SetConfig+0x346>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a84      	ldr	r2, [pc, #528]	; (8008260 <UART_SetConfig+0x2d4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d132      	bne.n	80080ba <UART_SetConfig+0x12e>
 8008054:	4b81      	ldr	r3, [pc, #516]	; (800825c <UART_SetConfig+0x2d0>)
 8008056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800805a:	f003 030c 	and.w	r3, r3, #12
 800805e:	2b0c      	cmp	r3, #12
 8008060:	d828      	bhi.n	80080b4 <UART_SetConfig+0x128>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <UART_SetConfig+0xdc>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	0800809d 	.word	0x0800809d
 800806c:	080080b5 	.word	0x080080b5
 8008070:	080080b5 	.word	0x080080b5
 8008074:	080080b5 	.word	0x080080b5
 8008078:	080080a9 	.word	0x080080a9
 800807c:	080080b5 	.word	0x080080b5
 8008080:	080080b5 	.word	0x080080b5
 8008084:	080080b5 	.word	0x080080b5
 8008088:	080080a3 	.word	0x080080a3
 800808c:	080080b5 	.word	0x080080b5
 8008090:	080080b5 	.word	0x080080b5
 8008094:	080080b5 	.word	0x080080b5
 8008098:	080080af 	.word	0x080080af
 800809c:	2300      	movs	r3, #0
 800809e:	77fb      	strb	r3, [r7, #31]
 80080a0:	e117      	b.n	80082d2 <UART_SetConfig+0x346>
 80080a2:	2302      	movs	r3, #2
 80080a4:	77fb      	strb	r3, [r7, #31]
 80080a6:	e114      	b.n	80082d2 <UART_SetConfig+0x346>
 80080a8:	2304      	movs	r3, #4
 80080aa:	77fb      	strb	r3, [r7, #31]
 80080ac:	e111      	b.n	80082d2 <UART_SetConfig+0x346>
 80080ae:	2308      	movs	r3, #8
 80080b0:	77fb      	strb	r3, [r7, #31]
 80080b2:	e10e      	b.n	80082d2 <UART_SetConfig+0x346>
 80080b4:	2310      	movs	r3, #16
 80080b6:	77fb      	strb	r3, [r7, #31]
 80080b8:	e10b      	b.n	80082d2 <UART_SetConfig+0x346>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a69      	ldr	r2, [pc, #420]	; (8008264 <UART_SetConfig+0x2d8>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d120      	bne.n	8008106 <UART_SetConfig+0x17a>
 80080c4:	4b65      	ldr	r3, [pc, #404]	; (800825c <UART_SetConfig+0x2d0>)
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080ce:	2b30      	cmp	r3, #48	; 0x30
 80080d0:	d013      	beq.n	80080fa <UART_SetConfig+0x16e>
 80080d2:	2b30      	cmp	r3, #48	; 0x30
 80080d4:	d814      	bhi.n	8008100 <UART_SetConfig+0x174>
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d009      	beq.n	80080ee <UART_SetConfig+0x162>
 80080da:	2b20      	cmp	r3, #32
 80080dc:	d810      	bhi.n	8008100 <UART_SetConfig+0x174>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <UART_SetConfig+0x15c>
 80080e2:	2b10      	cmp	r3, #16
 80080e4:	d006      	beq.n	80080f4 <UART_SetConfig+0x168>
 80080e6:	e00b      	b.n	8008100 <UART_SetConfig+0x174>
 80080e8:	2300      	movs	r3, #0
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	e0f1      	b.n	80082d2 <UART_SetConfig+0x346>
 80080ee:	2302      	movs	r3, #2
 80080f0:	77fb      	strb	r3, [r7, #31]
 80080f2:	e0ee      	b.n	80082d2 <UART_SetConfig+0x346>
 80080f4:	2304      	movs	r3, #4
 80080f6:	77fb      	strb	r3, [r7, #31]
 80080f8:	e0eb      	b.n	80082d2 <UART_SetConfig+0x346>
 80080fa:	2308      	movs	r3, #8
 80080fc:	77fb      	strb	r3, [r7, #31]
 80080fe:	e0e8      	b.n	80082d2 <UART_SetConfig+0x346>
 8008100:	2310      	movs	r3, #16
 8008102:	77fb      	strb	r3, [r7, #31]
 8008104:	e0e5      	b.n	80082d2 <UART_SetConfig+0x346>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a57      	ldr	r2, [pc, #348]	; (8008268 <UART_SetConfig+0x2dc>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d120      	bne.n	8008152 <UART_SetConfig+0x1c6>
 8008110:	4b52      	ldr	r3, [pc, #328]	; (800825c <UART_SetConfig+0x2d0>)
 8008112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800811a:	2bc0      	cmp	r3, #192	; 0xc0
 800811c:	d013      	beq.n	8008146 <UART_SetConfig+0x1ba>
 800811e:	2bc0      	cmp	r3, #192	; 0xc0
 8008120:	d814      	bhi.n	800814c <UART_SetConfig+0x1c0>
 8008122:	2b80      	cmp	r3, #128	; 0x80
 8008124:	d009      	beq.n	800813a <UART_SetConfig+0x1ae>
 8008126:	2b80      	cmp	r3, #128	; 0x80
 8008128:	d810      	bhi.n	800814c <UART_SetConfig+0x1c0>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <UART_SetConfig+0x1a8>
 800812e:	2b40      	cmp	r3, #64	; 0x40
 8008130:	d006      	beq.n	8008140 <UART_SetConfig+0x1b4>
 8008132:	e00b      	b.n	800814c <UART_SetConfig+0x1c0>
 8008134:	2300      	movs	r3, #0
 8008136:	77fb      	strb	r3, [r7, #31]
 8008138:	e0cb      	b.n	80082d2 <UART_SetConfig+0x346>
 800813a:	2302      	movs	r3, #2
 800813c:	77fb      	strb	r3, [r7, #31]
 800813e:	e0c8      	b.n	80082d2 <UART_SetConfig+0x346>
 8008140:	2304      	movs	r3, #4
 8008142:	77fb      	strb	r3, [r7, #31]
 8008144:	e0c5      	b.n	80082d2 <UART_SetConfig+0x346>
 8008146:	2308      	movs	r3, #8
 8008148:	77fb      	strb	r3, [r7, #31]
 800814a:	e0c2      	b.n	80082d2 <UART_SetConfig+0x346>
 800814c:	2310      	movs	r3, #16
 800814e:	77fb      	strb	r3, [r7, #31]
 8008150:	e0bf      	b.n	80082d2 <UART_SetConfig+0x346>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a45      	ldr	r2, [pc, #276]	; (800826c <UART_SetConfig+0x2e0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d125      	bne.n	80081a8 <UART_SetConfig+0x21c>
 800815c:	4b3f      	ldr	r3, [pc, #252]	; (800825c <UART_SetConfig+0x2d0>)
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800816a:	d017      	beq.n	800819c <UART_SetConfig+0x210>
 800816c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008170:	d817      	bhi.n	80081a2 <UART_SetConfig+0x216>
 8008172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008176:	d00b      	beq.n	8008190 <UART_SetConfig+0x204>
 8008178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800817c:	d811      	bhi.n	80081a2 <UART_SetConfig+0x216>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <UART_SetConfig+0x1fe>
 8008182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008186:	d006      	beq.n	8008196 <UART_SetConfig+0x20a>
 8008188:	e00b      	b.n	80081a2 <UART_SetConfig+0x216>
 800818a:	2300      	movs	r3, #0
 800818c:	77fb      	strb	r3, [r7, #31]
 800818e:	e0a0      	b.n	80082d2 <UART_SetConfig+0x346>
 8008190:	2302      	movs	r3, #2
 8008192:	77fb      	strb	r3, [r7, #31]
 8008194:	e09d      	b.n	80082d2 <UART_SetConfig+0x346>
 8008196:	2304      	movs	r3, #4
 8008198:	77fb      	strb	r3, [r7, #31]
 800819a:	e09a      	b.n	80082d2 <UART_SetConfig+0x346>
 800819c:	2308      	movs	r3, #8
 800819e:	77fb      	strb	r3, [r7, #31]
 80081a0:	e097      	b.n	80082d2 <UART_SetConfig+0x346>
 80081a2:	2310      	movs	r3, #16
 80081a4:	77fb      	strb	r3, [r7, #31]
 80081a6:	e094      	b.n	80082d2 <UART_SetConfig+0x346>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a30      	ldr	r2, [pc, #192]	; (8008270 <UART_SetConfig+0x2e4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d125      	bne.n	80081fe <UART_SetConfig+0x272>
 80081b2:	4b2a      	ldr	r3, [pc, #168]	; (800825c <UART_SetConfig+0x2d0>)
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081c0:	d017      	beq.n	80081f2 <UART_SetConfig+0x266>
 80081c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081c6:	d817      	bhi.n	80081f8 <UART_SetConfig+0x26c>
 80081c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081cc:	d00b      	beq.n	80081e6 <UART_SetConfig+0x25a>
 80081ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d2:	d811      	bhi.n	80081f8 <UART_SetConfig+0x26c>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <UART_SetConfig+0x254>
 80081d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081dc:	d006      	beq.n	80081ec <UART_SetConfig+0x260>
 80081de:	e00b      	b.n	80081f8 <UART_SetConfig+0x26c>
 80081e0:	2301      	movs	r3, #1
 80081e2:	77fb      	strb	r3, [r7, #31]
 80081e4:	e075      	b.n	80082d2 <UART_SetConfig+0x346>
 80081e6:	2302      	movs	r3, #2
 80081e8:	77fb      	strb	r3, [r7, #31]
 80081ea:	e072      	b.n	80082d2 <UART_SetConfig+0x346>
 80081ec:	2304      	movs	r3, #4
 80081ee:	77fb      	strb	r3, [r7, #31]
 80081f0:	e06f      	b.n	80082d2 <UART_SetConfig+0x346>
 80081f2:	2308      	movs	r3, #8
 80081f4:	77fb      	strb	r3, [r7, #31]
 80081f6:	e06c      	b.n	80082d2 <UART_SetConfig+0x346>
 80081f8:	2310      	movs	r3, #16
 80081fa:	77fb      	strb	r3, [r7, #31]
 80081fc:	e069      	b.n	80082d2 <UART_SetConfig+0x346>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a1c      	ldr	r2, [pc, #112]	; (8008274 <UART_SetConfig+0x2e8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d137      	bne.n	8008278 <UART_SetConfig+0x2ec>
 8008208:	4b14      	ldr	r3, [pc, #80]	; (800825c <UART_SetConfig+0x2d0>)
 800820a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008212:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008216:	d017      	beq.n	8008248 <UART_SetConfig+0x2bc>
 8008218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800821c:	d817      	bhi.n	800824e <UART_SetConfig+0x2c2>
 800821e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008222:	d00b      	beq.n	800823c <UART_SetConfig+0x2b0>
 8008224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008228:	d811      	bhi.n	800824e <UART_SetConfig+0x2c2>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <UART_SetConfig+0x2aa>
 800822e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008232:	d006      	beq.n	8008242 <UART_SetConfig+0x2b6>
 8008234:	e00b      	b.n	800824e <UART_SetConfig+0x2c2>
 8008236:	2300      	movs	r3, #0
 8008238:	77fb      	strb	r3, [r7, #31]
 800823a:	e04a      	b.n	80082d2 <UART_SetConfig+0x346>
 800823c:	2302      	movs	r3, #2
 800823e:	77fb      	strb	r3, [r7, #31]
 8008240:	e047      	b.n	80082d2 <UART_SetConfig+0x346>
 8008242:	2304      	movs	r3, #4
 8008244:	77fb      	strb	r3, [r7, #31]
 8008246:	e044      	b.n	80082d2 <UART_SetConfig+0x346>
 8008248:	2308      	movs	r3, #8
 800824a:	77fb      	strb	r3, [r7, #31]
 800824c:	e041      	b.n	80082d2 <UART_SetConfig+0x346>
 800824e:	2310      	movs	r3, #16
 8008250:	77fb      	strb	r3, [r7, #31]
 8008252:	e03e      	b.n	80082d2 <UART_SetConfig+0x346>
 8008254:	efff69f3 	.word	0xefff69f3
 8008258:	40011000 	.word	0x40011000
 800825c:	40023800 	.word	0x40023800
 8008260:	40004400 	.word	0x40004400
 8008264:	40004800 	.word	0x40004800
 8008268:	40004c00 	.word	0x40004c00
 800826c:	40005000 	.word	0x40005000
 8008270:	40011400 	.word	0x40011400
 8008274:	40007800 	.word	0x40007800
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a71      	ldr	r2, [pc, #452]	; (8008444 <UART_SetConfig+0x4b8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d125      	bne.n	80082ce <UART_SetConfig+0x342>
 8008282:	4b71      	ldr	r3, [pc, #452]	; (8008448 <UART_SetConfig+0x4bc>)
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800828c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008290:	d017      	beq.n	80082c2 <UART_SetConfig+0x336>
 8008292:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008296:	d817      	bhi.n	80082c8 <UART_SetConfig+0x33c>
 8008298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800829c:	d00b      	beq.n	80082b6 <UART_SetConfig+0x32a>
 800829e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a2:	d811      	bhi.n	80082c8 <UART_SetConfig+0x33c>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <UART_SetConfig+0x324>
 80082a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082ac:	d006      	beq.n	80082bc <UART_SetConfig+0x330>
 80082ae:	e00b      	b.n	80082c8 <UART_SetConfig+0x33c>
 80082b0:	2300      	movs	r3, #0
 80082b2:	77fb      	strb	r3, [r7, #31]
 80082b4:	e00d      	b.n	80082d2 <UART_SetConfig+0x346>
 80082b6:	2302      	movs	r3, #2
 80082b8:	77fb      	strb	r3, [r7, #31]
 80082ba:	e00a      	b.n	80082d2 <UART_SetConfig+0x346>
 80082bc:	2304      	movs	r3, #4
 80082be:	77fb      	strb	r3, [r7, #31]
 80082c0:	e007      	b.n	80082d2 <UART_SetConfig+0x346>
 80082c2:	2308      	movs	r3, #8
 80082c4:	77fb      	strb	r3, [r7, #31]
 80082c6:	e004      	b.n	80082d2 <UART_SetConfig+0x346>
 80082c8:	2310      	movs	r3, #16
 80082ca:	77fb      	strb	r3, [r7, #31]
 80082cc:	e001      	b.n	80082d2 <UART_SetConfig+0x346>
 80082ce:	2310      	movs	r3, #16
 80082d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082da:	d15a      	bne.n	8008392 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80082dc:	7ffb      	ldrb	r3, [r7, #31]
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d827      	bhi.n	8008332 <UART_SetConfig+0x3a6>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <UART_SetConfig+0x35c>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	0800830d 	.word	0x0800830d
 80082ec:	08008315 	.word	0x08008315
 80082f0:	0800831d 	.word	0x0800831d
 80082f4:	08008333 	.word	0x08008333
 80082f8:	08008323 	.word	0x08008323
 80082fc:	08008333 	.word	0x08008333
 8008300:	08008333 	.word	0x08008333
 8008304:	08008333 	.word	0x08008333
 8008308:	0800832b 	.word	0x0800832b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800830c:	f7fc fa98 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8008310:	61b8      	str	r0, [r7, #24]
        break;
 8008312:	e013      	b.n	800833c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008314:	f7fc faa8 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8008318:	61b8      	str	r0, [r7, #24]
        break;
 800831a:	e00f      	b.n	800833c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800831c:	4b4b      	ldr	r3, [pc, #300]	; (800844c <UART_SetConfig+0x4c0>)
 800831e:	61bb      	str	r3, [r7, #24]
        break;
 8008320:	e00c      	b.n	800833c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008322:	f7fc f9cb 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 8008326:	61b8      	str	r0, [r7, #24]
        break;
 8008328:	e008      	b.n	800833c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800832a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800832e:	61bb      	str	r3, [r7, #24]
        break;
 8008330:	e004      	b.n	800833c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008332:	2300      	movs	r3, #0
 8008334:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	77bb      	strb	r3, [r7, #30]
        break;
 800833a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d074      	beq.n	800842c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	005a      	lsls	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	085b      	lsrs	r3, r3, #1
 800834c:	441a      	add	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	fbb2 f3f3 	udiv	r3, r2, r3
 8008356:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2b0f      	cmp	r3, #15
 800835c:	d916      	bls.n	800838c <UART_SetConfig+0x400>
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008364:	d212      	bcs.n	800838c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f023 030f 	bic.w	r3, r3, #15
 800836e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	b29b      	uxth	r3, r3
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	b29a      	uxth	r2, r3
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	4313      	orrs	r3, r2
 8008380:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	89fa      	ldrh	r2, [r7, #14]
 8008388:	60da      	str	r2, [r3, #12]
 800838a:	e04f      	b.n	800842c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	77bb      	strb	r3, [r7, #30]
 8008390:	e04c      	b.n	800842c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008392:	7ffb      	ldrb	r3, [r7, #31]
 8008394:	2b08      	cmp	r3, #8
 8008396:	d828      	bhi.n	80083ea <UART_SetConfig+0x45e>
 8008398:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <UART_SetConfig+0x414>)
 800839a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839e:	bf00      	nop
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	080083eb 	.word	0x080083eb
 80083b0:	080083db 	.word	0x080083db
 80083b4:	080083eb 	.word	0x080083eb
 80083b8:	080083eb 	.word	0x080083eb
 80083bc:	080083eb 	.word	0x080083eb
 80083c0:	080083e3 	.word	0x080083e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c4:	f7fc fa3c 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80083c8:	61b8      	str	r0, [r7, #24]
        break;
 80083ca:	e013      	b.n	80083f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083cc:	f7fc fa4c 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 80083d0:	61b8      	str	r0, [r7, #24]
        break;
 80083d2:	e00f      	b.n	80083f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083d4:	4b1d      	ldr	r3, [pc, #116]	; (800844c <UART_SetConfig+0x4c0>)
 80083d6:	61bb      	str	r3, [r7, #24]
        break;
 80083d8:	e00c      	b.n	80083f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083da:	f7fc f96f 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 80083de:	61b8      	str	r0, [r7, #24]
        break;
 80083e0:	e008      	b.n	80083f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083e6:	61bb      	str	r3, [r7, #24]
        break;
 80083e8:	e004      	b.n	80083f4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	77bb      	strb	r3, [r7, #30]
        break;
 80083f2:	bf00      	nop
    }

    if (pclk != 0U)
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d018      	beq.n	800842c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	085a      	lsrs	r2, r3, #1
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	441a      	add	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b0f      	cmp	r3, #15
 8008412:	d909      	bls.n	8008428 <UART_SetConfig+0x49c>
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800841a:	d205      	bcs.n	8008428 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	b29a      	uxth	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60da      	str	r2, [r3, #12]
 8008426:	e001      	b.n	800842c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008438:	7fbb      	ldrb	r3, [r7, #30]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	40007c00 	.word	0x40007c00
 8008448:	40023800 	.word	0x40023800
 800844c:	00f42400 	.word	0x00f42400

08008450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	f003 0308 	and.w	r3, r3, #8
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	f003 0310 	and.w	r3, r3, #16
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01a      	beq.n	8008566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800854e:	d10a      	bne.n	8008566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	605a      	str	r2, [r3, #4]
  }
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085a4:	f7f9 ffd0 	bl	8002548 <HAL_GetTick>
 80085a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d10e      	bne.n	80085d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f82d 	bl	8008626 <UART_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e023      	b.n	800861e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b04      	cmp	r3, #4
 80085e2:	d10e      	bne.n	8008602 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f817 	bl	8008626 <UART_WaitOnFlagUntilTimeout>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e00d      	b.n	800861e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2220      	movs	r2, #32
 800860c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b09c      	sub	sp, #112	; 0x70
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	603b      	str	r3, [r7, #0]
 8008632:	4613      	mov	r3, r2
 8008634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008636:	e0a5      	b.n	8008784 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863e:	f000 80a1 	beq.w	8008784 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008642:	f7f9 ff81 	bl	8002548 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <UART_WaitOnFlagUntilTimeout+0x32>
 8008652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008654:	2b00      	cmp	r3, #0
 8008656:	d13e      	bne.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008668:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800866c:	667b      	str	r3, [r7, #100]	; 0x64
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008678:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800867c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e6      	bne.n	8008658 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	f023 0301 	bic.w	r3, r3, #1
 80086a0:	663b      	str	r3, [r7, #96]	; 0x60
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80086ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e5      	bne.n	800868a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2220      	movs	r2, #32
 80086c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e067      	b.n	80087a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d04f      	beq.n	8008784 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086f2:	d147      	bne.n	8008784 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871c:	637b      	str	r3, [r7, #52]	; 0x34
 800871e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e6      	bne.n	80086fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3308      	adds	r3, #8
 8008736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	613b      	str	r3, [r7, #16]
   return(result);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	66bb      	str	r3, [r7, #104]	; 0x68
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3308      	adds	r3, #8
 800874e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008750:	623a      	str	r2, [r7, #32]
 8008752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	69f9      	ldr	r1, [r7, #28]
 8008756:	6a3a      	ldr	r2, [r7, #32]
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	61bb      	str	r3, [r7, #24]
   return(result);
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e5      	bne.n	8008730 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2220      	movs	r2, #32
 8008768:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2220      	movs	r2, #32
 800876e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2220      	movs	r2, #32
 8008774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e010      	b.n	80087a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69da      	ldr	r2, [r3, #28]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	4013      	ands	r3, r2
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	429a      	cmp	r2, r3
 8008792:	bf0c      	ite	eq
 8008794:	2301      	moveq	r3, #1
 8008796:	2300      	movne	r3, #0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	461a      	mov	r2, r3
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	429a      	cmp	r2, r3
 80087a0:	f43f af4a 	beq.w	8008638 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3770      	adds	r7, #112	; 0x70
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80087b0:	b084      	sub	sp, #16
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	f107 001c 	add.w	r0, r7, #28
 80087be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80087c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80087c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80087ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80087ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80087d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80087d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80087da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <SDMMC_Init+0x54>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	431a      	orrs	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	b004      	add	sp, #16
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	ffff8100 	.word	0xffff8100

08008808 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2203      	movs	r2, #3
 8008850:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0303 	and.w	r3, r3, #3
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800889a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80088a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80088a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	4b06      	ldr	r3, [pc, #24]	; (80088cc <SDMMC_SendCommand+0x50>)
 80088b4:	4013      	ands	r3, r2
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	fffff000 	.word	0xfffff000

080088d0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	b2db      	uxtb	r3, r3
}
 80088de:	4618      	mov	r0, r3
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b085      	sub	sp, #20
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3314      	adds	r3, #20
 80088f8:	461a      	mov	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	4413      	add	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
}  
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008936:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800893c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008942:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	431a      	orrs	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800895a:	2300      	movs	r3, #0

}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008976:	2310      	movs	r3, #16
 8008978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800897a:	2340      	movs	r3, #64	; 0x40
 800897c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008986:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008988:	f107 0308 	add.w	r3, r7, #8
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff ff74 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008994:	f241 3288 	movw	r2, #5000	; 0x1388
 8008998:	2110      	movs	r1, #16
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fa1a 	bl	8008dd4 <SDMMC_GetCmdResp1>
 80089a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089a2:	69fb      	ldr	r3, [r7, #28]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80089ba:	2311      	movs	r3, #17
 80089bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089be:	2340      	movs	r3, #64	; 0x40
 80089c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089cc:	f107 0308 	add.w	r3, r7, #8
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff ff52 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80089d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089dc:	2111      	movs	r1, #17
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f9f8 	bl	8008dd4 <SDMMC_GetCmdResp1>
 80089e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089e6:	69fb      	ldr	r3, [r7, #28]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3720      	adds	r7, #32
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80089fe:	2312      	movs	r3, #18
 8008a00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a02:	2340      	movs	r3, #64	; 0x40
 8008a04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a06:	2300      	movs	r3, #0
 8008a08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a10:	f107 0308 	add.w	r3, r7, #8
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff ff30 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a20:	2112      	movs	r1, #18
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f9d6 	bl	8008dd4 <SDMMC_GetCmdResp1>
 8008a28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a2a:	69fb      	ldr	r3, [r7, #28]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3720      	adds	r7, #32
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008a42:	2318      	movs	r3, #24
 8008a44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a46:	2340      	movs	r3, #64	; 0x40
 8008a48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a54:	f107 0308 	add.w	r3, r7, #8
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7ff ff0e 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a64:	2118      	movs	r1, #24
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f9b4 	bl	8008dd4 <SDMMC_GetCmdResp1>
 8008a6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008a86:	2319      	movs	r3, #25
 8008a88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a8a:	2340      	movs	r3, #64	; 0x40
 8008a8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a98:	f107 0308 	add.w	r3, r7, #8
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7ff feec 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aa8:	2119      	movs	r1, #25
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f992 	bl	8008dd4 <SDMMC_GetCmdResp1>
 8008ab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3720      	adds	r7, #32
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ac8:	230c      	movs	r3, #12
 8008aca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008acc:	2340      	movs	r3, #64	; 0x40
 8008ace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ad8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ada:	f107 0308 	add.w	r3, r7, #8
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff fecb 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008ae6:	4a05      	ldr	r2, [pc, #20]	; (8008afc <SDMMC_CmdStopTransfer+0x40>)
 8008ae8:	210c      	movs	r1, #12
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f972 	bl	8008dd4 <SDMMC_GetCmdResp1>
 8008af0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008af2:	69fb      	ldr	r3, [r7, #28]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3720      	adds	r7, #32
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	05f5e100 	.word	0x05f5e100

08008b00 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08a      	sub	sp, #40	; 0x28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008b10:	2307      	movs	r3, #7
 8008b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b14:	2340      	movs	r3, #64	; 0x40
 8008b16:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b20:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b22:	f107 0310 	add.w	r3, r7, #16
 8008b26:	4619      	mov	r1, r3
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f7ff fea7 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b32:	2107      	movs	r1, #7
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 f94d 	bl	8008dd4 <SDMMC_GetCmdResp1>
 8008b3a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3728      	adds	r7, #40	; 0x28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b088      	sub	sp, #32
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008b56:	2300      	movs	r3, #0
 8008b58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b64:	f107 0308 	add.w	r3, r7, #8
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff fe86 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fb67 	bl	8009244 <SDMMC_GetCmdError>
 8008b76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b78:	69fb      	ldr	r3, [r7, #28]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3720      	adds	r7, #32
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b088      	sub	sp, #32
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008b8a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008b8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008b90:	2308      	movs	r3, #8
 8008b92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b94:	2340      	movs	r3, #64	; 0x40
 8008b96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ba0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ba2:	f107 0308 	add.w	r3, r7, #8
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff fe67 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fafa 	bl	80091a8 <SDMMC_GetCmdResp7>
 8008bb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3720      	adds	r7, #32
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008bce:	2337      	movs	r3, #55	; 0x37
 8008bd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008be0:	f107 0308 	add.w	r3, r7, #8
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff fe48 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf0:	2137      	movs	r1, #55	; 0x37
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f8ee 	bl	8008dd4 <SDMMC_GetCmdResp1>
 8008bf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3720      	adds	r7, #32
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <SDMMC_CmdAppOperCommand+0x44>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008c16:	2329      	movs	r3, #41	; 0x29
 8008c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c1a:	2340      	movs	r3, #64	; 0x40
 8008c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c28:	f107 0308 	add.w	r3, r7, #8
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff fe24 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fa03 	bl	8009040 <SDMMC_GetCmdResp3>
 8008c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3720      	adds	r7, #32
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	80100000 	.word	0x80100000

08008c4c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008c5a:	2306      	movs	r3, #6
 8008c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c5e:	2340      	movs	r3, #64	; 0x40
 8008c60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c62:	2300      	movs	r3, #0
 8008c64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c6c:	f107 0308 	add.w	r3, r7, #8
 8008c70:	4619      	mov	r1, r3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff fe02 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c7c:	2106      	movs	r1, #6
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f8a8 	bl	8008dd4 <SDMMC_GetCmdResp1>
 8008c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c86:	69fb      	ldr	r3, [r7, #28]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3720      	adds	r7, #32
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008c9c:	2333      	movs	r3, #51	; 0x33
 8008c9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ca0:	2340      	movs	r3, #64	; 0x40
 8008ca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cae:	f107 0308 	add.w	r3, r7, #8
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff fde1 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbe:	2133      	movs	r1, #51	; 0x33
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f887 	bl	8008dd4 <SDMMC_GetCmdResp1>
 8008cc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3720      	adds	r7, #32
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b088      	sub	sp, #32
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008ce2:	23c0      	movs	r3, #192	; 0xc0
 8008ce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cf0:	f107 0308 	add.w	r3, r7, #8
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff fdc0 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f957 	bl	8008fb0 <SDMMC_GetCmdResp2>
 8008d02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d04:	69fb      	ldr	r3, [r7, #28]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b088      	sub	sp, #32
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008d1c:	2309      	movs	r3, #9
 8008d1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008d20:	23c0      	movs	r3, #192	; 0xc0
 8008d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff fda1 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f938 	bl	8008fb0 <SDMMC_GetCmdResp2>
 8008d40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d42:	69fb      	ldr	r3, [r7, #28]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d5e:	2340      	movs	r3, #64	; 0x40
 8008d60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d62:	2300      	movs	r3, #0
 8008d64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d6c:	f107 0308 	add.w	r3, r7, #8
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fd82 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	2103      	movs	r1, #3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f99d 	bl	80090bc <SDMMC_GetCmdResp6>
 8008d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d84:	69fb      	ldr	r3, [r7, #28]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3720      	adds	r7, #32
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b088      	sub	sp, #32
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008d9c:	230d      	movs	r3, #13
 8008d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fd61 	bl	800887c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dbe:	210d      	movs	r1, #13
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f807 	bl	8008dd4 <SDMMC_GetCmdResp1>
 8008dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008de2:	4b70      	ldr	r3, [pc, #448]	; (8008fa4 <SDMMC_GetCmdResp1+0x1d0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a70      	ldr	r2, [pc, #448]	; (8008fa8 <SDMMC_GetCmdResp1+0x1d4>)
 8008de8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dec:	0a5a      	lsrs	r2, r3, #9
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	fb02 f303 	mul.w	r3, r2, r3
 8008df4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	61fa      	str	r2, [r7, #28]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e04:	e0c9      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0ef      	beq.n	8008df6 <SDMMC_GetCmdResp1+0x22>
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1ea      	bne.n	8008df6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e32:	2304      	movs	r3, #4
 8008e34:	e0b1      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d004      	beq.n	8008e4c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e0a6      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	22c5      	movs	r2, #197	; 0xc5
 8008e50:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f7ff fd3c 	bl	80088d0 <SDMMC_GetCommandResponse>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	7afb      	ldrb	r3, [r7, #11]
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d001      	beq.n	8008e66 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e099      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008e66:	2100      	movs	r1, #0
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff fd3e 	bl	80088ea <SDMMC_GetResponse>
 8008e6e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	4b4e      	ldr	r3, [pc, #312]	; (8008fac <SDMMC_GetCmdResp1+0x1d8>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e08d      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	da02      	bge.n	8008e8a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e88:	e087      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008e94:	2340      	movs	r3, #64	; 0x40
 8008e96:	e080      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008ea2:	2380      	movs	r3, #128	; 0x80
 8008ea4:	e079      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eb4:	e071      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ec4:	e069      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ed4:	e061      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ee4:	e059      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ef4:	e051      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f04:	e049      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f14:	e041      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f24:	e039      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f34:	e031      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008f40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f44:	e029      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008f50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f54:	e021      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008f60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f64:	e019      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f74:	e011      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008f84:	e009      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f003 0308 	and.w	r3, r3, #8
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008f90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008f94:	e001      	b.n	8008f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000000 	.word	0x20000000
 8008fa8:	10624dd3 	.word	0x10624dd3
 8008fac:	fdffe008 	.word	0xfdffe008

08008fb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fb8:	4b1f      	ldr	r3, [pc, #124]	; (8009038 <SDMMC_GetCmdResp2+0x88>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a1f      	ldr	r2, [pc, #124]	; (800903c <SDMMC_GetCmdResp2+0x8c>)
 8008fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc2:	0a5b      	lsrs	r3, r3, #9
 8008fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc8:	fb02 f303 	mul.w	r3, r2, r3
 8008fcc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	1e5a      	subs	r2, r3, #1
 8008fd2:	60fa      	str	r2, [r7, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fdc:	e026      	b.n	800902c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0ef      	beq.n	8008fce <SDMMC_GetCmdResp2+0x1e>
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1ea      	bne.n	8008fce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d004      	beq.n	800900e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2204      	movs	r2, #4
 8009008:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800900a:	2304      	movs	r3, #4
 800900c:	e00e      	b.n	800902c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009020:	2301      	movs	r3, #1
 8009022:	e003      	b.n	800902c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	22c5      	movs	r2, #197	; 0xc5
 8009028:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	20000000 	.word	0x20000000
 800903c:	10624dd3 	.word	0x10624dd3

08009040 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009048:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <SDMMC_GetCmdResp3+0x74>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1a      	ldr	r2, [pc, #104]	; (80090b8 <SDMMC_GetCmdResp3+0x78>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	0a5b      	lsrs	r3, r3, #9
 8009054:	f241 3288 	movw	r2, #5000	; 0x1388
 8009058:	fb02 f303 	mul.w	r3, r2, r3
 800905c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	1e5a      	subs	r2, r3, #1
 8009062:	60fa      	str	r2, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800906c:	e01b      	b.n	80090a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009072:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0ef      	beq.n	800905e <SDMMC_GetCmdResp3+0x1e>
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1ea      	bne.n	800905e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d004      	beq.n	800909e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2204      	movs	r2, #4
 8009098:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800909a:	2304      	movs	r3, #4
 800909c:	e003      	b.n	80090a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	22c5      	movs	r2, #197	; 0xc5
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	20000000 	.word	0x20000000
 80090b8:	10624dd3 	.word	0x10624dd3

080090bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	460b      	mov	r3, r1
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090ca:	4b35      	ldr	r3, [pc, #212]	; (80091a0 <SDMMC_GetCmdResp6+0xe4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a35      	ldr	r2, [pc, #212]	; (80091a4 <SDMMC_GetCmdResp6+0xe8>)
 80090d0:	fba2 2303 	umull	r2, r3, r2, r3
 80090d4:	0a5b      	lsrs	r3, r3, #9
 80090d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090da:	fb02 f303 	mul.w	r3, r2, r3
 80090de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	1e5a      	subs	r2, r3, #1
 80090e4:	61fa      	str	r2, [r7, #28]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090ee:	e052      	b.n	8009196 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0ef      	beq.n	80090e0 <SDMMC_GetCmdResp6+0x24>
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1ea      	bne.n	80090e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	2b00      	cmp	r3, #0
 8009114:	d004      	beq.n	8009120 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2204      	movs	r2, #4
 800911a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800911c:	2304      	movs	r3, #4
 800911e:	e03a      	b.n	8009196 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2201      	movs	r2, #1
 8009130:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009132:	2301      	movs	r3, #1
 8009134:	e02f      	b.n	8009196 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f7ff fbca 	bl	80088d0 <SDMMC_GetCommandResponse>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	4293      	cmp	r3, r2
 8009144:	d001      	beq.n	800914a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009146:	2301      	movs	r3, #1
 8009148:	e025      	b.n	8009196 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	22c5      	movs	r2, #197	; 0xc5
 800914e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009150:	2100      	movs	r1, #0
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f7ff fbc9 	bl	80088ea <SDMMC_GetResponse>
 8009158:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	0c1b      	lsrs	r3, r3, #16
 8009168:	b29a      	uxth	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800916e:	2300      	movs	r3, #0
 8009170:	e011      	b.n	8009196 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800917c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009180:	e009      	b.n	8009196 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800918c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009190:	e001      	b.n	8009196 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009196:	4618      	mov	r0, r3
 8009198:	3720      	adds	r7, #32
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	20000000 	.word	0x20000000
 80091a4:	10624dd3 	.word	0x10624dd3

080091a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091b0:	4b22      	ldr	r3, [pc, #136]	; (800923c <SDMMC_GetCmdResp7+0x94>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a22      	ldr	r2, [pc, #136]	; (8009240 <SDMMC_GetCmdResp7+0x98>)
 80091b6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ba:	0a5b      	lsrs	r3, r3, #9
 80091bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091c0:	fb02 f303 	mul.w	r3, r2, r3
 80091c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	1e5a      	subs	r2, r3, #1
 80091ca:	60fa      	str	r2, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091d4:	e02c      	b.n	8009230 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0ef      	beq.n	80091c6 <SDMMC_GetCmdResp7+0x1e>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1ea      	bne.n	80091c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d004      	beq.n	8009206 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2204      	movs	r2, #4
 8009200:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009202:	2304      	movs	r3, #4
 8009204:	e014      	b.n	8009230 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	d004      	beq.n	800921c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009218:	2301      	movs	r3, #1
 800921a:	e009      	b.n	8009230 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2240      	movs	r2, #64	; 0x40
 800922c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800922e:	2300      	movs	r3, #0
  
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20000000 	.word	0x20000000
 8009240:	10624dd3 	.word	0x10624dd3

08009244 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800924c:	4b11      	ldr	r3, [pc, #68]	; (8009294 <SDMMC_GetCmdError+0x50>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a11      	ldr	r2, [pc, #68]	; (8009298 <SDMMC_GetCmdError+0x54>)
 8009252:	fba2 2303 	umull	r2, r3, r2, r3
 8009256:	0a5b      	lsrs	r3, r3, #9
 8009258:	f241 3288 	movw	r2, #5000	; 0x1388
 800925c:	fb02 f303 	mul.w	r3, r2, r3
 8009260:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	1e5a      	subs	r2, r3, #1
 8009266:	60fa      	str	r2, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d102      	bne.n	8009272 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800926c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009270:	e009      	b.n	8009286 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0f1      	beq.n	8009262 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	22c5      	movs	r2, #197	; 0xc5
 8009282:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	20000000 	.word	0x20000000
 8009298:	10624dd3 	.word	0x10624dd3

0800929c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80092a0:	4904      	ldr	r1, [pc, #16]	; (80092b4 <MX_FATFS_Init+0x18>)
 80092a2:	4805      	ldr	r0, [pc, #20]	; (80092b8 <MX_FATFS_Init+0x1c>)
 80092a4:	f003 f834 	bl	800c310 <FATFS_LinkDriver>
 80092a8:	4603      	mov	r3, r0
 80092aa:	461a      	mov	r2, r3
 80092ac:	4b03      	ldr	r3, [pc, #12]	; (80092bc <MX_FATFS_Init+0x20>)
 80092ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80092b0:	bf00      	nop
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	2000043c 	.word	0x2000043c
 80092b8:	0800c960 	.word	0x0800c960
 80092bc:	20000438 	.word	0x20000438

080092c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80092c0:	b480      	push	{r7}
 80092c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80092c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80092da:	f000 f896 	bl	800940a <BSP_SD_IsDetected>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d001      	beq.n	80092e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80092e4:	2302      	movs	r3, #2
 80092e6:	e012      	b.n	800930e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80092e8:	480b      	ldr	r0, [pc, #44]	; (8009318 <BSP_SD_Init+0x48>)
 80092ea:	f7fb fef9 	bl	80050e0 <HAL_SD_Init>
 80092ee:	4603      	mov	r3, r0
 80092f0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80092f2:	79fb      	ldrb	r3, [r7, #7]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d109      	bne.n	800930c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80092f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80092fc:	4806      	ldr	r0, [pc, #24]	; (8009318 <BSP_SD_Init+0x48>)
 80092fe:	f7fc fcbf 	bl	8005c80 <HAL_SD_ConfigWideBusOperation>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800930c:	79fb      	ldrb	r3, [r7, #7]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000120 	.word	0x20000120

0800931c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	68f9      	ldr	r1, [r7, #12]
 8009332:	4806      	ldr	r0, [pc, #24]	; (800934c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009334:	f7fb ff8c 	bl	8005250 <HAL_SD_ReadBlocks_DMA>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009342:	7dfb      	ldrb	r3, [r7, #23]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	20000120 	.word	0x20000120

08009350 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	68f9      	ldr	r1, [r7, #12]
 8009366:	4806      	ldr	r0, [pc, #24]	; (8009380 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009368:	f7fc f854 	bl	8005414 <HAL_SD_WriteBlocks_DMA>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009376:	7dfb      	ldrb	r3, [r7, #23]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20000120 	.word	0x20000120

08009384 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009388:	4805      	ldr	r0, [pc, #20]	; (80093a0 <BSP_SD_GetCardState+0x1c>)
 800938a:	f7fc fd13 	bl	8005db4 <HAL_SD_GetCardState>
 800938e:	4603      	mov	r3, r0
 8009390:	2b04      	cmp	r3, #4
 8009392:	bf14      	ite	ne
 8009394:	2301      	movne	r3, #1
 8009396:	2300      	moveq	r3, #0
 8009398:	b2db      	uxtb	r3, r3
}
 800939a:	4618      	mov	r0, r3
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20000120 	.word	0x20000120

080093a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	4803      	ldr	r0, [pc, #12]	; (80093bc <BSP_SD_GetCardInfo+0x18>)
 80093b0:	f7fc fc3a 	bl	8005c28 <HAL_SD_GetCardInfo>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20000120 	.word	0x20000120

080093c0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80093c8:	f000 f818 	bl	80093fc <BSP_SD_AbortCallback>
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80093dc:	f000 f9a8 	bl	8009730 <BSP_SD_WriteCpltCallback>
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80093f0:	f000 f9aa 	bl	8009748 <BSP_SD_ReadCpltCallback>
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0

}
 8009400:	bf00      	nop
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009410:	2301      	movs	r3, #1
 8009412:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009414:	f000 f80c 	bl	8009430 <BSP_PlatformIsDetected>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800941e:	2300      	movs	r3, #0
 8009420:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	b2db      	uxtb	r3, r3
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009436:	2301      	movs	r3, #1
 8009438:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800943a:	2140      	movs	r1, #64	; 0x40
 800943c:	4806      	ldr	r0, [pc, #24]	; (8009458 <BSP_PlatformIsDetected+0x28>)
 800943e:	f7fa fd21 	bl	8003e84 <HAL_GPIO_ReadPin>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009448:	2300      	movs	r3, #0
 800944a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800944c:	79fb      	ldrb	r3, [r7, #7]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40020800 	.word	0x40020800

0800945c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009464:	f7f9 f870 	bl	8002548 <HAL_GetTick>
 8009468:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800946a:	e006      	b.n	800947a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800946c:	f7ff ff8a 	bl	8009384 <BSP_SD_GetCardState>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009476:	2300      	movs	r3, #0
 8009478:	e009      	b.n	800948e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800947a:	f7f9 f865 	bl	8002548 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	429a      	cmp	r2, r3
 8009488:	d8f0      	bhi.n	800946c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800948a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80094a2:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <SD_CheckStatus+0x38>)
 80094a4:	2201      	movs	r2, #1
 80094a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80094a8:	f7ff ff6c 	bl	8009384 <BSP_SD_GetCardState>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d107      	bne.n	80094c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80094b2:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <SD_CheckStatus+0x38>)
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f023 0301 	bic.w	r3, r3, #1
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <SD_CheckStatus+0x38>)
 80094c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80094c2:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <SD_CheckStatus+0x38>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	b2db      	uxtb	r3, r3
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	20000009 	.word	0x20000009

080094d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80094de:	f7ff fef7 	bl	80092d0 <BSP_SD_Init>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d107      	bne.n	80094f8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff ffd4 	bl	8009498 <SD_CheckStatus>
 80094f0:	4603      	mov	r3, r0
 80094f2:	461a      	mov	r2, r3
 80094f4:	4b04      	ldr	r3, [pc, #16]	; (8009508 <SD_initialize+0x34>)
 80094f6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80094f8:	4b03      	ldr	r3, [pc, #12]	; (8009508 <SD_initialize+0x34>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	b2db      	uxtb	r3, r3
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20000009 	.word	0x20000009

0800950c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff ffbd 	bl	8009498 <SD_CheckStatus>
 800951e:	4603      	mov	r3, r0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800953c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009540:	f7ff ff8c 	bl	800945c <SD_CheckStatusWithTimeout>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	da01      	bge.n	800954e <SD_read+0x26>
  {
    return res;
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	e03b      	b.n	80095c6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	6879      	ldr	r1, [r7, #4]
 8009552:	68b8      	ldr	r0, [r7, #8]
 8009554:	f7ff fee2 	bl	800931c <BSP_SD_ReadBlocks_DMA>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d132      	bne.n	80095c4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800955e:	4b1c      	ldr	r3, [pc, #112]	; (80095d0 <SD_read+0xa8>)
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009564:	f7f8 fff0 	bl	8002548 <HAL_GetTick>
 8009568:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800956a:	bf00      	nop
 800956c:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <SD_read+0xa8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d108      	bne.n	8009586 <SD_read+0x5e>
 8009574:	f7f8 ffe8 	bl	8002548 <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009582:	4293      	cmp	r3, r2
 8009584:	d9f2      	bls.n	800956c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009586:	4b12      	ldr	r3, [pc, #72]	; (80095d0 <SD_read+0xa8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d102      	bne.n	8009594 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	75fb      	strb	r3, [r7, #23]
 8009592:	e017      	b.n	80095c4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <SD_read+0xa8>)
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800959a:	f7f8 ffd5 	bl	8002548 <HAL_GetTick>
 800959e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80095a0:	e007      	b.n	80095b2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80095a2:	f7ff feef 	bl	8009384 <BSP_SD_GetCardState>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d102      	bne.n	80095b2 <SD_read+0x8a>
          {
            res = RES_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80095b0:	e008      	b.n	80095c4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80095b2:	f7f8 ffc9 	bl	8002548 <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d9ee      	bls.n	80095a2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20000034 	.word	0x20000034

080095d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60b9      	str	r1, [r7, #8]
 80095dc:	607a      	str	r2, [r7, #4]
 80095de:	603b      	str	r3, [r7, #0]
 80095e0:	4603      	mov	r3, r0
 80095e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80095e8:	4b24      	ldr	r3, [pc, #144]	; (800967c <SD_write+0xa8>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80095ee:	f247 5030 	movw	r0, #30000	; 0x7530
 80095f2:	f7ff ff33 	bl	800945c <SD_CheckStatusWithTimeout>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	da01      	bge.n	8009600 <SD_write+0x2c>
  {
    return res;
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	e038      	b.n	8009672 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	68b8      	ldr	r0, [r7, #8]
 8009606:	f7ff fea3 	bl	8009350 <BSP_SD_WriteBlocks_DMA>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d12f      	bne.n	8009670 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009610:	f7f8 ff9a 	bl	8002548 <HAL_GetTick>
 8009614:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009616:	bf00      	nop
 8009618:	4b18      	ldr	r3, [pc, #96]	; (800967c <SD_write+0xa8>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d108      	bne.n	8009632 <SD_write+0x5e>
 8009620:	f7f8 ff92 	bl	8002548 <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	f247 522f 	movw	r2, #29999	; 0x752f
 800962e:	4293      	cmp	r3, r2
 8009630:	d9f2      	bls.n	8009618 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009632:	4b12      	ldr	r3, [pc, #72]	; (800967c <SD_write+0xa8>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	75fb      	strb	r3, [r7, #23]
 800963e:	e017      	b.n	8009670 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009640:	4b0e      	ldr	r3, [pc, #56]	; (800967c <SD_write+0xa8>)
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009646:	f7f8 ff7f 	bl	8002548 <HAL_GetTick>
 800964a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800964c:	e007      	b.n	800965e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800964e:	f7ff fe99 	bl	8009384 <BSP_SD_GetCardState>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <SD_write+0x8a>
          {
            res = RES_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	75fb      	strb	r3, [r7, #23]
            break;
 800965c:	e008      	b.n	8009670 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800965e:	f7f8 ff73 	bl	8002548 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	f247 522f 	movw	r2, #29999	; 0x752f
 800966c:	4293      	cmp	r3, r2
 800966e:	d9ee      	bls.n	800964e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009670:	7dfb      	ldrb	r3, [r7, #23]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20000030 	.word	0x20000030

08009680 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08c      	sub	sp, #48	; 0x30
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	603a      	str	r2, [r7, #0]
 800968a:	71fb      	strb	r3, [r7, #7]
 800968c:	460b      	mov	r3, r1
 800968e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009696:	4b25      	ldr	r3, [pc, #148]	; (800972c <SD_ioctl+0xac>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <SD_ioctl+0x28>
 80096a4:	2303      	movs	r3, #3
 80096a6:	e03c      	b.n	8009722 <SD_ioctl+0xa2>

  switch (cmd)
 80096a8:	79bb      	ldrb	r3, [r7, #6]
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d834      	bhi.n	8009718 <SD_ioctl+0x98>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <SD_ioctl+0x34>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096c5 	.word	0x080096c5
 80096b8:	080096cd 	.word	0x080096cd
 80096bc:	080096e5 	.word	0x080096e5
 80096c0:	080096ff 	.word	0x080096ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80096ca:	e028      	b.n	800971e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80096cc:	f107 030c 	add.w	r3, r7, #12
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff fe67 	bl	80093a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80096d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80096e2:	e01c      	b.n	800971e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80096e4:	f107 030c 	add.w	r3, r7, #12
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff fe5b 	bl	80093a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80096fc:	e00f      	b.n	800971e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80096fe:	f107 030c 	add.w	r3, r7, #12
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff fe4e 	bl	80093a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	0a5a      	lsrs	r2, r3, #9
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009716:	e002      	b.n	800971e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009718:	2304      	movs	r3, #4
 800971a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800971e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009722:	4618      	mov	r0, r3
 8009724:	3730      	adds	r7, #48	; 0x30
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20000009 	.word	0x20000009

08009730 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009730:	b480      	push	{r7}
 8009732:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009734:	4b03      	ldr	r3, [pc, #12]	; (8009744 <BSP_SD_WriteCpltCallback+0x14>)
 8009736:	2201      	movs	r2, #1
 8009738:	601a      	str	r2, [r3, #0]
}
 800973a:	bf00      	nop
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	20000030 	.word	0x20000030

08009748 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009748:	b480      	push	{r7}
 800974a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800974c:	4b03      	ldr	r3, [pc, #12]	; (800975c <BSP_SD_ReadCpltCallback+0x14>)
 800974e:	2201      	movs	r2, #1
 8009750:	601a      	str	r2, [r3, #0]
}
 8009752:	bf00      	nop
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	20000034 	.word	0x20000034

08009760 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	4a08      	ldr	r2, [pc, #32]	; (8009790 <disk_status+0x30>)
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	79fa      	ldrb	r2, [r7, #7]
 8009778:	4905      	ldr	r1, [pc, #20]	; (8009790 <disk_status+0x30>)
 800977a:	440a      	add	r2, r1
 800977c:	7a12      	ldrb	r2, [r2, #8]
 800977e:	4610      	mov	r0, r2
 8009780:	4798      	blx	r3
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009786:	7bfb      	ldrb	r3, [r7, #15]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20000060 	.word	0x20000060

08009794 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	4a0d      	ldr	r2, [pc, #52]	; (80097dc <disk_initialize+0x48>)
 80097a6:	5cd3      	ldrb	r3, [r2, r3]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d111      	bne.n	80097d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	4a0b      	ldr	r2, [pc, #44]	; (80097dc <disk_initialize+0x48>)
 80097b0:	2101      	movs	r1, #1
 80097b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	4a09      	ldr	r2, [pc, #36]	; (80097dc <disk_initialize+0x48>)
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	79fa      	ldrb	r2, [r7, #7]
 80097c2:	4906      	ldr	r1, [pc, #24]	; (80097dc <disk_initialize+0x48>)
 80097c4:	440a      	add	r2, r1
 80097c6:	7a12      	ldrb	r2, [r2, #8]
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000060 	.word	0x20000060

080097e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80097e0:	b590      	push	{r4, r7, lr}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	4a0a      	ldr	r2, [pc, #40]	; (800981c <disk_read+0x3c>)
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	689c      	ldr	r4, [r3, #8]
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	4a07      	ldr	r2, [pc, #28]	; (800981c <disk_read+0x3c>)
 8009800:	4413      	add	r3, r2
 8009802:	7a18      	ldrb	r0, [r3, #8]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	68b9      	ldr	r1, [r7, #8]
 800980a:	47a0      	blx	r4
 800980c:	4603      	mov	r3, r0
 800980e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009810:	7dfb      	ldrb	r3, [r7, #23]
}
 8009812:	4618      	mov	r0, r3
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	bd90      	pop	{r4, r7, pc}
 800981a:	bf00      	nop
 800981c:	20000060 	.word	0x20000060

08009820 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	607a      	str	r2, [r7, #4]
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	4a0a      	ldr	r2, [pc, #40]	; (800985c <disk_write+0x3c>)
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	68dc      	ldr	r4, [r3, #12]
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	4a07      	ldr	r2, [pc, #28]	; (800985c <disk_write+0x3c>)
 8009840:	4413      	add	r3, r2
 8009842:	7a18      	ldrb	r0, [r3, #8]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	47a0      	blx	r4
 800984c:	4603      	mov	r3, r0
 800984e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
}
 8009852:	4618      	mov	r0, r3
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	bd90      	pop	{r4, r7, pc}
 800985a:	bf00      	nop
 800985c:	20000060 	.word	0x20000060

08009860 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	603a      	str	r2, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
 800986c:	460b      	mov	r3, r1
 800986e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	4a09      	ldr	r2, [pc, #36]	; (8009898 <disk_ioctl+0x38>)
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	79fa      	ldrb	r2, [r7, #7]
 800987e:	4906      	ldr	r1, [pc, #24]	; (8009898 <disk_ioctl+0x38>)
 8009880:	440a      	add	r2, r1
 8009882:	7a10      	ldrb	r0, [r2, #8]
 8009884:	79b9      	ldrb	r1, [r7, #6]
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	4798      	blx	r3
 800988a:	4603      	mov	r3, r0
 800988c:	73fb      	strb	r3, [r7, #15]
  return res;
 800988e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20000060 	.word	0x20000060

0800989c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3301      	adds	r3, #1
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80098ac:	89fb      	ldrh	r3, [r7, #14]
 80098ae:	021b      	lsls	r3, r3, #8
 80098b0:	b21a      	sxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b21b      	sxth	r3, r3
 80098b8:	4313      	orrs	r3, r2
 80098ba:	b21b      	sxth	r3, r3
 80098bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80098be:	89fb      	ldrh	r3, [r7, #14]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3303      	adds	r3, #3
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	3202      	adds	r2, #2
 80098e4:	7812      	ldrb	r2, [r2, #0]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	021b      	lsls	r3, r3, #8
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	3201      	adds	r2, #1
 80098f2:	7812      	ldrb	r2, [r2, #0]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7812      	ldrb	r2, [r2, #0]
 8009900:	4313      	orrs	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
	return rv;
 8009904:	68fb      	ldr	r3, [r7, #12]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	887a      	ldrh	r2, [r7, #2]
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	887b      	ldrh	r3, [r7, #2]
 800992c:	0a1b      	lsrs	r3, r3, #8
 800992e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	607a      	str	r2, [r7, #4]
 8009936:	887a      	ldrh	r2, [r7, #2]
 8009938:	b2d2      	uxtb	r2, r2
 800993a:	701a      	strb	r2, [r3, #0]
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	b2d2      	uxtb	r2, r2
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	0a1b      	lsrs	r3, r3, #8
 8009962:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	1c5a      	adds	r2, r3, #1
 8009968:	607a      	str	r2, [r7, #4]
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	b2d2      	uxtb	r2, r2
 800996e:	701a      	strb	r2, [r3, #0]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	0a1b      	lsrs	r3, r3, #8
 8009974:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	0a1b      	lsrs	r3, r3, #8
 8009986:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	607a      	str	r2, [r7, #4]
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	701a      	strb	r2, [r3, #0]
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00d      	beq.n	80099d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	1c53      	adds	r3, r2, #1
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	1c59      	adds	r1, r3, #1
 80099c4:	6179      	str	r1, [r7, #20]
 80099c6:	7812      	ldrb	r2, [r2, #0]
 80099c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	607b      	str	r3, [r7, #4]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1f1      	bne.n	80099ba <mem_cpy+0x1a>
	}
}
 80099d6:	bf00      	nop
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80099e2:	b480      	push	{r7}
 80099e4:	b087      	sub	sp, #28
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	617a      	str	r2, [r7, #20]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	b2d2      	uxtb	r2, r2
 80099fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	607b      	str	r3, [r7, #4]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1f3      	bne.n	80099f2 <mem_set+0x10>
}
 8009a0a:	bf00      	nop
 8009a0c:	bf00      	nop
 8009a0e:	371c      	adds	r7, #28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009a18:	b480      	push	{r7}
 8009a1a:	b089      	sub	sp, #36	; 0x24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	61fb      	str	r3, [r7, #28]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	61fa      	str	r2, [r7, #28]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	61ba      	str	r2, [r7, #24]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	1acb      	subs	r3, r1, r3
 8009a44:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	607b      	str	r3, [r7, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <mem_cmp+0x40>
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0eb      	beq.n	8009a30 <mem_cmp+0x18>

	return r;
 8009a58:	697b      	ldr	r3, [r7, #20]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3724      	adds	r7, #36	; 0x24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009a70:	e002      	b.n	8009a78 <chk_chr+0x12>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	3301      	adds	r3, #1
 8009a76:	607b      	str	r3, [r7, #4]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d005      	beq.n	8009a8c <chk_chr+0x26>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	461a      	mov	r2, r3
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d1f2      	bne.n	8009a72 <chk_chr+0xc>
	return *str;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60bb      	str	r3, [r7, #8]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	e029      	b.n	8009b04 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009ab0:	4a27      	ldr	r2, [pc, #156]	; (8009b50 <chk_lock+0xb4>)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	4413      	add	r3, r2
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01d      	beq.n	8009afa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009abe:	4a24      	ldr	r2, [pc, #144]	; (8009b50 <chk_lock+0xb4>)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	011b      	lsls	r3, r3, #4
 8009ac4:	4413      	add	r3, r2
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d116      	bne.n	8009afe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009ad0:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <chk_lock+0xb4>)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3304      	adds	r3, #4
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d10c      	bne.n	8009afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ae4:	4a1a      	ldr	r2, [pc, #104]	; (8009b50 <chk_lock+0xb4>)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	011b      	lsls	r3, r3, #4
 8009aea:	4413      	add	r3, r2
 8009aec:	3308      	adds	r3, #8
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d102      	bne.n	8009afe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009af8:	e007      	b.n	8009b0a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009afa:	2301      	movs	r3, #1
 8009afc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3301      	adds	r3, #1
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d9d2      	bls.n	8009ab0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d109      	bne.n	8009b24 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <chk_lock+0x80>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d101      	bne.n	8009b20 <chk_lock+0x84>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	e010      	b.n	8009b42 <chk_lock+0xa6>
 8009b20:	2312      	movs	r3, #18
 8009b22:	e00e      	b.n	8009b42 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d108      	bne.n	8009b3c <chk_lock+0xa0>
 8009b2a:	4a09      	ldr	r2, [pc, #36]	; (8009b50 <chk_lock+0xb4>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	011b      	lsls	r3, r3, #4
 8009b30:	4413      	add	r3, r2
 8009b32:	330c      	adds	r3, #12
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b3a:	d101      	bne.n	8009b40 <chk_lock+0xa4>
 8009b3c:	2310      	movs	r3, #16
 8009b3e:	e000      	b.n	8009b42 <chk_lock+0xa6>
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	20000040 	.word	0x20000040

08009b54 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	607b      	str	r3, [r7, #4]
 8009b5e:	e002      	b.n	8009b66 <enq_lock+0x12>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3301      	adds	r3, #1
 8009b64:	607b      	str	r3, [r7, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d806      	bhi.n	8009b7a <enq_lock+0x26>
 8009b6c:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <enq_lock+0x40>)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	011b      	lsls	r3, r3, #4
 8009b72:	4413      	add	r3, r2
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1f2      	bne.n	8009b60 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	bf14      	ite	ne
 8009b80:	2301      	movne	r3, #1
 8009b82:	2300      	moveq	r3, #0
 8009b84:	b2db      	uxtb	r3, r3
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	20000040 	.word	0x20000040

08009b98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	e01f      	b.n	8009be8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ba8:	4a41      	ldr	r2, [pc, #260]	; (8009cb0 <inc_lock+0x118>)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	4413      	add	r3, r2
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d113      	bne.n	8009be2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009bba:	4a3d      	ldr	r2, [pc, #244]	; (8009cb0 <inc_lock+0x118>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	4413      	add	r3, r2
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d109      	bne.n	8009be2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009bce:	4a38      	ldr	r2, [pc, #224]	; (8009cb0 <inc_lock+0x118>)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	4413      	add	r3, r2
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d006      	beq.n	8009bf0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d9dc      	bls.n	8009ba8 <inc_lock+0x10>
 8009bee:	e000      	b.n	8009bf2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009bf0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d132      	bne.n	8009c5e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	e002      	b.n	8009c04 <inc_lock+0x6c>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d806      	bhi.n	8009c18 <inc_lock+0x80>
 8009c0a:	4a29      	ldr	r2, [pc, #164]	; (8009cb0 <inc_lock+0x118>)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	4413      	add	r3, r2
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1f2      	bne.n	8009bfe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d101      	bne.n	8009c22 <inc_lock+0x8a>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e040      	b.n	8009ca4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4922      	ldr	r1, [pc, #136]	; (8009cb0 <inc_lock+0x118>)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	440b      	add	r3, r1
 8009c2e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	491e      	ldr	r1, [pc, #120]	; (8009cb0 <inc_lock+0x118>)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	440b      	add	r3, r1
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	695a      	ldr	r2, [r3, #20]
 8009c44:	491a      	ldr	r1, [pc, #104]	; (8009cb0 <inc_lock+0x118>)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	011b      	lsls	r3, r3, #4
 8009c4a:	440b      	add	r3, r1
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009c50:	4a17      	ldr	r2, [pc, #92]	; (8009cb0 <inc_lock+0x118>)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	4413      	add	r3, r2
 8009c58:	330c      	adds	r3, #12
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d009      	beq.n	8009c78 <inc_lock+0xe0>
 8009c64:	4a12      	ldr	r2, [pc, #72]	; (8009cb0 <inc_lock+0x118>)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	011b      	lsls	r3, r3, #4
 8009c6a:	4413      	add	r3, r2
 8009c6c:	330c      	adds	r3, #12
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <inc_lock+0xe0>
 8009c74:	2300      	movs	r3, #0
 8009c76:	e015      	b.n	8009ca4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d108      	bne.n	8009c90 <inc_lock+0xf8>
 8009c7e:	4a0c      	ldr	r2, [pc, #48]	; (8009cb0 <inc_lock+0x118>)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	011b      	lsls	r3, r3, #4
 8009c84:	4413      	add	r3, r2
 8009c86:	330c      	adds	r3, #12
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	e001      	b.n	8009c94 <inc_lock+0xfc>
 8009c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c94:	4906      	ldr	r1, [pc, #24]	; (8009cb0 <inc_lock+0x118>)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	011b      	lsls	r3, r3, #4
 8009c9a:	440b      	add	r3, r1
 8009c9c:	330c      	adds	r3, #12
 8009c9e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3301      	adds	r3, #1
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	20000040 	.word	0x20000040

08009cb4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	607b      	str	r3, [r7, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d825      	bhi.n	8009d14 <dec_lock+0x60>
		n = Files[i].ctr;
 8009cc8:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <dec_lock+0x74>)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	4413      	add	r3, r2
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009cd6:	89fb      	ldrh	r3, [r7, #14]
 8009cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cdc:	d101      	bne.n	8009ce2 <dec_lock+0x2e>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ce2:	89fb      	ldrh	r3, [r7, #14]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <dec_lock+0x3a>
 8009ce8:	89fb      	ldrh	r3, [r7, #14]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009cee:	4a0e      	ldr	r2, [pc, #56]	; (8009d28 <dec_lock+0x74>)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	4413      	add	r3, r2
 8009cf6:	330c      	adds	r3, #12
 8009cf8:	89fa      	ldrh	r2, [r7, #14]
 8009cfa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009cfc:	89fb      	ldrh	r3, [r7, #14]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d105      	bne.n	8009d0e <dec_lock+0x5a>
 8009d02:	4a09      	ldr	r2, [pc, #36]	; (8009d28 <dec_lock+0x74>)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	4413      	add	r3, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	737b      	strb	r3, [r7, #13]
 8009d12:	e001      	b.n	8009d18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009d14:	2302      	movs	r3, #2
 8009d16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009d18:	7b7b      	ldrb	r3, [r7, #13]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	20000040 	.word	0x20000040

08009d2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	e010      	b.n	8009d5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009d3a:	4a0d      	ldr	r2, [pc, #52]	; (8009d70 <clear_lock+0x44>)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	4413      	add	r3, r2
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d105      	bne.n	8009d56 <clear_lock+0x2a>
 8009d4a:	4a09      	ldr	r2, [pc, #36]	; (8009d70 <clear_lock+0x44>)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	4413      	add	r3, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d9eb      	bls.n	8009d3a <clear_lock+0xe>
	}
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	20000040 	.word	0x20000040

08009d74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	78db      	ldrb	r3, [r3, #3]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d034      	beq.n	8009df2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7858      	ldrb	r0, [r3, #1]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d98:	2301      	movs	r3, #1
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	f7ff fd40 	bl	8009820 <disk_write>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <sync_window+0x38>
			res = FR_DISK_ERR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	73fb      	strb	r3, [r7, #15]
 8009daa:	e022      	b.n	8009df2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	1ad2      	subs	r2, r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d217      	bcs.n	8009df2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	789b      	ldrb	r3, [r3, #2]
 8009dc6:	613b      	str	r3, [r7, #16]
 8009dc8:	e010      	b.n	8009dec <sync_window+0x78>
					wsect += fs->fsize;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	7858      	ldrb	r0, [r3, #1]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009dde:	2301      	movs	r3, #1
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	f7ff fd1d 	bl	8009820 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d8eb      	bhi.n	8009dca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d01b      	beq.n	8009e4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff ffad 	bl	8009d74 <sync_window>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d113      	bne.n	8009e4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7858      	ldrb	r0, [r3, #1]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e2e:	2301      	movs	r3, #1
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	f7ff fcd5 	bl	80097e0 <disk_read>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d004      	beq.n	8009e46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff ff87 	bl	8009d74 <sync_window>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d158      	bne.n	8009f22 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d148      	bne.n	8009f0a <sync_fs+0xb2>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	791b      	ldrb	r3, [r3, #4]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d144      	bne.n	8009f0a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3330      	adds	r3, #48	; 0x30
 8009e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7ff fda9 	bl	80099e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3330      	adds	r3, #48	; 0x30
 8009e94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e98:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7ff fd38 	bl	8009912 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3330      	adds	r3, #48	; 0x30
 8009ea6:	4921      	ldr	r1, [pc, #132]	; (8009f2c <sync_fs+0xd4>)
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff fd4d 	bl	8009948 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3330      	adds	r3, #48	; 0x30
 8009eb2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009eb6:	491e      	ldr	r1, [pc, #120]	; (8009f30 <sync_fs+0xd8>)
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff fd45 	bl	8009948 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	3330      	adds	r3, #48	; 0x30
 8009ec2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4610      	mov	r0, r2
 8009ece:	f7ff fd3b 	bl	8009948 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3330      	adds	r3, #48	; 0x30
 8009ed6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	f7ff fd31 	bl	8009948 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	69db      	ldr	r3, [r3, #28]
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	7858      	ldrb	r0, [r3, #1]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efe:	2301      	movs	r3, #1
 8009f00:	f7ff fc8e 	bl	8009820 <disk_write>
			fs->fsi_flag = 0;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2100      	movs	r1, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff fca4 	bl	8009860 <disk_ioctl>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <sync_fs+0xca>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	41615252 	.word	0x41615252
 8009f30:	61417272 	.word	0x61417272

08009f34 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	3b02      	subs	r3, #2
 8009f42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	3b02      	subs	r3, #2
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d301      	bcc.n	8009f54 <clust2sect+0x20>
 8009f50:	2300      	movs	r3, #0
 8009f52:	e008      	b.n	8009f66 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	895b      	ldrh	r3, [r3, #10]
 8009f58:	461a      	mov	r2, r3
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	fb03 f202 	mul.w	r2, r3, r2
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f64:	4413      	add	r3, r2
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b086      	sub	sp, #24
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d904      	bls.n	8009f92 <get_fat+0x20>
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d302      	bcc.n	8009f98 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009f92:	2301      	movs	r3, #1
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	e08f      	b.n	800a0b8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f98:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d062      	beq.n	800a06c <get_fat+0xfa>
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	dc7c      	bgt.n	800a0a4 <get_fat+0x132>
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d002      	beq.n	8009fb4 <get_fat+0x42>
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d042      	beq.n	800a038 <get_fat+0xc6>
 8009fb2:	e077      	b.n	800a0a4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	085b      	lsrs	r3, r3, #1
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6a1a      	ldr	r2, [r3, #32]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	0a5b      	lsrs	r3, r3, #9
 8009fca:	4413      	add	r3, r2
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6938      	ldr	r0, [r7, #16]
 8009fd0:	f7ff ff14 	bl	8009dfc <move_window>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d167      	bne.n	800a0aa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	60fa      	str	r2, [r7, #12]
 8009fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	6a1a      	ldr	r2, [r3, #32]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	0a5b      	lsrs	r3, r3, #9
 8009ff6:	4413      	add	r3, r2
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6938      	ldr	r0, [r7, #16]
 8009ffc:	f7ff fefe 	bl	8009dfc <move_window>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d153      	bne.n	800a0ae <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	4413      	add	r3, r2
 800a010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a014:	021b      	lsls	r3, r3, #8
 800a016:	461a      	mov	r2, r3
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <get_fat+0xbc>
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	091b      	lsrs	r3, r3, #4
 800a02c:	e002      	b.n	800a034 <get_fat+0xc2>
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a034:	617b      	str	r3, [r7, #20]
			break;
 800a036:	e03f      	b.n	800a0b8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6a1a      	ldr	r2, [r3, #32]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	0a1b      	lsrs	r3, r3, #8
 800a040:	4413      	add	r3, r2
 800a042:	4619      	mov	r1, r3
 800a044:	6938      	ldr	r0, [r7, #16]
 800a046:	f7ff fed9 	bl	8009dfc <move_window>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d130      	bne.n	800a0b2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a05e:	4413      	add	r3, r2
 800a060:	4618      	mov	r0, r3
 800a062:	f7ff fc1b 	bl	800989c <ld_word>
 800a066:	4603      	mov	r3, r0
 800a068:	617b      	str	r3, [r7, #20]
			break;
 800a06a:	e025      	b.n	800a0b8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	6a1a      	ldr	r2, [r3, #32]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	09db      	lsrs	r3, r3, #7
 800a074:	4413      	add	r3, r2
 800a076:	4619      	mov	r1, r3
 800a078:	6938      	ldr	r0, [r7, #16]
 800a07a:	f7ff febf 	bl	8009dfc <move_window>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d118      	bne.n	800a0b6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a092:	4413      	add	r3, r2
 800a094:	4618      	mov	r0, r3
 800a096:	f7ff fc19 	bl	80098cc <ld_dword>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a0a0:	617b      	str	r3, [r7, #20]
			break;
 800a0a2:	e009      	b.n	800a0b8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	e006      	b.n	800a0b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0aa:	bf00      	nop
 800a0ac:	e004      	b.n	800a0b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0ae:	bf00      	nop
 800a0b0:	e002      	b.n	800a0b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a0b2:	bf00      	nop
 800a0b4:	e000      	b.n	800a0b8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a0b6:	bf00      	nop
		}
	}

	return val;
 800a0b8:	697b      	ldr	r3, [r7, #20]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a0c2:	b590      	push	{r4, r7, lr}
 800a0c4:	b089      	sub	sp, #36	; 0x24
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	f240 80d2 	bls.w	800a27e <put_fat+0x1bc>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	f080 80cc 	bcs.w	800a27e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	f000 8096 	beq.w	800a21c <put_fat+0x15a>
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	f300 80cd 	bgt.w	800a290 <put_fat+0x1ce>
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d002      	beq.n	800a100 <put_fat+0x3e>
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d06e      	beq.n	800a1dc <put_fat+0x11a>
 800a0fe:	e0c7      	b.n	800a290 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	61bb      	str	r3, [r7, #24]
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	085b      	lsrs	r3, r3, #1
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	4413      	add	r3, r2
 800a10c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6a1a      	ldr	r2, [r3, #32]
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	0a5b      	lsrs	r3, r3, #9
 800a116:	4413      	add	r3, r2
 800a118:	4619      	mov	r1, r3
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f7ff fe6e 	bl	8009dfc <move_window>
 800a120:	4603      	mov	r3, r0
 800a122:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a124:	7ffb      	ldrb	r3, [r7, #31]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f040 80ab 	bne.w	800a282 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	1c59      	adds	r1, r3, #1
 800a136:	61b9      	str	r1, [r7, #24]
 800a138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13c:	4413      	add	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00d      	beq.n	800a166 <put_fat+0xa4>
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	b25b      	sxtb	r3, r3
 800a150:	f003 030f 	and.w	r3, r3, #15
 800a154:	b25a      	sxtb	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	011b      	lsls	r3, r3, #4
 800a15c:	b25b      	sxtb	r3, r3
 800a15e:	4313      	orrs	r3, r2
 800a160:	b25b      	sxtb	r3, r3
 800a162:	b2db      	uxtb	r3, r3
 800a164:	e001      	b.n	800a16a <put_fat+0xa8>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2201      	movs	r2, #1
 800a172:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a1a      	ldr	r2, [r3, #32]
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	0a5b      	lsrs	r3, r3, #9
 800a17c:	4413      	add	r3, r2
 800a17e:	4619      	mov	r1, r3
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff fe3b 	bl	8009dfc <move_window>
 800a186:	4603      	mov	r3, r0
 800a188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a18a:	7ffb      	ldrb	r3, [r7, #31]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d17a      	bne.n	800a286 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19c:	4413      	add	r3, r2
 800a19e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <put_fat+0xf0>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	091b      	lsrs	r3, r3, #4
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	e00e      	b.n	800a1d0 <put_fat+0x10e>
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	b25b      	sxtb	r3, r3
 800a1b8:	f023 030f 	bic.w	r3, r3, #15
 800a1bc:	b25a      	sxtb	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	0a1b      	lsrs	r3, r3, #8
 800a1c2:	b25b      	sxtb	r3, r3
 800a1c4:	f003 030f 	and.w	r3, r3, #15
 800a1c8:	b25b      	sxtb	r3, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	b25b      	sxtb	r3, r3
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	70da      	strb	r2, [r3, #3]
			break;
 800a1da:	e059      	b.n	800a290 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6a1a      	ldr	r2, [r3, #32]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	0a1b      	lsrs	r3, r3, #8
 800a1e4:	4413      	add	r3, r2
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7ff fe07 	bl	8009dfc <move_window>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1f2:	7ffb      	ldrb	r3, [r7, #31]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d148      	bne.n	800a28a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a206:	4413      	add	r3, r2
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	b292      	uxth	r2, r2
 800a20c:	4611      	mov	r1, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f7ff fb7f 	bl	8009912 <st_word>
			fs->wflag = 1;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2201      	movs	r2, #1
 800a218:	70da      	strb	r2, [r3, #3]
			break;
 800a21a:	e039      	b.n	800a290 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6a1a      	ldr	r2, [r3, #32]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	09db      	lsrs	r3, r3, #7
 800a224:	4413      	add	r3, r2
 800a226:	4619      	mov	r1, r3
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff fde7 	bl	8009dfc <move_window>
 800a22e:	4603      	mov	r3, r0
 800a230:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a232:	7ffb      	ldrb	r3, [r7, #31]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d12a      	bne.n	800a28e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a24c:	4413      	add	r3, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff fb3c 	bl	80098cc <ld_dword>
 800a254:	4603      	mov	r3, r0
 800a256:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a25a:	4323      	orrs	r3, r4
 800a25c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a26c:	4413      	add	r3, r2
 800a26e:	6879      	ldr	r1, [r7, #4]
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff fb69 	bl	8009948 <st_dword>
			fs->wflag = 1;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2201      	movs	r2, #1
 800a27a:	70da      	strb	r2, [r3, #3]
			break;
 800a27c:	e008      	b.n	800a290 <put_fat+0x1ce>
		}
	}
 800a27e:	bf00      	nop
 800a280:	e006      	b.n	800a290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a282:	bf00      	nop
 800a284:	e004      	b.n	800a290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a286:	bf00      	nop
 800a288:	e002      	b.n	800a290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a28a:	bf00      	nop
 800a28c:	e000      	b.n	800a290 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a28e:	bf00      	nop
	return res;
 800a290:	7ffb      	ldrb	r3, [r7, #31]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3724      	adds	r7, #36	; 0x24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd90      	pop	{r4, r7, pc}

0800a29a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b088      	sub	sp, #32
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	60b9      	str	r1, [r7, #8]
 800a2a4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d904      	bls.n	800a2c0 <remove_chain+0x26>
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d301      	bcc.n	800a2c4 <remove_chain+0x2a>
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e04b      	b.n	800a35c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00c      	beq.n	800a2e4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	69b8      	ldr	r0, [r7, #24]
 800a2d2:	f7ff fef6 	bl	800a0c2 <put_fat>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a2da:	7ffb      	ldrb	r3, [r7, #31]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <remove_chain+0x4a>
 800a2e0:	7ffb      	ldrb	r3, [r7, #31]
 800a2e2:	e03b      	b.n	800a35c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a2e4:	68b9      	ldr	r1, [r7, #8]
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7ff fe43 	bl	8009f72 <get_fat>
 800a2ec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d031      	beq.n	800a358 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d101      	bne.n	800a2fe <remove_chain+0x64>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	e02e      	b.n	800a35c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a304:	d101      	bne.n	800a30a <remove_chain+0x70>
 800a306:	2301      	movs	r3, #1
 800a308:	e028      	b.n	800a35c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a30a:	2200      	movs	r2, #0
 800a30c:	68b9      	ldr	r1, [r7, #8]
 800a30e:	69b8      	ldr	r0, [r7, #24]
 800a310:	f7ff fed7 	bl	800a0c2 <put_fat>
 800a314:	4603      	mov	r3, r0
 800a316:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a318:	7ffb      	ldrb	r3, [r7, #31]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <remove_chain+0x88>
 800a31e:	7ffb      	ldrb	r3, [r7, #31]
 800a320:	e01c      	b.n	800a35c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	691a      	ldr	r2, [r3, #16]
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	3b02      	subs	r3, #2
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d20b      	bcs.n	800a348 <remove_chain+0xae>
			fs->free_clst++;
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	791b      	ldrb	r3, [r3, #4]
 800a33e:	f043 0301 	orr.w	r3, r3, #1
 800a342:	b2da      	uxtb	r2, r3
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	429a      	cmp	r2, r3
 800a354:	d3c6      	bcc.n	800a2e4 <remove_chain+0x4a>
 800a356:	e000      	b.n	800a35a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a358:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3720      	adds	r7, #32
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10d      	bne.n	800a396 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <create_chain+0x2c>
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d31b      	bcc.n	800a3c8 <create_chain+0x64>
 800a390:	2301      	movs	r3, #1
 800a392:	61bb      	str	r3, [r7, #24]
 800a394:	e018      	b.n	800a3c8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff fdea 	bl	8009f72 <get_fat>
 800a39e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d801      	bhi.n	800a3aa <create_chain+0x46>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e070      	b.n	800a48c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b0:	d101      	bne.n	800a3b6 <create_chain+0x52>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	e06a      	b.n	800a48c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d201      	bcs.n	800a3c4 <create_chain+0x60>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	e063      	b.n	800a48c <create_chain+0x128>
		scl = clst;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	69fa      	ldr	r2, [r7, #28]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d307      	bcc.n	800a3ec <create_chain+0x88>
				ncl = 2;
 800a3dc:	2302      	movs	r3, #2
 800a3de:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a3e0:	69fa      	ldr	r2, [r7, #28]
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d901      	bls.n	800a3ec <create_chain+0x88>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e04f      	b.n	800a48c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a3ec:	69f9      	ldr	r1, [r7, #28]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7ff fdbf 	bl	8009f72 <get_fat>
 800a3f4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00e      	beq.n	800a41a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d003      	beq.n	800a40a <create_chain+0xa6>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a408:	d101      	bne.n	800a40e <create_chain+0xaa>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	e03e      	b.n	800a48c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a40e:	69fa      	ldr	r2, [r7, #28]
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	429a      	cmp	r2, r3
 800a414:	d1da      	bne.n	800a3cc <create_chain+0x68>
 800a416:	2300      	movs	r3, #0
 800a418:	e038      	b.n	800a48c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a41a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a41c:	f04f 32ff 	mov.w	r2, #4294967295
 800a420:	69f9      	ldr	r1, [r7, #28]
 800a422:	6938      	ldr	r0, [r7, #16]
 800a424:	f7ff fe4d 	bl	800a0c2 <put_fat>
 800a428:	4603      	mov	r3, r0
 800a42a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d109      	bne.n	800a446 <create_chain+0xe2>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a438:	69fa      	ldr	r2, [r7, #28]
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6938      	ldr	r0, [r7, #16]
 800a43e:	f7ff fe40 	bl	800a0c2 <put_fat>
 800a442:	4603      	mov	r3, r0
 800a444:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d116      	bne.n	800a47a <create_chain+0x116>
		fs->last_clst = ncl;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	69fa      	ldr	r2, [r7, #28]
 800a450:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	691a      	ldr	r2, [r3, #16]
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	3b02      	subs	r3, #2
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d804      	bhi.n	800a46a <create_chain+0x106>
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	1e5a      	subs	r2, r3, #1
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	791b      	ldrb	r3, [r3, #4]
 800a46e:	f043 0301 	orr.w	r3, r3, #1
 800a472:	b2da      	uxtb	r2, r3
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	711a      	strb	r2, [r3, #4]
 800a478:	e007      	b.n	800a48a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d102      	bne.n	800a486 <create_chain+0x122>
 800a480:	f04f 33ff 	mov.w	r3, #4294967295
 800a484:	e000      	b.n	800a488 <create_chain+0x124>
 800a486:	2301      	movs	r3, #1
 800a488:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a48a:	69fb      	ldr	r3, [r7, #28]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	0a5b      	lsrs	r3, r3, #9
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	8952      	ldrh	r2, [r2, #10]
 800a4b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	1d1a      	adds	r2, r3, #4
 800a4be:	613a      	str	r2, [r7, #16]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <clmt_clust+0x3a>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e010      	b.n	800a4f0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d307      	bcc.n	800a4e6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	617b      	str	r3, [r7, #20]
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a4e4:	e7e9      	b.n	800a4ba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a4e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	4413      	add	r3, r2
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	371c      	adds	r7, #28
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a512:	d204      	bcs.n	800a51e <dir_sdi+0x22>
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	f003 031f 	and.w	r3, r3, #31
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a51e:	2302      	movs	r3, #2
 800a520:	e063      	b.n	800a5ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <dir_sdi+0x46>
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d902      	bls.n	800a542 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a540:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10c      	bne.n	800a562 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	095b      	lsrs	r3, r3, #5
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	8912      	ldrh	r2, [r2, #8]
 800a550:	4293      	cmp	r3, r2
 800a552:	d301      	bcc.n	800a558 <dir_sdi+0x5c>
 800a554:	2302      	movs	r3, #2
 800a556:	e048      	b.n	800a5ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	61da      	str	r2, [r3, #28]
 800a560:	e029      	b.n	800a5b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	895b      	ldrh	r3, [r3, #10]
 800a566:	025b      	lsls	r3, r3, #9
 800a568:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a56a:	e019      	b.n	800a5a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6979      	ldr	r1, [r7, #20]
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff fcfe 	bl	8009f72 <get_fat>
 800a576:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57e:	d101      	bne.n	800a584 <dir_sdi+0x88>
 800a580:	2301      	movs	r3, #1
 800a582:	e032      	b.n	800a5ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	2b01      	cmp	r3, #1
 800a588:	d904      	bls.n	800a594 <dir_sdi+0x98>
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	429a      	cmp	r2, r3
 800a592:	d301      	bcc.n	800a598 <dir_sdi+0x9c>
 800a594:	2302      	movs	r3, #2
 800a596:	e028      	b.n	800a5ea <dir_sdi+0xee>
			ofs -= csz;
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d2e1      	bcs.n	800a56c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a5a8:	6979      	ldr	r1, [r7, #20]
 800a5aa:	6938      	ldr	r0, [r7, #16]
 800a5ac:	f7ff fcc2 	bl	8009f34 <clust2sect>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	69db      	ldr	r3, [r3, #28]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <dir_sdi+0xcc>
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e010      	b.n	800a5ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	69da      	ldr	r2, [r3, #28]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	0a5b      	lsrs	r3, r3, #9
 800a5d0:	441a      	add	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e2:	441a      	add	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3718      	adds	r7, #24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b086      	sub	sp, #24
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	3320      	adds	r3, #32
 800a608:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <dir_next+0x28>
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a618:	d301      	bcc.n	800a61e <dir_next+0x2c>
 800a61a:	2304      	movs	r3, #4
 800a61c:	e0aa      	b.n	800a774 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a624:	2b00      	cmp	r3, #0
 800a626:	f040 8098 	bne.w	800a75a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10b      	bne.n	800a654 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	095b      	lsrs	r3, r3, #5
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	8912      	ldrh	r2, [r2, #8]
 800a644:	4293      	cmp	r3, r2
 800a646:	f0c0 8088 	bcc.w	800a75a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	61da      	str	r2, [r3, #28]
 800a650:	2304      	movs	r3, #4
 800a652:	e08f      	b.n	800a774 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	0a5b      	lsrs	r3, r3, #9
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	8952      	ldrh	r2, [r2, #10]
 800a65c:	3a01      	subs	r2, #1
 800a65e:	4013      	ands	r3, r2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d17a      	bne.n	800a75a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	4619      	mov	r1, r3
 800a66c:	4610      	mov	r0, r2
 800a66e:	f7ff fc80 	bl	8009f72 <get_fat>
 800a672:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d801      	bhi.n	800a67e <dir_next+0x8c>
 800a67a:	2302      	movs	r3, #2
 800a67c:	e07a      	b.n	800a774 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a684:	d101      	bne.n	800a68a <dir_next+0x98>
 800a686:	2301      	movs	r3, #1
 800a688:	e074      	b.n	800a774 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	429a      	cmp	r2, r3
 800a692:	d358      	bcc.n	800a746 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d104      	bne.n	800a6a4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	61da      	str	r2, [r3, #28]
 800a6a0:	2304      	movs	r3, #4
 800a6a2:	e067      	b.n	800a774 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7ff fe59 	bl	800a364 <create_chain>
 800a6b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <dir_next+0xcc>
 800a6ba:	2307      	movs	r3, #7
 800a6bc:	e05a      	b.n	800a774 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d101      	bne.n	800a6c8 <dir_next+0xd6>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	e055      	b.n	800a774 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ce:	d101      	bne.n	800a6d4 <dir_next+0xe2>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e04f      	b.n	800a774 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7ff fb4d 	bl	8009d74 <sync_window>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <dir_next+0xf2>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e047      	b.n	800a774 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3330      	adds	r3, #48	; 0x30
 800a6e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff f977 	bl	80099e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]
 800a6f8:	6979      	ldr	r1, [r7, #20]
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f7ff fc1a 	bl	8009f34 <clust2sect>
 800a700:	4602      	mov	r2, r0
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	62da      	str	r2, [r3, #44]	; 0x2c
 800a706:	e012      	b.n	800a72e <dir_next+0x13c>
						fs->wflag = 1;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2201      	movs	r2, #1
 800a70c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff fb30 	bl	8009d74 <sync_window>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <dir_next+0x12c>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e02a      	b.n	800a774 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	3301      	adds	r3, #1
 800a722:	613b      	str	r3, [r7, #16]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	895b      	ldrh	r3, [r3, #10]
 800a732:	461a      	mov	r2, r3
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	4293      	cmp	r3, r2
 800a738:	d3e6      	bcc.n	800a708 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	1ad2      	subs	r2, r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a74c:	6979      	ldr	r1, [r7, #20]
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff fbf0 	bl	8009f34 <clust2sect>
 800a754:	4602      	mov	r2, r0
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76c:	441a      	add	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3718      	adds	r7, #24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a78c:	2100      	movs	r1, #0
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7ff feb4 	bl	800a4fc <dir_sdi>
 800a794:	4603      	mov	r3, r0
 800a796:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d12b      	bne.n	800a7f6 <dir_alloc+0x7a>
		n = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f7ff fb27 	bl	8009dfc <move_window>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a7b2:	7dfb      	ldrb	r3, [r7, #23]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d11d      	bne.n	800a7f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2be5      	cmp	r3, #229	; 0xe5
 800a7c0:	d004      	beq.n	800a7cc <dir_alloc+0x50>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d107      	bne.n	800a7dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	613b      	str	r3, [r7, #16]
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d102      	bne.n	800a7e0 <dir_alloc+0x64>
 800a7da:	e00c      	b.n	800a7f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a7dc:	2300      	movs	r3, #0
 800a7de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff ff05 	bl	800a5f2 <dir_next>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a7ec:	7dfb      	ldrb	r3, [r7, #23]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0d7      	beq.n	800a7a2 <dir_alloc+0x26>
 800a7f2:	e000      	b.n	800a7f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a7f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	d101      	bne.n	800a800 <dir_alloc+0x84>
 800a7fc:	2307      	movs	r3, #7
 800a7fe:	75fb      	strb	r3, [r7, #23]
	return res;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b084      	sub	sp, #16
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	331a      	adds	r3, #26
 800a818:	4618      	mov	r0, r3
 800a81a:	f7ff f83f 	bl	800989c <ld_word>
 800a81e:	4603      	mov	r3, r0
 800a820:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	2b03      	cmp	r3, #3
 800a828:	d109      	bne.n	800a83e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	3314      	adds	r3, #20
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff f834 	bl	800989c <ld_word>
 800a834:	4603      	mov	r3, r0
 800a836:	041b      	lsls	r3, r3, #16
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a83e:	68fb      	ldr	r3, [r7, #12]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	331a      	adds	r3, #26
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	b292      	uxth	r2, r2
 800a85c:	4611      	mov	r1, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff f857 	bl	8009912 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d109      	bne.n	800a880 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	f103 0214 	add.w	r2, r3, #20
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	0c1b      	lsrs	r3, r3, #16
 800a876:	b29b      	uxth	r3, r3
 800a878:	4619      	mov	r1, r3
 800a87a:	4610      	mov	r0, r2
 800a87c:	f7ff f849 	bl	8009912 <st_word>
	}
}
 800a880:	bf00      	nop
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a896:	2100      	movs	r1, #0
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff fe2f 	bl	800a4fc <dir_sdi>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <dir_find+0x24>
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
 800a8aa:	e03e      	b.n	800a92a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	69db      	ldr	r3, [r3, #28]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6938      	ldr	r0, [r7, #16]
 800a8b4:	f7ff faa2 	bl	8009dfc <move_window>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d12f      	bne.n	800a922 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <dir_find+0x4e>
 800a8d0:	2304      	movs	r3, #4
 800a8d2:	75fb      	strb	r3, [r7, #23]
 800a8d4:	e028      	b.n	800a928 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	330b      	adds	r3, #11
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	330b      	adds	r3, #11
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	f003 0308 	and.w	r3, r3, #8
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <dir_find+0x86>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a18      	ldr	r0, [r3, #32]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3324      	adds	r3, #36	; 0x24
 800a900:	220b      	movs	r2, #11
 800a902:	4619      	mov	r1, r3
 800a904:	f7ff f888 	bl	8009a18 <mem_cmp>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00b      	beq.n	800a926 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a90e:	2100      	movs	r1, #0
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff fe6e 	bl	800a5f2 <dir_next>
 800a916:	4603      	mov	r3, r0
 800a918:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0c5      	beq.n	800a8ac <dir_find+0x24>
 800a920:	e002      	b.n	800a928 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a922:	bf00      	nop
 800a924:	e000      	b.n	800a928 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a926:	bf00      	nop

	return res;
 800a928:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a940:	2101      	movs	r1, #1
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7ff ff1a 	bl	800a77c <dir_alloc>
 800a948:	4603      	mov	r3, r0
 800a94a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d11c      	bne.n	800a98c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	4619      	mov	r1, r3
 800a958:	68b8      	ldr	r0, [r7, #8]
 800a95a:	f7ff fa4f 	bl	8009dfc <move_window>
 800a95e:	4603      	mov	r3, r0
 800a960:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d111      	bne.n	800a98c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	2220      	movs	r2, #32
 800a96e:	2100      	movs	r1, #0
 800a970:	4618      	mov	r0, r3
 800a972:	f7ff f836 	bl	80099e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a18      	ldr	r0, [r3, #32]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	3324      	adds	r3, #36	; 0x24
 800a97e:	220b      	movs	r2, #11
 800a980:	4619      	mov	r1, r3
 800a982:	f7ff f80d 	bl	80099a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2201      	movs	r2, #1
 800a98a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3324      	adds	r3, #36	; 0x24
 800a9ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a9ae:	220b      	movs	r2, #11
 800a9b0:	2120      	movs	r1, #32
 800a9b2:	68b8      	ldr	r0, [r7, #8]
 800a9b4:	f7ff f815 	bl	80099e2 <mem_set>
	si = i = 0; ni = 8;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	613b      	str	r3, [r7, #16]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	2308      	movs	r3, #8
 800a9c2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	1c5a      	adds	r2, r3, #1
 800a9c8:	61fa      	str	r2, [r7, #28]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a9d2:	7efb      	ldrb	r3, [r7, #27]
 800a9d4:	2b20      	cmp	r3, #32
 800a9d6:	d94e      	bls.n	800aa76 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a9d8:	7efb      	ldrb	r3, [r7, #27]
 800a9da:	2b2f      	cmp	r3, #47	; 0x2f
 800a9dc:	d006      	beq.n	800a9ec <create_name+0x54>
 800a9de:	7efb      	ldrb	r3, [r7, #27]
 800a9e0:	2b5c      	cmp	r3, #92	; 0x5c
 800a9e2:	d110      	bne.n	800aa06 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a9e4:	e002      	b.n	800a9ec <create_name+0x54>
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	61fb      	str	r3, [r7, #28]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b2f      	cmp	r3, #47	; 0x2f
 800a9f6:	d0f6      	beq.n	800a9e6 <create_name+0x4e>
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b5c      	cmp	r3, #92	; 0x5c
 800aa02:	d0f0      	beq.n	800a9e6 <create_name+0x4e>
			break;
 800aa04:	e038      	b.n	800aa78 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800aa06:	7efb      	ldrb	r3, [r7, #27]
 800aa08:	2b2e      	cmp	r3, #46	; 0x2e
 800aa0a:	d003      	beq.n	800aa14 <create_name+0x7c>
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d30c      	bcc.n	800aa2e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b0b      	cmp	r3, #11
 800aa18:	d002      	beq.n	800aa20 <create_name+0x88>
 800aa1a:	7efb      	ldrb	r3, [r7, #27]
 800aa1c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa1e:	d001      	beq.n	800aa24 <create_name+0x8c>
 800aa20:	2306      	movs	r3, #6
 800aa22:	e044      	b.n	800aaae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800aa24:	2308      	movs	r3, #8
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	230b      	movs	r3, #11
 800aa2a:	617b      	str	r3, [r7, #20]
			continue;
 800aa2c:	e022      	b.n	800aa74 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aa2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	da04      	bge.n	800aa40 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800aa36:	7efb      	ldrb	r3, [r7, #27]
 800aa38:	3b80      	subs	r3, #128	; 0x80
 800aa3a:	4a1f      	ldr	r2, [pc, #124]	; (800aab8 <create_name+0x120>)
 800aa3c:	5cd3      	ldrb	r3, [r2, r3]
 800aa3e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800aa40:	7efb      	ldrb	r3, [r7, #27]
 800aa42:	4619      	mov	r1, r3
 800aa44:	481d      	ldr	r0, [pc, #116]	; (800aabc <create_name+0x124>)
 800aa46:	f7ff f80e 	bl	8009a66 <chk_chr>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <create_name+0xbc>
 800aa50:	2306      	movs	r3, #6
 800aa52:	e02c      	b.n	800aaae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800aa54:	7efb      	ldrb	r3, [r7, #27]
 800aa56:	2b60      	cmp	r3, #96	; 0x60
 800aa58:	d905      	bls.n	800aa66 <create_name+0xce>
 800aa5a:	7efb      	ldrb	r3, [r7, #27]
 800aa5c:	2b7a      	cmp	r3, #122	; 0x7a
 800aa5e:	d802      	bhi.n	800aa66 <create_name+0xce>
 800aa60:	7efb      	ldrb	r3, [r7, #27]
 800aa62:	3b20      	subs	r3, #32
 800aa64:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	613a      	str	r2, [r7, #16]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	4413      	add	r3, r2
 800aa70:	7efa      	ldrb	r2, [r7, #27]
 800aa72:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800aa74:	e7a6      	b.n	800a9c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aa76:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	441a      	add	r2, r3
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d101      	bne.n	800aa8c <create_name+0xf4>
 800aa88:	2306      	movs	r3, #6
 800aa8a:	e010      	b.n	800aaae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	2be5      	cmp	r3, #229	; 0xe5
 800aa92:	d102      	bne.n	800aa9a <create_name+0x102>
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2205      	movs	r2, #5
 800aa98:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aa9a:	7efb      	ldrb	r3, [r7, #27]
 800aa9c:	2b20      	cmp	r3, #32
 800aa9e:	d801      	bhi.n	800aaa4 <create_name+0x10c>
 800aaa0:	2204      	movs	r2, #4
 800aaa2:	e000      	b.n	800aaa6 <create_name+0x10e>
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	330b      	adds	r3, #11
 800aaaa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aaac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3720      	adds	r7, #32
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	0800c974 	.word	0x0800c974
 800aabc:	0800c8fc 	.word	0x0800c8fc

0800aac0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aad4:	e002      	b.n	800aadc <follow_path+0x1c>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	3301      	adds	r3, #1
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b2f      	cmp	r3, #47	; 0x2f
 800aae2:	d0f8      	beq.n	800aad6 <follow_path+0x16>
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b5c      	cmp	r3, #92	; 0x5c
 800aaea:	d0f4      	beq.n	800aad6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	2b1f      	cmp	r3, #31
 800aaf8:	d80a      	bhi.n	800ab10 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2280      	movs	r2, #128	; 0x80
 800aafe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ab02:	2100      	movs	r1, #0
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fcf9 	bl	800a4fc <dir_sdi>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]
 800ab0e:	e043      	b.n	800ab98 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab10:	463b      	mov	r3, r7
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7ff ff3f 	bl	800a998 <create_name>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d134      	bne.n	800ab8e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff feaf 	bl	800a888 <dir_find>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ab34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00a      	beq.n	800ab52 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
 800ab3e:	2b04      	cmp	r3, #4
 800ab40:	d127      	bne.n	800ab92 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ab42:	7afb      	ldrb	r3, [r7, #11]
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d122      	bne.n	800ab92 <follow_path+0xd2>
 800ab4c:	2305      	movs	r3, #5
 800ab4e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ab50:	e01f      	b.n	800ab92 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	f003 0304 	and.w	r3, r3, #4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d11c      	bne.n	800ab96 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	799b      	ldrb	r3, [r3, #6]
 800ab60:	f003 0310 	and.w	r3, r3, #16
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d102      	bne.n	800ab6e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ab68:	2305      	movs	r3, #5
 800ab6a:	75fb      	strb	r3, [r7, #23]
 800ab6c:	e014      	b.n	800ab98 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7c:	4413      	add	r3, r2
 800ab7e:	4619      	mov	r1, r3
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff fe42 	bl	800a80a <ld_clust>
 800ab86:	4602      	mov	r2, r0
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab8c:	e7c0      	b.n	800ab10 <follow_path+0x50>
			if (res != FR_OK) break;
 800ab8e:	bf00      	nop
 800ab90:	e002      	b.n	800ab98 <follow_path+0xd8>
				break;
 800ab92:	bf00      	nop
 800ab94:	e000      	b.n	800ab98 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab96:	bf00      	nop
			}
		}
	}

	return res;
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b087      	sub	sp, #28
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800abaa:	f04f 33ff 	mov.w	r3, #4294967295
 800abae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d031      	beq.n	800ac1c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	617b      	str	r3, [r7, #20]
 800abbe:	e002      	b.n	800abc6 <get_ldnumber+0x24>
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	3301      	adds	r3, #1
 800abc4:	617b      	str	r3, [r7, #20]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	2b20      	cmp	r3, #32
 800abcc:	d903      	bls.n	800abd6 <get_ldnumber+0x34>
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	2b3a      	cmp	r3, #58	; 0x3a
 800abd4:	d1f4      	bne.n	800abc0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	2b3a      	cmp	r3, #58	; 0x3a
 800abdc:	d11c      	bne.n	800ac18 <get_ldnumber+0x76>
			tp = *path;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	60fa      	str	r2, [r7, #12]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	3b30      	subs	r3, #48	; 0x30
 800abee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b09      	cmp	r3, #9
 800abf4:	d80e      	bhi.n	800ac14 <get_ldnumber+0x72>
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d10a      	bne.n	800ac14 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d107      	bne.n	800ac14 <get_ldnumber+0x72>
					vol = (int)i;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	617b      	str	r3, [r7, #20]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	e002      	b.n	800ac1e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ac18:	2300      	movs	r3, #0
 800ac1a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ac1c:	693b      	ldr	r3, [r7, #16]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	371c      	adds	r7, #28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
	...

0800ac2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	70da      	strb	r2, [r3, #3]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac42:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff f8d8 	bl	8009dfc <move_window>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <check_fs+0x2a>
 800ac52:	2304      	movs	r3, #4
 800ac54:	e038      	b.n	800acc8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3330      	adds	r3, #48	; 0x30
 800ac5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe fe1c 	bl	800989c <ld_word>
 800ac64:	4603      	mov	r3, r0
 800ac66:	461a      	mov	r2, r3
 800ac68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d001      	beq.n	800ac74 <check_fs+0x48>
 800ac70:	2303      	movs	r3, #3
 800ac72:	e029      	b.n	800acc8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac7a:	2be9      	cmp	r3, #233	; 0xe9
 800ac7c:	d009      	beq.n	800ac92 <check_fs+0x66>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac84:	2beb      	cmp	r3, #235	; 0xeb
 800ac86:	d11e      	bne.n	800acc6 <check_fs+0x9a>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ac8e:	2b90      	cmp	r3, #144	; 0x90
 800ac90:	d119      	bne.n	800acc6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	3330      	adds	r3, #48	; 0x30
 800ac96:	3336      	adds	r3, #54	; 0x36
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe fe17 	bl	80098cc <ld_dword>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aca4:	4a0a      	ldr	r2, [pc, #40]	; (800acd0 <check_fs+0xa4>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d101      	bne.n	800acae <check_fs+0x82>
 800acaa:	2300      	movs	r3, #0
 800acac:	e00c      	b.n	800acc8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	3330      	adds	r3, #48	; 0x30
 800acb2:	3352      	adds	r3, #82	; 0x52
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe fe09 	bl	80098cc <ld_dword>
 800acba:	4603      	mov	r3, r0
 800acbc:	4a05      	ldr	r2, [pc, #20]	; (800acd4 <check_fs+0xa8>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d101      	bne.n	800acc6 <check_fs+0x9a>
 800acc2:	2300      	movs	r3, #0
 800acc4:	e000      	b.n	800acc8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800acc6:	2302      	movs	r3, #2
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	00544146 	.word	0x00544146
 800acd4:	33544146 	.word	0x33544146

0800acd8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b096      	sub	sp, #88	; 0x58
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4613      	mov	r3, r2
 800ace4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f7ff ff58 	bl	800aba2 <get_ldnumber>
 800acf2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800acf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	da01      	bge.n	800acfe <find_volume+0x26>
 800acfa:	230b      	movs	r3, #11
 800acfc:	e22e      	b.n	800b15c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800acfe:	4aa8      	ldr	r2, [pc, #672]	; (800afa0 <find_volume+0x2c8>)
 800ad00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d101      	bne.n	800ad12 <find_volume+0x3a>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	e224      	b.n	800b15c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ad18:	79fb      	ldrb	r3, [r7, #7]
 800ad1a:	f023 0301 	bic.w	r3, r3, #1
 800ad1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d01a      	beq.n	800ad5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ad28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2a:	785b      	ldrb	r3, [r3, #1]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7fe fd17 	bl	8009760 <disk_status>
 800ad32:	4603      	mov	r3, r0
 800ad34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ad38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10c      	bne.n	800ad5e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d007      	beq.n	800ad5a <find_volume+0x82>
 800ad4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad4e:	f003 0304 	and.w	r3, r3, #4
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ad56:	230a      	movs	r3, #10
 800ad58:	e200      	b.n	800b15c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	e1fe      	b.n	800b15c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	2200      	movs	r2, #0
 800ad62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ad64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	785b      	ldrb	r3, [r3, #1]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe fd0f 	bl	8009794 <disk_initialize>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ad7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad80:	f003 0301 	and.w	r3, r3, #1
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e1e7      	b.n	800b15c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d007      	beq.n	800ada2 <find_volume+0xca>
 800ad92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad96:	f003 0304 	and.w	r3, r3, #4
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ad9e:	230a      	movs	r3, #10
 800ada0:	e1dc      	b.n	800b15c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ada6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ada8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adaa:	f7ff ff3f 	bl	800ac2c <check_fs>
 800adae:	4603      	mov	r3, r0
 800adb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800adb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d14b      	bne.n	800ae54 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800adbc:	2300      	movs	r3, #0
 800adbe:	643b      	str	r3, [r7, #64]	; 0x40
 800adc0:	e01f      	b.n	800ae02 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800adc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800adc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800add0:	4413      	add	r3, r2
 800add2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	3304      	adds	r3, #4
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d006      	beq.n	800adec <find_volume+0x114>
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	3308      	adds	r3, #8
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fd72 	bl	80098cc <ld_dword>
 800ade8:	4602      	mov	r2, r0
 800adea:	e000      	b.n	800adee <find_volume+0x116>
 800adec:	2200      	movs	r2, #0
 800adee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800adf6:	440b      	add	r3, r1
 800adf8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800adfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adfe:	3301      	adds	r3, #1
 800ae00:	643b      	str	r3, [r7, #64]	; 0x40
 800ae02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae04:	2b03      	cmp	r3, #3
 800ae06:	d9dc      	bls.n	800adc2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ae08:	2300      	movs	r3, #0
 800ae0a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ae0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <find_volume+0x140>
 800ae12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae14:	3b01      	subs	r3, #1
 800ae16:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ae18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ae20:	4413      	add	r3, r2
 800ae22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ae26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ae28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d005      	beq.n	800ae3a <find_volume+0x162>
 800ae2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae32:	f7ff fefb 	bl	800ac2c <check_fs>
 800ae36:	4603      	mov	r3, r0
 800ae38:	e000      	b.n	800ae3c <find_volume+0x164>
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ae40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d905      	bls.n	800ae54 <find_volume+0x17c>
 800ae48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	643b      	str	r3, [r7, #64]	; 0x40
 800ae4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d9e1      	bls.n	800ae18 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ae54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d101      	bne.n	800ae60 <find_volume+0x188>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e17d      	b.n	800b15c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ae60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d901      	bls.n	800ae6c <find_volume+0x194>
 800ae68:	230d      	movs	r3, #13
 800ae6a:	e177      	b.n	800b15c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6e:	3330      	adds	r3, #48	; 0x30
 800ae70:	330b      	adds	r3, #11
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fd12 	bl	800989c <ld_word>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae7e:	d001      	beq.n	800ae84 <find_volume+0x1ac>
 800ae80:	230d      	movs	r3, #13
 800ae82:	e16b      	b.n	800b15c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	3330      	adds	r3, #48	; 0x30
 800ae88:	3316      	adds	r3, #22
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fe fd06 	bl	800989c <ld_word>
 800ae90:	4603      	mov	r3, r0
 800ae92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ae94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <find_volume+0x1d0>
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9c:	3330      	adds	r3, #48	; 0x30
 800ae9e:	3324      	adds	r3, #36	; 0x24
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe fd13 	bl	80098cc <ld_dword>
 800aea6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800aea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aeac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	789b      	ldrb	r3, [r3, #2]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d005      	beq.n	800aecc <find_volume+0x1f4>
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	789b      	ldrb	r3, [r3, #2]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d001      	beq.n	800aecc <find_volume+0x1f4>
 800aec8:	230d      	movs	r3, #13
 800aeca:	e147      	b.n	800b15c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800aecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aece:	789b      	ldrb	r3, [r3, #2]
 800aed0:	461a      	mov	r2, r3
 800aed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed4:	fb02 f303 	mul.w	r3, r2, r3
 800aed8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	895b      	ldrh	r3, [r3, #10]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d008      	beq.n	800af00 <find_volume+0x228>
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	895b      	ldrh	r3, [r3, #10]
 800aef2:	461a      	mov	r2, r3
 800aef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef6:	895b      	ldrh	r3, [r3, #10]
 800aef8:	3b01      	subs	r3, #1
 800aefa:	4013      	ands	r3, r2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <find_volume+0x22c>
 800af00:	230d      	movs	r3, #13
 800af02:	e12b      	b.n	800b15c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800af04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af06:	3330      	adds	r3, #48	; 0x30
 800af08:	3311      	adds	r3, #17
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fe fcc6 	bl	800989c <ld_word>
 800af10:	4603      	mov	r3, r0
 800af12:	461a      	mov	r2, r3
 800af14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	891b      	ldrh	r3, [r3, #8]
 800af1c:	f003 030f 	and.w	r3, r3, #15
 800af20:	b29b      	uxth	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <find_volume+0x252>
 800af26:	230d      	movs	r3, #13
 800af28:	e118      	b.n	800b15c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800af2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2c:	3330      	adds	r3, #48	; 0x30
 800af2e:	3313      	adds	r3, #19
 800af30:	4618      	mov	r0, r3
 800af32:	f7fe fcb3 	bl	800989c <ld_word>
 800af36:	4603      	mov	r3, r0
 800af38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800af3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d106      	bne.n	800af4e <find_volume+0x276>
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	3330      	adds	r3, #48	; 0x30
 800af44:	3320      	adds	r3, #32
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe fcc0 	bl	80098cc <ld_dword>
 800af4c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800af4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af50:	3330      	adds	r3, #48	; 0x30
 800af52:	330e      	adds	r3, #14
 800af54:	4618      	mov	r0, r3
 800af56:	f7fe fca1 	bl	800989c <ld_word>
 800af5a:	4603      	mov	r3, r0
 800af5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800af5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <find_volume+0x290>
 800af64:	230d      	movs	r3, #13
 800af66:	e0f9      	b.n	800b15c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800af68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af6c:	4413      	add	r3, r2
 800af6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af70:	8912      	ldrh	r2, [r2, #8]
 800af72:	0912      	lsrs	r2, r2, #4
 800af74:	b292      	uxth	r2, r2
 800af76:	4413      	add	r3, r2
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800af7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	429a      	cmp	r2, r3
 800af80:	d201      	bcs.n	800af86 <find_volume+0x2ae>
 800af82:	230d      	movs	r3, #13
 800af84:	e0ea      	b.n	800b15c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800af86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af8e:	8952      	ldrh	r2, [r2, #10]
 800af90:	fbb3 f3f2 	udiv	r3, r3, r2
 800af94:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d103      	bne.n	800afa4 <find_volume+0x2cc>
 800af9c:	230d      	movs	r3, #13
 800af9e:	e0dd      	b.n	800b15c <find_volume+0x484>
 800afa0:	20000038 	.word	0x20000038
		fmt = FS_FAT32;
 800afa4:	2303      	movs	r3, #3
 800afa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d802      	bhi.n	800afba <find_volume+0x2e2>
 800afb4:	2302      	movs	r3, #2
 800afb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d802      	bhi.n	800afca <find_volume+0x2f2>
 800afc4:	2301      	movs	r3, #1
 800afc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	1c9a      	adds	r2, r3, #2
 800afce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afd6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800afd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800afda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afdc:	441a      	add	r2, r3
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800afe2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe6:	441a      	add	r2, r3
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800afec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	d11e      	bne.n	800b032 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff6:	3330      	adds	r3, #48	; 0x30
 800aff8:	332a      	adds	r3, #42	; 0x2a
 800affa:	4618      	mov	r0, r3
 800affc:	f7fe fc4e 	bl	800989c <ld_word>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <find_volume+0x332>
 800b006:	230d      	movs	r3, #13
 800b008:	e0a8      	b.n	800b15c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	891b      	ldrh	r3, [r3, #8]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <find_volume+0x33e>
 800b012:	230d      	movs	r3, #13
 800b014:	e0a2      	b.n	800b15c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	3330      	adds	r3, #48	; 0x30
 800b01a:	332c      	adds	r3, #44	; 0x2c
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fe fc55 	bl	80098cc <ld_dword>
 800b022:	4602      	mov	r2, r0
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	695b      	ldr	r3, [r3, #20]
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	647b      	str	r3, [r7, #68]	; 0x44
 800b030:	e01f      	b.n	800b072 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	891b      	ldrh	r3, [r3, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d101      	bne.n	800b03e <find_volume+0x366>
 800b03a:	230d      	movs	r3, #13
 800b03c:	e08e      	b.n	800b15c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	6a1a      	ldr	r2, [r3, #32]
 800b042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b044:	441a      	add	r2, r3
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b04a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d103      	bne.n	800b05a <find_volume+0x382>
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	e00a      	b.n	800b070 <find_volume+0x398>
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	695a      	ldr	r2, [r3, #20]
 800b05e:	4613      	mov	r3, r2
 800b060:	005b      	lsls	r3, r3, #1
 800b062:	4413      	add	r3, r2
 800b064:	085a      	lsrs	r2, r3, #1
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b070:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	699a      	ldr	r2, [r3, #24]
 800b076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b078:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b07c:	0a5b      	lsrs	r3, r3, #9
 800b07e:	429a      	cmp	r2, r3
 800b080:	d201      	bcs.n	800b086 <find_volume+0x3ae>
 800b082:	230d      	movs	r3, #13
 800b084:	e06a      	b.n	800b15c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b088:	f04f 32ff 	mov.w	r2, #4294967295
 800b08c:	611a      	str	r2, [r3, #16]
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	2280      	movs	r2, #128	; 0x80
 800b09a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b09c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d149      	bne.n	800b138 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	3330      	adds	r3, #48	; 0x30
 800b0a8:	3330      	adds	r3, #48	; 0x30
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fe fbf6 	bl	800989c <ld_word>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d140      	bne.n	800b138 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0be:	f7fe fe9d 	bl	8009dfc <move_window>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d137      	bne.n	800b138 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d0:	3330      	adds	r3, #48	; 0x30
 800b0d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe fbe0 	bl	800989c <ld_word>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	461a      	mov	r2, r3
 800b0e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d127      	bne.n	800b138 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	3330      	adds	r3, #48	; 0x30
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fe fbed 	bl	80098cc <ld_dword>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	4a1b      	ldr	r2, [pc, #108]	; (800b164 <find_volume+0x48c>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d11e      	bne.n	800b138 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	3330      	adds	r3, #48	; 0x30
 800b0fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b102:	4618      	mov	r0, r3
 800b104:	f7fe fbe2 	bl	80098cc <ld_dword>
 800b108:	4603      	mov	r3, r0
 800b10a:	4a17      	ldr	r2, [pc, #92]	; (800b168 <find_volume+0x490>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d113      	bne.n	800b138 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	3330      	adds	r3, #48	; 0x30
 800b114:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fe fbd7 	bl	80098cc <ld_dword>
 800b11e:	4602      	mov	r2, r0
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	3330      	adds	r3, #48	; 0x30
 800b128:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fe fbcd 	bl	80098cc <ld_dword>
 800b132:	4602      	mov	r2, r0
 800b134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b136:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b13e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b140:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <find_volume+0x494>)
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	3301      	adds	r3, #1
 800b146:	b29a      	uxth	r2, r3
 800b148:	4b08      	ldr	r3, [pc, #32]	; (800b16c <find_volume+0x494>)
 800b14a:	801a      	strh	r2, [r3, #0]
 800b14c:	4b07      	ldr	r3, [pc, #28]	; (800b16c <find_volume+0x494>)
 800b14e:	881a      	ldrh	r2, [r3, #0]
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b156:	f7fe fde9 	bl	8009d2c <clear_lock>
#endif
	return FR_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3758      	adds	r7, #88	; 0x58
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	41615252 	.word	0x41615252
 800b168:	61417272 	.word	0x61417272
 800b16c:	2000003c 	.word	0x2000003c

0800b170 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b17a:	2309      	movs	r3, #9
 800b17c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d01c      	beq.n	800b1be <validate+0x4e>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d018      	beq.n	800b1be <validate+0x4e>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d013      	beq.n	800b1be <validate+0x4e>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	889a      	ldrh	r2, [r3, #4]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	88db      	ldrh	r3, [r3, #6]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d10c      	bne.n	800b1be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fe fad8 	bl	8009760 <disk_status>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <validate+0x4e>
			res = FR_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b1be:	7bfb      	ldrb	r3, [r7, #15]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d102      	bne.n	800b1ca <validate+0x5a>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	e000      	b.n	800b1cc <validate+0x5c>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	6013      	str	r3, [r2, #0]
	return res;
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b1ee:	f107 0310 	add.w	r3, r7, #16
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff fcd5 	bl	800aba2 <get_ldnumber>
 800b1f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	da01      	bge.n	800b204 <f_mount+0x28>
 800b200:	230b      	movs	r3, #11
 800b202:	e02b      	b.n	800b25c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b204:	4a17      	ldr	r2, [pc, #92]	; (800b264 <f_mount+0x88>)
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b20c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b214:	69b8      	ldr	r0, [r7, #24]
 800b216:	f7fe fd89 	bl	8009d2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	2200      	movs	r2, #0
 800b21e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d002      	beq.n	800b22c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	490d      	ldr	r1, [pc, #52]	; (800b264 <f_mount+0x88>)
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <f_mount+0x66>
 800b23c:	79fb      	ldrb	r3, [r7, #7]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d001      	beq.n	800b246 <f_mount+0x6a>
 800b242:	2300      	movs	r3, #0
 800b244:	e00a      	b.n	800b25c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b246:	f107 010c 	add.w	r1, r7, #12
 800b24a:	f107 0308 	add.w	r3, r7, #8
 800b24e:	2200      	movs	r2, #0
 800b250:	4618      	mov	r0, r3
 800b252:	f7ff fd41 	bl	800acd8 <find_volume>
 800b256:	4603      	mov	r3, r0
 800b258:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3720      	adds	r7, #32
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	20000038 	.word	0x20000038

0800b268 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b098      	sub	sp, #96	; 0x60
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	4613      	mov	r3, r2
 800b274:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <f_open+0x18>
 800b27c:	2309      	movs	r3, #9
 800b27e:	e1ad      	b.n	800b5dc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b286:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b288:	79fa      	ldrb	r2, [r7, #7]
 800b28a:	f107 0110 	add.w	r1, r7, #16
 800b28e:	f107 0308 	add.w	r3, r7, #8
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff fd20 	bl	800acd8 <find_volume>
 800b298:	4603      	mov	r3, r0
 800b29a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b29e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f040 8191 	bne.w	800b5ca <f_open+0x362>
		dj.obj.fs = fs;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	f107 0314 	add.w	r3, r7, #20
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7ff fc03 	bl	800aac0 <follow_path>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b2c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d11a      	bne.n	800b2fe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b2c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b2cc:	b25b      	sxtb	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	da03      	bge.n	800b2da <f_open+0x72>
				res = FR_INVALID_NAME;
 800b2d2:	2306      	movs	r3, #6
 800b2d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b2d8:	e011      	b.n	800b2fe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b2da:	79fb      	ldrb	r3, [r7, #7]
 800b2dc:	f023 0301 	bic.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bf14      	ite	ne
 800b2e4:	2301      	movne	r3, #1
 800b2e6:	2300      	moveq	r3, #0
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	f107 0314 	add.w	r3, r7, #20
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe fbd2 	bl	8009a9c <chk_lock>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b2fe:	79fb      	ldrb	r3, [r7, #7]
 800b300:	f003 031c 	and.w	r3, r3, #28
 800b304:	2b00      	cmp	r3, #0
 800b306:	d07f      	beq.n	800b408 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d017      	beq.n	800b340 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b314:	2b04      	cmp	r3, #4
 800b316:	d10e      	bne.n	800b336 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b318:	f7fe fc1c 	bl	8009b54 <enq_lock>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d006      	beq.n	800b330 <f_open+0xc8>
 800b322:	f107 0314 	add.w	r3, r7, #20
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fb03 	bl	800a932 <dir_register>
 800b32c:	4603      	mov	r3, r0
 800b32e:	e000      	b.n	800b332 <f_open+0xca>
 800b330:	2312      	movs	r3, #18
 800b332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	f043 0308 	orr.w	r3, r3, #8
 800b33c:	71fb      	strb	r3, [r7, #7]
 800b33e:	e010      	b.n	800b362 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b340:	7ebb      	ldrb	r3, [r7, #26]
 800b342:	f003 0311 	and.w	r3, r3, #17
 800b346:	2b00      	cmp	r3, #0
 800b348:	d003      	beq.n	800b352 <f_open+0xea>
					res = FR_DENIED;
 800b34a:	2307      	movs	r3, #7
 800b34c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b350:	e007      	b.n	800b362 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b352:	79fb      	ldrb	r3, [r7, #7]
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <f_open+0xfa>
 800b35c:	2308      	movs	r3, #8
 800b35e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b366:	2b00      	cmp	r3, #0
 800b368:	d168      	bne.n	800b43c <f_open+0x1d4>
 800b36a:	79fb      	ldrb	r3, [r7, #7]
 800b36c:	f003 0308 	and.w	r3, r3, #8
 800b370:	2b00      	cmp	r3, #0
 800b372:	d063      	beq.n	800b43c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b374:	f7fd ffa4 	bl	80092c0 <get_fattime>
 800b378:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b37c:	330e      	adds	r3, #14
 800b37e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b380:	4618      	mov	r0, r3
 800b382:	f7fe fae1 	bl	8009948 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b388:	3316      	adds	r3, #22
 800b38a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fe fadb 	bl	8009948 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b394:	330b      	adds	r3, #11
 800b396:	2220      	movs	r2, #32
 800b398:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b39e:	4611      	mov	r1, r2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7ff fa32 	bl	800a80a <ld_clust>
 800b3a6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fa4a 	bl	800a848 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b6:	331c      	adds	r3, #28
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fe fac4 	bl	8009948 <st_dword>
					fs->wflag = 1;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d037      	beq.n	800b43c <f_open+0x1d4>
						dw = fs->winsect;
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b3d2:	f107 0314 	add.w	r3, r7, #20
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe ff5d 	bl	800a29a <remove_chain>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b3e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d126      	bne.n	800b43c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe fd02 	bl	8009dfc <move_window>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b402:	3a01      	subs	r2, #1
 800b404:	60da      	str	r2, [r3, #12]
 800b406:	e019      	b.n	800b43c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d115      	bne.n	800b43c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b410:	7ebb      	ldrb	r3, [r7, #26]
 800b412:	f003 0310 	and.w	r3, r3, #16
 800b416:	2b00      	cmp	r3, #0
 800b418:	d003      	beq.n	800b422 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b41a:	2304      	movs	r3, #4
 800b41c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b420:	e00c      	b.n	800b43c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b422:	79fb      	ldrb	r3, [r7, #7]
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d007      	beq.n	800b43c <f_open+0x1d4>
 800b42c:	7ebb      	ldrb	r3, [r7, #26]
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d002      	beq.n	800b43c <f_open+0x1d4>
						res = FR_DENIED;
 800b436:	2307      	movs	r3, #7
 800b438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b43c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b440:	2b00      	cmp	r3, #0
 800b442:	d128      	bne.n	800b496 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b444:	79fb      	ldrb	r3, [r7, #7]
 800b446:	f003 0308 	and.w	r3, r3, #8
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b44e:	79fb      	ldrb	r3, [r7, #7]
 800b450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b454:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b45e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	f023 0301 	bic.w	r3, r3, #1
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	bf14      	ite	ne
 800b46e:	2301      	movne	r3, #1
 800b470:	2300      	moveq	r3, #0
 800b472:	b2db      	uxtb	r3, r3
 800b474:	461a      	mov	r2, r3
 800b476:	f107 0314 	add.w	r3, r7, #20
 800b47a:	4611      	mov	r1, r2
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fe fb8b 	bl	8009b98 <inc_lock>
 800b482:	4602      	mov	r2, r0
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <f_open+0x22e>
 800b490:	2302      	movs	r3, #2
 800b492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f040 8095 	bne.w	800b5ca <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff f9af 	bl	800a80a <ld_clust>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b4:	331c      	adds	r3, #28
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe fa08 	bl	80098cc <ld_dword>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	88da      	ldrh	r2, [r3, #6]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	79fa      	ldrb	r2, [r7, #7]
 800b4da:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3330      	adds	r3, #48	; 0x30
 800b4f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fe fa72 	bl	80099e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b4fe:	79fb      	ldrb	r3, [r7, #7]
 800b500:	f003 0320 	and.w	r3, r3, #32
 800b504:	2b00      	cmp	r3, #0
 800b506:	d060      	beq.n	800b5ca <f_open+0x362>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d05c      	beq.n	800b5ca <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	68da      	ldr	r2, [r3, #12]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	895b      	ldrh	r3, [r3, #10]
 800b51c:	025b      	lsls	r3, r3, #9
 800b51e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	657b      	str	r3, [r7, #84]	; 0x54
 800b52c:	e016      	b.n	800b55c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fd1d 	bl	8009f72 <get_fat>
 800b538:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b53a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d802      	bhi.n	800b546 <f_open+0x2de>
 800b540:	2302      	movs	r3, #2
 800b542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54c:	d102      	bne.n	800b554 <f_open+0x2ec>
 800b54e:	2301      	movs	r3, #1
 800b550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	657b      	str	r3, [r7, #84]	; 0x54
 800b55c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b560:	2b00      	cmp	r3, #0
 800b562:	d103      	bne.n	800b56c <f_open+0x304>
 800b564:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b568:	429a      	cmp	r2, r3
 800b56a:	d8e0      	bhi.n	800b52e <f_open+0x2c6>
				}
				fp->clust = clst;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b570:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b576:	2b00      	cmp	r3, #0
 800b578:	d127      	bne.n	800b5ca <f_open+0x362>
 800b57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b57c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b580:	2b00      	cmp	r3, #0
 800b582:	d022      	beq.n	800b5ca <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe fcd3 	bl	8009f34 <clust2sect>
 800b58e:	6478      	str	r0, [r7, #68]	; 0x44
 800b590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b592:	2b00      	cmp	r3, #0
 800b594:	d103      	bne.n	800b59e <f_open+0x336>
						res = FR_INT_ERR;
 800b596:	2302      	movs	r3, #2
 800b598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b59c:	e015      	b.n	800b5ca <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5a0:	0a5a      	lsrs	r2, r3, #9
 800b5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5a4:	441a      	add	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	7858      	ldrb	r0, [r3, #1]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6a1a      	ldr	r2, [r3, #32]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	f7fe f911 	bl	80097e0 <disk_read>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <f_open+0x362>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b5ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d002      	beq.n	800b5d8 <f_open+0x370>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b5d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3760      	adds	r7, #96	; 0x60
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08c      	sub	sp, #48	; 0x30
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
 800b5f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f107 0210 	add.w	r2, r7, #16
 800b602:	4611      	mov	r1, r2
 800b604:	4618      	mov	r0, r3
 800b606:	f7ff fdb3 	bl	800b170 <validate>
 800b60a:	4603      	mov	r3, r0
 800b60c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b614:	2b00      	cmp	r3, #0
 800b616:	d107      	bne.n	800b628 <f_write+0x44>
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	7d5b      	ldrb	r3, [r3, #21]
 800b61c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <f_write+0x4a>
 800b628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b62c:	e14b      	b.n	800b8c6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	7d1b      	ldrb	r3, [r3, #20]
 800b632:	f003 0302 	and.w	r3, r3, #2
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <f_write+0x5a>
 800b63a:	2307      	movs	r3, #7
 800b63c:	e143      	b.n	800b8c6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	699a      	ldr	r2, [r3, #24]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	441a      	add	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	f080 812d 	bcs.w	800b8aa <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	43db      	mvns	r3, r3
 800b656:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b658:	e127      	b.n	800b8aa <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b662:	2b00      	cmp	r3, #0
 800b664:	f040 80e3 	bne.w	800b82e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	0a5b      	lsrs	r3, r3, #9
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	8952      	ldrh	r2, [r2, #10]
 800b672:	3a01      	subs	r2, #1
 800b674:	4013      	ands	r3, r2
 800b676:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d143      	bne.n	800b706 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	699b      	ldr	r3, [r3, #24]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10c      	bne.n	800b6a0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d11a      	bne.n	800b6c8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2100      	movs	r1, #0
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe fe64 	bl	800a364 <create_chain>
 800b69c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b69e:	e013      	b.n	800b6c8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7fe fef0 	bl	800a494 <clmt_clust>
 800b6b4:	62b8      	str	r0, [r7, #40]	; 0x28
 800b6b6:	e007      	b.n	800b6c8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	69db      	ldr	r3, [r3, #28]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4610      	mov	r0, r2
 800b6c2:	f7fe fe4f 	bl	800a364 <create_chain>
 800b6c6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f000 80f2 	beq.w	800b8b4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d104      	bne.n	800b6e0 <f_write+0xfc>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2202      	movs	r2, #2
 800b6da:	755a      	strb	r2, [r3, #21]
 800b6dc:	2302      	movs	r3, #2
 800b6de:	e0f2      	b.n	800b8c6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e6:	d104      	bne.n	800b6f2 <f_write+0x10e>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	755a      	strb	r2, [r3, #21]
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e0e9      	b.n	800b8c6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <f_write+0x122>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b704:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	7d1b      	ldrb	r3, [r3, #20]
 800b70a:	b25b      	sxtb	r3, r3
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	da18      	bge.n	800b742 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	7858      	ldrb	r0, [r3, #1]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a1a      	ldr	r2, [r3, #32]
 800b71e:	2301      	movs	r3, #1
 800b720:	f7fe f87e 	bl	8009820 <disk_write>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d004      	beq.n	800b734 <f_write+0x150>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2201      	movs	r2, #1
 800b72e:	755a      	strb	r2, [r3, #21]
 800b730:	2301      	movs	r3, #1
 800b732:	e0c8      	b.n	800b8c6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	7d1b      	ldrb	r3, [r3, #20]
 800b738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	69db      	ldr	r3, [r3, #28]
 800b748:	4619      	mov	r1, r3
 800b74a:	4610      	mov	r0, r2
 800b74c:	f7fe fbf2 	bl	8009f34 <clust2sect>
 800b750:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d104      	bne.n	800b762 <f_write+0x17e>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2202      	movs	r2, #2
 800b75c:	755a      	strb	r2, [r3, #21]
 800b75e:	2302      	movs	r3, #2
 800b760:	e0b1      	b.n	800b8c6 <f_write+0x2e2>
			sect += csect;
 800b762:	697a      	ldr	r2, [r7, #20]
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	4413      	add	r3, r2
 800b768:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	0a5b      	lsrs	r3, r3, #9
 800b76e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d03c      	beq.n	800b7f0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b776:	69ba      	ldr	r2, [r7, #24]
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	4413      	add	r3, r2
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	8952      	ldrh	r2, [r2, #10]
 800b780:	4293      	cmp	r3, r2
 800b782:	d905      	bls.n	800b790 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	895b      	ldrh	r3, [r3, #10]
 800b788:	461a      	mov	r2, r3
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	7858      	ldrb	r0, [r3, #1]
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	69f9      	ldr	r1, [r7, #28]
 800b79a:	f7fe f841 	bl	8009820 <disk_write>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d004      	beq.n	800b7ae <f_write+0x1ca>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	755a      	strb	r2, [r3, #21]
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e08b      	b.n	800b8c6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a1a      	ldr	r2, [r3, #32]
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	6a3a      	ldr	r2, [r7, #32]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d915      	bls.n	800b7e8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6a1a      	ldr	r2, [r3, #32]
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	025b      	lsls	r3, r3, #9
 800b7cc:	69fa      	ldr	r2, [r7, #28]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	f7fe f8e3 	bl	80099a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	7d1b      	ldrb	r3, [r3, #20]
 800b7de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	025b      	lsls	r3, r3, #9
 800b7ec:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b7ee:	e03f      	b.n	800b870 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6a1b      	ldr	r3, [r3, #32]
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d016      	beq.n	800b828 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	699a      	ldr	r2, [r3, #24]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b802:	429a      	cmp	r2, r3
 800b804:	d210      	bcs.n	800b828 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	7858      	ldrb	r0, [r3, #1]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b810:	2301      	movs	r3, #1
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	f7fd ffe4 	bl	80097e0 <disk_read>
 800b818:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d004      	beq.n	800b828 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2201      	movs	r2, #1
 800b822:	755a      	strb	r2, [r3, #21]
 800b824:	2301      	movs	r3, #1
 800b826:	e04e      	b.n	800b8c6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b836:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b83a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b83c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	429a      	cmp	r2, r3
 800b842:	d901      	bls.n	800b848 <f_write+0x264>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b856:	4413      	add	r3, r2
 800b858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b85a:	69f9      	ldr	r1, [r7, #28]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fe f89f 	bl	80099a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	7d1b      	ldrb	r3, [r3, #20]
 800b866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b870:	69fa      	ldr	r2, [r7, #28]
 800b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b874:	4413      	add	r3, r2
 800b876:	61fb      	str	r3, [r7, #28]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	699a      	ldr	r2, [r3, #24]
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	441a      	add	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	619a      	str	r2, [r3, #24]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	68da      	ldr	r2, [r3, #12]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	bf38      	it	cc
 800b890:	461a      	movcc	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	441a      	add	r2, r3
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f47f aed4 	bne.w	800b65a <f_write+0x76>
 800b8b2:	e000      	b.n	800b8b6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b8b4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	7d1b      	ldrb	r3, [r3, #20]
 800b8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3730      	adds	r7, #48	; 0x30
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b086      	sub	sp, #24
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f107 0208 	add.w	r2, r7, #8
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff fc46 	bl	800b170 <validate>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b8e8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d168      	bne.n	800b9c0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7d1b      	ldrb	r3, [r3, #20]
 800b8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d062      	beq.n	800b9c0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	7d1b      	ldrb	r3, [r3, #20]
 800b8fe:	b25b      	sxtb	r3, r3
 800b900:	2b00      	cmp	r3, #0
 800b902:	da15      	bge.n	800b930 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	7858      	ldrb	r0, [r3, #1]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a1a      	ldr	r2, [r3, #32]
 800b912:	2301      	movs	r3, #1
 800b914:	f7fd ff84 	bl	8009820 <disk_write>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <f_sync+0x54>
 800b91e:	2301      	movs	r3, #1
 800b920:	e04f      	b.n	800b9c2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	7d1b      	ldrb	r3, [r3, #20]
 800b926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b930:	f7fd fcc6 	bl	80092c0 <get_fattime>
 800b934:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b936:	68ba      	ldr	r2, [r7, #8]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	4619      	mov	r1, r3
 800b93e:	4610      	mov	r0, r2
 800b940:	f7fe fa5c 	bl	8009dfc <move_window>
 800b944:	4603      	mov	r3, r0
 800b946:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b948:	7dfb      	ldrb	r3, [r7, #23]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d138      	bne.n	800b9c0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b952:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	330b      	adds	r3, #11
 800b958:	781a      	ldrb	r2, [r3, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	330b      	adds	r3, #11
 800b95e:	f042 0220 	orr.w	r2, r2, #32
 800b962:	b2d2      	uxtb	r2, r2
 800b964:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	461a      	mov	r2, r3
 800b970:	68f9      	ldr	r1, [r7, #12]
 800b972:	f7fe ff69 	bl	800a848 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f103 021c 	add.w	r2, r3, #28
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	4619      	mov	r1, r3
 800b982:	4610      	mov	r0, r2
 800b984:	f7fd ffe0 	bl	8009948 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	3316      	adds	r3, #22
 800b98c:	6939      	ldr	r1, [r7, #16]
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fd ffda 	bl	8009948 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3312      	adds	r3, #18
 800b998:	2100      	movs	r1, #0
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fd ffb9 	bl	8009912 <st_word>
					fs->wflag = 1;
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe fa55 	bl	8009e58 <sync_fs>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	7d1b      	ldrb	r3, [r3, #20]
 800b9b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b084      	sub	sp, #16
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7ff ff7b 	bl	800b8ce <f_sync>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d118      	bne.n	800ba14 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f107 0208 	add.w	r2, r7, #8
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff fbc0 	bl	800b170 <validate>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10c      	bne.n	800ba14 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe f958 	bl	8009cb4 <dec_lock>
 800ba04:	4603      	mov	r3, r0
 800ba06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d102      	bne.n	800ba14 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800ba20:	b590      	push	{r4, r7, lr}
 800ba22:	b09d      	sub	sp, #116	; 0x74
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	607a      	str	r2, [r7, #4]
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800ba30:	2301      	movs	r3, #1
 800ba32:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800ba34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba38:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800ba3a:	f107 030c 	add.w	r3, r7, #12
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff f8af 	bl	800aba2 <get_ldnumber>
 800ba44:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ba46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	da02      	bge.n	800ba52 <f_mkfs+0x32>
 800ba4c:	230b      	movs	r3, #11
 800ba4e:	f000 bc0d 	b.w	800c26c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800ba52:	4a94      	ldr	r2, [pc, #592]	; (800bca4 <f_mkfs+0x284>)
 800ba54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d005      	beq.n	800ba6a <f_mkfs+0x4a>
 800ba5e:	4a91      	ldr	r2, [pc, #580]	; (800bca4 <f_mkfs+0x284>)
 800ba60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba66:	2200      	movs	r2, #0
 800ba68:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800ba6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800ba70:	2300      	movs	r3, #0
 800ba72:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800ba76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fd fe8a 	bl	8009794 <disk_initialize>
 800ba80:	4603      	mov	r3, r0
 800ba82:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800ba86:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <f_mkfs+0x76>
 800ba92:	2303      	movs	r3, #3
 800ba94:	e3ea      	b.n	800c26c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800ba96:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ba9a:	f003 0304 	and.w	r3, r3, #4
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <f_mkfs+0x86>
 800baa2:	230a      	movs	r3, #10
 800baa4:	e3e2      	b.n	800c26c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800baa6:	f107 0214 	add.w	r2, r7, #20
 800baaa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800baae:	2103      	movs	r1, #3
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fd fed5 	bl	8009860 <disk_ioctl>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10c      	bne.n	800bad6 <f_mkfs+0xb6>
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d009      	beq.n	800bad6 <f_mkfs+0xb6>
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bac8:	d805      	bhi.n	800bad6 <f_mkfs+0xb6>
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	1e5a      	subs	r2, r3, #1
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	4013      	ands	r3, r2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <f_mkfs+0xba>
 800bad6:	2301      	movs	r3, #1
 800bad8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800bada:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bade:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <f_mkfs+0xce>
 800bae6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	429a      	cmp	r2, r3
 800baec:	d309      	bcc.n	800bb02 <f_mkfs+0xe2>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800baf4:	d805      	bhi.n	800bb02 <f_mkfs+0xe2>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	1e5a      	subs	r2, r3, #1
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4013      	ands	r3, r2
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <f_mkfs+0xe6>
 800bb02:	2313      	movs	r3, #19
 800bb04:	e3b2      	b.n	800c26c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800bb06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bb14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bb20:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb24:	fb02 f303 	mul.w	r3, r2, r3
 800bb28:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <f_mkfs+0x114>
 800bb30:	230e      	movs	r3, #14
 800bb32:	e39b      	b.n	800c26c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bb34:	f107 0210 	add.w	r2, r7, #16
 800bb38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fd fe8e 	bl	8009860 <disk_ioctl>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <f_mkfs+0x12e>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e38e      	b.n	800c26c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bb4e:	7afb      	ldrb	r3, [r7, #11]
 800bb50:	f003 0308 	and.w	r3, r3, #8
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <f_mkfs+0x13c>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e000      	b.n	800bb5e <f_mkfs+0x13e>
 800bb5c:	233f      	movs	r3, #63	; 0x3f
 800bb5e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d901      	bls.n	800bb6c <f_mkfs+0x14c>
 800bb68:	230e      	movs	r3, #14
 800bb6a:	e37f      	b.n	800c26c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	2b7f      	cmp	r3, #127	; 0x7f
 800bb78:	d801      	bhi.n	800bb7e <f_mkfs+0x15e>
 800bb7a:	230e      	movs	r3, #14
 800bb7c:	e376      	b.n	800c26c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2b80      	cmp	r3, #128	; 0x80
 800bb82:	d901      	bls.n	800bb88 <f_mkfs+0x168>
 800bb84:	2313      	movs	r3, #19
 800bb86:	e371      	b.n	800c26c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bb88:	7afb      	ldrb	r3, [r7, #11]
 800bb8a:	f003 0302 	and.w	r3, r3, #2
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00d      	beq.n	800bbae <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bb92:	7afb      	ldrb	r3, [r7, #11]
 800bb94:	f003 0307 	and.w	r3, r3, #7
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d004      	beq.n	800bba6 <f_mkfs+0x186>
 800bb9c:	7afb      	ldrb	r3, [r7, #11]
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d103      	bne.n	800bbae <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800bba6:	2303      	movs	r3, #3
 800bba8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bbac:	e009      	b.n	800bbc2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bbae:	7afb      	ldrb	r3, [r7, #11]
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d101      	bne.n	800bbbc <f_mkfs+0x19c>
 800bbb8:	2313      	movs	r3, #19
 800bbba:	e357      	b.n	800c26c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bbc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d13c      	bne.n	800bc48 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800bbce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d11b      	bne.n	800bc0c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	0c5b      	lsrs	r3, r3, #17
 800bbd8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bbda:	2300      	movs	r3, #0
 800bbdc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbde:	2301      	movs	r3, #1
 800bbe0:	653b      	str	r3, [r7, #80]	; 0x50
 800bbe2:	e005      	b.n	800bbf0 <f_mkfs+0x1d0>
 800bbe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	653b      	str	r3, [r7, #80]	; 0x50
 800bbf0:	4a2d      	ldr	r2, [pc, #180]	; (800bca8 <f_mkfs+0x288>)
 800bbf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d007      	beq.n	800bc0c <f_mkfs+0x1ec>
 800bbfc:	4a2a      	ldr	r2, [pc, #168]	; (800bca8 <f_mkfs+0x288>)
 800bbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc04:	461a      	mov	r2, r3
 800bc06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d2eb      	bcs.n	800bbe4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc14:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	3302      	adds	r3, #2
 800bc1a:	009a      	lsls	r2, r3, #2
 800bc1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc1e:	4413      	add	r3, r2
 800bc20:	1e5a      	subs	r2, r3, #1
 800bc22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc24:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc28:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bc2a:	2320      	movs	r3, #32
 800bc2c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bc2e:	2300      	movs	r3, #0
 800bc30:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d903      	bls.n	800bc44 <f_mkfs+0x224>
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
 800bc3e:	4a1b      	ldr	r2, [pc, #108]	; (800bcac <f_mkfs+0x28c>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d952      	bls.n	800bcea <f_mkfs+0x2ca>
 800bc44:	230e      	movs	r3, #14
 800bc46:	e311      	b.n	800c26c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800bc48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d11b      	bne.n	800bc86 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	0b1b      	lsrs	r3, r3, #12
 800bc52:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bc54:	2300      	movs	r3, #0
 800bc56:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc58:	2301      	movs	r3, #1
 800bc5a:	653b      	str	r3, [r7, #80]	; 0x50
 800bc5c:	e005      	b.n	800bc6a <f_mkfs+0x24a>
 800bc5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc60:	3301      	adds	r3, #1
 800bc62:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	653b      	str	r3, [r7, #80]	; 0x50
 800bc6a:	4a11      	ldr	r2, [pc, #68]	; (800bcb0 <f_mkfs+0x290>)
 800bc6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d007      	beq.n	800bc86 <f_mkfs+0x266>
 800bc76:	4a0e      	ldr	r2, [pc, #56]	; (800bcb0 <f_mkfs+0x290>)
 800bc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d2eb      	bcs.n	800bc5e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc8e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d90c      	bls.n	800bcb4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	3302      	adds	r3, #2
 800bc9e:	005b      	lsls	r3, r3, #1
 800bca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bca2:	e012      	b.n	800bcca <f_mkfs+0x2aa>
 800bca4:	20000038 	.word	0x20000038
 800bca8:	0800c9f4 	.word	0x0800c9f4
 800bcac:	0ffffff5 	.word	0x0ffffff5
 800bcb0:	0800ca04 	.word	0x0800ca04
				} else {
					fmt = FS_FAT12;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800bcba:	6a3a      	ldr	r2, [r7, #32]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	005b      	lsls	r3, r3, #1
 800bcc0:	4413      	add	r3, r2
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	085b      	lsrs	r3, r3, #1
 800bcc6:	3303      	adds	r3, #3
 800bcc8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800bcca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcce:	4413      	add	r3, r2
 800bcd0:	1e5a      	subs	r2, r3, #1
 800bcd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800bcda:	2301      	movs	r3, #1
 800bcdc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800bcde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce0:	015a      	lsls	r2, r3, #5
 800bce2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bce4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800bcea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcee:	4413      	add	r3, r2
 800bcf0:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800bcf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcf6:	fb02 f203 	mul.w	r2, r2, r3
 800bcfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcfc:	4413      	add	r3, r2
 800bcfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd00:	4413      	add	r3, r2
 800bd02:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	4413      	add	r3, r2
 800bd0a:	1e5a      	subs	r2, r3, #1
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	425b      	negs	r3, r3
 800bd10:	401a      	ands	r2, r3
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800bd18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d108      	bne.n	800bd32 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800bd20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd24:	4413      	add	r3, r2
 800bd26:	657b      	str	r3, [r7, #84]	; 0x54
 800bd28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd2c:	4413      	add	r3, r2
 800bd2e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd30:	e006      	b.n	800bd40 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800bd32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd3c:	4413      	add	r3, r2
 800bd3e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800bd40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd42:	011a      	lsls	r2, r3, #4
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	441a      	add	r2, r3
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	1ad2      	subs	r2, r2, r3
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d901      	bls.n	800bd56 <f_mkfs+0x336>
 800bd52:	230e      	movs	r3, #14
 800bd54:	e28a      	b.n	800c26c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd5a:	1ad2      	subs	r2, r2, r3
 800bd5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd60:	fb01 f303 	mul.w	r3, r1, r3
 800bd64:	1ad2      	subs	r2, r2, r3
 800bd66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd68:	1ad2      	subs	r2, r2, r3
 800bd6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd70:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800bd72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d10f      	bne.n	800bd9a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d80a      	bhi.n	800bd9a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d105      	bne.n	800bd96 <f_mkfs+0x376>
 800bd8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd8c:	085b      	lsrs	r3, r3, #1
 800bd8e:	607b      	str	r3, [r7, #4]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d144      	bne.n	800be20 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800bd96:	230e      	movs	r3, #14
 800bd98:	e268      	b.n	800c26c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800bd9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d133      	bne.n	800be0a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d91e      	bls.n	800bdea <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d107      	bne.n	800bdc2 <f_mkfs+0x3a2>
 800bdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	2b40      	cmp	r3, #64	; 0x40
 800bdb8:	d803      	bhi.n	800bdc2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800bdba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	607b      	str	r3, [r7, #4]
 800bdc0:	e033      	b.n	800be2a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800bdc2:	7afb      	ldrb	r3, [r7, #11]
 800bdc4:	f003 0302 	and.w	r3, r3, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d003      	beq.n	800bdd4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bdcc:	2303      	movs	r3, #3
 800bdce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bdd2:	e02a      	b.n	800be2a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d105      	bne.n	800bde6 <f_mkfs+0x3c6>
 800bdda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	607b      	str	r3, [r7, #4]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b80      	cmp	r3, #128	; 0x80
 800bde4:	d91e      	bls.n	800be24 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800bde6:	230e      	movs	r3, #14
 800bde8:	e240      	b.n	800c26c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d80a      	bhi.n	800be0a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d105      	bne.n	800be06 <f_mkfs+0x3e6>
 800bdfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	607b      	str	r3, [r7, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b80      	cmp	r3, #128	; 0x80
 800be04:	d910      	bls.n	800be28 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800be06:	230e      	movs	r3, #14
 800be08:	e230      	b.n	800c26c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800be0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d10c      	bne.n	800be2c <f_mkfs+0x40c>
 800be12:	6a3b      	ldr	r3, [r7, #32]
 800be14:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be18:	4293      	cmp	r3, r2
 800be1a:	d907      	bls.n	800be2c <f_mkfs+0x40c>
 800be1c:	230e      	movs	r3, #14
 800be1e:	e225      	b.n	800c26c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800be20:	bf00      	nop
 800be22:	e6ce      	b.n	800bbc2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800be24:	bf00      	nop
 800be26:	e6cc      	b.n	800bbc2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800be28:	bf00      	nop
			pau = au;
 800be2a:	e6ca      	b.n	800bbc2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800be2c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800be2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be30:	461a      	mov	r2, r3
 800be32:	2100      	movs	r1, #0
 800be34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be36:	f7fd fdd4 	bl	80099e2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800be3a:	220b      	movs	r2, #11
 800be3c:	49bc      	ldr	r1, [pc, #752]	; (800c130 <f_mkfs+0x710>)
 800be3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be40:	f7fd fdae 	bl	80099a0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	330b      	adds	r3, #11
 800be48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800be4a:	4611      	mov	r1, r2
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fd fd60 	bl	8009912 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	330d      	adds	r3, #13
 800be56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be58:	b2d2      	uxtb	r2, r2
 800be5a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	330e      	adds	r3, #14
 800be60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be62:	b292      	uxth	r2, r2
 800be64:	4611      	mov	r1, r2
 800be66:	4618      	mov	r0, r3
 800be68:	f7fd fd53 	bl	8009912 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	3310      	adds	r3, #16
 800be70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be72:	b2d2      	uxtb	r2, r2
 800be74:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	f103 0211 	add.w	r2, r3, #17
 800be7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be80:	2b03      	cmp	r3, #3
 800be82:	d002      	beq.n	800be8a <f_mkfs+0x46a>
 800be84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be86:	b29b      	uxth	r3, r3
 800be88:	e000      	b.n	800be8c <f_mkfs+0x46c>
 800be8a:	2300      	movs	r3, #0
 800be8c:	4619      	mov	r1, r3
 800be8e:	4610      	mov	r0, r2
 800be90:	f7fd fd3f 	bl	8009912 <st_word>
		if (sz_vol < 0x10000) {
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be9a:	d208      	bcs.n	800beae <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	3313      	adds	r3, #19
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	b292      	uxth	r2, r2
 800bea4:	4611      	mov	r1, r2
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fd fd33 	bl	8009912 <st_word>
 800beac:	e006      	b.n	800bebc <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	3320      	adds	r3, #32
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	4611      	mov	r1, r2
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fd fd46 	bl	8009948 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	3315      	adds	r3, #21
 800bec0:	22f8      	movs	r2, #248	; 0xf8
 800bec2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	3318      	adds	r3, #24
 800bec8:	213f      	movs	r1, #63	; 0x3f
 800beca:	4618      	mov	r0, r3
 800becc:	f7fd fd21 	bl	8009912 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	331a      	adds	r3, #26
 800bed4:	21ff      	movs	r1, #255	; 0xff
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fd fd1b 	bl	8009912 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	331c      	adds	r3, #28
 800bee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fd fd30 	bl	8009948 <st_dword>
		if (fmt == FS_FAT32) {
 800bee8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800beec:	2b03      	cmp	r3, #3
 800beee:	d131      	bne.n	800bf54 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800bef6:	f7fd f9e3 	bl	80092c0 <get_fattime>
 800befa:	4603      	mov	r3, r0
 800befc:	4619      	mov	r1, r3
 800befe:	4620      	mov	r0, r4
 800bf00:	f7fd fd22 	bl	8009948 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf06:	3324      	adds	r3, #36	; 0x24
 800bf08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fd fd1c 	bl	8009948 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	332c      	adds	r3, #44	; 0x2c
 800bf14:	2102      	movs	r1, #2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fd fd16 	bl	8009948 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800bf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1e:	3330      	adds	r3, #48	; 0x30
 800bf20:	2101      	movs	r1, #1
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fd fcf5 	bl	8009912 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	3332      	adds	r3, #50	; 0x32
 800bf2c:	2106      	movs	r1, #6
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fd fcef 	bl	8009912 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	3340      	adds	r3, #64	; 0x40
 800bf38:	2280      	movs	r2, #128	; 0x80
 800bf3a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3e:	3342      	adds	r3, #66	; 0x42
 800bf40:	2229      	movs	r2, #41	; 0x29
 800bf42:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	3347      	adds	r3, #71	; 0x47
 800bf48:	2213      	movs	r2, #19
 800bf4a:	497a      	ldr	r1, [pc, #488]	; (800c134 <f_mkfs+0x714>)
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fd fd27 	bl	80099a0 <mem_cpy>
 800bf52:	e020      	b.n	800bf96 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800bf5a:	f7fd f9b1 	bl	80092c0 <get_fattime>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	4619      	mov	r1, r3
 800bf62:	4620      	mov	r0, r4
 800bf64:	f7fd fcf0 	bl	8009948 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	3316      	adds	r3, #22
 800bf6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf6e:	b292      	uxth	r2, r2
 800bf70:	4611      	mov	r1, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fd fccd 	bl	8009912 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	3324      	adds	r3, #36	; 0x24
 800bf7c:	2280      	movs	r2, #128	; 0x80
 800bf7e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	3326      	adds	r3, #38	; 0x26
 800bf84:	2229      	movs	r2, #41	; 0x29
 800bf86:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	332b      	adds	r3, #43	; 0x2b
 800bf8c:	2213      	movs	r2, #19
 800bf8e:	496a      	ldr	r1, [pc, #424]	; (800c138 <f_mkfs+0x718>)
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fd fd05 	bl	80099a0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf9c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fd fcb6 	bl	8009912 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800bfa6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bfaa:	2301      	movs	r3, #1
 800bfac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfb0:	f7fd fc36 	bl	8009820 <disk_write>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <f_mkfs+0x59e>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e156      	b.n	800c26c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800bfbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d140      	bne.n	800c048 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc8:	1d9a      	adds	r2, r3, #6
 800bfca:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bfce:	2301      	movs	r3, #1
 800bfd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfd2:	f7fd fc25 	bl	8009820 <disk_write>
			mem_set(buf, 0, ss);
 800bfd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfd8:	461a      	mov	r2, r3
 800bfda:	2100      	movs	r1, #0
 800bfdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfde:	f7fd fd00 	bl	80099e2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800bfe2:	4956      	ldr	r1, [pc, #344]	; (800c13c <f_mkfs+0x71c>)
 800bfe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe6:	f7fd fcaf 	bl	8009948 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bff0:	4953      	ldr	r1, [pc, #332]	; (800c140 <f_mkfs+0x720>)
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fd fca8 	bl	8009948 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	3b01      	subs	r3, #1
 800c002:	4619      	mov	r1, r3
 800c004:	4610      	mov	r0, r2
 800c006:	f7fd fc9f 	bl	8009948 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c010:	2102      	movs	r1, #2
 800c012:	4618      	mov	r0, r3
 800c014:	f7fd fc98 	bl	8009948 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c01e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c022:	4618      	mov	r0, r3
 800c024:	f7fd fc75 	bl	8009912 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	1dda      	adds	r2, r3, #7
 800c02c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c030:	2301      	movs	r3, #1
 800c032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c034:	f7fd fbf4 	bl	8009820 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	1c5a      	adds	r2, r3, #1
 800c03c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c040:	2301      	movs	r3, #1
 800c042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c044:	f7fd fbec 	bl	8009820 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c04a:	2100      	movs	r1, #0
 800c04c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c04e:	f7fd fcc8 	bl	80099e2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c054:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c056:	2300      	movs	r3, #0
 800c058:	64bb      	str	r3, [r7, #72]	; 0x48
 800c05a:	e04b      	b.n	800c0f4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c05c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c060:	2b03      	cmp	r3, #3
 800c062:	d113      	bne.n	800c08c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c064:	f06f 0107 	mvn.w	r1, #7
 800c068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c06a:	f7fd fc6d 	bl	8009948 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	3304      	adds	r3, #4
 800c072:	f04f 31ff 	mov.w	r1, #4294967295
 800c076:	4618      	mov	r0, r3
 800c078:	f7fd fc66 	bl	8009948 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	3308      	adds	r3, #8
 800c080:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c084:	4618      	mov	r0, r3
 800c086:	f7fd fc5f 	bl	8009948 <st_dword>
 800c08a:	e00b      	b.n	800c0a4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c08c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c090:	2b01      	cmp	r3, #1
 800c092:	d101      	bne.n	800c098 <f_mkfs+0x678>
 800c094:	4b2b      	ldr	r3, [pc, #172]	; (800c144 <f_mkfs+0x724>)
 800c096:	e001      	b.n	800c09c <f_mkfs+0x67c>
 800c098:	f06f 0307 	mvn.w	r3, #7
 800c09c:	4619      	mov	r1, r3
 800c09e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0a0:	f7fd fc52 	bl	8009948 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c0a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0a6:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c0a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	bf28      	it	cs
 800c0b0:	4613      	movcs	r3, r2
 800c0b2:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c0b4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c0b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0be:	f7fd fbaf 	bl	8009820 <disk_write>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <f_mkfs+0x6ac>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e0cf      	b.n	800c26c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c0cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0d4:	f7fd fc85 	bl	80099e2 <mem_set>
				sect += n; nsect -= n;
 800c0d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0dc:	4413      	add	r3, r2
 800c0de:	667b      	str	r3, [r7, #100]	; 0x64
 800c0e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c0e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c0e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1dc      	bne.n	800c0a8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c0ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d3af      	bcc.n	800c05c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c0fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c100:	2b03      	cmp	r3, #3
 800c102:	d101      	bne.n	800c108 <f_mkfs+0x6e8>
 800c104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c106:	e000      	b.n	800c10a <f_mkfs+0x6ea>
 800c108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c10a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c10c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c110:	4293      	cmp	r3, r2
 800c112:	bf28      	it	cs
 800c114:	4613      	movcs	r3, r2
 800c116:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c118:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c11c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c11e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c122:	f7fd fb7d 	bl	8009820 <disk_write>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00d      	beq.n	800c148 <f_mkfs+0x728>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e09d      	b.n	800c26c <f_mkfs+0x84c>
 800c130:	0800c90c 	.word	0x0800c90c
 800c134:	0800c918 	.word	0x0800c918
 800c138:	0800c92c 	.word	0x0800c92c
 800c13c:	41615252 	.word	0x41615252
 800c140:	61417272 	.word	0x61417272
 800c144:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800c148:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c14a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c14c:	4413      	add	r3, r2
 800c14e:	667b      	str	r3, [r7, #100]	; 0x64
 800c150:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1d6      	bne.n	800c10c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c15e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c162:	2b03      	cmp	r3, #3
 800c164:	d103      	bne.n	800c16e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c166:	230c      	movs	r3, #12
 800c168:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c16c:	e010      	b.n	800c190 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c174:	d303      	bcc.n	800c17e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c176:	2306      	movs	r3, #6
 800c178:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c17c:	e008      	b.n	800c190 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c17e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c182:	2b02      	cmp	r3, #2
 800c184:	d101      	bne.n	800c18a <f_mkfs+0x76a>
 800c186:	2304      	movs	r3, #4
 800c188:	e000      	b.n	800c18c <f_mkfs+0x76c>
 800c18a:	2301      	movs	r3, #1
 800c18c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c190:	7afb      	ldrb	r3, [r7, #11]
 800c192:	f003 0308 	and.w	r3, r3, #8
 800c196:	2b00      	cmp	r3, #0
 800c198:	d15b      	bne.n	800c252 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c19a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c19c:	461a      	mov	r2, r3
 800c19e:	2100      	movs	r1, #0
 800c1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1a2:	f7fd fc1e 	bl	80099e2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1ac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fd fbae 	bl	8009912 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c1bc:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	3302      	adds	r3, #2
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	3303      	adds	r3, #3
 800c1d8:	2200      	movs	r2, #0
 800c1da:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c1e4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	441a      	add	r2, r3
 800c1ec:	4b21      	ldr	r3, [pc, #132]	; (800c274 <f_mkfs+0x854>)
 800c1ee:	fba3 1302 	umull	r1, r3, r3, r2
 800c1f2:	1ad2      	subs	r2, r2, r3
 800c1f4:	0852      	lsrs	r2, r2, #1
 800c1f6:	4413      	add	r3, r2
 800c1f8:	0b5b      	lsrs	r3, r3, #13
 800c1fa:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	3305      	adds	r3, #5
 800c200:	22fe      	movs	r2, #254	; 0xfe
 800c202:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c206:	089b      	lsrs	r3, r3, #2
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	3306      	adds	r3, #6
 800c20e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c212:	b2d2      	uxtb	r2, r2
 800c214:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	3307      	adds	r3, #7
 800c21a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c21c:	b2d2      	uxtb	r2, r2
 800c21e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	3308      	adds	r3, #8
 800c224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c226:	4618      	mov	r0, r3
 800c228:	f7fd fb8e 	bl	8009948 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	330c      	adds	r3, #12
 800c230:	693a      	ldr	r2, [r7, #16]
 800c232:	4611      	mov	r1, r2
 800c234:	4618      	mov	r0, r3
 800c236:	f7fd fb87 	bl	8009948 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c23a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c23e:	2301      	movs	r3, #1
 800c240:	2200      	movs	r2, #0
 800c242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c244:	f7fd faec 	bl	8009820 <disk_write>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <f_mkfs+0x832>
 800c24e:	2301      	movs	r3, #1
 800c250:	e00c      	b.n	800c26c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c252:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c256:	2200      	movs	r2, #0
 800c258:	2100      	movs	r1, #0
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fd fb00 	bl	8009860 <disk_ioctl>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d001      	beq.n	800c26a <f_mkfs+0x84a>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <f_mkfs+0x84c>

	return FR_OK;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3774      	adds	r7, #116	; 0x74
 800c270:	46bd      	mov	sp, r7
 800c272:	bd90      	pop	{r4, r7, pc}
 800c274:	0515565b 	.word	0x0515565b

0800c278 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c278:	b480      	push	{r7}
 800c27a:	b087      	sub	sp, #28
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	4613      	mov	r3, r2
 800c284:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c286:	2301      	movs	r3, #1
 800c288:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c28e:	4b1f      	ldr	r3, [pc, #124]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c290:	7a5b      	ldrb	r3, [r3, #9]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d131      	bne.n	800c2fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c298:	4b1c      	ldr	r3, [pc, #112]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c29a:	7a5b      	ldrb	r3, [r3, #9]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	461a      	mov	r2, r3
 800c2a0:	4b1a      	ldr	r3, [pc, #104]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c2a6:	4b19      	ldr	r3, [pc, #100]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2a8:	7a5b      	ldrb	r3, [r3, #9]
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	4a17      	ldr	r2, [pc, #92]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c2b6:	4b15      	ldr	r3, [pc, #84]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2b8:	7a5b      	ldrb	r3, [r3, #9]
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	461a      	mov	r2, r3
 800c2be:	4b13      	ldr	r3, [pc, #76]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2c0:	4413      	add	r3, r2
 800c2c2:	79fa      	ldrb	r2, [r7, #7]
 800c2c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c2c6:	4b11      	ldr	r3, [pc, #68]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2c8:	7a5b      	ldrb	r3, [r3, #9]
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	b2d1      	uxtb	r1, r2
 800c2d0:	4a0e      	ldr	r2, [pc, #56]	; (800c30c <FATFS_LinkDriverEx+0x94>)
 800c2d2:	7251      	strb	r1, [r2, #9]
 800c2d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c2d6:	7dbb      	ldrb	r3, [r7, #22]
 800c2d8:	3330      	adds	r3, #48	; 0x30
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	223a      	movs	r2, #58	; 0x3a
 800c2e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	3302      	adds	r3, #2
 800c2ec:	222f      	movs	r2, #47	; 0x2f
 800c2ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	3303      	adds	r3, #3
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	371c      	adds	r7, #28
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	20000060 	.word	0x20000060

0800c310 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c31a:	2200      	movs	r2, #0
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff ffaa 	bl	800c278 <FATFS_LinkDriverEx>
 800c324:	4603      	mov	r3, r0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
	...

0800c330 <__libc_init_array>:
 800c330:	b570      	push	{r4, r5, r6, lr}
 800c332:	4d0d      	ldr	r5, [pc, #52]	; (800c368 <__libc_init_array+0x38>)
 800c334:	4c0d      	ldr	r4, [pc, #52]	; (800c36c <__libc_init_array+0x3c>)
 800c336:	1b64      	subs	r4, r4, r5
 800c338:	10a4      	asrs	r4, r4, #2
 800c33a:	2600      	movs	r6, #0
 800c33c:	42a6      	cmp	r6, r4
 800c33e:	d109      	bne.n	800c354 <__libc_init_array+0x24>
 800c340:	4d0b      	ldr	r5, [pc, #44]	; (800c370 <__libc_init_array+0x40>)
 800c342:	4c0c      	ldr	r4, [pc, #48]	; (800c374 <__libc_init_array+0x44>)
 800c344:	f000 f864 	bl	800c410 <_init>
 800c348:	1b64      	subs	r4, r4, r5
 800c34a:	10a4      	asrs	r4, r4, #2
 800c34c:	2600      	movs	r6, #0
 800c34e:	42a6      	cmp	r6, r4
 800c350:	d105      	bne.n	800c35e <__libc_init_array+0x2e>
 800c352:	bd70      	pop	{r4, r5, r6, pc}
 800c354:	f855 3b04 	ldr.w	r3, [r5], #4
 800c358:	4798      	blx	r3
 800c35a:	3601      	adds	r6, #1
 800c35c:	e7ee      	b.n	800c33c <__libc_init_array+0xc>
 800c35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c362:	4798      	blx	r3
 800c364:	3601      	adds	r6, #1
 800c366:	e7f2      	b.n	800c34e <__libc_init_array+0x1e>
 800c368:	0800ca40 	.word	0x0800ca40
 800c36c:	0800ca40 	.word	0x0800ca40
 800c370:	0800ca40 	.word	0x0800ca40
 800c374:	0800ca44 	.word	0x0800ca44

0800c378 <memset>:
 800c378:	4402      	add	r2, r0
 800c37a:	4603      	mov	r3, r0
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d100      	bne.n	800c382 <memset+0xa>
 800c380:	4770      	bx	lr
 800c382:	f803 1b01 	strb.w	r1, [r3], #1
 800c386:	e7f9      	b.n	800c37c <memset+0x4>

0800c388 <__utoa>:
 800c388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38a:	4c1f      	ldr	r4, [pc, #124]	; (800c408 <__utoa+0x80>)
 800c38c:	b08b      	sub	sp, #44	; 0x2c
 800c38e:	4605      	mov	r5, r0
 800c390:	460b      	mov	r3, r1
 800c392:	466e      	mov	r6, sp
 800c394:	f104 0c20 	add.w	ip, r4, #32
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	6861      	ldr	r1, [r4, #4]
 800c39c:	4637      	mov	r7, r6
 800c39e:	c703      	stmia	r7!, {r0, r1}
 800c3a0:	3408      	adds	r4, #8
 800c3a2:	4564      	cmp	r4, ip
 800c3a4:	463e      	mov	r6, r7
 800c3a6:	d1f7      	bne.n	800c398 <__utoa+0x10>
 800c3a8:	7921      	ldrb	r1, [r4, #4]
 800c3aa:	7139      	strb	r1, [r7, #4]
 800c3ac:	1e91      	subs	r1, r2, #2
 800c3ae:	6820      	ldr	r0, [r4, #0]
 800c3b0:	6038      	str	r0, [r7, #0]
 800c3b2:	2922      	cmp	r1, #34	; 0x22
 800c3b4:	f04f 0100 	mov.w	r1, #0
 800c3b8:	d904      	bls.n	800c3c4 <__utoa+0x3c>
 800c3ba:	7019      	strb	r1, [r3, #0]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4618      	mov	r0, r3
 800c3c0:	b00b      	add	sp, #44	; 0x2c
 800c3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3c4:	1e58      	subs	r0, r3, #1
 800c3c6:	4684      	mov	ip, r0
 800c3c8:	fbb5 f7f2 	udiv	r7, r5, r2
 800c3cc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c3d0:	fb02 5617 	mls	r6, r2, r7, r5
 800c3d4:	4476      	add	r6, lr
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c3dc:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c3e0:	462e      	mov	r6, r5
 800c3e2:	42b2      	cmp	r2, r6
 800c3e4:	f101 0101 	add.w	r1, r1, #1
 800c3e8:	463d      	mov	r5, r7
 800c3ea:	d9ed      	bls.n	800c3c8 <__utoa+0x40>
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	545a      	strb	r2, [r3, r1]
 800c3f0:	1919      	adds	r1, r3, r4
 800c3f2:	1aa5      	subs	r5, r4, r2
 800c3f4:	42aa      	cmp	r2, r5
 800c3f6:	dae2      	bge.n	800c3be <__utoa+0x36>
 800c3f8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c3fc:	780e      	ldrb	r6, [r1, #0]
 800c3fe:	7006      	strb	r6, [r0, #0]
 800c400:	3201      	adds	r2, #1
 800c402:	f801 5901 	strb.w	r5, [r1], #-1
 800c406:	e7f4      	b.n	800c3f2 <__utoa+0x6a>
 800c408:	0800ca12 	.word	0x0800ca12

0800c40c <utoa>:
 800c40c:	f7ff bfbc 	b.w	800c388 <__utoa>

0800c410 <_init>:
 800c410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c412:	bf00      	nop
 800c414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c416:	bc08      	pop	{r3}
 800c418:	469e      	mov	lr, r3
 800c41a:	4770      	bx	lr

0800c41c <_fini>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	bf00      	nop
 800c420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c422:	bc08      	pop	{r3}
 800c424:	469e      	mov	lr, r3
 800c426:	4770      	bx	lr
